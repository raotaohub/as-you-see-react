{"version":3,"file":"react-reconciler.production.min.js","sources":["../../../../packages/shared/assign.js","../../../../packages/shared/formatProdErrorMessage.js","../../../../packages/shared/ReactInstanceMap.js","../../../../packages/shared/ReactSharedInternals.js","../../../../packages/shared/ReactFeatureFlags.js","../../../../packages/react-reconciler/src/ReactWorkTags.js","../../../../packages/shared/ReactSymbols.js","../../../../packages/shared/getComponentNameFromType.js","../../../../packages/react-reconciler/src/getComponentNameFromFiber.js","../../../../packages/react-reconciler/src/ReactFiberFlags.js","../../../../packages/react-reconciler/src/ReactFiberTreeReflection.js","../../../../packages/shared/isArray.js","../../../../packages/react-reconciler/src/forks/ReactFiberHostConfig.custom.js","../../../../packages/shared/ReactComponentStackFrame.js","../../../../packages/shared/hasOwnProperty.js","../../../../packages/shared/checkPropTypes.js","../../../../packages/react-reconciler/src/ReactFiberStack.old.js","../../../../packages/react-reconciler/src/ReactFiberContext.old.js","../../../../packages/react-reconciler/src/ReactRootTags.js","../../../../packages/react-reconciler/src/ReactFiberOffscreenComponent.js","../../../../packages/react-reconciler/src/ReactTypeOfMode.js","../../../../packages/react-reconciler/src/clz32.js","../../../../packages/react-reconciler/src/ReactFiberLane.old.js","../../../../packages/react-reconciler/src/ReactEventPriorities.old.js","../../../../packages/react-reconciler/src/Scheduler.js","../../../../packages/react-reconciler/src/ReactFiberDevToolsHook.old.js","../../../../packages/shared/objectIs.js","../../../../packages/react-reconciler/src/ReactFiberSyncTaskQueue.old.js","../../../../packages/react-reconciler/src/ReactFiberShellHydration.js","../../../../packages/react-reconciler/src/ReactFiberTreeContext.old.js","../../../../packages/react-reconciler/src/ReactFiberHostContext.old.js","../../../../packages/react-reconciler/src/ReactFiberHydrationContext.old.js","../../../../packages/react-reconciler/src/ReactFiberTransition.js","../../../../packages/shared/shallowEqual.js","../../../../packages/react-reconciler/src/ReactFiberComponentStack.js","../../../../packages/react-reconciler/src/ReactCurrentFiber.js","../../../../packages/react-reconciler/src/ReactFiberLazyComponent.old.js","../../../../packages/react-reconciler/src/ReactFiberNewContext.old.js","../../../../packages/react-reconciler/src/ReactFiberConcurrentUpdates.old.js","../../../../packages/react-reconciler/src/ReactFiberClassUpdateQueue.old.js","../../../../packages/react-reconciler/src/ReactFiberClassComponent.old.js","../../../../packages/react-reconciler/src/ReactChildFiber.old.js","../../../../packages/react-reconciler/src/ReactFiberHiddenContext.old.js","../../../../packages/react-reconciler/src/ReactFiberSuspenseContext.old.js","../../../../packages/react-reconciler/src/ReactFiberSuspenseComponent.old.js","../../../../packages/react-reconciler/src/ReactHookEffectTags.js","../../../../packages/react-reconciler/src/ReactMutableSource.old.js","../../../../packages/react-reconciler/src/ReactFiberCacheComponent.old.js","../../../../packages/react-reconciler/src/ReactFiberWakeable.old.js","../../../../packages/react-reconciler/src/ReactFiberHooks.old.js","../../../../packages/react-reconciler/src/ReactProfilerTimer.old.js","../../../../packages/react-reconciler/src/ReactCapturedValue.js","../../../../packages/react-reconciler/src/ReactFiberErrorDialog.js","../../../../packages/react-reconciler/src/ReactFiberErrorLogger.js","../../../../packages/react-reconciler/src/ReactFiberThrow.old.js","../../../../packages/react-reconciler/src/ReactFiberTransition.old.js","../../../../packages/react-reconciler/src/ReactFiberBeginWork.old.js","../../../../packages/react-reconciler/src/ReactFiberCompleteWork.old.js","../../../../packages/react-reconciler/src/ReactFiberUnwindWork.old.js","../../../../packages/react-reconciler/src/ReactFiberCommitWork.old.js","../../../../packages/react-reconciler/src/ReactTestSelectors.js","../../../../packages/react-reconciler/src/ReactFiberAct.old.js","../../../../packages/react-reconciler/src/ReactFiberWorkLoop.old.js","../../../../packages/react-reconciler/src/ReactFiber.old.js","../../../../packages/react-reconciler/src/ReactFiberRoot.old.js","../../../../packages/shared/ReactVersion.js","../../../../packages/react-reconciler/src/ReactPortal.js","../../../../packages/react-reconciler/src/ReactFiberReconciler.old.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nconst assign = Object.assign;\r\n\r\nexport default assign;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n\r\n// Do not require this module directly! Use normal `invariant` calls with\r\n// template literal strings. The messages will be replaced with error codes\r\n// during build.\r\n\r\nfunction formatProdErrorMessage(code) {\r\n  let url = 'https://reactjs.org/docs/error-decoder.html?invariant=' + code;\r\n  for (let i = 1; i < arguments.length; i++) {\r\n    url += '&args[]=' + encodeURIComponent(arguments[i]);\r\n  }\r\n  return (\r\n    `Minified React error #${code}; visit ${url} for the full message or ` +\r\n    'use the non-minified dev environment for full errors and additional ' +\r\n    'helpful warnings.'\r\n  );\r\n}\r\n\r\nexport default formatProdErrorMessage;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n/**\r\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\r\n * instance (key) and the internal representation (value). This allows public\r\n * methods to accept the user facing instance as an argument and map them back\r\n * to internal methods.\r\n *\r\n * Note that this module is currently shared and assumed to be stateless.\r\n * If this becomes an actual Map, that will break.\r\n */\r\n\r\n/**\r\n * This API should be called `delete` but we'd have to make sure to always\r\n * transform these to strings for IE support. When this transform is fully\r\n * supported we can rename it.\r\n */\r\nexport function remove(key) {\r\n  key._reactInternals = undefined;\r\n}\r\n\r\nexport function get(key) {\r\n  return key._reactInternals;\r\n}\r\n\r\nexport function has(key) {\r\n  return key._reactInternals !== undefined;\r\n}\r\n\r\nexport function set(key, value) {\r\n  key._reactInternals = value;\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport * as React from 'react';\r\n\r\nconst ReactSharedInternals =\r\n  React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\r\n\r\nexport default ReactSharedInternals;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow strict\r\n */\r\n\r\n// -----------------------------------------------------------------------------\r\n// Land or remove (zero effort)\r\n//\r\n// Flags that can likely be deleted or landed without consequences\r\n// -----------------------------------------------------------------------------\r\n\r\nexport const warnAboutDeprecatedLifecycles = true;\r\nexport const enableComponentStackLocations = true;\r\nexport const disableSchedulerTimeoutBasedOnReactExpirationTime = false;\r\n\r\n// -----------------------------------------------------------------------------\r\n// Land or remove (moderate effort)\r\n//\r\n// Flags that can be probably deleted or landed, but might require extra effort\r\n// like migrating internal callers or performance testing.\r\n// -----------------------------------------------------------------------------\r\n\r\n// This rolled out to 10% public in www, so we should be able to land, but some\r\n// internal tests need to be updated. The open source behavior is correct.\r\nexport const skipUnmountedBoundaries = true;\r\n\r\n// TODO: Finish rolling out in www\r\nexport const enableClientRenderFallbackOnTextMismatch = true;\r\n\r\n// TODO: Need to review this code one more time before landing\r\nexport const enableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay = true;\r\n\r\n// Recoil still uses useMutableSource in www, need to delete\r\nexport const enableUseMutableSource = false;\r\n\r\n// Not sure if www still uses this. We don't have a replacement but whatever we\r\n// replace it with will likely be different than what's already there, so we\r\n// probably should just delete it as long as nothing in www relies on it.\r\nexport const enableSchedulerDebugging = false;\r\n\r\n// Need to remove didTimeout argument from Scheduler before landing\r\nexport const disableSchedulerTimeoutInWorkLoop = false;\r\n\r\n// -----------------------------------------------------------------------------\r\n// Slated for removal in the future (significant effort)\r\n//\r\n// These are experiments that didn't work out, and never shipped, but we can't\r\n// delete from the codebase until we migrate internal callers.\r\n// -----------------------------------------------------------------------------\r\n\r\n// Add a callback property to suspense to notify which promises are currently\r\n// in the update queue. This allows reporting and tracing of what is causing\r\n// the user to see a loading state.\r\n//\r\n// Also allows hydration callbacks to fire when a dehydrated boundary gets\r\n// hydrated or deleted.\r\n//\r\n// This will eventually be replaced by the Transition Tracing proposal.\r\nexport const enableSuspenseCallback = false;\r\n\r\n// Experimental Scope support.\r\nexport const enableScopeAPI = false;\r\n\r\n// Experimental Create Event Handle API.\r\nexport const enableCreateEventHandleAPI = false;\r\n\r\n// This controls whether you get the `.old` modules or the `.new` modules in\r\n// the react-reconciler package.\r\nexport const enableNewReconciler = false;\r\n\r\n// Support legacy Primer support on internal FB www\r\nexport const enableLegacyFBSupport = false;\r\n\r\n// -----------------------------------------------------------------------------\r\n// Ongoing experiments\r\n//\r\n// These are features that we're either actively exploring or are reasonably\r\n// likely to include in an upcoming release.\r\n// -----------------------------------------------------------------------------\r\n\r\nexport const enableCache = __EXPERIMENTAL__;\r\nexport const enableCacheElement = __EXPERIMENTAL__;\r\n\r\nexport const enableTransitionTracing = false;\r\n\r\n// No known bugs, but needs performance testing\r\nexport const enableLazyContextPropagation = false;\r\n\r\n// FB-only usage. The new API has different semantics.\r\nexport const enableLegacyHidden = false;\r\n\r\n// Enables unstable_avoidThisFallback feature in Fiber\r\nexport const enableSuspenseAvoidThisFallback = false;\r\n// Enables unstable_avoidThisFallback feature in Fizz\r\nexport const enableSuspenseAvoidThisFallbackFizz = false;\r\n\r\nexport const enableCPUSuspense = __EXPERIMENTAL__;\r\n\r\n// When a node is unmounted, recurse into the Fiber subtree and clean out\r\n// references. Each level cleans up more fiber fields than the previous level.\r\n// As far as we know, React itself doesn't leak, but because the Fiber contains\r\n// cycles, even a single leak in product code can cause us to retain large\r\n// amounts of memory.\r\n//\r\n// The long term plan is to remove the cycles, but in the meantime, we clear\r\n// additional fields to mitigate.\r\n//\r\n// It's an enum so that we can experiment with different levels of\r\n// aggressiveness.\r\nexport const deletedTreeCleanUpLevel = 3;\r\n\r\nexport const enableFloat = __EXPERIMENTAL__;\r\nexport const enableUseHook = __EXPERIMENTAL__;\r\n\r\n// Enables unstable_useMemoCache hook, intended as a compilation target for\r\n// auto-memoization.\r\nexport const enableUseMemoCacheHook = __EXPERIMENTAL__;\r\n\r\nexport const enableUseEventHook = __EXPERIMENTAL__;\r\n\r\n// -----------------------------------------------------------------------------\r\n// Chopping Block\r\n//\r\n// Planned feature deprecations and breaking changes. Sorted roughly in order of\r\n// when we we plan to enable them.\r\n// -----------------------------------------------------------------------------\r\n\r\n// This flag enables Strict Effects by default. We're not turning this on until\r\n// after 18 because it requires migration work. Recommendation is to use\r\n// <StrictMode /> to gradually upgrade components.\r\n// If TRUE, trees rendered with createRoot will be StrictEffectsMode.\r\n// If FALSE, these trees will be StrictLegacyMode.\r\nexport const createRootStrictEffectsByDefault = false;\r\n\r\nexport const disableModulePatternComponents = false;\r\n\r\nexport const disableLegacyContext = false;\r\n\r\nexport const enableUseRefAccessWarning = false;\r\n\r\n// Enables time slicing for updates that aren't wrapped in startTransition.\r\nexport const enableSyncDefaultUpdates = true;\r\n\r\n// Adds an opt-in to time slicing for updates that aren't wrapped in\r\n// startTransition. Only relevant when enableSyncDefaultUpdates is disabled.\r\nexport const allowConcurrentByDefault = false;\r\n\r\n// Updates that occur in the render phase are not officially supported. But when\r\n// they do occur, we defer them to a subsequent render by picking a lane that's\r\n// not currently rendering. We treat them the same as if they came from an\r\n// interleaved event. Remove this flag once we have migrated to the\r\n// new behavior.\r\n// NOTE: Not sure if we'll end up doing this or not.\r\nexport const deferRenderPhaseUpdateToNextBatch = false;\r\n\r\n// -----------------------------------------------------------------------------\r\n// React DOM Chopping Block\r\n//\r\n// Similar to main Chopping Block but only flags related to React DOM. These are\r\n// grouped because we will likely batch all of them into a single major release.\r\n// -----------------------------------------------------------------------------\r\n\r\n// Disable support for comment nodes as React DOM containers. Already disabled\r\n// in open source, but www codebase still relies on it. Need to remove.\r\nexport const disableCommentsAsDOMContainers = true;\r\n\r\n// Disable javascript: URL strings in href for XSS protection.\r\nexport const disableJavaScriptURLs = false;\r\n\r\nexport const enableTrustedTypesIntegration = false;\r\n\r\n// Prevent the value and checked attributes from syncing with their related\r\n// DOM properties\r\nexport const disableInputAttributeSyncing = false;\r\n\r\n// Filter certain DOM attributes (e.g. src, href) if their values are empty\r\n// strings. This prevents e.g. <img src=\"\"> from making an unnecessary HTTP\r\n// request for certain browsers.\r\nexport const enableFilterEmptyStringAttributesDOM = false;\r\n\r\n// Changes the behavior for rendering custom elements in both server rendering\r\n// and client rendering, mostly to allow JSX attributes to apply to the custom\r\n// element's object properties instead of only HTML attributes.\r\n// https://github.com/facebook/react/issues/11347\r\nexport const enableCustomElementPropertySupport = __EXPERIMENTAL__;\r\n\r\n// Disables children for <textarea> elements\r\nexport const disableTextareaChildren = false;\r\n\r\n// -----------------------------------------------------------------------------\r\n// JSX Chopping Block\r\n//\r\n// Similar to main Chopping Block but only flags related to JSX. These are\r\n// grouped because we will likely batch all of them into a single major release.\r\n// -----------------------------------------------------------------------------\r\n\r\n// New API for JSX transforms to target - https://github.com/reactjs/rfcs/pull/107\r\n\r\n// Part of the simplification of React.createElement so we can eventually move\r\n// from React.createElement to React.jsx\r\n// https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md\r\nexport const warnAboutDefaultPropsOnFunctionComponents = false; // deprecate later, not 18.0\r\n\r\n// Enables a warning when trying to spread a 'key' to an element;\r\n// a deprecated pattern we want to get rid of in the future\r\nexport const warnAboutSpreadingKeyToJSX = false;\r\n\r\nexport const warnAboutStringRefs = false;\r\n\r\n// -----------------------------------------------------------------------------\r\n// Debugging and DevTools\r\n// -----------------------------------------------------------------------------\r\n\r\n// Adds user timing marks for e.g. state updates, suspense, and work loop stuff,\r\n// for an experimental timeline tool.\r\nexport const enableSchedulingProfiler = __PROFILE__;\r\n\r\n// Helps identify side effects in render-phase lifecycle hooks and setState\r\n// reducers by double invoking them in StrictLegacyMode.\r\nexport const debugRenderPhaseSideEffectsForStrictMode = __DEV__;\r\n\r\n// Helps identify code that is not safe for planned Offscreen API and Suspense semantics;\r\n// this feature flag only impacts StrictEffectsMode.\r\nexport const enableStrictEffects = __DEV__;\r\n\r\n// To preserve the \"Pause on caught exceptions\" behavior of the debugger, we\r\n// replay the begin phase of a failed component inside invokeGuardedCallback.\r\nexport const replayFailedUnitOfWorkWithInvokeGuardedCallback = __DEV__;\r\n\r\n// Gather advanced timing metrics for Profiler subtrees.\r\nexport const enableProfilerTimer = __PROFILE__;\r\n\r\n// Record durations for commit and passive effects phases.\r\nexport const enableProfilerCommitHooks = __PROFILE__;\r\n\r\n// Phase param passed to onRender callback differentiates between an \"update\" and a \"cascading-update\".\r\nexport const enableProfilerNestedUpdatePhase = __PROFILE__;\r\n\r\n// Adds verbose console logging for e.g. state updates, suspense, and work loop\r\n// stuff. Intended to enable React core members to more easily debug scheduling\r\n// issues in DEV builds.\r\nexport const enableDebugTracing = false;\r\n\r\n// Track which Fiber(s) schedule render work.\r\nexport const enableUpdaterTracking = __PROFILE__;\r\n\r\n// Only enabled in RN, related to enableComponentStackLocations\r\nexport const disableNativeComponentFrames = false;\r\nexport const enableServerContext = __EXPERIMENTAL__;\r\n\r\n// Internal only.\r\nexport const enableGetInspectorDataForInstanceInProduction = false;\r\n\r\n// Profiler API accepts a function to be called when a nested update is scheduled.\r\n// This callback accepts the component type (class instance or function) the update is scheduled for.\r\nexport const enableProfilerNestedUpdateScheduledHook = false;\r\n\r\nexport const consoleManagedByDevToolsDuringStrictMode = true;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nexport type WorkTag =\r\n  | 0\r\n  | 1\r\n  | 2\r\n  | 3\r\n  | 4\r\n  | 5\r\n  | 6\r\n  | 7\r\n  | 8\r\n  | 9\r\n  | 10\r\n  | 11\r\n  | 12\r\n  | 13\r\n  | 14\r\n  | 15\r\n  | 16\r\n  | 17\r\n  | 18\r\n  | 19\r\n  | 20\r\n  | 21\r\n  | 22\r\n  | 23\r\n  | 24\r\n  | 25;\r\n\r\nexport const FunctionComponent = 0;\r\nexport const ClassComponent = 1;\r\nexport const IndeterminateComponent = 2; // Before we know whether it is function or class\r\nexport const HostRoot = 3; // Root of a host tree. Could be nested inside another node.\r\nexport const HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\r\nexport const HostComponent = 5;\r\nexport const HostText = 6;\r\nexport const Fragment = 7;\r\nexport const Mode = 8;\r\nexport const ContextConsumer = 9;\r\nexport const ContextProvider = 10;\r\nexport const ForwardRef = 11;\r\nexport const Profiler = 12;\r\nexport const SuspenseComponent = 13;\r\nexport const MemoComponent = 14;\r\nexport const SimpleMemoComponent = 15;\r\nexport const LazyComponent = 16;\r\nexport const IncompleteClassComponent = 17;\r\nexport const DehydratedFragment = 18;\r\nexport const SuspenseListComponent = 19;\r\nexport const ScopeComponent = 21;\r\nexport const OffscreenComponent = 22;\r\nexport const LegacyHiddenComponent = 23;\r\nexport const CacheComponent = 24;\r\nexport const TracingMarkerComponent = 25;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\n// ATTENTION\r\n// When adding new symbols to this file,\r\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\r\n\r\n// The Symbol used to tag the ReactElement-like types.\r\nexport const REACT_ELEMENT_TYPE: symbol = Symbol.for('react.element');\r\nexport const REACT_PORTAL_TYPE: symbol = Symbol.for('react.portal');\r\nexport const REACT_FRAGMENT_TYPE: symbol = Symbol.for('react.fragment');\r\nexport const REACT_STRICT_MODE_TYPE: symbol = Symbol.for('react.strict_mode');\r\nexport const REACT_PROFILER_TYPE: symbol = Symbol.for('react.profiler');\r\nexport const REACT_PROVIDER_TYPE: symbol = Symbol.for('react.provider');\r\nexport const REACT_CONTEXT_TYPE: symbol = Symbol.for('react.context');\r\nexport const REACT_SERVER_CONTEXT_TYPE: symbol = Symbol.for(\r\n  'react.server_context',\r\n);\r\nexport const REACT_FORWARD_REF_TYPE: symbol = Symbol.for('react.forward_ref');\r\nexport const REACT_SUSPENSE_TYPE: symbol = Symbol.for('react.suspense');\r\nexport const REACT_SUSPENSE_LIST_TYPE: symbol = Symbol.for(\r\n  'react.suspense_list',\r\n);\r\nexport const REACT_MEMO_TYPE: symbol = Symbol.for('react.memo');\r\nexport const REACT_LAZY_TYPE: symbol = Symbol.for('react.lazy');\r\nexport const REACT_SCOPE_TYPE: symbol = Symbol.for('react.scope');\r\nexport const REACT_DEBUG_TRACING_MODE_TYPE: symbol = Symbol.for(\r\n  'react.debug_trace_mode',\r\n);\r\nexport const REACT_OFFSCREEN_TYPE: symbol = Symbol.for('react.offscreen');\r\nexport const REACT_LEGACY_HIDDEN_TYPE: symbol = Symbol.for(\r\n  'react.legacy_hidden',\r\n);\r\nexport const REACT_CACHE_TYPE: symbol = Symbol.for('react.cache');\r\nexport const REACT_TRACING_MARKER_TYPE: symbol = Symbol.for(\r\n  'react.tracing_marker',\r\n);\r\nexport const REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED: symbol = Symbol.for(\r\n  'react.default_value',\r\n);\r\n\r\nconst MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\r\nconst FAUX_ITERATOR_SYMBOL = '@@iterator';\r\n\r\nexport function getIteratorFn(maybeIterable: ?any): ?() => ?Iterator<any> {\r\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\r\n    return null;\r\n  }\r\n  const maybeIterator =\r\n    (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||\r\n    maybeIterable[FAUX_ITERATOR_SYMBOL];\r\n  if (typeof maybeIterator === 'function') {\r\n    return maybeIterator;\r\n  }\r\n  return null;\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {LazyComponent} from 'react/src/ReactLazy';\r\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\r\n\r\nimport {\r\n  REACT_CONTEXT_TYPE,\r\n  REACT_FORWARD_REF_TYPE,\r\n  REACT_FRAGMENT_TYPE,\r\n  REACT_PORTAL_TYPE,\r\n  REACT_MEMO_TYPE,\r\n  REACT_PROFILER_TYPE,\r\n  REACT_PROVIDER_TYPE,\r\n  REACT_STRICT_MODE_TYPE,\r\n  REACT_SUSPENSE_TYPE,\r\n  REACT_SUSPENSE_LIST_TYPE,\r\n  REACT_LAZY_TYPE,\r\n  REACT_CACHE_TYPE,\r\n  REACT_TRACING_MARKER_TYPE,\r\n  REACT_SERVER_CONTEXT_TYPE,\r\n} from 'shared/ReactSymbols';\r\n\r\nimport {\r\n  enableServerContext,\r\n  enableTransitionTracing,\r\n  enableCache,\r\n} from './ReactFeatureFlags';\r\n\r\n// Keep in sync with react-reconciler/getComponentNameFromFiber\r\nfunction getWrappedName(\r\n  outerType: mixed,\r\n  innerType: any,\r\n  wrapperName: string,\r\n): string {\r\n  const displayName = (outerType: any).displayName;\r\n  if (displayName) {\r\n    return displayName;\r\n  }\r\n  const functionName = innerType.displayName || innerType.name || '';\r\n  return functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName;\r\n}\r\n\r\n// Keep in sync with react-reconciler/getComponentNameFromFiber\r\nfunction getContextName(type: ReactContext<any>) {\r\n  return type.displayName || 'Context';\r\n}\r\n\r\n// Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\r\nexport default function getComponentNameFromType(type: mixed): string | null {\r\n  if (type == null) {\r\n    // Host root, text node or just invalid type.\r\n    return null;\r\n  }\r\n  if (__DEV__) {\r\n    if (typeof (type: any).tag === 'number') {\r\n      console.error(\r\n        'Received an unexpected object in getComponentNameFromType(). ' +\r\n          'This is likely a bug in React. Please file an issue.',\r\n      );\r\n    }\r\n  }\r\n  if (typeof type === 'function') {\r\n    return (type: any).displayName || type.name || null;\r\n  }\r\n  if (typeof type === 'string') {\r\n    return type;\r\n  }\r\n  switch (type) {\r\n    case REACT_FRAGMENT_TYPE:\r\n      return 'Fragment';\r\n    case REACT_PORTAL_TYPE:\r\n      return 'Portal';\r\n    case REACT_PROFILER_TYPE:\r\n      return 'Profiler';\r\n    case REACT_STRICT_MODE_TYPE:\r\n      return 'StrictMode';\r\n    case REACT_SUSPENSE_TYPE:\r\n      return 'Suspense';\r\n    case REACT_SUSPENSE_LIST_TYPE:\r\n      return 'SuspenseList';\r\n    case REACT_CACHE_TYPE:\r\n      if (enableCache) {\r\n        return 'Cache';\r\n      }\r\n    // eslint-disable-next-line no-fallthrough\r\n    case REACT_TRACING_MARKER_TYPE:\r\n      if (enableTransitionTracing) {\r\n        return 'TracingMarker';\r\n      }\r\n  }\r\n  if (typeof type === 'object') {\r\n    switch (type.$$typeof) {\r\n      case REACT_CONTEXT_TYPE:\r\n        const context: ReactContext<any> = (type: any);\r\n        return getContextName(context) + '.Consumer';\r\n      case REACT_PROVIDER_TYPE:\r\n        const provider: ReactProviderType<any> = (type: any);\r\n        return getContextName(provider._context) + '.Provider';\r\n      case REACT_FORWARD_REF_TYPE:\r\n        return getWrappedName(type, type.render, 'ForwardRef');\r\n      case REACT_MEMO_TYPE:\r\n        const outerName = (type: any).displayName || null;\r\n        if (outerName !== null) {\r\n          return outerName;\r\n        }\r\n        return getComponentNameFromType(type.type) || 'Memo';\r\n      case REACT_LAZY_TYPE: {\r\n        const lazyComponent: LazyComponent<any, any> = (type: any);\r\n        const payload = lazyComponent._payload;\r\n        const init = lazyComponent._init;\r\n        try {\r\n          return getComponentNameFromType(init(payload));\r\n        } catch (x) {\r\n          return null;\r\n        }\r\n      }\r\n      case REACT_SERVER_CONTEXT_TYPE:\r\n        if (enableServerContext) {\r\n          const context2 = ((type: any): ReactContext<any>);\r\n          return (context2.displayName || context2._globalName) + '.Provider';\r\n        }\r\n      // eslint-disable-next-line no-fallthrough\r\n    }\r\n  }\r\n  return null;\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\r\nimport type {Fiber} from './ReactInternalTypes';\r\n\r\nimport {enableLegacyHidden} from 'shared/ReactFeatureFlags';\r\n\r\nimport {\r\n  FunctionComponent,\r\n  ClassComponent,\r\n  IndeterminateComponent,\r\n  HostRoot,\r\n  HostPortal,\r\n  HostComponent,\r\n  HostText,\r\n  Fragment,\r\n  Mode,\r\n  ContextConsumer,\r\n  ContextProvider,\r\n  ForwardRef,\r\n  Profiler,\r\n  SuspenseComponent,\r\n  MemoComponent,\r\n  SimpleMemoComponent,\r\n  LazyComponent,\r\n  IncompleteClassComponent,\r\n  DehydratedFragment,\r\n  SuspenseListComponent,\r\n  ScopeComponent,\r\n  OffscreenComponent,\r\n  LegacyHiddenComponent,\r\n  CacheComponent,\r\n  TracingMarkerComponent,\r\n} from 'react-reconciler/src/ReactWorkTags';\r\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\r\nimport {REACT_STRICT_MODE_TYPE} from 'shared/ReactSymbols';\r\n\r\n// Keep in sync with shared/getComponentNameFromType\r\nfunction getWrappedName(\r\n  outerType: mixed,\r\n  innerType: any,\r\n  wrapperName: string,\r\n): string {\r\n  const functionName = innerType.displayName || innerType.name || '';\r\n  return (\r\n    (outerType: any).displayName ||\r\n    (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName)\r\n  );\r\n}\r\n\r\n// Keep in sync with shared/getComponentNameFromType\r\nfunction getContextName(type: ReactContext<any>) {\r\n  return type.displayName || 'Context';\r\n}\r\n\r\nexport default function getComponentNameFromFiber(fiber: Fiber): string | null {\r\n  const {tag, type} = fiber;\r\n  switch (tag) {\r\n    case CacheComponent:\r\n      return 'Cache';\r\n    case ContextConsumer:\r\n      const context: ReactContext<any> = (type: any);\r\n      return getContextName(context) + '.Consumer';\r\n    case ContextProvider:\r\n      const provider: ReactProviderType<any> = (type: any);\r\n      return getContextName(provider._context) + '.Provider';\r\n    case DehydratedFragment:\r\n      return 'DehydratedFragment';\r\n    case ForwardRef:\r\n      return getWrappedName(type, type.render, 'ForwardRef');\r\n    case Fragment:\r\n      return 'Fragment';\r\n    case HostComponent:\r\n      // Host component type is the display name (e.g. \"div\", \"View\")\r\n      return type;\r\n    case HostPortal:\r\n      return 'Portal';\r\n    case HostRoot:\r\n      return 'Root';\r\n    case HostText:\r\n      return 'Text';\r\n    case LazyComponent:\r\n      // Name comes from the type in this case; we don't have a tag.\r\n      return getComponentNameFromType(type);\r\n    case Mode:\r\n      if (type === REACT_STRICT_MODE_TYPE) {\r\n        // Don't be less specific than shared/getComponentNameFromType\r\n        return 'StrictMode';\r\n      }\r\n      return 'Mode';\r\n    case OffscreenComponent:\r\n      return 'Offscreen';\r\n    case Profiler:\r\n      return 'Profiler';\r\n    case ScopeComponent:\r\n      return 'Scope';\r\n    case SuspenseComponent:\r\n      return 'Suspense';\r\n    case SuspenseListComponent:\r\n      return 'SuspenseList';\r\n    case TracingMarkerComponent:\r\n      return 'TracingMarker';\r\n    // The display name for this tags come from the user-provided type:\r\n    case ClassComponent:\r\n    case FunctionComponent:\r\n    case IncompleteClassComponent:\r\n    case IndeterminateComponent:\r\n    case MemoComponent:\r\n    case SimpleMemoComponent:\r\n      if (typeof type === 'function') {\r\n        return (type: any).displayName || type.name || null;\r\n      }\r\n      if (typeof type === 'string') {\r\n        return type;\r\n      }\r\n      break;\r\n    case LegacyHiddenComponent:\r\n      if (enableLegacyHidden) {\r\n        return 'LegacyHidden';\r\n      }\r\n  }\r\n\r\n  return null;\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport {enableCreateEventHandleAPI} from 'shared/ReactFeatureFlags';\r\n\r\nexport type Flags = number;\r\n\r\n// Don't change these two values. They're used by React Dev Tools.\r\nexport const NoFlags = /*                      */ 0b000000000000000000000000;\r\nexport const PerformedWork = /*                */ 0b000000000000000000000001;\r\n\r\n// You can change the rest (and add more).\r\nexport const Placement = /*                    */ 0b000000000000000000000010;\r\nexport const Update = /*                       */ 0b000000000000000000000100;\r\nexport const ChildDeletion = /*                */ 0b000000000000000000001000;\r\nexport const ContentReset = /*                 */ 0b000000000000000000010000;\r\nexport const Callback = /*                     */ 0b000000000000000000100000;\r\nexport const DidCapture = /*                   */ 0b000000000000000001000000;\r\nexport const ForceClientRender = /*            */ 0b000000000000000010000000;\r\nexport const Ref = /*                          */ 0b000000000000000100000000;\r\nexport const Snapshot = /*                     */ 0b000000000000001000000000;\r\nexport const Passive = /*                      */ 0b000000000000010000000000;\r\nexport const Hydrating = /*                    */ 0b000000000000100000000000;\r\nexport const Visibility = /*                   */ 0b000000000001000000000000;\r\nexport const StoreConsistency = /*             */ 0b000000000010000000000000;\r\n\r\nexport const LifecycleEffectMask =\r\n  Passive | Update | Callback | Ref | Snapshot | StoreConsistency;\r\n\r\n// Union of all commit flags (flags with the lifetime of a particular commit)\r\nexport const HostEffectMask = /*               */ 0b000000000011111111111111;\r\n\r\n// These are not really side effects, but we still reuse this field.\r\nexport const Incomplete = /*                   */ 0b000000000100000000000000;\r\nexport const ShouldCapture = /*                */ 0b000000001000000000000000;\r\nexport const ForceUpdateForLegacySuspense = /* */ 0b000000010000000000000000;\r\nexport const DidPropagateContext = /*          */ 0b000000100000000000000000;\r\nexport const NeedsPropagation = /*             */ 0b000001000000000000000000;\r\nexport const Forked = /*                       */ 0b000010000000000000000000;\r\n\r\n// Static tags describe aspects of a fiber that are not specific to a render,\r\n// e.g. a fiber uses a passive effect (even if there are no updates on this particular render).\r\n// This enables us to defer more work in the unmount case,\r\n// since we can defer traversing the tree during layout to look for Passive effects,\r\n// and instead rely on the static flag as a signal that there may be cleanup work.\r\nexport const RefStatic = /*                    */ 0b000100000000000000000000;\r\nexport const LayoutStatic = /*                 */ 0b001000000000000000000000;\r\nexport const PassiveStatic = /*                */ 0b010000000000000000000000;\r\n\r\n// Flag used to identify newly inserted fibers. It isn't reset after commit unlike `Placement`.\r\nexport const PlacementDEV = /*                 */ 0b100000000000000000000000;\r\n\r\n// Groups of flags that are used in the commit phase to skip over trees that\r\n// don't contain effects, by checking subtreeFlags.\r\n\r\nexport const BeforeMutationMask =\r\n  // TODO: Remove Update flag from before mutation phase by re-landing Visibility\r\n  // flag logic (see #20043)\r\n  Update |\r\n  Snapshot |\r\n  (enableCreateEventHandleAPI\r\n    ? // createEventHandle needs to visit deleted and hidden trees to\r\n      // fire beforeblur\r\n      // TODO: Only need to visit Deletions during BeforeMutation phase if an\r\n      // element is focused.\r\n      ChildDeletion | Visibility\r\n    : 0);\r\n\r\nexport const MutationMask =\r\n  Placement |\r\n  Update |\r\n  ChildDeletion |\r\n  ContentReset |\r\n  Ref |\r\n  Hydrating |\r\n  Visibility;\r\nexport const LayoutMask = Update | Callback | Ref | Visibility;\r\n\r\n// TODO: Split into PassiveMountMask and PassiveUnmountMask\r\nexport const PassiveMask = Passive | Visibility | ChildDeletion;\r\n\r\n// Union of tags that don't get reset on clones.\r\n// This allows certain concepts to persist without recalculating them,\r\n// e.g. whether a subtree contains passive effects or portals.\r\nexport const StaticMask = LayoutStatic | PassiveStatic | RefStatic;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {Fiber} from './ReactInternalTypes';\r\nimport type {Container, SuspenseInstance} from './ReactFiberHostConfig';\r\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\r\n\r\nimport {get as getInstance} from 'shared/ReactInstanceMap';\r\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\r\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\r\nimport {\r\n  ClassComponent,\r\n  HostComponent,\r\n  HostRoot,\r\n  HostPortal,\r\n  HostText,\r\n  SuspenseComponent,\r\n} from './ReactWorkTags';\r\nimport {NoFlags, Placement, Hydrating} from './ReactFiberFlags';\r\n\r\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\r\n\r\nexport function getNearestMountedFiber(fiber: Fiber): null | Fiber {\r\n  let node = fiber;\r\n  let nearestMounted = fiber;\r\n  if (!fiber.alternate) {\r\n    // If there is no alternate, this might be a new tree that isn't inserted\r\n    // yet. If it is, then it will have a pending insertion effect on it.\r\n    let nextNode = node;\r\n    do {\r\n      node = nextNode;\r\n      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {\r\n        // This is an insertion or in-progress hydration. The nearest possible\r\n        // mounted fiber is the parent but we need to continue to figure out\r\n        // if that one is still mounted.\r\n        nearestMounted = node.return;\r\n      }\r\n      nextNode = node.return;\r\n    } while (nextNode);\r\n  } else {\r\n    while (node.return) {\r\n      node = node.return;\r\n    }\r\n  }\r\n  if (node.tag === HostRoot) {\r\n    // TODO: Check if this was a nested HostRoot when used with\r\n    // renderContainerIntoSubtree.\r\n    return nearestMounted;\r\n  }\r\n  // If we didn't hit the root, that means that we're in an disconnected tree\r\n  // that has been unmounted.\r\n  return null;\r\n}\r\n\r\nexport function getSuspenseInstanceFromFiber(\r\n  fiber: Fiber,\r\n): null | SuspenseInstance {\r\n  if (fiber.tag === SuspenseComponent) {\r\n    let suspenseState: SuspenseState | null = fiber.memoizedState;\r\n    if (suspenseState === null) {\r\n      const current = fiber.alternate;\r\n      if (current !== null) {\r\n        suspenseState = current.memoizedState;\r\n      }\r\n    }\r\n    if (suspenseState !== null) {\r\n      return suspenseState.dehydrated;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function getContainerFromFiber(fiber: Fiber): null | Container {\r\n  return fiber.tag === HostRoot\r\n    ? (fiber.stateNode.containerInfo: Container)\r\n    : null;\r\n}\r\n\r\nexport function isFiberMounted(fiber: Fiber): boolean {\r\n  return getNearestMountedFiber(fiber) === fiber;\r\n}\r\n\r\nexport function isMounted(component: React$Component<any, any>): boolean {\r\n  if (__DEV__) {\r\n    const owner = (ReactCurrentOwner.current: any);\r\n    if (owner !== null && owner.tag === ClassComponent) {\r\n      const ownerFiber: Fiber = owner;\r\n      const instance = ownerFiber.stateNode;\r\n      if (!instance._warnedAboutRefsInRender) {\r\n        console.error(\r\n          '%s is accessing isMounted inside its render() function. ' +\r\n            'render() should be a pure function of props and state. It should ' +\r\n            'never access something that requires stale data from the previous ' +\r\n            'render, such as refs. Move this logic to componentDidMount and ' +\r\n            'componentDidUpdate instead.',\r\n          getComponentNameFromFiber(ownerFiber) || 'A component',\r\n        );\r\n      }\r\n      instance._warnedAboutRefsInRender = true;\r\n    }\r\n  }\r\n\r\n  const fiber: ?Fiber = getInstance(component);\r\n  if (!fiber) {\r\n    return false;\r\n  }\r\n  return getNearestMountedFiber(fiber) === fiber;\r\n}\r\n\r\nfunction assertIsMounted(fiber) {\r\n  if (getNearestMountedFiber(fiber) !== fiber) {\r\n    throw new Error('Unable to find node on an unmounted component.');\r\n  }\r\n}\r\n\r\nexport function findCurrentFiberUsingSlowPath(fiber: Fiber): Fiber | null {\r\n  const alternate = fiber.alternate;\r\n  if (!alternate) {\r\n    // If there is no alternate, then we only need to check if it is mounted.\r\n    const nearestMounted = getNearestMountedFiber(fiber);\r\n\r\n    if (nearestMounted === null) {\r\n      throw new Error('Unable to find node on an unmounted component.');\r\n    }\r\n\r\n    if (nearestMounted !== fiber) {\r\n      return null;\r\n    }\r\n    return fiber;\r\n  }\r\n  // If we have two possible branches, we'll walk backwards up to the root\r\n  // to see what path the root points to. On the way we may hit one of the\r\n  // special cases and we'll deal with them.\r\n  let a: Fiber = fiber;\r\n  let b: Fiber = alternate;\r\n  while (true) {\r\n    const parentA = a.return;\r\n    if (parentA === null) {\r\n      // We're at the root.\r\n      break;\r\n    }\r\n    const parentB = parentA.alternate;\r\n    if (parentB === null) {\r\n      // There is no alternate. This is an unusual case. Currently, it only\r\n      // happens when a Suspense component is hidden. An extra fragment fiber\r\n      // is inserted in between the Suspense fiber and its children. Skip\r\n      // over this extra fragment fiber and proceed to the next parent.\r\n      const nextParent = parentA.return;\r\n      if (nextParent !== null) {\r\n        a = b = nextParent;\r\n        continue;\r\n      }\r\n      // If there's no parent, we're at the root.\r\n      break;\r\n    }\r\n\r\n    // If both copies of the parent fiber point to the same child, we can\r\n    // assume that the child is current. This happens when we bailout on low\r\n    // priority: the bailed out fiber's child reuses the current child.\r\n    if (parentA.child === parentB.child) {\r\n      let child = parentA.child;\r\n      while (child) {\r\n        if (child === a) {\r\n          // We've determined that A is the current branch.\r\n          assertIsMounted(parentA);\r\n          return fiber;\r\n        }\r\n        if (child === b) {\r\n          // We've determined that B is the current branch.\r\n          assertIsMounted(parentA);\r\n          return alternate;\r\n        }\r\n        child = child.sibling;\r\n      }\r\n\r\n      // We should never have an alternate for any mounting node. So the only\r\n      // way this could possibly happen is if this was unmounted, if at all.\r\n      throw new Error('Unable to find node on an unmounted component.');\r\n    }\r\n\r\n    if (a.return !== b.return) {\r\n      // The return pointer of A and the return pointer of B point to different\r\n      // fibers. We assume that return pointers never criss-cross, so A must\r\n      // belong to the child set of A.return, and B must belong to the child\r\n      // set of B.return.\r\n      a = parentA;\r\n      b = parentB;\r\n    } else {\r\n      // The return pointers point to the same fiber. We'll have to use the\r\n      // default, slow path: scan the child sets of each parent alternate to see\r\n      // which child belongs to which set.\r\n      //\r\n      // Search parent A's child set\r\n      let didFindChild = false;\r\n      let child = parentA.child;\r\n      while (child) {\r\n        if (child === a) {\r\n          didFindChild = true;\r\n          a = parentA;\r\n          b = parentB;\r\n          break;\r\n        }\r\n        if (child === b) {\r\n          didFindChild = true;\r\n          b = parentA;\r\n          a = parentB;\r\n          break;\r\n        }\r\n        child = child.sibling;\r\n      }\r\n      if (!didFindChild) {\r\n        // Search parent B's child set\r\n        child = parentB.child;\r\n        while (child) {\r\n          if (child === a) {\r\n            didFindChild = true;\r\n            a = parentB;\r\n            b = parentA;\r\n            break;\r\n          }\r\n          if (child === b) {\r\n            didFindChild = true;\r\n            b = parentB;\r\n            a = parentA;\r\n            break;\r\n          }\r\n          child = child.sibling;\r\n        }\r\n\r\n        if (!didFindChild) {\r\n          throw new Error(\r\n            'Child was not found in either parent set. This indicates a bug ' +\r\n              'in React related to the return pointer. Please file an issue.',\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    if (a.alternate !== b) {\r\n      throw new Error(\r\n        \"Return fibers should always be each others' alternates. \" +\r\n          'This error is likely caused by a bug in React. Please file an issue.',\r\n      );\r\n    }\r\n  }\r\n\r\n  // If the root is not a host container, we're in a disconnected tree. I.e.\r\n  // unmounted.\r\n  if (a.tag !== HostRoot) {\r\n    throw new Error('Unable to find node on an unmounted component.');\r\n  }\r\n\r\n  if (a.stateNode.current === a) {\r\n    // We've determined that A is the current branch.\r\n    return fiber;\r\n  }\r\n  // Otherwise B has to be current branch.\r\n  return alternate;\r\n}\r\n\r\nexport function findCurrentHostFiber(parent: Fiber): Fiber | null {\r\n  const currentParent = findCurrentFiberUsingSlowPath(parent);\r\n  return currentParent !== null\r\n    ? findCurrentHostFiberImpl(currentParent)\r\n    : null;\r\n}\r\n\r\nfunction findCurrentHostFiberImpl(node: Fiber) {\r\n  // Next we'll drill down this component to find the first HostComponent/Text.\r\n  if (node.tag === HostComponent || node.tag === HostText) {\r\n    return node;\r\n  }\r\n\r\n  let child = node.child;\r\n  while (child !== null) {\r\n    const match = findCurrentHostFiberImpl(child);\r\n    if (match !== null) {\r\n      return match;\r\n    }\r\n    child = child.sibling;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport function findCurrentHostFiberWithNoPortals(parent: Fiber): Fiber | null {\r\n  const currentParent = findCurrentFiberUsingSlowPath(parent);\r\n  return currentParent !== null\r\n    ? findCurrentHostFiberWithNoPortalsImpl(currentParent)\r\n    : null;\r\n}\r\n\r\nfunction findCurrentHostFiberWithNoPortalsImpl(node: Fiber) {\r\n  // Next we'll drill down this component to find the first HostComponent/Text.\r\n  if (node.tag === HostComponent || node.tag === HostText) {\r\n    return node;\r\n  }\r\n\r\n  let child = node.child;\r\n  while (child !== null) {\r\n    if (child.tag !== HostPortal) {\r\n      const match = findCurrentHostFiberWithNoPortalsImpl(child);\r\n      if (match !== null) {\r\n        return match;\r\n      }\r\n    }\r\n    child = child.sibling;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport function isFiberSuspenseAndTimedOut(fiber: Fiber): boolean {\r\n  const memoizedState = fiber.memoizedState;\r\n  return (\r\n    fiber.tag === SuspenseComponent &&\r\n    memoizedState !== null &&\r\n    memoizedState.dehydrated === null\r\n  );\r\n}\r\n\r\nexport function doesFiberContain(\r\n  parentFiber: Fiber,\r\n  childFiber: Fiber,\r\n): boolean {\r\n  let node = childFiber;\r\n  const parentFiberAlternate = parentFiber.alternate;\r\n  while (node !== null) {\r\n    if (node === parentFiber || node === parentFiberAlternate) {\r\n      return true;\r\n    }\r\n    node = node.return;\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\ndeclare function isArray(a: mixed): boolean %checks(Array.isArray(a));\r\n\r\nconst isArrayImpl = Array.isArray;\r\n\r\n// eslint-disable-next-line no-redeclare\r\nfunction isArray(a: mixed): boolean {\r\n  return isArrayImpl(a);\r\n}\r\n\r\nexport default isArray;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\n// This is a host config that's used for the `react-reconciler` package on npm.\r\n// It is only used by third-party renderers.\r\n//\r\n// Its API lets you pass the host config as an argument.\r\n// However, inside the `react-reconciler` we treat host config as a module.\r\n// This file is a shim between two worlds.\r\n//\r\n// It works because the `react-reconciler` bundle is wrapped in something like:\r\n//\r\n// module.exports = function ($$$config) {\r\n//   /* reconciler code */\r\n// }\r\n//\r\n// So `$$$config` looks like a global variable, but it's\r\n// really an argument to a top-level wrapping function.\r\n\r\ndeclare var $$$hostConfig: any;\r\nexport opaque type Type = mixed; // eslint-disable-line no-undef\r\nexport opaque type Props = mixed; // eslint-disable-line no-undef\r\nexport opaque type Container = mixed; // eslint-disable-line no-undef\r\nexport opaque type Instance = mixed; // eslint-disable-line no-undef\r\nexport opaque type TextInstance = mixed; // eslint-disable-line no-undef\r\nexport opaque type SuspenseInstance = mixed; // eslint-disable-line no-undef\r\nexport opaque type HydratableInstance = mixed; // eslint-disable-line no-undef\r\nexport opaque type PublicInstance = mixed; // eslint-disable-line no-undef\r\nexport opaque type HostContext = mixed; // eslint-disable-line no-undef\r\nexport opaque type UpdatePayload = mixed; // eslint-disable-line no-undef\r\nexport opaque type ChildSet = mixed; // eslint-disable-line no-undef\r\nexport opaque type TimeoutHandle = mixed; // eslint-disable-line no-undef\r\nexport opaque type NoTimeout = mixed; // eslint-disable-line no-undef\r\nexport opaque type RendererInspectionConfig = mixed; // eslint-disable-line no-undef\r\nexport type EventResponder = any;\r\n\r\nexport const getPublicInstance = $$$hostConfig.getPublicInstance;\r\nexport const getRootHostContext = $$$hostConfig.getRootHostContext;\r\nexport const getChildHostContext = $$$hostConfig.getChildHostContext;\r\nexport const prepareForCommit = $$$hostConfig.prepareForCommit;\r\nexport const resetAfterCommit = $$$hostConfig.resetAfterCommit;\r\nexport const createInstance = $$$hostConfig.createInstance;\r\nexport const appendInitialChild = $$$hostConfig.appendInitialChild;\r\nexport const finalizeInitialChildren = $$$hostConfig.finalizeInitialChildren;\r\nexport const prepareUpdate = $$$hostConfig.prepareUpdate;\r\nexport const shouldSetTextContent = $$$hostConfig.shouldSetTextContent;\r\nexport const createTextInstance = $$$hostConfig.createTextInstance;\r\nexport const scheduleTimeout = $$$hostConfig.scheduleTimeout;\r\nexport const cancelTimeout = $$$hostConfig.cancelTimeout;\r\nexport const noTimeout = $$$hostConfig.noTimeout;\r\nexport const isPrimaryRenderer = $$$hostConfig.isPrimaryRenderer;\r\nexport const warnsIfNotActing = $$$hostConfig.warnsIfNotActing;\r\nexport const supportsMutation = $$$hostConfig.supportsMutation;\r\nexport const supportsPersistence = $$$hostConfig.supportsPersistence;\r\nexport const supportsHydration = $$$hostConfig.supportsHydration;\r\nexport const getInstanceFromNode = $$$hostConfig.getInstanceFromNode;\r\nexport const beforeActiveInstanceBlur = $$$hostConfig.beforeActiveInstanceBlur;\r\nexport const afterActiveInstanceBlur = $$$hostConfig.afterActiveInstanceBlur;\r\nexport const preparePortalMount = $$$hostConfig.preparePortalMount;\r\nexport const prepareScopeUpdate = $$$hostConfig.prepareScopeUpdate;\r\nexport const getInstanceFromScope = $$$hostConfig.getInstanceFromScope;\r\nexport const getCurrentEventPriority = $$$hostConfig.getCurrentEventPriority;\r\nexport const detachDeletedInstance = $$$hostConfig.detachDeletedInstance;\r\nexport const requestPostPaintCallback = $$$hostConfig.requestPostPaintCallback;\r\n\r\n// -------------------\r\n//      Microtasks\r\n//     (optional)\r\n// -------------------\r\nexport const supportsMicrotasks = $$$hostConfig.supportsMicrotasks;\r\nexport const scheduleMicrotask = $$$hostConfig.scheduleMicrotask;\r\n\r\n// -------------------\r\n//      Test selectors\r\n//     (optional)\r\n// -------------------\r\nexport const supportsTestSelectors = $$$hostConfig.supportsTestSelectors;\r\nexport const findFiberRoot = $$$hostConfig.findFiberRoot;\r\nexport const getBoundingRect = $$$hostConfig.getBoundingRect;\r\nexport const getTextContent = $$$hostConfig.getTextContent;\r\nexport const isHiddenSubtree = $$$hostConfig.isHiddenSubtree;\r\nexport const matchAccessibilityRole = $$$hostConfig.matchAccessibilityRole;\r\nexport const setFocusIfFocusable = $$$hostConfig.setFocusIfFocusable;\r\nexport const setupIntersectionObserver =\r\n  $$$hostConfig.setupIntersectionObserver;\r\n\r\n// -------------------\r\n//      Mutation\r\n//     (optional)\r\n// -------------------\r\nexport const appendChild = $$$hostConfig.appendChild;\r\nexport const appendChildToContainer = $$$hostConfig.appendChildToContainer;\r\nexport const commitTextUpdate = $$$hostConfig.commitTextUpdate;\r\nexport const commitMount = $$$hostConfig.commitMount;\r\nexport const commitUpdate = $$$hostConfig.commitUpdate;\r\nexport const insertBefore = $$$hostConfig.insertBefore;\r\nexport const insertInContainerBefore = $$$hostConfig.insertInContainerBefore;\r\nexport const removeChild = $$$hostConfig.removeChild;\r\nexport const removeChildFromContainer = $$$hostConfig.removeChildFromContainer;\r\nexport const resetTextContent = $$$hostConfig.resetTextContent;\r\nexport const hideInstance = $$$hostConfig.hideInstance;\r\nexport const hideTextInstance = $$$hostConfig.hideTextInstance;\r\nexport const unhideInstance = $$$hostConfig.unhideInstance;\r\nexport const unhideTextInstance = $$$hostConfig.unhideTextInstance;\r\nexport const clearContainer = $$$hostConfig.clearContainer;\r\n\r\n// -------------------\r\n//     Persistence\r\n//     (optional)\r\n// -------------------\r\nexport const cloneInstance = $$$hostConfig.cloneInstance;\r\nexport const createContainerChildSet = $$$hostConfig.createContainerChildSet;\r\nexport const appendChildToContainerChildSet =\r\n  $$$hostConfig.appendChildToContainerChildSet;\r\nexport const finalizeContainerChildren =\r\n  $$$hostConfig.finalizeContainerChildren;\r\nexport const replaceContainerChildren = $$$hostConfig.replaceContainerChildren;\r\nexport const cloneHiddenInstance = $$$hostConfig.cloneHiddenInstance;\r\nexport const cloneHiddenTextInstance = $$$hostConfig.cloneHiddenTextInstance;\r\n\r\n// -------------------\r\n//     Hydration\r\n//     (optional)\r\n// -------------------\r\nexport const canHydrateInstance = $$$hostConfig.canHydrateInstance;\r\nexport const canHydrateTextInstance = $$$hostConfig.canHydrateTextInstance;\r\nexport const canHydrateSuspenseInstance =\r\n  $$$hostConfig.canHydrateSuspenseInstance;\r\nexport const isSuspenseInstancePending =\r\n  $$$hostConfig.isSuspenseInstancePending;\r\nexport const isSuspenseInstanceFallback =\r\n  $$$hostConfig.isSuspenseInstanceFallback;\r\nexport const getSuspenseInstanceFallbackErrorDetails =\r\n  $$$hostConfig.getSuspenseInstanceFallbackErrorDetails;\r\nexport const registerSuspenseInstanceRetry =\r\n  $$$hostConfig.registerSuspenseInstanceRetry;\r\nexport const getNextHydratableSibling = $$$hostConfig.getNextHydratableSibling;\r\nexport const getFirstHydratableChild = $$$hostConfig.getFirstHydratableChild;\r\nexport const getFirstHydratableChildWithinContainer =\r\n  $$$hostConfig.getFirstHydratableChildWithinContainer;\r\nexport const getFirstHydratableChildWithinSuspenseInstance =\r\n  $$$hostConfig.getFirstHydratableChildWithinSuspenseInstance;\r\nexport const hydrateInstance = $$$hostConfig.hydrateInstance;\r\nexport const hydrateTextInstance = $$$hostConfig.hydrateTextInstance;\r\nexport const hydrateSuspenseInstance = $$$hostConfig.hydrateSuspenseInstance;\r\nexport const getNextHydratableInstanceAfterSuspenseInstance =\r\n  $$$hostConfig.getNextHydratableInstanceAfterSuspenseInstance;\r\nexport const commitHydratedContainer = $$$hostConfig.commitHydratedContainer;\r\nexport const commitHydratedSuspenseInstance =\r\n  $$$hostConfig.commitHydratedSuspenseInstance;\r\nexport const clearSuspenseBoundary = $$$hostConfig.clearSuspenseBoundary;\r\nexport const clearSuspenseBoundaryFromContainer =\r\n  $$$hostConfig.clearSuspenseBoundaryFromContainer;\r\nexport const shouldDeleteUnhydratedTailInstances =\r\n  $$$hostConfig.shouldDeleteUnhydratedTailInstances;\r\nexport const didNotMatchHydratedContainerTextInstance =\r\n  $$$hostConfig.didNotMatchHydratedContainerTextInstance;\r\nexport const didNotMatchHydratedTextInstance =\r\n  $$$hostConfig.didNotMatchHydratedTextInstance;\r\nexport const didNotHydrateInstanceWithinContainer =\r\n  $$$hostConfig.didNotHydrateInstanceWithinContainer;\r\nexport const didNotHydrateInstanceWithinSuspenseInstance =\r\n  $$$hostConfig.didNotHydrateInstanceWithinSuspenseInstance;\r\nexport const didNotHydrateInstance = $$$hostConfig.didNotHydrateInstance;\r\nexport const didNotFindHydratableInstanceWithinContainer =\r\n  $$$hostConfig.didNotFindHydratableInstanceWithinContainer;\r\nexport const didNotFindHydratableTextInstanceWithinContainer =\r\n  $$$hostConfig.didNotFindHydratableTextInstanceWithinContainer;\r\nexport const didNotFindHydratableSuspenseInstanceWithinContainer =\r\n  $$$hostConfig.didNotFindHydratableSuspenseInstanceWithinContainer;\r\nexport const didNotFindHydratableInstanceWithinSuspenseInstance =\r\n  $$$hostConfig.didNotFindHydratableInstanceWithinSuspenseInstance;\r\nexport const didNotFindHydratableTextInstanceWithinSuspenseInstance =\r\n  $$$hostConfig.didNotFindHydratableTextInstanceWithinSuspenseInstance;\r\nexport const didNotFindHydratableSuspenseInstanceWithinSuspenseInstance =\r\n  $$$hostConfig.didNotFindHydratableSuspenseInstanceWithinSuspenseInstance;\r\nexport const didNotFindHydratableInstance =\r\n  $$$hostConfig.didNotFindHydratableInstance;\r\nexport const didNotFindHydratableTextInstance =\r\n  $$$hostConfig.didNotFindHydratableTextInstance;\r\nexport const didNotFindHydratableSuspenseInstance =\r\n  $$$hostConfig.didNotFindHydratableSuspenseInstance;\r\nexport const errorHydratingContainer = $$$hostConfig.errorHydratingContainer;\r\nexport const isHydratableResource = $$$hostConfig.isHydratableResource;\r\nexport const getMatchingResourceInstance =\r\n  $$$hostConfig.getMatchingResourceInstance;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {Source} from 'shared/ReactElementType';\r\nimport type {LazyComponent} from 'react/src/ReactLazy';\r\n\r\nimport {\r\n  enableComponentStackLocations,\r\n  disableNativeComponentFrames,\r\n} from 'shared/ReactFeatureFlags';\r\n\r\nimport {\r\n  REACT_SUSPENSE_TYPE,\r\n  REACT_SUSPENSE_LIST_TYPE,\r\n  REACT_FORWARD_REF_TYPE,\r\n  REACT_MEMO_TYPE,\r\n  REACT_LAZY_TYPE,\r\n} from 'shared/ReactSymbols';\r\n\r\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\r\n\r\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\r\n\r\nconst {ReactCurrentDispatcher} = ReactSharedInternals;\r\n\r\nlet prefix;\r\nexport function describeBuiltInComponentFrame(\r\n  name: string,\r\n  source: void | null | Source,\r\n  ownerFn: void | null | Function,\r\n): string {\r\n  if (enableComponentStackLocations) {\r\n    if (prefix === undefined) {\r\n      // Extract the VM specific prefix used by each line.\r\n      try {\r\n        throw Error();\r\n      } catch (x) {\r\n        const match = x.stack.trim().match(/\\n( *(at )?)/);\r\n        prefix = (match && match[1]) || '';\r\n      }\r\n    }\r\n    // We use the prefix to ensure our stacks line up with native stack frames.\r\n    return '\\n' + prefix + name;\r\n  } else {\r\n    let ownerName = null;\r\n    if (__DEV__ && ownerFn) {\r\n      ownerName = ownerFn.displayName || ownerFn.name || null;\r\n    }\r\n    return describeComponentFrame(name, source, ownerName);\r\n  }\r\n}\r\n\r\nlet reentry = false;\r\nlet componentFrameCache;\r\nif (__DEV__) {\r\n  const PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\r\n  componentFrameCache = new PossiblyWeakMap();\r\n}\r\n\r\nexport function describeNativeComponentFrame(\r\n  fn: Function,\r\n  construct: boolean,\r\n): string {\r\n  // If something asked for a stack inside a fake render, it should get ignored.\r\n  if (disableNativeComponentFrames || !fn || reentry) {\r\n    return '';\r\n  }\r\n\r\n  if (__DEV__) {\r\n    const frame = componentFrameCache.get(fn);\r\n    if (frame !== undefined) {\r\n      return frame;\r\n    }\r\n  }\r\n\r\n  let control;\r\n\r\n  reentry = true;\r\n  const previousPrepareStackTrace = Error.prepareStackTrace;\r\n  // $FlowFixMe It does accept undefined.\r\n  Error.prepareStackTrace = undefined;\r\n  let previousDispatcher;\r\n  if (__DEV__) {\r\n    previousDispatcher = ReactCurrentDispatcher.current;\r\n    // Set the dispatcher in DEV because this might be call in the render function\r\n    // for warnings.\r\n    ReactCurrentDispatcher.current = null;\r\n    disableLogs();\r\n  }\r\n  try {\r\n    // This should throw.\r\n    if (construct) {\r\n      // Something should be setting the props in the constructor.\r\n      const Fake = function() {\r\n        throw Error();\r\n      };\r\n      // $FlowFixMe\r\n      Object.defineProperty(Fake.prototype, 'props', {\r\n        set: function() {\r\n          // We use a throwing setter instead of frozen or non-writable props\r\n          // because that won't throw in a non-strict mode function.\r\n          throw Error();\r\n        },\r\n      });\r\n      if (typeof Reflect === 'object' && Reflect.construct) {\r\n        // We construct a different control for this case to include any extra\r\n        // frames added by the construct call.\r\n        try {\r\n          Reflect.construct(Fake, []);\r\n        } catch (x) {\r\n          control = x;\r\n        }\r\n        Reflect.construct(fn, [], Fake);\r\n      } else {\r\n        try {\r\n          Fake.call();\r\n        } catch (x) {\r\n          control = x;\r\n        }\r\n        fn.call(Fake.prototype);\r\n      }\r\n    } else {\r\n      try {\r\n        throw Error();\r\n      } catch (x) {\r\n        control = x;\r\n      }\r\n      // TODO(luna): This will currently only throw if the function component\r\n      // tries to access React/ReactDOM/props. We should probably make this throw\r\n      // in simple components too\r\n      fn();\r\n    }\r\n  } catch (sample) {\r\n    // This is inlined manually because closure doesn't do it for us.\r\n    if (sample && control && typeof sample.stack === 'string') {\r\n      // This extracts the first frame from the sample that isn't also in the control.\r\n      // Skipping one frame that we assume is the frame that calls the two.\r\n      const sampleLines = sample.stack.split('\\n');\r\n      const controlLines = control.stack.split('\\n');\r\n      let s = sampleLines.length - 1;\r\n      let c = controlLines.length - 1;\r\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\r\n        // We expect at least one stack frame to be shared.\r\n        // Typically this will be the root most one. However, stack frames may be\r\n        // cut off due to maximum stack limits. In this case, one maybe cut off\r\n        // earlier than the other. We assume that the sample is longer or the same\r\n        // and there for cut off earlier. So we should find the root most frame in\r\n        // the sample somewhere in the control.\r\n        c--;\r\n      }\r\n      for (; s >= 1 && c >= 0; s--, c--) {\r\n        // Next we find the first one that isn't the same which should be the\r\n        // frame that called our sample function and the control.\r\n        if (sampleLines[s] !== controlLines[c]) {\r\n          // In V8, the first line is describing the message but other VMs don't.\r\n          // If we're about to return the first line, and the control is also on the same\r\n          // line, that's a pretty good indicator that our sample threw at same line as\r\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\r\n          // This can happen if you passed a class to function component, or non-function.\r\n          if (s !== 1 || c !== 1) {\r\n            do {\r\n              s--;\r\n              c--;\r\n              // We may still have similar intermediate frames from the construct call.\r\n              // The next one that isn't the same should be our match though.\r\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\r\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\r\n                let frame = '\\n' + sampleLines[s].replace(' at new ', ' at ');\r\n\r\n                // If our component frame is labeled \"<anonymous>\"\r\n                // but we have a user-provided \"displayName\"\r\n                // splice it in to make the stack more readable.\r\n                if (fn.displayName && frame.includes('<anonymous>')) {\r\n                  frame = frame.replace('<anonymous>', fn.displayName);\r\n                }\r\n\r\n                if (__DEV__) {\r\n                  if (typeof fn === 'function') {\r\n                    componentFrameCache.set(fn, frame);\r\n                  }\r\n                }\r\n                // Return the line we found.\r\n                return frame;\r\n              }\r\n            } while (s >= 1 && c >= 0);\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  } finally {\r\n    reentry = false;\r\n    if (__DEV__) {\r\n      ReactCurrentDispatcher.current = previousDispatcher;\r\n      reenableLogs();\r\n    }\r\n    Error.prepareStackTrace = previousPrepareStackTrace;\r\n  }\r\n  // Fallback to just using the name if we couldn't make it throw.\r\n  const name = fn ? fn.displayName || fn.name : '';\r\n  const syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\r\n  if (__DEV__) {\r\n    if (typeof fn === 'function') {\r\n      componentFrameCache.set(fn, syntheticFrame);\r\n    }\r\n  }\r\n  return syntheticFrame;\r\n}\r\n\r\nconst BEFORE_SLASH_RE = /^(.*)[\\\\\\/]/;\r\n\r\nfunction describeComponentFrame(\r\n  name: null | string,\r\n  source: void | null | Source,\r\n  ownerName: null | string,\r\n) {\r\n  let sourceInfo = '';\r\n  if (__DEV__ && source) {\r\n    const path = source.fileName;\r\n    let fileName = path.replace(BEFORE_SLASH_RE, '');\r\n    // In DEV, include code for a common special case:\r\n    // prefer \"folder/index.js\" instead of just \"index.js\".\r\n    if (/^index\\./.test(fileName)) {\r\n      const match = path.match(BEFORE_SLASH_RE);\r\n      if (match) {\r\n        const pathBeforeSlash = match[1];\r\n        if (pathBeforeSlash) {\r\n          const folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');\r\n          fileName = folderName + '/' + fileName;\r\n        }\r\n      }\r\n    }\r\n    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';\r\n  } else if (ownerName) {\r\n    sourceInfo = ' (created by ' + ownerName + ')';\r\n  }\r\n  return '\\n    in ' + (name || 'Unknown') + sourceInfo;\r\n}\r\n\r\nexport function describeClassComponentFrame(\r\n  ctor: Function,\r\n  source: void | null | Source,\r\n  ownerFn: void | null | Function,\r\n): string {\r\n  if (enableComponentStackLocations) {\r\n    return describeNativeComponentFrame(ctor, true);\r\n  } else {\r\n    return describeFunctionComponentFrame(ctor, source, ownerFn);\r\n  }\r\n}\r\n\r\nexport function describeFunctionComponentFrame(\r\n  fn: Function,\r\n  source: void | null | Source,\r\n  ownerFn: void | null | Function,\r\n): string {\r\n  if (enableComponentStackLocations) {\r\n    return describeNativeComponentFrame(fn, false);\r\n  } else {\r\n    if (!fn) {\r\n      return '';\r\n    }\r\n    const name = fn.displayName || fn.name || null;\r\n    let ownerName = null;\r\n    if (__DEV__ && ownerFn) {\r\n      ownerName = ownerFn.displayName || ownerFn.name || null;\r\n    }\r\n    return describeComponentFrame(name, source, ownerName);\r\n  }\r\n}\r\n\r\nfunction shouldConstruct(Component: Function) {\r\n  const prototype = Component.prototype;\r\n  return !!(prototype && prototype.isReactComponent);\r\n}\r\n\r\nexport function describeUnknownElementTypeFrameInDEV(\r\n  type: any,\r\n  source: void | null | Source,\r\n  ownerFn: void | null | Function,\r\n): string {\r\n  if (!__DEV__) {\r\n    return '';\r\n  }\r\n  if (type == null) {\r\n    return '';\r\n  }\r\n  if (typeof type === 'function') {\r\n    if (enableComponentStackLocations) {\r\n      return describeNativeComponentFrame(type, shouldConstruct(type));\r\n    } else {\r\n      return describeFunctionComponentFrame(type, source, ownerFn);\r\n    }\r\n  }\r\n  if (typeof type === 'string') {\r\n    return describeBuiltInComponentFrame(type, source, ownerFn);\r\n  }\r\n  switch (type) {\r\n    case REACT_SUSPENSE_TYPE:\r\n      return describeBuiltInComponentFrame('Suspense', source, ownerFn);\r\n    case REACT_SUSPENSE_LIST_TYPE:\r\n      return describeBuiltInComponentFrame('SuspenseList', source, ownerFn);\r\n  }\r\n  if (typeof type === 'object') {\r\n    switch (type.$$typeof) {\r\n      case REACT_FORWARD_REF_TYPE:\r\n        return describeFunctionComponentFrame(type.render, source, ownerFn);\r\n      case REACT_MEMO_TYPE:\r\n        // Memo may contain any component type so we recursively resolve it.\r\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\r\n      case REACT_LAZY_TYPE: {\r\n        const lazyComponent: LazyComponent<any, any> = (type: any);\r\n        const payload = lazyComponent._payload;\r\n        const init = lazyComponent._init;\r\n        try {\r\n          // Lazy may contain any component type so we recursively resolve it.\r\n          return describeUnknownElementTypeFrameInDEV(\r\n            init(payload),\r\n            source,\r\n            ownerFn,\r\n          );\r\n        } catch (x) {}\r\n      }\r\n    }\r\n  }\r\n  return '';\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\r\n\r\nexport default hasOwnProperty;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nconst loggedTypeFailures = {};\r\n\r\nimport {describeUnknownElementTypeFrameInDEV} from 'shared/ReactComponentStackFrame';\r\n\r\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\r\nimport hasOwnProperty from 'shared/hasOwnProperty';\r\n\r\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\r\n\r\nfunction setCurrentlyValidatingElement(element) {\r\n  if (__DEV__) {\r\n    if (element) {\r\n      const owner = element._owner;\r\n      const stack = describeUnknownElementTypeFrameInDEV(\r\n        element.type,\r\n        element._source,\r\n        owner ? owner.type : null,\r\n      );\r\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\r\n    } else {\r\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\r\n    }\r\n  }\r\n}\r\n\r\nexport default function checkPropTypes(\r\n  typeSpecs: Object,\r\n  values: Object,\r\n  location: string,\r\n  componentName: ?string,\r\n  element?: any,\r\n): void {\r\n  if (__DEV__) {\r\n    // $FlowFixMe This is okay but Flow doesn't know it.\r\n    const has = Function.call.bind(hasOwnProperty);\r\n    for (const typeSpecName in typeSpecs) {\r\n      if (has(typeSpecs, typeSpecName)) {\r\n        let error;\r\n        // Prop type validation may throw. In case they do, we don't want to\r\n        // fail the render phase where it didn't fail before. So we log it.\r\n        // After these have been cleaned up, we'll let them throw.\r\n        try {\r\n          // This is intentionally an invariant that gets caught. It's the same\r\n          // behavior as without this statement except with a better message.\r\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\r\n            // eslint-disable-next-line react-internal/prod-error-codes\r\n            const err = Error(\r\n              (componentName || 'React class') +\r\n                ': ' +\r\n                location +\r\n                ' type `' +\r\n                typeSpecName +\r\n                '` is invalid; ' +\r\n                'it must be a function, usually from the `prop-types` package, but received `' +\r\n                typeof typeSpecs[typeSpecName] +\r\n                '`.' +\r\n                'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.',\r\n            );\r\n            err.name = 'Invariant Violation';\r\n            throw err;\r\n          }\r\n          error = typeSpecs[typeSpecName](\r\n            values,\r\n            typeSpecName,\r\n            componentName,\r\n            location,\r\n            null,\r\n            'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED',\r\n          );\r\n        } catch (ex) {\r\n          error = ex;\r\n        }\r\n        if (error && !(error instanceof Error)) {\r\n          setCurrentlyValidatingElement(element);\r\n          console.error(\r\n            '%s: type specification of %s' +\r\n              ' `%s` is invalid; the type checker ' +\r\n              'function must return `null` or an `Error` but returned a %s. ' +\r\n              'You may have forgotten to pass an argument to the type checker ' +\r\n              'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\r\n              'shape all require an argument).',\r\n            componentName || 'React class',\r\n            location,\r\n            typeSpecName,\r\n            typeof error,\r\n          );\r\n          setCurrentlyValidatingElement(null);\r\n        }\r\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\r\n          // Only monitor this failure once because there tends to be a lot of the\r\n          // same error.\r\n          loggedTypeFailures[error.message] = true;\r\n          setCurrentlyValidatingElement(element);\r\n          console.error('Failed %s type: %s', location, error.message);\r\n          setCurrentlyValidatingElement(null);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {Fiber} from './ReactInternalTypes';\r\n\r\nexport type StackCursor<T> = {current: T};\r\n\r\nconst valueStack: Array<any> = [];\r\n\r\nlet fiberStack: Array<Fiber | null>;\r\n\r\nif (__DEV__) {\r\n  fiberStack = [];\r\n}\r\n\r\nlet index = -1;\r\n\r\nfunction createCursor<T>(defaultValue: T): StackCursor<T> {\r\n  return {\r\n    current: defaultValue,\r\n  };\r\n}\r\n\r\nfunction isEmpty(): boolean {\r\n  return index === -1;\r\n}\r\n\r\nfunction pop<T>(cursor: StackCursor<T>, fiber: Fiber): void {\r\n  if (index < 0) {\r\n    if (__DEV__) {\r\n      console.error('Unexpected pop.');\r\n    }\r\n    return;\r\n  }\r\n\r\n  if (__DEV__) {\r\n    if (fiber !== fiberStack[index]) {\r\n      console.error('Unexpected Fiber popped.');\r\n    }\r\n  }\r\n\r\n  cursor.current = valueStack[index];\r\n\r\n  valueStack[index] = null;\r\n\r\n  if (__DEV__) {\r\n    fiberStack[index] = null;\r\n  }\r\n\r\n  index--;\r\n}\r\n\r\nfunction push<T>(cursor: StackCursor<T>, value: T, fiber: Fiber): void {\r\n  index++;\r\n\r\n  valueStack[index] = cursor.current;\r\n\r\n  if (__DEV__) {\r\n    fiberStack[index] = fiber;\r\n  }\r\n\r\n  cursor.current = value;\r\n}\r\n\r\nfunction checkThatStackIsEmpty() {\r\n  if (__DEV__) {\r\n    if (index !== -1) {\r\n      console.error(\r\n        'Expected an empty stack. Something was not reset properly.',\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction resetStackAfterFatalErrorInDev() {\r\n  if (__DEV__) {\r\n    index = -1;\r\n    valueStack.length = 0;\r\n    fiberStack.length = 0;\r\n  }\r\n}\r\n\r\nexport {\r\n  createCursor,\r\n  isEmpty,\r\n  pop,\r\n  push,\r\n  // DEV only:\r\n  checkThatStackIsEmpty,\r\n  resetStackAfterFatalErrorInDev,\r\n};\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {Fiber} from './ReactInternalTypes';\r\nimport type {StackCursor} from './ReactFiberStack.old';\r\n\r\nimport {isFiberMounted} from './ReactFiberTreeReflection';\r\nimport {disableLegacyContext} from 'shared/ReactFeatureFlags';\r\nimport {ClassComponent, HostRoot} from './ReactWorkTags';\r\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\r\nimport checkPropTypes from 'shared/checkPropTypes';\r\n\r\nimport {createCursor, push, pop} from './ReactFiberStack.old';\r\n\r\nlet warnedAboutMissingGetChildContext;\r\n\r\nif (__DEV__) {\r\n  warnedAboutMissingGetChildContext = {};\r\n}\r\n\r\nexport const emptyContextObject = {};\r\nif (__DEV__) {\r\n  Object.freeze(emptyContextObject);\r\n}\r\n\r\n// A cursor to the current merged context object on the stack.\r\nconst contextStackCursor: StackCursor<Object> = createCursor(\r\n  emptyContextObject,\r\n);\r\n// A cursor to a boolean indicating whether the context has changed.\r\nconst didPerformWorkStackCursor: StackCursor<boolean> = createCursor(false);\r\n// Keep track of the previous context object that was on the stack.\r\n// We use this to get access to the parent context after we have already\r\n// pushed the next context provider, and now need to merge their contexts.\r\nlet previousContext: Object = emptyContextObject;\r\n\r\nfunction getUnmaskedContext(\r\n  workInProgress: Fiber,\r\n  Component: Function,\r\n  didPushOwnContextIfProvider: boolean,\r\n): Object {\r\n  if (disableLegacyContext) {\r\n    return emptyContextObject;\r\n  } else {\r\n    if (didPushOwnContextIfProvider && isContextProvider(Component)) {\r\n      // If the fiber is a context provider itself, when we read its context\r\n      // we may have already pushed its own child context on the stack. A context\r\n      // provider should not \"see\" its own child context. Therefore we read the\r\n      // previous (parent) context instead for a context provider.\r\n      return previousContext;\r\n    }\r\n    return contextStackCursor.current;\r\n  }\r\n}\r\n\r\nfunction cacheContext(\r\n  workInProgress: Fiber,\r\n  unmaskedContext: Object,\r\n  maskedContext: Object,\r\n): void {\r\n  if (disableLegacyContext) {\r\n    return;\r\n  } else {\r\n    const instance = workInProgress.stateNode;\r\n    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\r\n    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\r\n  }\r\n}\r\n\r\nfunction getMaskedContext(\r\n  workInProgress: Fiber,\r\n  unmaskedContext: Object,\r\n): Object {\r\n  if (disableLegacyContext) {\r\n    return emptyContextObject;\r\n  } else {\r\n    const type = workInProgress.type;\r\n    const contextTypes = type.contextTypes;\r\n    if (!contextTypes) {\r\n      return emptyContextObject;\r\n    }\r\n\r\n    // Avoid recreating masked context unless unmasked context has changed.\r\n    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\r\n    // This may trigger infinite loops if componentWillReceiveProps calls setState.\r\n    const instance = workInProgress.stateNode;\r\n    if (\r\n      instance &&\r\n      instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext\r\n    ) {\r\n      return instance.__reactInternalMemoizedMaskedChildContext;\r\n    }\r\n\r\n    const context = {};\r\n    for (const key in contextTypes) {\r\n      context[key] = unmaskedContext[key];\r\n    }\r\n\r\n    if (__DEV__) {\r\n      const name = getComponentNameFromFiber(workInProgress) || 'Unknown';\r\n      checkPropTypes(contextTypes, context, 'context', name);\r\n    }\r\n\r\n    // Cache unmasked context so we can avoid recreating masked context unless necessary.\r\n    // Context is created before the class component is instantiated so check for instance.\r\n    if (instance) {\r\n      cacheContext(workInProgress, unmaskedContext, context);\r\n    }\r\n\r\n    return context;\r\n  }\r\n}\r\n\r\nfunction hasContextChanged(): boolean {\r\n  if (disableLegacyContext) {\r\n    return false;\r\n  } else {\r\n    return didPerformWorkStackCursor.current;\r\n  }\r\n}\r\n\r\nfunction isContextProvider(type: Function): boolean {\r\n  if (disableLegacyContext) {\r\n    return false;\r\n  } else {\r\n    const childContextTypes = type.childContextTypes;\r\n    return childContextTypes !== null && childContextTypes !== undefined;\r\n  }\r\n}\r\n\r\nfunction popContext(fiber: Fiber): void {\r\n  if (disableLegacyContext) {\r\n    return;\r\n  } else {\r\n    pop(didPerformWorkStackCursor, fiber);\r\n    pop(contextStackCursor, fiber);\r\n  }\r\n}\r\n\r\nfunction popTopLevelContextObject(fiber: Fiber): void {\r\n  if (disableLegacyContext) {\r\n    return;\r\n  } else {\r\n    pop(didPerformWorkStackCursor, fiber);\r\n    pop(contextStackCursor, fiber);\r\n  }\r\n}\r\n\r\nfunction pushTopLevelContextObject(\r\n  fiber: Fiber,\r\n  context: Object,\r\n  didChange: boolean,\r\n): void {\r\n  if (disableLegacyContext) {\r\n    return;\r\n  } else {\r\n    if (contextStackCursor.current !== emptyContextObject) {\r\n      throw new Error(\r\n        'Unexpected context found on stack. ' +\r\n          'This error is likely caused by a bug in React. Please file an issue.',\r\n      );\r\n    }\r\n\r\n    push(contextStackCursor, context, fiber);\r\n    push(didPerformWorkStackCursor, didChange, fiber);\r\n  }\r\n}\r\n\r\nfunction processChildContext(\r\n  fiber: Fiber,\r\n  type: any,\r\n  parentContext: Object,\r\n): Object {\r\n  if (disableLegacyContext) {\r\n    return parentContext;\r\n  } else {\r\n    const instance = fiber.stateNode;\r\n    const childContextTypes = type.childContextTypes;\r\n\r\n    // TODO (bvaughn) Replace this behavior with an invariant() in the future.\r\n    // It has only been added in Fiber to match the (unintentional) behavior in Stack.\r\n    if (typeof instance.getChildContext !== 'function') {\r\n      if (__DEV__) {\r\n        const componentName = getComponentNameFromFiber(fiber) || 'Unknown';\r\n\r\n        if (!warnedAboutMissingGetChildContext[componentName]) {\r\n          warnedAboutMissingGetChildContext[componentName] = true;\r\n          console.error(\r\n            '%s.childContextTypes is specified but there is no getChildContext() method ' +\r\n              'on the instance. You can either define getChildContext() on %s or remove ' +\r\n              'childContextTypes from it.',\r\n            componentName,\r\n            componentName,\r\n          );\r\n        }\r\n      }\r\n      return parentContext;\r\n    }\r\n\r\n    const childContext = instance.getChildContext();\r\n    for (const contextKey in childContext) {\r\n      if (!(contextKey in childContextTypes)) {\r\n        throw new Error(\r\n          `${getComponentNameFromFiber(fiber) ||\r\n            'Unknown'}.getChildContext(): key \"${contextKey}\" is not defined in childContextTypes.`,\r\n        );\r\n      }\r\n    }\r\n    if (__DEV__) {\r\n      const name = getComponentNameFromFiber(fiber) || 'Unknown';\r\n      checkPropTypes(childContextTypes, childContext, 'child context', name);\r\n    }\r\n\r\n    return {...parentContext, ...childContext};\r\n  }\r\n}\r\n\r\nfunction pushContextProvider(workInProgress: Fiber): boolean {\r\n  if (disableLegacyContext) {\r\n    return false;\r\n  } else {\r\n    const instance = workInProgress.stateNode;\r\n    // We push the context as early as possible to ensure stack integrity.\r\n    // If the instance does not exist yet, we will push null at first,\r\n    // and replace it on the stack later when invalidating the context.\r\n    const memoizedMergedChildContext =\r\n      (instance && instance.__reactInternalMemoizedMergedChildContext) ||\r\n      emptyContextObject;\r\n\r\n    // Remember the parent context so we can merge with it later.\r\n    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\r\n    previousContext = contextStackCursor.current;\r\n    push(contextStackCursor, memoizedMergedChildContext, workInProgress);\r\n    push(\r\n      didPerformWorkStackCursor,\r\n      didPerformWorkStackCursor.current,\r\n      workInProgress,\r\n    );\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\nfunction invalidateContextProvider(\r\n  workInProgress: Fiber,\r\n  type: any,\r\n  didChange: boolean,\r\n): void {\r\n  if (disableLegacyContext) {\r\n    return;\r\n  } else {\r\n    const instance = workInProgress.stateNode;\r\n\r\n    if (!instance) {\r\n      throw new Error(\r\n        'Expected to have an instance by this point. ' +\r\n          'This error is likely caused by a bug in React. Please file an issue.',\r\n      );\r\n    }\r\n\r\n    if (didChange) {\r\n      // Merge parent and own context.\r\n      // Skip this if we're not updating due to sCU.\r\n      // This avoids unnecessarily recomputing memoized values.\r\n      const mergedContext = processChildContext(\r\n        workInProgress,\r\n        type,\r\n        previousContext,\r\n      );\r\n      instance.__reactInternalMemoizedMergedChildContext = mergedContext;\r\n\r\n      // Replace the old (or empty) context with the new one.\r\n      // It is important to unwind the context in the reverse order.\r\n      pop(didPerformWorkStackCursor, workInProgress);\r\n      pop(contextStackCursor, workInProgress);\r\n      // Now push the new context and mark that it has changed.\r\n      push(contextStackCursor, mergedContext, workInProgress);\r\n      push(didPerformWorkStackCursor, didChange, workInProgress);\r\n    } else {\r\n      pop(didPerformWorkStackCursor, workInProgress);\r\n      push(didPerformWorkStackCursor, didChange, workInProgress);\r\n    }\r\n  }\r\n}\r\n\r\nfunction findCurrentUnmaskedContext(fiber: Fiber): Object {\r\n  if (disableLegacyContext) {\r\n    return emptyContextObject;\r\n  } else {\r\n    // Currently this is only used with renderSubtreeIntoContainer; not sure if it\r\n    // makes sense elsewhere\r\n    if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {\r\n      throw new Error(\r\n        'Expected subtree parent to be a mounted class component. ' +\r\n          'This error is likely caused by a bug in React. Please file an issue.',\r\n      );\r\n    }\r\n\r\n    let node = fiber;\r\n    do {\r\n      switch (node.tag) {\r\n        case HostRoot:\r\n          return node.stateNode.context;\r\n        case ClassComponent: {\r\n          const Component = node.type;\r\n          if (isContextProvider(Component)) {\r\n            return node.stateNode.__reactInternalMemoizedMergedChildContext;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      node = node.return;\r\n    } while (node !== null);\r\n\r\n    throw new Error(\r\n      'Found unexpected detached subtree parent. ' +\r\n        'This error is likely caused by a bug in React. Please file an issue.',\r\n    );\r\n  }\r\n}\r\n\r\nexport {\r\n  getUnmaskedContext,\r\n  cacheContext,\r\n  getMaskedContext,\r\n  hasContextChanged,\r\n  popContext,\r\n  popTopLevelContextObject,\r\n  pushTopLevelContextObject,\r\n  processChildContext,\r\n  isContextProvider,\r\n  pushContextProvider,\r\n  invalidateContextProvider,\r\n  findCurrentUnmaskedContext,\r\n};\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nexport type RootTag = 0 | 1;\r\n\r\nexport const LegacyRoot = 0;\r\nexport const ConcurrentRoot = 1;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {ReactNodeList, OffscreenMode, Wakeable} from 'shared/ReactTypes';\r\nimport type {Lanes} from './ReactFiberLane.old';\r\nimport type {SpawnedCachePool} from './ReactFiberCacheComponent.new';\r\nimport type {\r\n  Transition,\r\n  TracingMarkerInstance,\r\n} from './ReactFiberTracingMarkerComponent.new';\r\n\r\nexport type OffscreenProps = {\r\n  // TODO: Pick an API before exposing the Offscreen type. I've chosen an enum\r\n  // for now, since we might have multiple variants. For example, hiding the\r\n  // content without changing the layout.\r\n  //\r\n  // Default mode is visible. Kind of a weird default for a component\r\n  // called \"Offscreen.\" Possible alt: <Visibility />?\r\n  mode?: OffscreenMode | null | void,\r\n  children?: ReactNodeList,\r\n};\r\n\r\n// We use the existence of the state object as an indicator that the component\r\n// is hidden.\r\nexport type OffscreenState = {\r\n  // TODO: This doesn't do anything, yet. It's always NoLanes. But eventually it\r\n  // will represent the pending work that must be included in the render in\r\n  // order to unhide the component.\r\n  baseLanes: Lanes,\r\n  cachePool: SpawnedCachePool | null,\r\n};\r\n\r\nexport type OffscreenQueue = {\r\n  transitions: Array<Transition> | null,\r\n  markerInstances: Array<TracingMarkerInstance> | null,\r\n  wakeables: Set<Wakeable> | null,\r\n};\r\n\r\ntype OffscreenVisibility = number;\r\n\r\nexport const OffscreenVisible = /*                     */ 0b01;\r\nexport const OffscreenPassiveEffectsConnected = /*     */ 0b10;\r\n\r\nexport type OffscreenInstance = {\r\n  visibility: OffscreenVisibility,\r\n  pendingMarkers: Set<TracingMarkerInstance> | null,\r\n  transitions: Set<Transition> | null,\r\n  retryCache: WeakSet<Wakeable> | Set<Wakeable> | null,\r\n};\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nexport type TypeOfMode = number;\r\n\r\nexport const NoMode = /*                         */ 0b000000;\r\n// TODO: Remove ConcurrentMode by reading from the root tag instead\r\nexport const ConcurrentMode = /*                 */ 0b000001;\r\nexport const ProfileMode = /*                    */ 0b000010;\r\nexport const DebugTracingMode = /*               */ 0b000100;\r\nexport const StrictLegacyMode = /*               */ 0b001000;\r\nexport const StrictEffectsMode = /*              */ 0b010000;\r\nexport const ConcurrentUpdatesByDefaultMode = /* */ 0b100000;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\n// TODO: This is pretty well supported by browsers. Maybe we can drop it.\r\n\r\nexport const clz32: (x: number) => number = Math.clz32\r\n  ? Math.clz32\r\n  : clz32Fallback;\r\n\r\n// Count leading zeros.\r\n// Based on:\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\r\nconst log = Math.log;\r\nconst LN2 = Math.LN2;\r\nfunction clz32Fallback(x: number): number {\r\n  const asUint = x >>> 0;\r\n  if (asUint === 0) {\r\n    return 32;\r\n  }\r\n  return (31 - ((log(asUint) / LN2) | 0)) | 0;\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\r\nimport type {Transition} from './ReactFiberTracingMarkerComponent.old';\r\nimport type {ConcurrentUpdate} from './ReactFiberConcurrentUpdates.old';\r\n\r\n// TODO: Ideally these types would be opaque but that doesn't work well with\r\n// our reconciler fork infra, since these leak into non-reconciler packages.\r\n\r\nexport type Lanes = number;\r\nexport type Lane = number;\r\nexport type LaneMap<T> = Array<T>;\r\n\r\nimport {\r\n  enableSchedulingProfiler,\r\n  enableUpdaterTracking,\r\n  allowConcurrentByDefault,\r\n  enableTransitionTracing,\r\n} from 'shared/ReactFeatureFlags';\r\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\r\nimport {ConcurrentUpdatesByDefaultMode, NoMode} from './ReactTypeOfMode';\r\nimport {clz32} from './clz32';\r\n\r\n// Lane values below should be kept in sync with getLabelForLane(), used by react-devtools-timeline.\r\n// If those values are changed that package should be rebuilt and redeployed.\r\n\r\nexport const TotalLanes = 31;\r\n\r\nexport const NoLanes: Lanes = /*                        */ 0b0000000000000000000000000000000;\r\nexport const NoLane: Lane = /*                          */ 0b0000000000000000000000000000000;\r\n\r\nexport const SyncLane: Lane = /*                        */ 0b0000000000000000000000000000001;\r\n\r\nexport const InputContinuousHydrationLane: Lane = /*    */ 0b0000000000000000000000000000010;\r\nexport const InputContinuousLane: Lane = /*             */ 0b0000000000000000000000000000100;\r\n\r\nexport const DefaultHydrationLane: Lane = /*            */ 0b0000000000000000000000000001000;\r\nexport const DefaultLane: Lane = /*                     */ 0b0000000000000000000000000010000;\r\n\r\nconst TransitionHydrationLane: Lane = /*                */ 0b0000000000000000000000000100000;\r\nconst TransitionLanes: Lanes = /*                       */ 0b0000000001111111111111111000000;\r\nconst TransitionLane1: Lane = /*                        */ 0b0000000000000000000000001000000;\r\nconst TransitionLane2: Lane = /*                        */ 0b0000000000000000000000010000000;\r\nconst TransitionLane3: Lane = /*                        */ 0b0000000000000000000000100000000;\r\nconst TransitionLane4: Lane = /*                        */ 0b0000000000000000000001000000000;\r\nconst TransitionLane5: Lane = /*                        */ 0b0000000000000000000010000000000;\r\nconst TransitionLane6: Lane = /*                        */ 0b0000000000000000000100000000000;\r\nconst TransitionLane7: Lane = /*                        */ 0b0000000000000000001000000000000;\r\nconst TransitionLane8: Lane = /*                        */ 0b0000000000000000010000000000000;\r\nconst TransitionLane9: Lane = /*                        */ 0b0000000000000000100000000000000;\r\nconst TransitionLane10: Lane = /*                       */ 0b0000000000000001000000000000000;\r\nconst TransitionLane11: Lane = /*                       */ 0b0000000000000010000000000000000;\r\nconst TransitionLane12: Lane = /*                       */ 0b0000000000000100000000000000000;\r\nconst TransitionLane13: Lane = /*                       */ 0b0000000000001000000000000000000;\r\nconst TransitionLane14: Lane = /*                       */ 0b0000000000010000000000000000000;\r\nconst TransitionLane15: Lane = /*                       */ 0b0000000000100000000000000000000;\r\nconst TransitionLane16: Lane = /*                       */ 0b0000000001000000000000000000000;\r\n\r\nconst RetryLanes: Lanes = /*                            */ 0b0000111110000000000000000000000;\r\nconst RetryLane1: Lane = /*                             */ 0b0000000010000000000000000000000;\r\nconst RetryLane2: Lane = /*                             */ 0b0000000100000000000000000000000;\r\nconst RetryLane3: Lane = /*                             */ 0b0000001000000000000000000000000;\r\nconst RetryLane4: Lane = /*                             */ 0b0000010000000000000000000000000;\r\nconst RetryLane5: Lane = /*                             */ 0b0000100000000000000000000000000;\r\n\r\nexport const SomeRetryLane: Lane = RetryLane1;\r\n\r\nexport const SelectiveHydrationLane: Lane = /*          */ 0b0001000000000000000000000000000;\r\n\r\nconst NonIdleLanes: Lanes = /*                          */ 0b0001111111111111111111111111111;\r\n\r\nexport const IdleHydrationLane: Lane = /*               */ 0b0010000000000000000000000000000;\r\nexport const IdleLane: Lane = /*                        */ 0b0100000000000000000000000000000;\r\n\r\nexport const OffscreenLane: Lane = /*                   */ 0b1000000000000000000000000000000;\r\n\r\n// This function is used for the experimental timeline (react-devtools-timeline)\r\n// It should be kept in sync with the Lanes values above.\r\nexport function getLabelForLane(lane: Lane): string | void {\r\n  if (enableSchedulingProfiler) {\r\n    if (lane & SyncLane) {\r\n      return 'Sync';\r\n    }\r\n    if (lane & InputContinuousHydrationLane) {\r\n      return 'InputContinuousHydration';\r\n    }\r\n    if (lane & InputContinuousLane) {\r\n      return 'InputContinuous';\r\n    }\r\n    if (lane & DefaultHydrationLane) {\r\n      return 'DefaultHydration';\r\n    }\r\n    if (lane & DefaultLane) {\r\n      return 'Default';\r\n    }\r\n    if (lane & TransitionHydrationLane) {\r\n      return 'TransitionHydration';\r\n    }\r\n    if (lane & TransitionLanes) {\r\n      return 'Transition';\r\n    }\r\n    if (lane & RetryLanes) {\r\n      return 'Retry';\r\n    }\r\n    if (lane & SelectiveHydrationLane) {\r\n      return 'SelectiveHydration';\r\n    }\r\n    if (lane & IdleHydrationLane) {\r\n      return 'IdleHydration';\r\n    }\r\n    if (lane & IdleLane) {\r\n      return 'Idle';\r\n    }\r\n    if (lane & OffscreenLane) {\r\n      return 'Offscreen';\r\n    }\r\n  }\r\n}\r\n\r\nexport const NoTimestamp = -1;\r\n\r\nlet nextTransitionLane: Lane = TransitionLane1;\r\nlet nextRetryLane: Lane = RetryLane1;\r\n\r\nfunction getHighestPriorityLanes(lanes: Lanes | Lane): Lanes {\r\n  switch (getHighestPriorityLane(lanes)) {\r\n    case SyncLane:\r\n      return SyncLane;\r\n    case InputContinuousHydrationLane:\r\n      return InputContinuousHydrationLane;\r\n    case InputContinuousLane:\r\n      return InputContinuousLane;\r\n    case DefaultHydrationLane:\r\n      return DefaultHydrationLane;\r\n    case DefaultLane:\r\n      return DefaultLane;\r\n    case TransitionHydrationLane:\r\n      return TransitionHydrationLane;\r\n    case TransitionLane1:\r\n    case TransitionLane2:\r\n    case TransitionLane3:\r\n    case TransitionLane4:\r\n    case TransitionLane5:\r\n    case TransitionLane6:\r\n    case TransitionLane7:\r\n    case TransitionLane8:\r\n    case TransitionLane9:\r\n    case TransitionLane10:\r\n    case TransitionLane11:\r\n    case TransitionLane12:\r\n    case TransitionLane13:\r\n    case TransitionLane14:\r\n    case TransitionLane15:\r\n    case TransitionLane16:\r\n      return lanes & TransitionLanes;\r\n    case RetryLane1:\r\n    case RetryLane2:\r\n    case RetryLane3:\r\n    case RetryLane4:\r\n    case RetryLane5:\r\n      return lanes & RetryLanes;\r\n    case SelectiveHydrationLane:\r\n      return SelectiveHydrationLane;\r\n    case IdleHydrationLane:\r\n      return IdleHydrationLane;\r\n    case IdleLane:\r\n      return IdleLane;\r\n    case OffscreenLane:\r\n      return OffscreenLane;\r\n    default:\r\n      if (__DEV__) {\r\n        console.error(\r\n          'Should have found matching lanes. This is a bug in React.',\r\n        );\r\n      }\r\n      // This shouldn't be reachable, but as a fallback, return the entire bitmask.\r\n      return lanes;\r\n  }\r\n}\r\n\r\nexport function getNextLanes(root: FiberRoot, wipLanes: Lanes): Lanes {\r\n  // Early bailout if there's no pending work left.\r\n  const pendingLanes = root.pendingLanes;\r\n  if (pendingLanes === NoLanes) {\r\n    return NoLanes;\r\n  }\r\n\r\n  let nextLanes = NoLanes;\r\n\r\n  const suspendedLanes = root.suspendedLanes;\r\n  const pingedLanes = root.pingedLanes;\r\n\r\n  // Do not work on any idle work until all the non-idle work has finished,\r\n  // even if the work is suspended.\r\n  const nonIdlePendingLanes = pendingLanes & NonIdleLanes;\r\n  if (nonIdlePendingLanes !== NoLanes) {\r\n    const nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\r\n    if (nonIdleUnblockedLanes !== NoLanes) {\r\n      nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\r\n    } else {\r\n      const nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\r\n      if (nonIdlePingedLanes !== NoLanes) {\r\n        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\r\n      }\r\n    }\r\n  } else {\r\n    // The only remaining work is Idle.\r\n    const unblockedLanes = pendingLanes & ~suspendedLanes;\r\n    if (unblockedLanes !== NoLanes) {\r\n      nextLanes = getHighestPriorityLanes(unblockedLanes);\r\n    } else {\r\n      if (pingedLanes !== NoLanes) {\r\n        nextLanes = getHighestPriorityLanes(pingedLanes);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (nextLanes === NoLanes) {\r\n    // This should only be reachable if we're suspended\r\n    // TODO: Consider warning in this path if a fallback timer is not scheduled.\r\n    return NoLanes;\r\n  }\r\n\r\n  // If we're already in the middle of a render, switching lanes will interrupt\r\n  // it and we'll lose our progress. We should only do this if the new lanes are\r\n  // higher priority.\r\n  if (\r\n    wipLanes !== NoLanes &&\r\n    wipLanes !== nextLanes &&\r\n    // If we already suspended with a delay, then interrupting is fine. Don't\r\n    // bother waiting until the root is complete.\r\n    (wipLanes & suspendedLanes) === NoLanes\r\n  ) {\r\n    const nextLane = getHighestPriorityLane(nextLanes);\r\n    const wipLane = getHighestPriorityLane(wipLanes);\r\n    if (\r\n      // Tests whether the next lane is equal or lower priority than the wip\r\n      // one. This works because the bits decrease in priority as you go left.\r\n      nextLane >= wipLane ||\r\n      // Default priority updates should not interrupt transition updates. The\r\n      // only difference between default updates and transition updates is that\r\n      // default updates do not support refresh transitions.\r\n      (nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes)\r\n    ) {\r\n      // Keep working on the existing in-progress tree. Do not interrupt.\r\n      return wipLanes;\r\n    }\r\n  }\r\n\r\n  if (\r\n    allowConcurrentByDefault &&\r\n    (root.current.mode & ConcurrentUpdatesByDefaultMode) !== NoMode\r\n  ) {\r\n    // Do nothing, use the lanes as they were assigned.\r\n  } else if ((nextLanes & InputContinuousLane) !== NoLanes) {\r\n    // When updates are sync by default, we entangle continuous priority updates\r\n    // and default updates, so they render in the same batch. The only reason\r\n    // they use separate lanes is because continuous updates should interrupt\r\n    // transitions, but default updates should not.\r\n    nextLanes |= pendingLanes & DefaultLane;\r\n  }\r\n\r\n  // Check for entangled lanes and add them to the batch.\r\n  //\r\n  // A lane is said to be entangled with another when it's not allowed to render\r\n  // in a batch that does not also include the other lane. Typically we do this\r\n  // when multiple updates have the same source, and we only want to respond to\r\n  // the most recent event from that source.\r\n  //\r\n  // Note that we apply entanglements *after* checking for partial work above.\r\n  // This means that if a lane is entangled during an interleaved event while\r\n  // it's already rendering, we won't interrupt it. This is intentional, since\r\n  // entanglement is usually \"best effort\": we'll try our best to render the\r\n  // lanes in the same batch, but it's not worth throwing out partially\r\n  // completed work in order to do it.\r\n  // TODO: Reconsider this. The counter-argument is that the partial work\r\n  // represents an intermediate state, which we don't want to show to the user.\r\n  // And by spending extra time finishing it, we're increasing the amount of\r\n  // time it takes to show the final state, which is what they are actually\r\n  // waiting for.\r\n  //\r\n  // For those exceptions where entanglement is semantically important, like\r\n  // useMutableSource, we should ensure that there is no partial work at the\r\n  // time we apply the entanglement.\r\n  const entangledLanes = root.entangledLanes;\r\n  if (entangledLanes !== NoLanes) {\r\n    const entanglements = root.entanglements;\r\n    let lanes = nextLanes & entangledLanes;\r\n    while (lanes > 0) {\r\n      const index = pickArbitraryLaneIndex(lanes);\r\n      const lane = 1 << index;\r\n\r\n      nextLanes |= entanglements[index];\r\n\r\n      lanes &= ~lane;\r\n    }\r\n  }\r\n\r\n  return nextLanes;\r\n}\r\n\r\nexport function getMostRecentEventTime(root: FiberRoot, lanes: Lanes): number {\r\n  const eventTimes = root.eventTimes;\r\n\r\n  let mostRecentEventTime = NoTimestamp;\r\n  while (lanes > 0) {\r\n    const index = pickArbitraryLaneIndex(lanes);\r\n    const lane = 1 << index;\r\n\r\n    const eventTime = eventTimes[index];\r\n    if (eventTime > mostRecentEventTime) {\r\n      mostRecentEventTime = eventTime;\r\n    }\r\n\r\n    lanes &= ~lane;\r\n  }\r\n\r\n  return mostRecentEventTime;\r\n}\r\n\r\nfunction computeExpirationTime(lane: Lane, currentTime: number) {\r\n  switch (lane) {\r\n    case SyncLane:\r\n    case InputContinuousHydrationLane:\r\n    case InputContinuousLane:\r\n      // User interactions should expire slightly more quickly.\r\n      //\r\n      // NOTE: This is set to the corresponding constant as in Scheduler.js.\r\n      // When we made it larger, a product metric in www regressed, suggesting\r\n      // there's a user interaction that's being starved by a series of\r\n      // synchronous updates. If that theory is correct, the proper solution is\r\n      // to fix the starvation. However, this scenario supports the idea that\r\n      // expiration times are an important safeguard when starvation\r\n      // does happen.\r\n      return currentTime + 250;\r\n    case DefaultHydrationLane:\r\n    case DefaultLane:\r\n    case TransitionHydrationLane:\r\n    case TransitionLane1:\r\n    case TransitionLane2:\r\n    case TransitionLane3:\r\n    case TransitionLane4:\r\n    case TransitionLane5:\r\n    case TransitionLane6:\r\n    case TransitionLane7:\r\n    case TransitionLane8:\r\n    case TransitionLane9:\r\n    case TransitionLane10:\r\n    case TransitionLane11:\r\n    case TransitionLane12:\r\n    case TransitionLane13:\r\n    case TransitionLane14:\r\n    case TransitionLane15:\r\n    case TransitionLane16:\r\n      return currentTime + 5000;\r\n    case RetryLane1:\r\n    case RetryLane2:\r\n    case RetryLane3:\r\n    case RetryLane4:\r\n    case RetryLane5:\r\n      // TODO: Retries should be allowed to expire if they are CPU bound for\r\n      // too long, but when I made this change it caused a spike in browser\r\n      // crashes. There must be some other underlying bug; not super urgent but\r\n      // ideally should figure out why and fix it. Unfortunately we don't have\r\n      // a repro for the crashes, only detected via production metrics.\r\n      return NoTimestamp;\r\n    case SelectiveHydrationLane:\r\n    case IdleHydrationLane:\r\n    case IdleLane:\r\n    case OffscreenLane:\r\n      // Anything idle priority or lower should never expire.\r\n      return NoTimestamp;\r\n    default:\r\n      if (__DEV__) {\r\n        console.error(\r\n          'Should have found matching lanes. This is a bug in React.',\r\n        );\r\n      }\r\n      return NoTimestamp;\r\n  }\r\n}\r\n\r\nexport function markStarvedLanesAsExpired(\r\n  root: FiberRoot,\r\n  currentTime: number,\r\n): void {\r\n  // TODO: This gets called every time we yield. We can optimize by storing\r\n  // the earliest expiration time on the root. Then use that to quickly bail out\r\n  // of this function.\r\n\r\n  const pendingLanes = root.pendingLanes;\r\n  const suspendedLanes = root.suspendedLanes;\r\n  const pingedLanes = root.pingedLanes;\r\n  const expirationTimes = root.expirationTimes;\r\n\r\n  // Iterate through the pending lanes and check if we've reached their\r\n  // expiration time. If so, we'll assume the update is being starved and mark\r\n  // it as expired to force it to finish.\r\n  //\r\n  // We exclude retry lanes because those must always be time sliced, in order\r\n  // to unwrap uncached promises.\r\n  // TODO: Write a test for this\r\n  let lanes = pendingLanes & ~RetryLanes;\r\n  while (lanes > 0) {\r\n    const index = pickArbitraryLaneIndex(lanes);\r\n    const lane = 1 << index;\r\n\r\n    const expirationTime = expirationTimes[index];\r\n    if (expirationTime === NoTimestamp) {\r\n      // Found a pending lane with no expiration time. If it's not suspended, or\r\n      // if it's pinged, assume it's CPU-bound. Compute a new expiration time\r\n      // using the current time.\r\n      if (\r\n        (lane & suspendedLanes) === NoLanes ||\r\n        (lane & pingedLanes) !== NoLanes\r\n      ) {\r\n        // Assumes timestamps are monotonically increasing.\r\n        expirationTimes[index] = computeExpirationTime(lane, currentTime);\r\n      }\r\n    } else if (expirationTime <= currentTime) {\r\n      // This lane expired\r\n      root.expiredLanes |= lane;\r\n    }\r\n\r\n    lanes &= ~lane;\r\n  }\r\n}\r\n\r\n// This returns the highest priority pending lanes regardless of whether they\r\n// are suspended.\r\nexport function getHighestPriorityPendingLanes(root: FiberRoot): Lanes {\r\n  return getHighestPriorityLanes(root.pendingLanes);\r\n}\r\n\r\nexport function getLanesToRetrySynchronouslyOnError(\r\n  root: FiberRoot,\r\n  originallyAttemptedLanes: Lanes,\r\n): Lanes {\r\n  if (root.errorRecoveryDisabledLanes & originallyAttemptedLanes) {\r\n    // The error recovery mechanism is disabled until these lanes are cleared.\r\n    return NoLanes;\r\n  }\r\n\r\n  const everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\r\n  if (everythingButOffscreen !== NoLanes) {\r\n    return everythingButOffscreen;\r\n  }\r\n  if (everythingButOffscreen & OffscreenLane) {\r\n    return OffscreenLane;\r\n  }\r\n  return NoLanes;\r\n}\r\n\r\nexport function includesSyncLane(lanes: Lanes): boolean {\r\n  return (lanes & SyncLane) !== NoLanes;\r\n}\r\n\r\nexport function includesNonIdleWork(lanes: Lanes): boolean {\r\n  return (lanes & NonIdleLanes) !== NoLanes;\r\n}\r\nexport function includesOnlyRetries(lanes: Lanes): boolean {\r\n  return (lanes & RetryLanes) === lanes;\r\n}\r\nexport function includesOnlyNonUrgentLanes(lanes: Lanes): boolean {\r\n  const UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;\r\n  return (lanes & UrgentLanes) === NoLanes;\r\n}\r\nexport function includesOnlyTransitions(lanes: Lanes): boolean {\r\n  return (lanes & TransitionLanes) === lanes;\r\n}\r\n\r\nexport function includesBlockingLane(root: FiberRoot, lanes: Lanes): boolean {\r\n  if (\r\n    allowConcurrentByDefault &&\r\n    (root.current.mode & ConcurrentUpdatesByDefaultMode) !== NoMode\r\n  ) {\r\n    // Concurrent updates by default always use time slicing.\r\n    return false;\r\n  }\r\n  const SyncDefaultLanes =\r\n    InputContinuousHydrationLane |\r\n    InputContinuousLane |\r\n    DefaultHydrationLane |\r\n    DefaultLane;\r\n  return (lanes & SyncDefaultLanes) !== NoLanes;\r\n}\r\n\r\nexport function includesExpiredLane(root: FiberRoot, lanes: Lanes): boolean {\r\n  // This is a separate check from includesBlockingLane because a lane can\r\n  // expire after a render has already started.\r\n  return (lanes & root.expiredLanes) !== NoLanes;\r\n}\r\n\r\nexport function isTransitionLane(lane: Lane): boolean {\r\n  return (lane & TransitionLanes) !== NoLanes;\r\n}\r\n\r\nexport function claimNextTransitionLane(): Lane {\r\n  // Cycle through the lanes, assigning each new transition to the next lane.\r\n  // In most cases, this means every transition gets its own lane, until we\r\n  // run out of lanes and cycle back to the beginning.\r\n  const lane = nextTransitionLane;\r\n  nextTransitionLane <<= 1;\r\n  if ((nextTransitionLane & TransitionLanes) === NoLanes) {\r\n    nextTransitionLane = TransitionLane1;\r\n  }\r\n  return lane;\r\n}\r\n\r\nexport function claimNextRetryLane(): Lane {\r\n  const lane = nextRetryLane;\r\n  nextRetryLane <<= 1;\r\n  if ((nextRetryLane & RetryLanes) === NoLanes) {\r\n    nextRetryLane = RetryLane1;\r\n  }\r\n  return lane;\r\n}\r\n\r\nexport function getHighestPriorityLane(lanes: Lanes): Lane {\r\n  return lanes & -lanes;\r\n}\r\n\r\nexport function pickArbitraryLane(lanes: Lanes): Lane {\r\n  // This wrapper function gets inlined. Only exists so to communicate that it\r\n  // doesn't matter which bit is selected; you can pick any bit without\r\n  // affecting the algorithms where its used. Here I'm using\r\n  // getHighestPriorityLane because it requires the fewest operations.\r\n  return getHighestPriorityLane(lanes);\r\n}\r\n\r\nfunction pickArbitraryLaneIndex(lanes: Lanes) {\r\n  return 31 - clz32(lanes);\r\n}\r\n\r\nfunction laneToIndex(lane: Lane) {\r\n  return pickArbitraryLaneIndex(lane);\r\n}\r\n\r\nexport function includesSomeLane(a: Lanes | Lane, b: Lanes | Lane): boolean {\r\n  return (a & b) !== NoLanes;\r\n}\r\n\r\nexport function isSubsetOfLanes(set: Lanes, subset: Lanes | Lane): boolean {\r\n  return (set & subset) === subset;\r\n}\r\n\r\nexport function mergeLanes(a: Lanes | Lane, b: Lanes | Lane): Lanes {\r\n  return a | b;\r\n}\r\n\r\nexport function removeLanes(set: Lanes, subset: Lanes | Lane): Lanes {\r\n  return set & ~subset;\r\n}\r\n\r\nexport function intersectLanes(a: Lanes | Lane, b: Lanes | Lane): Lanes {\r\n  return a & b;\r\n}\r\n\r\n// Seems redundant, but it changes the type from a single lane (used for\r\n// updates) to a group of lanes (used for flushing work).\r\nexport function laneToLanes(lane: Lane): Lanes {\r\n  return lane;\r\n}\r\n\r\nexport function higherPriorityLane(a: Lane, b: Lane): Lane {\r\n  // This works because the bit ranges decrease in priority as you go left.\r\n  return a !== NoLane && a < b ? a : b;\r\n}\r\n\r\nexport function createLaneMap<T>(initial: T): LaneMap<T> {\r\n  // Intentionally pushing one by one.\r\n  // https://v8.dev/blog/elements-kinds#avoid-creating-holes\r\n  const laneMap = [];\r\n  for (let i = 0; i < TotalLanes; i++) {\r\n    laneMap.push(initial);\r\n  }\r\n  return laneMap;\r\n}\r\n\r\nexport function markRootUpdated(\r\n  root: FiberRoot,\r\n  updateLane: Lane,\r\n  eventTime: number,\r\n) {\r\n  root.pendingLanes |= updateLane;\r\n\r\n  // If there are any suspended transitions, it's possible this new update\r\n  // could unblock them. Clear the suspended lanes so that we can try rendering\r\n  // them again.\r\n  //\r\n  // TODO: We really only need to unsuspend only lanes that are in the\r\n  // `subtreeLanes` of the updated fiber, or the update lanes of the return\r\n  // path. This would exclude suspended updates in an unrelated sibling tree,\r\n  // since there's no way for this update to unblock it.\r\n  //\r\n  // We don't do this if the incoming update is idle, because we never process\r\n  // idle updates until after all the regular updates have finished; there's no\r\n  // way it could unblock a transition.\r\n  if (updateLane !== IdleLane) {\r\n    root.suspendedLanes = NoLanes;\r\n    root.pingedLanes = NoLanes;\r\n  }\r\n\r\n  const eventTimes = root.eventTimes;\r\n  const index = laneToIndex(updateLane);\r\n  // We can always overwrite an existing timestamp because we prefer the most\r\n  // recent event, and we assume time is monotonically increasing.\r\n  eventTimes[index] = eventTime;\r\n}\r\n\r\nexport function markRootSuspended(root: FiberRoot, suspendedLanes: Lanes) {\r\n  root.suspendedLanes |= suspendedLanes;\r\n  root.pingedLanes &= ~suspendedLanes;\r\n\r\n  // The suspended lanes are no longer CPU-bound. Clear their expiration times.\r\n  const expirationTimes = root.expirationTimes;\r\n  let lanes = suspendedLanes;\r\n  while (lanes > 0) {\r\n    const index = pickArbitraryLaneIndex(lanes);\r\n    const lane = 1 << index;\r\n\r\n    expirationTimes[index] = NoTimestamp;\r\n\r\n    lanes &= ~lane;\r\n  }\r\n}\r\n\r\nexport function markRootPinged(\r\n  root: FiberRoot,\r\n  pingedLanes: Lanes,\r\n  eventTime: number,\r\n) {\r\n  root.pingedLanes |= root.suspendedLanes & pingedLanes;\r\n}\r\n\r\nexport function markRootMutableRead(root: FiberRoot, updateLane: Lane) {\r\n  root.mutableReadLanes |= updateLane & root.pendingLanes;\r\n}\r\n\r\nexport function markRootFinished(root: FiberRoot, remainingLanes: Lanes) {\r\n  const noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\r\n\r\n  root.pendingLanes = remainingLanes;\r\n\r\n  // Let's try everything again\r\n  root.suspendedLanes = NoLanes;\r\n  root.pingedLanes = NoLanes;\r\n\r\n  root.expiredLanes &= remainingLanes;\r\n  root.mutableReadLanes &= remainingLanes;\r\n\r\n  root.entangledLanes &= remainingLanes;\r\n\r\n  root.errorRecoveryDisabledLanes &= remainingLanes;\r\n\r\n  const entanglements = root.entanglements;\r\n  const eventTimes = root.eventTimes;\r\n  const expirationTimes = root.expirationTimes;\r\n  const hiddenUpdates = root.hiddenUpdates;\r\n\r\n  // Clear the lanes that no longer have pending work\r\n  let lanes = noLongerPendingLanes;\r\n  while (lanes > 0) {\r\n    const index = pickArbitraryLaneIndex(lanes);\r\n    const lane = 1 << index;\r\n\r\n    entanglements[index] = NoLanes;\r\n    eventTimes[index] = NoTimestamp;\r\n    expirationTimes[index] = NoTimestamp;\r\n\r\n    const hiddenUpdatesForLane = hiddenUpdates[index];\r\n    if (hiddenUpdatesForLane !== null) {\r\n      hiddenUpdates[index] = null;\r\n      // \"Hidden\" updates are updates that were made to a hidden component. They\r\n      // have special logic associated with them because they may be entangled\r\n      // with updates that occur outside that tree. But once the outer tree\r\n      // commits, they behave like regular updates.\r\n      for (let i = 0; i < hiddenUpdatesForLane.length; i++) {\r\n        const update = hiddenUpdatesForLane[i];\r\n        if (update !== null) {\r\n          update.lane &= ~OffscreenLane;\r\n        }\r\n      }\r\n    }\r\n\r\n    lanes &= ~lane;\r\n  }\r\n}\r\n\r\nexport function markRootEntangled(root: FiberRoot, entangledLanes: Lanes) {\r\n  // In addition to entangling each of the given lanes with each other, we also\r\n  // have to consider _transitive_ entanglements. For each lane that is already\r\n  // entangled with *any* of the given lanes, that lane is now transitively\r\n  // entangled with *all* the given lanes.\r\n  //\r\n  // Translated: If C is entangled with A, then entangling A with B also\r\n  // entangles C with B.\r\n  //\r\n  // If this is hard to grasp, it might help to intentionally break this\r\n  // function and look at the tests that fail in ReactTransition-test.js. Try\r\n  // commenting out one of the conditions below.\r\n\r\n  const rootEntangledLanes = (root.entangledLanes |= entangledLanes);\r\n  const entanglements = root.entanglements;\r\n  let lanes = rootEntangledLanes;\r\n  while (lanes) {\r\n    const index = pickArbitraryLaneIndex(lanes);\r\n    const lane = 1 << index;\r\n    if (\r\n      // Is this one of the newly entangled lanes?\r\n      (lane & entangledLanes) |\r\n      // Is this lane transitively entangled with the newly entangled lanes?\r\n      (entanglements[index] & entangledLanes)\r\n    ) {\r\n      entanglements[index] |= entangledLanes;\r\n    }\r\n    lanes &= ~lane;\r\n  }\r\n}\r\n\r\nexport function markHiddenUpdate(\r\n  root: FiberRoot,\r\n  update: ConcurrentUpdate,\r\n  lane: Lane,\r\n) {\r\n  const index = laneToIndex(lane);\r\n  const hiddenUpdates = root.hiddenUpdates;\r\n  const hiddenUpdatesForLane = hiddenUpdates[index];\r\n  if (hiddenUpdatesForLane === null) {\r\n    hiddenUpdates[index] = [update];\r\n  } else {\r\n    hiddenUpdatesForLane.push(update);\r\n  }\r\n  update.lane = lane | OffscreenLane;\r\n}\r\n\r\nexport function getBumpedLaneForHydration(\r\n  root: FiberRoot,\r\n  renderLanes: Lanes,\r\n): Lane {\r\n  const renderLane = getHighestPriorityLane(renderLanes);\r\n\r\n  let lane;\r\n  switch (renderLane) {\r\n    case InputContinuousLane:\r\n      lane = InputContinuousHydrationLane;\r\n      break;\r\n    case DefaultLane:\r\n      lane = DefaultHydrationLane;\r\n      break;\r\n    case TransitionLane1:\r\n    case TransitionLane2:\r\n    case TransitionLane3:\r\n    case TransitionLane4:\r\n    case TransitionLane5:\r\n    case TransitionLane6:\r\n    case TransitionLane7:\r\n    case TransitionLane8:\r\n    case TransitionLane9:\r\n    case TransitionLane10:\r\n    case TransitionLane11:\r\n    case TransitionLane12:\r\n    case TransitionLane13:\r\n    case TransitionLane14:\r\n    case TransitionLane15:\r\n    case TransitionLane16:\r\n    case RetryLane1:\r\n    case RetryLane2:\r\n    case RetryLane3:\r\n    case RetryLane4:\r\n    case RetryLane5:\r\n      lane = TransitionHydrationLane;\r\n      break;\r\n    case IdleLane:\r\n      lane = IdleHydrationLane;\r\n      break;\r\n    default:\r\n      // Everything else is already either a hydration lane, or shouldn't\r\n      // be retried at a hydration lane.\r\n      lane = NoLane;\r\n      break;\r\n  }\r\n\r\n  // Check if the lane we chose is suspended. If so, that indicates that we\r\n  // already attempted and failed to hydrate at that level. Also check if we're\r\n  // already rendering that lane, which is rare but could happen.\r\n  if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {\r\n    // Give up trying to hydrate and fall back to client render.\r\n    return NoLane;\r\n  }\r\n\r\n  return lane;\r\n}\r\n\r\nexport function addFiberToLanesMap(\r\n  root: FiberRoot,\r\n  fiber: Fiber,\r\n  lanes: Lanes | Lane,\r\n) {\r\n  if (!enableUpdaterTracking) {\r\n    return;\r\n  }\r\n  if (!isDevToolsPresent) {\r\n    return;\r\n  }\r\n  const pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\r\n  while (lanes > 0) {\r\n    const index = laneToIndex(lanes);\r\n    const lane = 1 << index;\r\n\r\n    const updaters = pendingUpdatersLaneMap[index];\r\n    updaters.add(fiber);\r\n\r\n    lanes &= ~lane;\r\n  }\r\n}\r\n\r\nexport function movePendingFibersToMemoized(root: FiberRoot, lanes: Lanes) {\r\n  if (!enableUpdaterTracking) {\r\n    return;\r\n  }\r\n  if (!isDevToolsPresent) {\r\n    return;\r\n  }\r\n  const pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\r\n  const memoizedUpdaters = root.memoizedUpdaters;\r\n  while (lanes > 0) {\r\n    const index = laneToIndex(lanes);\r\n    const lane = 1 << index;\r\n\r\n    const updaters = pendingUpdatersLaneMap[index];\r\n    if (updaters.size > 0) {\r\n      updaters.forEach(fiber => {\r\n        const alternate = fiber.alternate;\r\n        if (alternate === null || !memoizedUpdaters.has(alternate)) {\r\n          memoizedUpdaters.add(fiber);\r\n        }\r\n      });\r\n      updaters.clear();\r\n    }\r\n\r\n    lanes &= ~lane;\r\n  }\r\n}\r\n\r\nexport function addTransitionToLanesMap(\r\n  root: FiberRoot,\r\n  transition: Transition,\r\n  lane: Lane,\r\n) {\r\n  if (enableTransitionTracing) {\r\n    const transitionLanesMap = root.transitionLanes;\r\n    const index = laneToIndex(lane);\r\n    let transitions = transitionLanesMap[index];\r\n    if (transitions === null) {\r\n      transitions = new Set();\r\n    }\r\n    transitions.add(transition);\r\n\r\n    transitionLanesMap[index] = transitions;\r\n  }\r\n}\r\n\r\nexport function getTransitionsForLanes(\r\n  root: FiberRoot,\r\n  lanes: Lane | Lanes,\r\n): Array<Transition> | null {\r\n  if (!enableTransitionTracing) {\r\n    return null;\r\n  }\r\n\r\n  const transitionsForLanes = [];\r\n  while (lanes > 0) {\r\n    const index = laneToIndex(lanes);\r\n    const lane = 1 << index;\r\n    const transitions = root.transitionLanes[index];\r\n    if (transitions !== null) {\r\n      transitions.forEach(transition => {\r\n        transitionsForLanes.push(transition);\r\n      });\r\n    }\r\n\r\n    lanes &= ~lane;\r\n  }\r\n\r\n  if (transitionsForLanes.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return transitionsForLanes;\r\n}\r\n\r\nexport function clearTransitionsForLanes(root: FiberRoot, lanes: Lane | Lanes) {\r\n  if (!enableTransitionTracing) {\r\n    return;\r\n  }\r\n\r\n  while (lanes > 0) {\r\n    const index = laneToIndex(lanes);\r\n    const lane = 1 << index;\r\n\r\n    const transitions = root.transitionLanes[index];\r\n    if (transitions !== null) {\r\n      root.transitionLanes[index] = null;\r\n    }\r\n\r\n    lanes &= ~lane;\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {Lane, Lanes} from './ReactFiberLane.old';\r\n\r\nimport {\r\n  NoLane,\r\n  SyncLane,\r\n  InputContinuousLane,\r\n  DefaultLane,\r\n  IdleLane,\r\n  getHighestPriorityLane,\r\n  includesNonIdleWork,\r\n} from './ReactFiberLane.old';\r\n\r\nexport opaque type EventPriority = Lane;\r\n\r\nexport const DiscreteEventPriority: EventPriority = SyncLane;\r\nexport const ContinuousEventPriority: EventPriority = InputContinuousLane;\r\nexport const DefaultEventPriority: EventPriority = DefaultLane;\r\nexport const IdleEventPriority: EventPriority = IdleLane;\r\n\r\nlet currentUpdatePriority: EventPriority = NoLane;\r\n\r\nexport function getCurrentUpdatePriority(): EventPriority {\r\n  return currentUpdatePriority;\r\n}\r\n\r\nexport function setCurrentUpdatePriority(newPriority: EventPriority) {\r\n  currentUpdatePriority = newPriority;\r\n}\r\n\r\nexport function runWithPriority<T>(priority: EventPriority, fn: () => T): T {\r\n  const previousPriority = currentUpdatePriority;\r\n  try {\r\n    currentUpdatePriority = priority;\r\n    return fn();\r\n  } finally {\r\n    currentUpdatePriority = previousPriority;\r\n  }\r\n}\r\n\r\nexport function higherEventPriority(\r\n  a: EventPriority,\r\n  b: EventPriority,\r\n): EventPriority {\r\n  return a !== 0 && a < b ? a : b;\r\n}\r\n\r\nexport function lowerEventPriority(\r\n  a: EventPriority,\r\n  b: EventPriority,\r\n): EventPriority {\r\n  return a === 0 || a > b ? a : b;\r\n}\r\n\r\nexport function isHigherEventPriority(\r\n  a: EventPriority,\r\n  b: EventPriority,\r\n): boolean {\r\n  return a !== 0 && a < b;\r\n}\r\n\r\nexport function lanesToEventPriority(lanes: Lanes): EventPriority {\r\n  const lane = getHighestPriorityLane(lanes);\r\n  if (!isHigherEventPriority(DiscreteEventPriority, lane)) {\r\n    return DiscreteEventPriority;\r\n  }\r\n  if (!isHigherEventPriority(ContinuousEventPriority, lane)) {\r\n    return ContinuousEventPriority;\r\n  }\r\n  if (includesNonIdleWork(lane)) {\r\n    return DefaultEventPriority;\r\n  }\r\n  return IdleEventPriority;\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\n// This module only exists as an ESM wrapper around the external CommonJS\r\n// Scheduler dependency. Notice that we're intentionally not using named imports\r\n// because Rollup would use dynamic dispatch for CommonJS interop named imports.\r\n// When we switch to ESM, we can delete this module.\r\nimport * as Scheduler from 'scheduler';\r\n\r\nexport const scheduleCallback = Scheduler.unstable_scheduleCallback;\r\nexport const cancelCallback = Scheduler.unstable_cancelCallback;\r\nexport const shouldYield = Scheduler.unstable_shouldYield;\r\nexport const requestPaint = Scheduler.unstable_requestPaint;\r\nexport const now = Scheduler.unstable_now;\r\nexport const getCurrentPriorityLevel =\r\n  Scheduler.unstable_getCurrentPriorityLevel;\r\nexport const ImmediatePriority = Scheduler.unstable_ImmediatePriority;\r\nexport const UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;\r\nexport const NormalPriority = Scheduler.unstable_NormalPriority;\r\nexport const LowPriority = Scheduler.unstable_LowPriority;\r\nexport const IdlePriority = Scheduler.unstable_IdlePriority;\r\nexport type SchedulerCallback = (isSync: boolean) => SchedulerCallback | null;\r\n\r\n// this doesn't actually exist on the scheduler, but it *does*\r\n// on scheduler/unstable_mock, which we'll need for internal testing\r\nexport const unstable_yieldValue = Scheduler.unstable_yieldValue;\r\nexport const unstable_setDisableYieldValue =\r\n  Scheduler.unstable_setDisableYieldValue;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {Lane, Lanes} from './ReactFiberLane.old';\r\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\r\nimport type {ReactNodeList, Wakeable} from 'shared/ReactTypes';\r\nimport type {EventPriority} from './ReactEventPriorities.old';\r\n// import type {DevToolsProfilingHooks} from 'react-devtools-shared/src/backend/types';\r\n// TODO: This import doesn't work because the DevTools depend on the DOM version of React\r\n// and to properly type check against DOM React we can't also type check again non-DOM\r\n// React which this hook might be in.\r\ntype DevToolsProfilingHooks = any;\r\n\r\nimport {\r\n  getLabelForLane,\r\n  TotalLanes,\r\n} from 'react-reconciler/src/ReactFiberLane.old';\r\nimport {DidCapture} from './ReactFiberFlags';\r\nimport {\r\n  consoleManagedByDevToolsDuringStrictMode,\r\n  enableProfilerTimer,\r\n  enableSchedulingProfiler,\r\n} from 'shared/ReactFeatureFlags';\r\nimport {\r\n  DiscreteEventPriority,\r\n  ContinuousEventPriority,\r\n  DefaultEventPriority,\r\n  IdleEventPriority,\r\n} from './ReactEventPriorities.old';\r\nimport {\r\n  ImmediatePriority as ImmediateSchedulerPriority,\r\n  UserBlockingPriority as UserBlockingSchedulerPriority,\r\n  NormalPriority as NormalSchedulerPriority,\r\n  IdlePriority as IdleSchedulerPriority,\r\n  unstable_yieldValue,\r\n  unstable_setDisableYieldValue,\r\n} from './Scheduler';\r\nimport {setSuppressWarning} from 'shared/consoleWithStackDev';\r\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\r\n\r\ndeclare var __REACT_DEVTOOLS_GLOBAL_HOOK__: Object | void;\r\n\r\nlet rendererID = null;\r\nlet injectedHook = null;\r\nlet injectedProfilingHooks: DevToolsProfilingHooks | null = null;\r\nlet hasLoggedError = false;\r\n\r\nexport const isDevToolsPresent =\r\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';\r\n\r\nexport function injectInternals(internals: Object): boolean {\r\n  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\r\n    // No DevTools\r\n    return false;\r\n  }\r\n  const hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\r\n  if (hook.isDisabled) {\r\n    // This isn't a real property on the hook, but it can be set to opt out\r\n    // of DevTools integration and associated warnings and logs.\r\n    // https://github.com/facebook/react/issues/3877\r\n    return true;\r\n  }\r\n  if (!hook.supportsFiber) {\r\n    if (__DEV__) {\r\n      console.error(\r\n        'The installed version of React DevTools is too old and will not work ' +\r\n          'with the current version of React. Please update React DevTools. ' +\r\n          'https://reactjs.org/link/react-devtools',\r\n      );\r\n    }\r\n    // DevTools exists, even though it doesn't support Fiber.\r\n    return true;\r\n  }\r\n  try {\r\n    if (enableSchedulingProfiler) {\r\n      // Conditionally inject these hooks only if Timeline profiler is supported by this build.\r\n      // This gives DevTools a way to feature detect that isn't tied to version number\r\n      // (since profiling and timeline are controlled by different feature flags).\r\n      internals = {\r\n        ...internals,\r\n        getLaneLabelMap,\r\n        injectProfilingHooks,\r\n      };\r\n    }\r\n\r\n    rendererID = hook.inject(internals);\r\n\r\n    // We have successfully injected, so now it is safe to set up hooks.\r\n    injectedHook = hook;\r\n  } catch (err) {\r\n    // Catch all errors because it is unsafe to throw during initialization.\r\n    if (__DEV__) {\r\n      console.error('React instrumentation encountered an error: %s.', err);\r\n    }\r\n  }\r\n  if (hook.checkDCE) {\r\n    // This is the real DevTools.\r\n    return true;\r\n  } else {\r\n    // This is likely a hook installed by Fast Refresh runtime.\r\n    return false;\r\n  }\r\n}\r\n\r\nexport function onScheduleRoot(root: FiberRoot, children: ReactNodeList) {\r\n  if (__DEV__) {\r\n    if (\r\n      injectedHook &&\r\n      typeof injectedHook.onScheduleFiberRoot === 'function'\r\n    ) {\r\n      try {\r\n        injectedHook.onScheduleFiberRoot(rendererID, root, children);\r\n      } catch (err) {\r\n        if (__DEV__ && !hasLoggedError) {\r\n          hasLoggedError = true;\r\n          console.error('React instrumentation encountered an error: %s', err);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function onCommitRoot(root: FiberRoot, eventPriority: EventPriority) {\r\n  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {\r\n    try {\r\n      const didError = (root.current.flags & DidCapture) === DidCapture;\r\n      if (enableProfilerTimer) {\r\n        let schedulerPriority;\r\n        switch (eventPriority) {\r\n          case DiscreteEventPriority:\r\n            schedulerPriority = ImmediateSchedulerPriority;\r\n            break;\r\n          case ContinuousEventPriority:\r\n            schedulerPriority = UserBlockingSchedulerPriority;\r\n            break;\r\n          case DefaultEventPriority:\r\n            schedulerPriority = NormalSchedulerPriority;\r\n            break;\r\n          case IdleEventPriority:\r\n            schedulerPriority = IdleSchedulerPriority;\r\n            break;\r\n          default:\r\n            schedulerPriority = NormalSchedulerPriority;\r\n            break;\r\n        }\r\n        injectedHook.onCommitFiberRoot(\r\n          rendererID,\r\n          root,\r\n          schedulerPriority,\r\n          didError,\r\n        );\r\n      } else {\r\n        injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);\r\n      }\r\n    } catch (err) {\r\n      if (__DEV__) {\r\n        if (!hasLoggedError) {\r\n          hasLoggedError = true;\r\n          console.error('React instrumentation encountered an error: %s', err);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function onPostCommitRoot(root: FiberRoot) {\r\n  if (\r\n    injectedHook &&\r\n    typeof injectedHook.onPostCommitFiberRoot === 'function'\r\n  ) {\r\n    try {\r\n      injectedHook.onPostCommitFiberRoot(rendererID, root);\r\n    } catch (err) {\r\n      if (__DEV__) {\r\n        if (!hasLoggedError) {\r\n          hasLoggedError = true;\r\n          console.error('React instrumentation encountered an error: %s', err);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function onCommitUnmount(fiber: Fiber) {\r\n  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {\r\n    try {\r\n      injectedHook.onCommitFiberUnmount(rendererID, fiber);\r\n    } catch (err) {\r\n      if (__DEV__) {\r\n        if (!hasLoggedError) {\r\n          hasLoggedError = true;\r\n          console.error('React instrumentation encountered an error: %s', err);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function setIsStrictModeForDevtools(newIsStrictMode: boolean) {\r\n  if (consoleManagedByDevToolsDuringStrictMode) {\r\n    if (typeof unstable_yieldValue === 'function') {\r\n      // We're in a test because Scheduler.unstable_yieldValue only exists\r\n      // in SchedulerMock. To reduce the noise in strict mode tests,\r\n      // suppress warnings and disable scheduler yielding during the double render\r\n      unstable_setDisableYieldValue(newIsStrictMode);\r\n      setSuppressWarning(newIsStrictMode);\r\n    }\r\n\r\n    if (injectedHook && typeof injectedHook.setStrictMode === 'function') {\r\n      try {\r\n        injectedHook.setStrictMode(rendererID, newIsStrictMode);\r\n      } catch (err) {\r\n        if (__DEV__) {\r\n          if (!hasLoggedError) {\r\n            hasLoggedError = true;\r\n            console.error(\r\n              'React instrumentation encountered an error: %s',\r\n              err,\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    if (newIsStrictMode) {\r\n      disableLogs();\r\n    } else {\r\n      reenableLogs();\r\n    }\r\n  }\r\n}\r\n\r\n// Profiler API hooks\r\n\r\nfunction injectProfilingHooks(profilingHooks: DevToolsProfilingHooks): void {\r\n  injectedProfilingHooks = profilingHooks;\r\n}\r\n\r\nfunction getLaneLabelMap(): Map<Lane, string> | null {\r\n  if (enableSchedulingProfiler) {\r\n    const map: Map<Lane, string> = new Map();\r\n\r\n    let lane = 1;\r\n    for (let index = 0; index < TotalLanes; index++) {\r\n      const label = ((getLabelForLane(lane): any): string);\r\n      map.set(lane, label);\r\n      lane *= 2;\r\n    }\r\n\r\n    return map;\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function markCommitStarted(lanes: Lanes): void {\r\n  if (enableSchedulingProfiler) {\r\n    if (\r\n      injectedProfilingHooks !== null &&\r\n      typeof injectedProfilingHooks.markCommitStarted === 'function'\r\n    ) {\r\n      injectedProfilingHooks.markCommitStarted(lanes);\r\n    }\r\n  }\r\n}\r\n\r\nexport function markCommitStopped(): void {\r\n  if (enableSchedulingProfiler) {\r\n    if (\r\n      injectedProfilingHooks !== null &&\r\n      typeof injectedProfilingHooks.markCommitStopped === 'function'\r\n    ) {\r\n      injectedProfilingHooks.markCommitStopped();\r\n    }\r\n  }\r\n}\r\n\r\nexport function markComponentRenderStarted(fiber: Fiber): void {\r\n  if (enableSchedulingProfiler) {\r\n    if (\r\n      injectedProfilingHooks !== null &&\r\n      typeof injectedProfilingHooks.markComponentRenderStarted === 'function'\r\n    ) {\r\n      injectedProfilingHooks.markComponentRenderStarted(fiber);\r\n    }\r\n  }\r\n}\r\n\r\nexport function markComponentRenderStopped(): void {\r\n  if (enableSchedulingProfiler) {\r\n    if (\r\n      injectedProfilingHooks !== null &&\r\n      typeof injectedProfilingHooks.markComponentRenderStopped === 'function'\r\n    ) {\r\n      injectedProfilingHooks.markComponentRenderStopped();\r\n    }\r\n  }\r\n}\r\n\r\nexport function markComponentPassiveEffectMountStarted(fiber: Fiber): void {\r\n  if (enableSchedulingProfiler) {\r\n    if (\r\n      injectedProfilingHooks !== null &&\r\n      typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted ===\r\n        'function'\r\n    ) {\r\n      injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);\r\n    }\r\n  }\r\n}\r\n\r\nexport function markComponentPassiveEffectMountStopped(): void {\r\n  if (enableSchedulingProfiler) {\r\n    if (\r\n      injectedProfilingHooks !== null &&\r\n      typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped ===\r\n        'function'\r\n    ) {\r\n      injectedProfilingHooks.markComponentPassiveEffectMountStopped();\r\n    }\r\n  }\r\n}\r\n\r\nexport function markComponentPassiveEffectUnmountStarted(fiber: Fiber): void {\r\n  if (enableSchedulingProfiler) {\r\n    if (\r\n      injectedProfilingHooks !== null &&\r\n      typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted ===\r\n        'function'\r\n    ) {\r\n      injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);\r\n    }\r\n  }\r\n}\r\n\r\nexport function markComponentPassiveEffectUnmountStopped(): void {\r\n  if (enableSchedulingProfiler) {\r\n    if (\r\n      injectedProfilingHooks !== null &&\r\n      typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped ===\r\n        'function'\r\n    ) {\r\n      injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();\r\n    }\r\n  }\r\n}\r\n\r\nexport function markComponentLayoutEffectMountStarted(fiber: Fiber): void {\r\n  if (enableSchedulingProfiler) {\r\n    if (\r\n      injectedProfilingHooks !== null &&\r\n      typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted ===\r\n        'function'\r\n    ) {\r\n      injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);\r\n    }\r\n  }\r\n}\r\n\r\nexport function markComponentLayoutEffectMountStopped(): void {\r\n  if (enableSchedulingProfiler) {\r\n    if (\r\n      injectedProfilingHooks !== null &&\r\n      typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped ===\r\n        'function'\r\n    ) {\r\n      injectedProfilingHooks.markComponentLayoutEffectMountStopped();\r\n    }\r\n  }\r\n}\r\n\r\nexport function markComponentLayoutEffectUnmountStarted(fiber: Fiber): void {\r\n  if (enableSchedulingProfiler) {\r\n    if (\r\n      injectedProfilingHooks !== null &&\r\n      typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted ===\r\n        'function'\r\n    ) {\r\n      injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);\r\n    }\r\n  }\r\n}\r\n\r\nexport function markComponentLayoutEffectUnmountStopped(): void {\r\n  if (enableSchedulingProfiler) {\r\n    if (\r\n      injectedProfilingHooks !== null &&\r\n      typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped ===\r\n        'function'\r\n    ) {\r\n      injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();\r\n    }\r\n  }\r\n}\r\n\r\nexport function markComponentErrored(\r\n  fiber: Fiber,\r\n  thrownValue: mixed,\r\n  lanes: Lanes,\r\n): void {\r\n  if (enableSchedulingProfiler) {\r\n    if (\r\n      injectedProfilingHooks !== null &&\r\n      typeof injectedProfilingHooks.markComponentErrored === 'function'\r\n    ) {\r\n      injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);\r\n    }\r\n  }\r\n}\r\n\r\nexport function markComponentSuspended(\r\n  fiber: Fiber,\r\n  wakeable: Wakeable,\r\n  lanes: Lanes,\r\n): void {\r\n  if (enableSchedulingProfiler) {\r\n    if (\r\n      injectedProfilingHooks !== null &&\r\n      typeof injectedProfilingHooks.markComponentSuspended === 'function'\r\n    ) {\r\n      injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);\r\n    }\r\n  }\r\n}\r\n\r\nexport function markLayoutEffectsStarted(lanes: Lanes): void {\r\n  if (enableSchedulingProfiler) {\r\n    if (\r\n      injectedProfilingHooks !== null &&\r\n      typeof injectedProfilingHooks.markLayoutEffectsStarted === 'function'\r\n    ) {\r\n      injectedProfilingHooks.markLayoutEffectsStarted(lanes);\r\n    }\r\n  }\r\n}\r\n\r\nexport function markLayoutEffectsStopped(): void {\r\n  if (enableSchedulingProfiler) {\r\n    if (\r\n      injectedProfilingHooks !== null &&\r\n      typeof injectedProfilingHooks.markLayoutEffectsStopped === 'function'\r\n    ) {\r\n      injectedProfilingHooks.markLayoutEffectsStopped();\r\n    }\r\n  }\r\n}\r\n\r\nexport function markPassiveEffectsStarted(lanes: Lanes): void {\r\n  if (enableSchedulingProfiler) {\r\n    if (\r\n      injectedProfilingHooks !== null &&\r\n      typeof injectedProfilingHooks.markPassiveEffectsStarted === 'function'\r\n    ) {\r\n      injectedProfilingHooks.markPassiveEffectsStarted(lanes);\r\n    }\r\n  }\r\n}\r\n\r\nexport function markPassiveEffectsStopped(): void {\r\n  if (enableSchedulingProfiler) {\r\n    if (\r\n      injectedProfilingHooks !== null &&\r\n      typeof injectedProfilingHooks.markPassiveEffectsStopped === 'function'\r\n    ) {\r\n      injectedProfilingHooks.markPassiveEffectsStopped();\r\n    }\r\n  }\r\n}\r\n\r\nexport function markRenderStarted(lanes: Lanes): void {\r\n  if (enableSchedulingProfiler) {\r\n    if (\r\n      injectedProfilingHooks !== null &&\r\n      typeof injectedProfilingHooks.markRenderStarted === 'function'\r\n    ) {\r\n      injectedProfilingHooks.markRenderStarted(lanes);\r\n    }\r\n  }\r\n}\r\n\r\nexport function markRenderYielded(): void {\r\n  if (enableSchedulingProfiler) {\r\n    if (\r\n      injectedProfilingHooks !== null &&\r\n      typeof injectedProfilingHooks.markRenderYielded === 'function'\r\n    ) {\r\n      injectedProfilingHooks.markRenderYielded();\r\n    }\r\n  }\r\n}\r\n\r\nexport function markRenderStopped(): void {\r\n  if (enableSchedulingProfiler) {\r\n    if (\r\n      injectedProfilingHooks !== null &&\r\n      typeof injectedProfilingHooks.markRenderStopped === 'function'\r\n    ) {\r\n      injectedProfilingHooks.markRenderStopped();\r\n    }\r\n  }\r\n}\r\n\r\nexport function markRenderScheduled(lane: Lane): void {\r\n  if (enableSchedulingProfiler) {\r\n    if (\r\n      injectedProfilingHooks !== null &&\r\n      typeof injectedProfilingHooks.markRenderScheduled === 'function'\r\n    ) {\r\n      injectedProfilingHooks.markRenderScheduled(lane);\r\n    }\r\n  }\r\n}\r\n\r\nexport function markForceUpdateScheduled(fiber: Fiber, lane: Lane): void {\r\n  if (enableSchedulingProfiler) {\r\n    if (\r\n      injectedProfilingHooks !== null &&\r\n      typeof injectedProfilingHooks.markForceUpdateScheduled === 'function'\r\n    ) {\r\n      injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);\r\n    }\r\n  }\r\n}\r\n\r\nexport function markStateUpdateScheduled(fiber: Fiber, lane: Lane): void {\r\n  if (enableSchedulingProfiler) {\r\n    if (\r\n      injectedProfilingHooks !== null &&\r\n      typeof injectedProfilingHooks.markStateUpdateScheduled === 'function'\r\n    ) {\r\n      injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\n/**\r\n * inlined Object.is polyfill to avoid requiring consumers ship their own\r\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\r\n */\r\nfunction is(x: any, y: any) {\r\n  return (\r\n    (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare\r\n  );\r\n}\r\n\r\nconst objectIs: (x: any, y: any) => boolean =\r\n  typeof Object.is === 'function' ? Object.is : is;\r\n\r\nexport default objectIs;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {SchedulerCallback} from './Scheduler';\r\n\r\nimport {\r\n  DiscreteEventPriority,\r\n  getCurrentUpdatePriority,\r\n  setCurrentUpdatePriority,\r\n} from './ReactEventPriorities.old';\r\nimport {ImmediatePriority, scheduleCallback} from './Scheduler';\r\n\r\nlet syncQueue: Array<SchedulerCallback> | null = null;\r\nlet includesLegacySyncCallbacks: boolean = false;\r\nlet isFlushingSyncQueue: boolean = false;\r\n\r\nexport function scheduleSyncCallback(callback: SchedulerCallback) {\r\n  // Push this callback into an internal queue. We'll flush these either in\r\n  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.\r\n  if (syncQueue === null) {\r\n    syncQueue = [callback];\r\n  } else {\r\n    // Push onto existing queue. Don't need to schedule a callback because\r\n    // we already scheduled one when we created the queue.\r\n    syncQueue.push(callback);\r\n  }\r\n}\r\n\r\nexport function scheduleLegacySyncCallback(callback: SchedulerCallback) {\r\n  includesLegacySyncCallbacks = true;\r\n  scheduleSyncCallback(callback);\r\n}\r\n\r\nexport function flushSyncCallbacksOnlyInLegacyMode() {\r\n  // Only flushes the queue if there's a legacy sync callback scheduled.\r\n  // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So\r\n  // it might make more sense for the queue to be a list of roots instead of a\r\n  // list of generic callbacks. Then we can have two: one for legacy roots, one\r\n  // for concurrent roots. And this method would only flush the legacy ones.\r\n  if (includesLegacySyncCallbacks) {\r\n    flushSyncCallbacks();\r\n  }\r\n}\r\n\r\nexport function flushSyncCallbacks(): null {\r\n  if (!isFlushingSyncQueue && syncQueue !== null) {\r\n    // Prevent re-entrance.\r\n    isFlushingSyncQueue = true;\r\n    let i = 0;\r\n    const previousUpdatePriority = getCurrentUpdatePriority();\r\n    try {\r\n      const isSync = true;\r\n      const queue = syncQueue;\r\n      // TODO: Is this necessary anymore? The only user code that runs in this\r\n      // queue is in the render or commit phases.\r\n      setCurrentUpdatePriority(DiscreteEventPriority);\r\n      for (; i < queue.length; i++) {\r\n        let callback = queue[i];\r\n        do {\r\n          callback = callback(isSync);\r\n        } while (callback !== null);\r\n      }\r\n      syncQueue = null;\r\n      includesLegacySyncCallbacks = false;\r\n    } catch (error) {\r\n      // If something throws, leave the remaining callbacks on the queue.\r\n      if (syncQueue !== null) {\r\n        syncQueue = syncQueue.slice(i + 1);\r\n      }\r\n      // Resume flushing in the next tick\r\n      scheduleCallback(ImmediatePriority, flushSyncCallbacks);\r\n      throw error;\r\n    } finally {\r\n      setCurrentUpdatePriority(previousUpdatePriority);\r\n      isFlushingSyncQueue = false;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {FiberRoot} from './ReactInternalTypes';\r\nimport type {RootState} from './ReactFiberRoot.new';\r\n\r\n// This is imported by the event replaying implementation in React DOM. It's\r\n// in a separate file to break a circular dependency between the renderer and\r\n// the reconciler.\r\nexport function isRootDehydrated(root: FiberRoot): boolean {\r\n  const currentState: RootState = root.current.memoizedState;\r\n  return currentState.isDehydrated;\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\n// Ids are base 32 strings whose binary representation corresponds to the\r\n// position of a node in a tree.\r\n\r\n// Every time the tree forks into multiple children, we add additional bits to\r\n// the left of the sequence that represent the position of the child within the\r\n// current level of children.\r\n//\r\n//      00101       00010001011010101\r\n//      ╰─┬─╯       ╰───────┬───────╯\r\n//   Fork 5 of 20       Parent id\r\n//\r\n// The leading 0s are important. In the above example, you only need 3 bits to\r\n// represent slot 5. However, you need 5 bits to represent all the forks at\r\n// the current level, so we must account for the empty bits at the end.\r\n//\r\n// For this same reason, slots are 1-indexed instead of 0-indexed. Otherwise,\r\n// the zeroth id at a level would be indistinguishable from its parent.\r\n//\r\n// If a node has only one child, and does not materialize an id (i.e. does not\r\n// contain a useId hook), then we don't need to allocate any space in the\r\n// sequence. It's treated as a transparent indirection. For example, these two\r\n// trees produce the same ids:\r\n//\r\n// <>                          <>\r\n//   <Indirection>               <A />\r\n//     <A />                     <B />\r\n//   </Indirection>            </>\r\n//   <B />\r\n// </>\r\n//\r\n// However, we cannot skip any node that materializes an id. Otherwise, a parent\r\n// id that does not fork would be indistinguishable from its child id. For\r\n// example, this tree does not fork, but the parent and child must have\r\n// different ids.\r\n//\r\n// <Parent>\r\n//   <Child />\r\n// </Parent>\r\n//\r\n// To handle this scenario, every time we materialize an id, we allocate a\r\n// new level with a single slot. You can think of this as a fork with only one\r\n// prong, or an array of children with length 1.\r\n//\r\n// It's possible for the size of the sequence to exceed 32 bits, the max\r\n// size for bitwise operations. When this happens, we make more room by\r\n// converting the right part of the id to a string and storing it in an overflow\r\n// variable. We use a base 32 string representation, because 32 is the largest\r\n// power of 2 that is supported by toString(). We want the base to be large so\r\n// that the resulting ids are compact, and we want the base to be a power of 2\r\n// because every log2(base) bits corresponds to a single character, i.e. every\r\n// log2(32) = 5 bits. That means we can lop bits off the end 5 at a time without\r\n// affecting the final result.\r\n\r\nimport type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\r\n\r\nimport {getIsHydrating} from './ReactFiberHydrationContext.old';\r\nimport {clz32} from './clz32';\r\nimport {Forked, NoFlags} from './ReactFiberFlags';\r\n\r\nexport type TreeContext = {\r\n  id: number,\r\n  overflow: string,\r\n};\r\n\r\n// TODO: Use the unified fiber stack module instead of this local one?\r\n// Intentionally not using it yet to derisk the initial implementation, because\r\n// the way we push/pop these values is a bit unusual. If there's a mistake, I'd\r\n// rather the ids be wrong than crash the whole reconciler.\r\nconst forkStack: Array<any> = [];\r\nlet forkStackIndex: number = 0;\r\nlet treeForkProvider: Fiber | null = null;\r\nlet treeForkCount: number = 0;\r\n\r\nconst idStack: Array<any> = [];\r\nlet idStackIndex: number = 0;\r\nlet treeContextProvider: Fiber | null = null;\r\nlet treeContextId: number = 1;\r\nlet treeContextOverflow: string = '';\r\n\r\nexport function isForkedChild(workInProgress: Fiber): boolean {\r\n  warnIfNotHydrating();\r\n  return (workInProgress.flags & Forked) !== NoFlags;\r\n}\r\n\r\nexport function getForksAtLevel(workInProgress: Fiber): number {\r\n  warnIfNotHydrating();\r\n  return treeForkCount;\r\n}\r\n\r\nexport function getTreeId(): string {\r\n  const overflow = treeContextOverflow;\r\n  const idWithLeadingBit = treeContextId;\r\n  const id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);\r\n  return id.toString(32) + overflow;\r\n}\r\n\r\nexport function pushTreeFork(\r\n  workInProgress: Fiber,\r\n  totalChildren: number,\r\n): void {\r\n  // This is called right after we reconcile an array (or iterator) of child\r\n  // fibers, because that's the only place where we know how many children in\r\n  // the whole set without doing extra work later, or storing addtional\r\n  // information on the fiber.\r\n  //\r\n  // That's why this function is separate from pushTreeId — it's called during\r\n  // the render phase of the fork parent, not the child, which is where we push\r\n  // the other context values.\r\n  //\r\n  // In the Fizz implementation this is much simpler because the child is\r\n  // rendered in the same callstack as the parent.\r\n  //\r\n  // It might be better to just add a `forks` field to the Fiber type. It would\r\n  // make this module simpler.\r\n\r\n  warnIfNotHydrating();\r\n\r\n  forkStack[forkStackIndex++] = treeForkCount;\r\n  forkStack[forkStackIndex++] = treeForkProvider;\r\n\r\n  treeForkProvider = workInProgress;\r\n  treeForkCount = totalChildren;\r\n}\r\n\r\nexport function pushTreeId(\r\n  workInProgress: Fiber,\r\n  totalChildren: number,\r\n  index: number,\r\n) {\r\n  warnIfNotHydrating();\r\n\r\n  idStack[idStackIndex++] = treeContextId;\r\n  idStack[idStackIndex++] = treeContextOverflow;\r\n  idStack[idStackIndex++] = treeContextProvider;\r\n\r\n  treeContextProvider = workInProgress;\r\n\r\n  const baseIdWithLeadingBit = treeContextId;\r\n  const baseOverflow = treeContextOverflow;\r\n\r\n  // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part\r\n  // of the id; we use it to account for leading 0s.\r\n  const baseLength = getBitLength(baseIdWithLeadingBit) - 1;\r\n  const baseId = baseIdWithLeadingBit & ~(1 << baseLength);\r\n\r\n  const slot = index + 1;\r\n  const length = getBitLength(totalChildren) + baseLength;\r\n\r\n  // 30 is the max length we can store without overflowing, taking into\r\n  // consideration the leading 1 we use to mark the end of the sequence.\r\n  if (length > 30) {\r\n    // We overflowed the bitwise-safe range. Fall back to slower algorithm.\r\n    // This branch assumes the length of the base id is greater than 5; it won't\r\n    // work for smaller ids, because you need 5 bits per character.\r\n    //\r\n    // We encode the id in multiple steps: first the base id, then the\r\n    // remaining digits.\r\n    //\r\n    // Each 5 bit sequence corresponds to a single base 32 character. So for\r\n    // example, if the current id is 23 bits long, we can convert 20 of those\r\n    // bits into a string of 4 characters, with 3 bits left over.\r\n    //\r\n    // First calculate how many bits in the base id represent a complete\r\n    // sequence of characters.\r\n    const numberOfOverflowBits = baseLength - (baseLength % 5);\r\n\r\n    // Then create a bitmask that selects only those bits.\r\n    const newOverflowBits = (1 << numberOfOverflowBits) - 1;\r\n\r\n    // Select the bits, and convert them to a base 32 string.\r\n    const newOverflow = (baseId & newOverflowBits).toString(32);\r\n\r\n    // Now we can remove those bits from the base id.\r\n    const restOfBaseId = baseId >> numberOfOverflowBits;\r\n    const restOfBaseLength = baseLength - numberOfOverflowBits;\r\n\r\n    // Finally, encode the rest of the bits using the normal algorithm. Because\r\n    // we made more room, this time it won't overflow.\r\n    const restOfLength = getBitLength(totalChildren) + restOfBaseLength;\r\n    const restOfNewBits = slot << restOfBaseLength;\r\n    const id = restOfNewBits | restOfBaseId;\r\n    const overflow = newOverflow + baseOverflow;\r\n\r\n    treeContextId = (1 << restOfLength) | id;\r\n    treeContextOverflow = overflow;\r\n  } else {\r\n    // Normal path\r\n    const newBits = slot << baseLength;\r\n    const id = newBits | baseId;\r\n    const overflow = baseOverflow;\r\n\r\n    treeContextId = (1 << length) | id;\r\n    treeContextOverflow = overflow;\r\n  }\r\n}\r\n\r\nexport function pushMaterializedTreeId(workInProgress: Fiber) {\r\n  warnIfNotHydrating();\r\n\r\n  // This component materialized an id. This will affect any ids that appear\r\n  // in its children.\r\n  const returnFiber = workInProgress.return;\r\n  if (returnFiber !== null) {\r\n    const numberOfForks = 1;\r\n    const slotIndex = 0;\r\n    pushTreeFork(workInProgress, numberOfForks);\r\n    pushTreeId(workInProgress, numberOfForks, slotIndex);\r\n  }\r\n}\r\n\r\nfunction getBitLength(number: number): number {\r\n  return 32 - clz32(number);\r\n}\r\n\r\nfunction getLeadingBit(id: number) {\r\n  return 1 << (getBitLength(id) - 1);\r\n}\r\n\r\nexport function popTreeContext(workInProgress: Fiber) {\r\n  // Restore the previous values.\r\n\r\n  // This is a bit more complicated than other context-like modules in Fiber\r\n  // because the same Fiber may appear on the stack multiple times and for\r\n  // different reasons. We have to keep popping until the work-in-progress is\r\n  // no longer at the top of the stack.\r\n\r\n  while (workInProgress === treeForkProvider) {\r\n    treeForkProvider = forkStack[--forkStackIndex];\r\n    forkStack[forkStackIndex] = null;\r\n    treeForkCount = forkStack[--forkStackIndex];\r\n    forkStack[forkStackIndex] = null;\r\n  }\r\n\r\n  while (workInProgress === treeContextProvider) {\r\n    treeContextProvider = idStack[--idStackIndex];\r\n    idStack[idStackIndex] = null;\r\n    treeContextOverflow = idStack[--idStackIndex];\r\n    idStack[idStackIndex] = null;\r\n    treeContextId = idStack[--idStackIndex];\r\n    idStack[idStackIndex] = null;\r\n  }\r\n}\r\n\r\nexport function getSuspendedTreeContext(): TreeContext | null {\r\n  warnIfNotHydrating();\r\n  if (treeContextProvider !== null) {\r\n    return {\r\n      id: treeContextId,\r\n      overflow: treeContextOverflow,\r\n    };\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function restoreSuspendedTreeContext(\r\n  workInProgress: Fiber,\r\n  suspendedContext: TreeContext,\r\n) {\r\n  warnIfNotHydrating();\r\n\r\n  idStack[idStackIndex++] = treeContextId;\r\n  idStack[idStackIndex++] = treeContextOverflow;\r\n  idStack[idStackIndex++] = treeContextProvider;\r\n\r\n  treeContextId = suspendedContext.id;\r\n  treeContextOverflow = suspendedContext.overflow;\r\n  treeContextProvider = workInProgress;\r\n}\r\n\r\nfunction warnIfNotHydrating() {\r\n  if (__DEV__) {\r\n    if (!getIsHydrating()) {\r\n      console.error(\r\n        'Expected to be hydrating. This is a bug in React. Please file ' +\r\n          'an issue.',\r\n      );\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {Fiber} from './ReactInternalTypes';\r\nimport type {StackCursor} from './ReactFiberStack.old';\r\nimport type {Container, HostContext} from './ReactFiberHostConfig';\r\n\r\nimport {getChildHostContext, getRootHostContext} from './ReactFiberHostConfig';\r\nimport {createCursor, push, pop} from './ReactFiberStack.old';\r\n\r\ndeclare class NoContextT {}\r\nconst NO_CONTEXT: NoContextT = ({}: any);\r\n\r\nconst contextStackCursor: StackCursor<HostContext | NoContextT> = createCursor(\r\n  NO_CONTEXT,\r\n);\r\nconst contextFiberStackCursor: StackCursor<Fiber | NoContextT> = createCursor(\r\n  NO_CONTEXT,\r\n);\r\nconst rootInstanceStackCursor: StackCursor<\r\n  Container | NoContextT,\r\n> = createCursor(NO_CONTEXT);\r\n\r\nfunction requiredContext<Value>(c: Value | NoContextT): Value {\r\n  if (c === NO_CONTEXT) {\r\n    throw new Error(\r\n      'Expected host context to exist. This error is likely caused by a bug ' +\r\n        'in React. Please file an issue.',\r\n    );\r\n  }\r\n\r\n  return (c: any);\r\n}\r\n\r\nfunction getRootHostContainer(): Container {\r\n  const rootInstance = requiredContext(rootInstanceStackCursor.current);\r\n  return rootInstance;\r\n}\r\n\r\nfunction pushHostContainer(fiber: Fiber, nextRootInstance: Container) {\r\n  // Push current root instance onto the stack;\r\n  // This allows us to reset root when portals are popped.\r\n  push(rootInstanceStackCursor, nextRootInstance, fiber);\r\n  // Track the context and the Fiber that provided it.\r\n  // This enables us to pop only Fibers that provide unique contexts.\r\n  push(contextFiberStackCursor, fiber, fiber);\r\n\r\n  // Finally, we need to push the host context to the stack.\r\n  // However, we can't just call getRootHostContext() and push it because\r\n  // we'd have a different number of entries on the stack depending on\r\n  // whether getRootHostContext() throws somewhere in renderer code or not.\r\n  // So we push an empty value first. This lets us safely unwind on errors.\r\n  push(contextStackCursor, NO_CONTEXT, fiber);\r\n  const nextRootContext = getRootHostContext(nextRootInstance);\r\n  // Now that we know this function doesn't throw, replace it.\r\n  pop(contextStackCursor, fiber);\r\n  push(contextStackCursor, nextRootContext, fiber);\r\n}\r\n\r\nfunction popHostContainer(fiber: Fiber) {\r\n  pop(contextStackCursor, fiber);\r\n  pop(contextFiberStackCursor, fiber);\r\n  pop(rootInstanceStackCursor, fiber);\r\n}\r\n\r\nfunction getHostContext(): HostContext {\r\n  const context = requiredContext(contextStackCursor.current);\r\n  return context;\r\n}\r\n\r\nfunction pushHostContext(fiber: Fiber): void {\r\n  const context: HostContext = requiredContext(contextStackCursor.current);\r\n  const nextContext = getChildHostContext(context, fiber.type);\r\n\r\n  // Don't push this Fiber's context unless it's unique.\r\n  if (context === nextContext) {\r\n    return;\r\n  }\r\n\r\n  // Track the context and the Fiber that provided it.\r\n  // This enables us to pop only Fibers that provide unique contexts.\r\n  push(contextFiberStackCursor, fiber, fiber);\r\n  push(contextStackCursor, nextContext, fiber);\r\n}\r\n\r\nfunction popHostContext(fiber: Fiber): void {\r\n  // Do not pop unless this Fiber provided the current context.\r\n  // pushHostContext() only pushes Fibers that provide unique contexts.\r\n  if (contextFiberStackCursor.current !== fiber) {\r\n    return;\r\n  }\r\n\r\n  pop(contextStackCursor, fiber);\r\n  pop(contextFiberStackCursor, fiber);\r\n}\r\n\r\nexport {\r\n  getHostContext,\r\n  getRootHostContainer,\r\n  popHostContainer,\r\n  popHostContext,\r\n  pushHostContainer,\r\n  pushHostContext,\r\n};\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {Fiber} from './ReactInternalTypes';\r\nimport {NoMode, ConcurrentMode} from './ReactTypeOfMode';\r\nimport type {\r\n  Instance,\r\n  TextInstance,\r\n  HydratableInstance,\r\n  SuspenseInstance,\r\n  Container,\r\n  HostContext,\r\n} from './ReactFiberHostConfig';\r\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\r\nimport type {TreeContext} from './ReactFiberTreeContext.old';\r\nimport type {CapturedValue} from './ReactCapturedValue';\r\n\r\nimport {\r\n  HostComponent,\r\n  HostText,\r\n  HostRoot,\r\n  SuspenseComponent,\r\n} from './ReactWorkTags';\r\nimport {\r\n  ChildDeletion,\r\n  Placement,\r\n  Hydrating,\r\n  NoFlags,\r\n  DidCapture,\r\n} from './ReactFiberFlags';\r\nimport {enableFloat} from 'shared/ReactFeatureFlags';\r\n\r\nimport {\r\n  createFiberFromHostInstanceForDeletion,\r\n  createFiberFromDehydratedFragment,\r\n} from './ReactFiber.old';\r\nimport {\r\n  shouldSetTextContent,\r\n  supportsHydration,\r\n  canHydrateInstance,\r\n  canHydrateTextInstance,\r\n  canHydrateSuspenseInstance,\r\n  isHydratableResource,\r\n  getNextHydratableSibling,\r\n  getMatchingResourceInstance,\r\n  getFirstHydratableChild,\r\n  getFirstHydratableChildWithinContainer,\r\n  getFirstHydratableChildWithinSuspenseInstance,\r\n  hydrateInstance,\r\n  hydrateTextInstance,\r\n  hydrateSuspenseInstance,\r\n  getNextHydratableInstanceAfterSuspenseInstance,\r\n  shouldDeleteUnhydratedTailInstances,\r\n  didNotMatchHydratedContainerTextInstance,\r\n  didNotMatchHydratedTextInstance,\r\n  didNotHydrateInstanceWithinContainer,\r\n  didNotHydrateInstanceWithinSuspenseInstance,\r\n  didNotHydrateInstance,\r\n  didNotFindHydratableInstanceWithinContainer,\r\n  didNotFindHydratableTextInstanceWithinContainer,\r\n  didNotFindHydratableSuspenseInstanceWithinContainer,\r\n  didNotFindHydratableInstanceWithinSuspenseInstance,\r\n  didNotFindHydratableTextInstanceWithinSuspenseInstance,\r\n  didNotFindHydratableSuspenseInstanceWithinSuspenseInstance,\r\n  didNotFindHydratableInstance,\r\n  didNotFindHydratableTextInstance,\r\n  didNotFindHydratableSuspenseInstance,\r\n} from './ReactFiberHostConfig';\r\nimport {OffscreenLane} from './ReactFiberLane.old';\r\nimport {\r\n  getSuspendedTreeContext,\r\n  restoreSuspendedTreeContext,\r\n} from './ReactFiberTreeContext.old';\r\nimport {queueRecoverableErrors} from './ReactFiberWorkLoop.old';\r\nimport {getRootHostContainer} from './ReactFiberHostContext.old';\r\n\r\n// The deepest Fiber on the stack involved in a hydration context.\r\n// This may have been an insertion or a hydration.\r\nlet hydrationParentFiber: null | Fiber = null;\r\nlet nextHydratableInstance: null | HydratableInstance = null;\r\nlet isHydrating: boolean = false;\r\n\r\n// This flag allows for warning supression when we expect there to be mismatches\r\n// due to earlier mismatches or a suspended fiber.\r\nlet didSuspendOrErrorDEV: boolean = false;\r\n\r\n// Hydration errors that were thrown inside this boundary\r\nlet hydrationErrors: Array<CapturedValue<mixed>> | null = null;\r\n\r\nfunction warnIfHydrating() {\r\n  if (__DEV__) {\r\n    if (isHydrating) {\r\n      console.error(\r\n        'We should not be hydrating here. This is a bug in React. Please file a bug.',\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport function markDidThrowWhileHydratingDEV() {\r\n  if (__DEV__) {\r\n    didSuspendOrErrorDEV = true;\r\n  }\r\n}\r\n\r\nexport function didSuspendOrErrorWhileHydratingDEV(): boolean {\r\n  if (__DEV__) {\r\n    return didSuspendOrErrorDEV;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction enterHydrationState(fiber: Fiber): boolean {\r\n  if (!supportsHydration) {\r\n    return false;\r\n  }\r\n\r\n  const parentInstance: Container = fiber.stateNode.containerInfo;\r\n  nextHydratableInstance = getFirstHydratableChildWithinContainer(\r\n    parentInstance,\r\n  );\r\n  hydrationParentFiber = fiber;\r\n  isHydrating = true;\r\n  hydrationErrors = null;\r\n  didSuspendOrErrorDEV = false;\r\n  return true;\r\n}\r\n\r\nfunction reenterHydrationStateFromDehydratedSuspenseInstance(\r\n  fiber: Fiber,\r\n  suspenseInstance: SuspenseInstance,\r\n  treeContext: TreeContext | null,\r\n): boolean {\r\n  if (!supportsHydration) {\r\n    return false;\r\n  }\r\n  nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(\r\n    suspenseInstance,\r\n  );\r\n  hydrationParentFiber = fiber;\r\n  isHydrating = true;\r\n  hydrationErrors = null;\r\n  didSuspendOrErrorDEV = false;\r\n  if (treeContext !== null) {\r\n    restoreSuspendedTreeContext(fiber, treeContext);\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction warnUnhydratedInstance(\r\n  returnFiber: Fiber,\r\n  instance: HydratableInstance,\r\n) {\r\n  if (__DEV__) {\r\n    switch (returnFiber.tag) {\r\n      case HostRoot: {\r\n        didNotHydrateInstanceWithinContainer(\r\n          returnFiber.stateNode.containerInfo,\r\n          instance,\r\n        );\r\n        break;\r\n      }\r\n      case HostComponent: {\r\n        const isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\r\n        didNotHydrateInstance(\r\n          returnFiber.type,\r\n          returnFiber.memoizedProps,\r\n          returnFiber.stateNode,\r\n          instance,\r\n          // TODO: Delete this argument when we remove the legacy root API.\r\n          isConcurrentMode,\r\n        );\r\n        break;\r\n      }\r\n      case SuspenseComponent: {\r\n        const suspenseState: SuspenseState = returnFiber.memoizedState;\r\n        if (suspenseState.dehydrated !== null)\r\n          didNotHydrateInstanceWithinSuspenseInstance(\r\n            suspenseState.dehydrated,\r\n            instance,\r\n          );\r\n        break;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction deleteHydratableInstance(\r\n  returnFiber: Fiber,\r\n  instance: HydratableInstance,\r\n) {\r\n  warnUnhydratedInstance(returnFiber, instance);\r\n  const childToDelete = createFiberFromHostInstanceForDeletion();\r\n  childToDelete.stateNode = instance;\r\n  childToDelete.return = returnFiber;\r\n\r\n  const deletions = returnFiber.deletions;\r\n  if (deletions === null) {\r\n    returnFiber.deletions = [childToDelete];\r\n    returnFiber.flags |= ChildDeletion;\r\n  } else {\r\n    deletions.push(childToDelete);\r\n  }\r\n}\r\n\r\nfunction warnNonhydratedInstance(returnFiber: Fiber, fiber: Fiber) {\r\n  if (__DEV__) {\r\n    if (didSuspendOrErrorDEV) {\r\n      // Inside a boundary that already suspended. We're currently rendering the\r\n      // siblings of a suspended node. The mismatch may be due to the missing\r\n      // data, so it's probably a false positive.\r\n      return;\r\n    }\r\n\r\n    switch (returnFiber.tag) {\r\n      case HostRoot: {\r\n        const parentContainer = returnFiber.stateNode.containerInfo;\r\n        switch (fiber.tag) {\r\n          case HostComponent:\r\n            const type = fiber.type;\r\n            const props = fiber.pendingProps;\r\n            didNotFindHydratableInstanceWithinContainer(\r\n              parentContainer,\r\n              type,\r\n              props,\r\n            );\r\n            break;\r\n          case HostText:\r\n            const text = fiber.pendingProps;\r\n            didNotFindHydratableTextInstanceWithinContainer(\r\n              parentContainer,\r\n              text,\r\n            );\r\n            break;\r\n          case SuspenseComponent:\r\n            didNotFindHydratableSuspenseInstanceWithinContainer(\r\n              parentContainer,\r\n            );\r\n            break;\r\n        }\r\n        break;\r\n      }\r\n      case HostComponent: {\r\n        const parentType = returnFiber.type;\r\n        const parentProps = returnFiber.memoizedProps;\r\n        const parentInstance = returnFiber.stateNode;\r\n        switch (fiber.tag) {\r\n          case HostComponent: {\r\n            const type = fiber.type;\r\n            const props = fiber.pendingProps;\r\n            const isConcurrentMode =\r\n              (returnFiber.mode & ConcurrentMode) !== NoMode;\r\n            didNotFindHydratableInstance(\r\n              parentType,\r\n              parentProps,\r\n              parentInstance,\r\n              type,\r\n              props,\r\n              // TODO: Delete this argument when we remove the legacy root API.\r\n              isConcurrentMode,\r\n            );\r\n            break;\r\n          }\r\n          case HostText: {\r\n            const text = fiber.pendingProps;\r\n            const isConcurrentMode =\r\n              (returnFiber.mode & ConcurrentMode) !== NoMode;\r\n            didNotFindHydratableTextInstance(\r\n              parentType,\r\n              parentProps,\r\n              parentInstance,\r\n              text,\r\n              // TODO: Delete this argument when we remove the legacy root API.\r\n              isConcurrentMode,\r\n            );\r\n            break;\r\n          }\r\n          case SuspenseComponent: {\r\n            didNotFindHydratableSuspenseInstance(\r\n              parentType,\r\n              parentProps,\r\n              parentInstance,\r\n            );\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case SuspenseComponent: {\r\n        const suspenseState: SuspenseState = returnFiber.memoizedState;\r\n        const parentInstance = suspenseState.dehydrated;\r\n        if (parentInstance !== null)\r\n          switch (fiber.tag) {\r\n            case HostComponent:\r\n              const type = fiber.type;\r\n              const props = fiber.pendingProps;\r\n              didNotFindHydratableInstanceWithinSuspenseInstance(\r\n                parentInstance,\r\n                type,\r\n                props,\r\n              );\r\n              break;\r\n            case HostText:\r\n              const text = fiber.pendingProps;\r\n              didNotFindHydratableTextInstanceWithinSuspenseInstance(\r\n                parentInstance,\r\n                text,\r\n              );\r\n              break;\r\n            case SuspenseComponent:\r\n              didNotFindHydratableSuspenseInstanceWithinSuspenseInstance(\r\n                parentInstance,\r\n              );\r\n              break;\r\n          }\r\n        break;\r\n      }\r\n      default:\r\n        return;\r\n    }\r\n  }\r\n}\r\nfunction insertNonHydratedInstance(returnFiber: Fiber, fiber: Fiber) {\r\n  fiber.flags = (fiber.flags & ~Hydrating) | Placement;\r\n  warnNonhydratedInstance(returnFiber, fiber);\r\n}\r\n\r\nfunction tryHydrate(fiber, nextInstance) {\r\n  switch (fiber.tag) {\r\n    case HostComponent: {\r\n      const type = fiber.type;\r\n      const props = fiber.pendingProps;\r\n      const instance = canHydrateInstance(nextInstance, type, props);\r\n      if (instance !== null) {\r\n        fiber.stateNode = (instance: Instance);\r\n        hydrationParentFiber = fiber;\r\n        nextHydratableInstance = getFirstHydratableChild(instance);\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n    case HostText: {\r\n      const text = fiber.pendingProps;\r\n      const textInstance = canHydrateTextInstance(nextInstance, text);\r\n      if (textInstance !== null) {\r\n        fiber.stateNode = (textInstance: TextInstance);\r\n        hydrationParentFiber = fiber;\r\n        // Text Instances don't have children so there's nothing to hydrate.\r\n        nextHydratableInstance = null;\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n    case SuspenseComponent: {\r\n      const suspenseInstance: null | SuspenseInstance = canHydrateSuspenseInstance(\r\n        nextInstance,\r\n      );\r\n      if (suspenseInstance !== null) {\r\n        const suspenseState: SuspenseState = {\r\n          dehydrated: suspenseInstance,\r\n          treeContext: getSuspendedTreeContext(),\r\n          retryLane: OffscreenLane,\r\n        };\r\n        fiber.memoizedState = suspenseState;\r\n        // Store the dehydrated fragment as a child fiber.\r\n        // This simplifies the code for getHostSibling and deleting nodes,\r\n        // since it doesn't have to consider all Suspense boundaries and\r\n        // check if they're dehydrated ones or not.\r\n        const dehydratedFragment = createFiberFromDehydratedFragment(\r\n          suspenseInstance,\r\n        );\r\n        dehydratedFragment.return = fiber;\r\n        fiber.child = dehydratedFragment;\r\n        hydrationParentFiber = fiber;\r\n        // While a Suspense Instance does have children, we won't step into\r\n        // it during the first pass. Instead, we'll reenter it later.\r\n        nextHydratableInstance = null;\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n    default:\r\n      return false;\r\n  }\r\n}\r\n\r\nfunction shouldClientRenderOnMismatch(fiber: Fiber) {\r\n  return (\r\n    (fiber.mode & ConcurrentMode) !== NoMode &&\r\n    (fiber.flags & DidCapture) === NoFlags\r\n  );\r\n}\r\n\r\nfunction throwOnHydrationMismatch(fiber: Fiber) {\r\n  throw new Error(\r\n    'Hydration failed because the initial UI does not match what was ' +\r\n      'rendered on the server.',\r\n  );\r\n}\r\n\r\nfunction tryToClaimNextHydratableInstance(fiber: Fiber): void {\r\n  if (!isHydrating) {\r\n    return;\r\n  }\r\n  if (enableFloat) {\r\n    if (\r\n      fiber.tag === HostComponent &&\r\n      isHydratableResource(fiber.type, fiber.pendingProps)\r\n    ) {\r\n      fiber.stateNode = getMatchingResourceInstance(\r\n        fiber.type,\r\n        fiber.pendingProps,\r\n        getRootHostContainer(),\r\n      );\r\n      return;\r\n    }\r\n  }\r\n  let nextInstance = nextHydratableInstance;\r\n  if (!nextInstance) {\r\n    if (shouldClientRenderOnMismatch(fiber)) {\r\n      warnNonhydratedInstance((hydrationParentFiber: any), fiber);\r\n      throwOnHydrationMismatch(fiber);\r\n    }\r\n    // Nothing to hydrate. Make it an insertion.\r\n    insertNonHydratedInstance((hydrationParentFiber: any), fiber);\r\n    isHydrating = false;\r\n    hydrationParentFiber = fiber;\r\n    return;\r\n  }\r\n  const firstAttemptedInstance = nextInstance;\r\n  if (!tryHydrate(fiber, nextInstance)) {\r\n    if (shouldClientRenderOnMismatch(fiber)) {\r\n      warnNonhydratedInstance((hydrationParentFiber: any), fiber);\r\n      throwOnHydrationMismatch(fiber);\r\n    }\r\n    // If we can't hydrate this instance let's try the next one.\r\n    // We use this as a heuristic. It's based on intuition and not data so it\r\n    // might be flawed or unnecessary.\r\n    nextInstance = getNextHydratableSibling(firstAttemptedInstance);\r\n    const prevHydrationParentFiber: Fiber = (hydrationParentFiber: any);\r\n    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {\r\n      // Nothing to hydrate. Make it an insertion.\r\n      insertNonHydratedInstance((hydrationParentFiber: any), fiber);\r\n      isHydrating = false;\r\n      hydrationParentFiber = fiber;\r\n      return;\r\n    }\r\n    // We matched the next one, we'll now assume that the first one was\r\n    // superfluous and we'll delete it. Since we can't eagerly delete it\r\n    // we'll have to schedule a deletion. To do that, this node needs a dummy\r\n    // fiber associated with it.\r\n    deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);\r\n  }\r\n}\r\n\r\nfunction prepareToHydrateHostInstance(\r\n  fiber: Fiber,\r\n  hostContext: HostContext,\r\n): boolean {\r\n  if (!supportsHydration) {\r\n    throw new Error(\r\n      'Expected prepareToHydrateHostInstance() to never be called. ' +\r\n        'This error is likely caused by a bug in React. Please file an issue.',\r\n    );\r\n  }\r\n\r\n  const instance: Instance = fiber.stateNode;\r\n  const shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;\r\n  const updatePayload = hydrateInstance(\r\n    instance,\r\n    fiber.type,\r\n    fiber.memoizedProps,\r\n    hostContext,\r\n    fiber,\r\n    shouldWarnIfMismatchDev,\r\n  );\r\n  // TODO: Type this specific to this type of component.\r\n  fiber.updateQueue = (updatePayload: any);\r\n  // If the update payload indicates that there is a change or if there\r\n  // is a new ref we mark this as an update.\r\n  if (updatePayload !== null) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction prepareToHydrateHostTextInstance(fiber: Fiber): boolean {\r\n  if (!supportsHydration) {\r\n    throw new Error(\r\n      'Expected prepareToHydrateHostTextInstance() to never be called. ' +\r\n        'This error is likely caused by a bug in React. Please file an issue.',\r\n    );\r\n  }\r\n\r\n  const textInstance: TextInstance = fiber.stateNode;\r\n  const textContent: string = fiber.memoizedProps;\r\n  const shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;\r\n  const shouldUpdate = hydrateTextInstance(\r\n    textInstance,\r\n    textContent,\r\n    fiber,\r\n    shouldWarnIfMismatchDev,\r\n  );\r\n  if (shouldUpdate) {\r\n    // We assume that prepareToHydrateHostTextInstance is called in a context where the\r\n    // hydration parent is the parent host component of this host text.\r\n    const returnFiber = hydrationParentFiber;\r\n    if (returnFiber !== null) {\r\n      switch (returnFiber.tag) {\r\n        case HostRoot: {\r\n          const parentContainer = returnFiber.stateNode.containerInfo;\r\n          const isConcurrentMode =\r\n            (returnFiber.mode & ConcurrentMode) !== NoMode;\r\n          didNotMatchHydratedContainerTextInstance(\r\n            parentContainer,\r\n            textInstance,\r\n            textContent,\r\n            // TODO: Delete this argument when we remove the legacy root API.\r\n            isConcurrentMode,\r\n            shouldWarnIfMismatchDev,\r\n          );\r\n          break;\r\n        }\r\n        case HostComponent: {\r\n          const parentType = returnFiber.type;\r\n          const parentProps = returnFiber.memoizedProps;\r\n          const parentInstance = returnFiber.stateNode;\r\n          const isConcurrentMode =\r\n            (returnFiber.mode & ConcurrentMode) !== NoMode;\r\n          didNotMatchHydratedTextInstance(\r\n            parentType,\r\n            parentProps,\r\n            parentInstance,\r\n            textInstance,\r\n            textContent,\r\n            // TODO: Delete this argument when we remove the legacy root API.\r\n            isConcurrentMode,\r\n            shouldWarnIfMismatchDev,\r\n          );\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return shouldUpdate;\r\n}\r\n\r\nfunction prepareToHydrateHostSuspenseInstance(fiber: Fiber): void {\r\n  if (!supportsHydration) {\r\n    throw new Error(\r\n      'Expected prepareToHydrateHostSuspenseInstance() to never be called. ' +\r\n        'This error is likely caused by a bug in React. Please file an issue.',\r\n    );\r\n  }\r\n\r\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\r\n  const suspenseInstance: null | SuspenseInstance =\r\n    suspenseState !== null ? suspenseState.dehydrated : null;\r\n\r\n  if (!suspenseInstance) {\r\n    throw new Error(\r\n      'Expected to have a hydrated suspense instance. ' +\r\n        'This error is likely caused by a bug in React. Please file an issue.',\r\n    );\r\n  }\r\n\r\n  hydrateSuspenseInstance(suspenseInstance, fiber);\r\n}\r\n\r\nfunction skipPastDehydratedSuspenseInstance(\r\n  fiber: Fiber,\r\n): null | HydratableInstance {\r\n  if (!supportsHydration) {\r\n    throw new Error(\r\n      'Expected skipPastDehydratedSuspenseInstance() to never be called. ' +\r\n        'This error is likely caused by a bug in React. Please file an issue.',\r\n    );\r\n  }\r\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\r\n  const suspenseInstance: null | SuspenseInstance =\r\n    suspenseState !== null ? suspenseState.dehydrated : null;\r\n\r\n  if (!suspenseInstance) {\r\n    throw new Error(\r\n      'Expected to have a hydrated suspense instance. ' +\r\n        'This error is likely caused by a bug in React. Please file an issue.',\r\n    );\r\n  }\r\n\r\n  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);\r\n}\r\n\r\nfunction popToNextHostParent(fiber: Fiber): void {\r\n  let parent = fiber.return;\r\n  while (\r\n    parent !== null &&\r\n    parent.tag !== HostComponent &&\r\n    parent.tag !== HostRoot &&\r\n    parent.tag !== SuspenseComponent\r\n  ) {\r\n    parent = parent.return;\r\n  }\r\n  hydrationParentFiber = parent;\r\n}\r\n\r\nfunction popHydrationState(fiber: Fiber): boolean {\r\n  if (!supportsHydration) {\r\n    return false;\r\n  }\r\n  if (\r\n    enableFloat &&\r\n    isHydrating &&\r\n    isHydratableResource(fiber.type, fiber.memoizedProps)\r\n  ) {\r\n    if (fiber.stateNode === null) {\r\n      if (__DEV__) {\r\n        const rel = fiber.memoizedProps.rel\r\n          ? `rel=\"${fiber.memoizedProps.rel}\" `\r\n          : '';\r\n        const href = fiber.memoizedProps.href\r\n          ? `href=\"${fiber.memoizedProps.href}\"`\r\n          : '';\r\n        console.error(\r\n          'A matching Hydratable Resource was not found in the DOM for <%s %s%s>.',\r\n          fiber.type,\r\n          rel,\r\n          href,\r\n        );\r\n      }\r\n      throwOnHydrationMismatch(fiber);\r\n    }\r\n    return true;\r\n  }\r\n  if (fiber !== hydrationParentFiber) {\r\n    // We're deeper than the current hydration context, inside an inserted\r\n    // tree.\r\n    return false;\r\n  }\r\n  if (!isHydrating) {\r\n    // If we're not currently hydrating but we're in a hydration context, then\r\n    // we were an insertion and now need to pop up reenter hydration of our\r\n    // siblings.\r\n    popToNextHostParent(fiber);\r\n    isHydrating = true;\r\n    return false;\r\n  }\r\n\r\n  // If we have any remaining hydratable nodes, we need to delete them now.\r\n  // We only do this deeper than head and body since they tend to have random\r\n  // other nodes in them. We also ignore components with pure text content in\r\n  // side of them. We also don't delete anything inside the root container.\r\n  if (\r\n    fiber.tag !== HostRoot &&\r\n    (fiber.tag !== HostComponent ||\r\n      (shouldDeleteUnhydratedTailInstances(fiber.type) &&\r\n        !shouldSetTextContent(fiber.type, fiber.memoizedProps)))\r\n  ) {\r\n    let nextInstance = nextHydratableInstance;\r\n    if (nextInstance) {\r\n      if (shouldClientRenderOnMismatch(fiber)) {\r\n        warnIfUnhydratedTailNodes(fiber);\r\n        throwOnHydrationMismatch(fiber);\r\n      } else {\r\n        while (nextInstance) {\r\n          deleteHydratableInstance(fiber, nextInstance);\r\n          nextInstance = getNextHydratableSibling(nextInstance);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  popToNextHostParent(fiber);\r\n  if (fiber.tag === SuspenseComponent) {\r\n    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);\r\n  } else {\r\n    nextHydratableInstance = hydrationParentFiber\r\n      ? getNextHydratableSibling(fiber.stateNode)\r\n      : null;\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction hasUnhydratedTailNodes(): boolean {\r\n  return isHydrating && nextHydratableInstance !== null;\r\n}\r\n\r\nfunction warnIfUnhydratedTailNodes(fiber: Fiber) {\r\n  let nextInstance = nextHydratableInstance;\r\n  while (nextInstance) {\r\n    warnUnhydratedInstance(fiber, nextInstance);\r\n    nextInstance = getNextHydratableSibling(nextInstance);\r\n  }\r\n}\r\n\r\nfunction resetHydrationState(): void {\r\n  if (!supportsHydration) {\r\n    return;\r\n  }\r\n\r\n  hydrationParentFiber = null;\r\n  nextHydratableInstance = null;\r\n  isHydrating = false;\r\n  didSuspendOrErrorDEV = false;\r\n}\r\n\r\nexport function upgradeHydrationErrorsToRecoverable(): void {\r\n  if (hydrationErrors !== null) {\r\n    // Successfully completed a forced client render. The errors that occurred\r\n    // during the hydration attempt are now recovered. We will log them in\r\n    // commit phase, once the entire tree has finished.\r\n    queueRecoverableErrors(hydrationErrors);\r\n    hydrationErrors = null;\r\n  }\r\n}\r\n\r\nfunction getIsHydrating(): boolean {\r\n  return isHydrating;\r\n}\r\n\r\nexport function queueHydrationError(error: CapturedValue<mixed>): void {\r\n  if (hydrationErrors === null) {\r\n    hydrationErrors = [error];\r\n  } else {\r\n    hydrationErrors.push(error);\r\n  }\r\n}\r\n\r\nexport {\r\n  warnIfHydrating,\r\n  enterHydrationState,\r\n  getIsHydrating,\r\n  reenterHydrationStateFromDehydratedSuspenseInstance,\r\n  resetHydrationState,\r\n  tryToClaimNextHydratableInstance,\r\n  prepareToHydrateHostInstance,\r\n  prepareToHydrateHostTextInstance,\r\n  prepareToHydrateHostSuspenseInstance,\r\n  popHydrationState,\r\n  hasUnhydratedTailNodes,\r\n  warnIfUnhydratedTailNodes,\r\n};\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\r\nimport type {Transition} from './ReactFiberTracingMarkerComponent.new';\r\n\r\nconst {ReactCurrentBatchConfig} = ReactSharedInternals;\r\n\r\nexport const NoTransition = null;\r\n\r\nexport function requestCurrentTransition(): Transition | null {\r\n  return ReactCurrentBatchConfig.transition;\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport is from './objectIs';\r\nimport hasOwnProperty from './hasOwnProperty';\r\n\r\n/**\r\n * Performs equality by iterating through keys on an object and returning false\r\n * when any key has values which are not strictly equal between the arguments.\r\n * Returns true when the values of all keys are strictly equal.\r\n */\r\nfunction shallowEqual(objA: mixed, objB: mixed): boolean {\r\n  if (is(objA, objB)) {\r\n    return true;\r\n  }\r\n\r\n  if (\r\n    typeof objA !== 'object' ||\r\n    objA === null ||\r\n    typeof objB !== 'object' ||\r\n    objB === null\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  const keysA = Object.keys(objA);\r\n  const keysB = Object.keys(objB);\r\n\r\n  if (keysA.length !== keysB.length) {\r\n    return false;\r\n  }\r\n\r\n  // Test for A's keys different from B.\r\n  for (let i = 0; i < keysA.length; i++) {\r\n    const currentKey = keysA[i];\r\n    if (\r\n      !hasOwnProperty.call(objB, currentKey) ||\r\n      !is(objA[currentKey], objB[currentKey])\r\n    ) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nexport default shallowEqual;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {Fiber} from './ReactInternalTypes';\r\n\r\nimport {\r\n  HostComponent,\r\n  LazyComponent,\r\n  SuspenseComponent,\r\n  SuspenseListComponent,\r\n  FunctionComponent,\r\n  IndeterminateComponent,\r\n  ForwardRef,\r\n  SimpleMemoComponent,\r\n  ClassComponent,\r\n} from './ReactWorkTags';\r\nimport {\r\n  describeBuiltInComponentFrame,\r\n  describeFunctionComponentFrame,\r\n  describeClassComponentFrame,\r\n} from 'shared/ReactComponentStackFrame';\r\n\r\nfunction describeFiber(fiber: Fiber): string {\r\n  const owner: null | Function = __DEV__\r\n    ? fiber._debugOwner\r\n      ? fiber._debugOwner.type\r\n      : null\r\n    : null;\r\n  const source = __DEV__ ? fiber._debugSource : null;\r\n  switch (fiber.tag) {\r\n    case HostComponent:\r\n      return describeBuiltInComponentFrame(fiber.type, source, owner);\r\n    case LazyComponent:\r\n      return describeBuiltInComponentFrame('Lazy', source, owner);\r\n    case SuspenseComponent:\r\n      return describeBuiltInComponentFrame('Suspense', source, owner);\r\n    case SuspenseListComponent:\r\n      return describeBuiltInComponentFrame('SuspenseList', source, owner);\r\n    case FunctionComponent:\r\n    case IndeterminateComponent:\r\n    case SimpleMemoComponent:\r\n      return describeFunctionComponentFrame(fiber.type, source, owner);\r\n    case ForwardRef:\r\n      return describeFunctionComponentFrame(fiber.type.render, source, owner);\r\n    case ClassComponent:\r\n      return describeClassComponentFrame(fiber.type, source, owner);\r\n    default:\r\n      return '';\r\n  }\r\n}\r\n\r\nexport function getStackByFiberInDevAndProd(workInProgress: Fiber): string {\r\n  try {\r\n    let info = '';\r\n    let node = workInProgress;\r\n    do {\r\n      info += describeFiber(node);\r\n      node = node.return;\r\n    } while (node);\r\n    return info;\r\n  } catch (x) {\r\n    return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {Fiber} from './ReactInternalTypes';\r\n\r\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\r\nimport {getStackByFiberInDevAndProd} from './ReactFiberComponentStack';\r\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\r\n\r\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\r\n\r\nexport let current: Fiber | null = null;\r\nexport let isRendering: boolean = false;\r\n\r\nexport function getCurrentFiberOwnerNameInDevOrNull(): string | null {\r\n  if (__DEV__) {\r\n    if (current === null) {\r\n      return null;\r\n    }\r\n    const owner = current._debugOwner;\r\n    if (owner !== null && typeof owner !== 'undefined') {\r\n      return getComponentNameFromFiber(owner);\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction getCurrentFiberStackInDev(): string {\r\n  if (__DEV__) {\r\n    if (current === null) {\r\n      return '';\r\n    }\r\n    // Safe because if current fiber exists, we are reconciling,\r\n    // and it is guaranteed to be the work-in-progress version.\r\n    return getStackByFiberInDevAndProd(current);\r\n  }\r\n  return '';\r\n}\r\n\r\nexport function resetCurrentFiber() {\r\n  if (__DEV__) {\r\n    ReactDebugCurrentFrame.getCurrentStack = null;\r\n    current = null;\r\n    isRendering = false;\r\n  }\r\n}\r\n\r\nexport function setCurrentFiber(fiber: Fiber | null) {\r\n  if (__DEV__) {\r\n    ReactDebugCurrentFrame.getCurrentStack =\r\n      fiber === null ? null : getCurrentFiberStackInDev;\r\n    current = fiber;\r\n    isRendering = false;\r\n  }\r\n}\r\n\r\nexport function getCurrentFiber(): Fiber | null {\r\n  if (__DEV__) {\r\n    return current;\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function setIsRendering(rendering: boolean) {\r\n  if (__DEV__) {\r\n    isRendering = rendering;\r\n  }\r\n}\r\n\r\nexport function getIsRendering(): void | boolean {\r\n  if (__DEV__) {\r\n    return isRendering;\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport assign from 'shared/assign';\r\n\r\nexport function resolveDefaultProps(Component: any, baseProps: Object): Object {\r\n  if (Component && Component.defaultProps) {\r\n    // Resolve default props. Taken from ReactElement\r\n    const props = assign({}, baseProps);\r\n    const defaultProps = Component.defaultProps;\r\n    for (const propName in defaultProps) {\r\n      if (props[propName] === undefined) {\r\n        props[propName] = defaultProps[propName];\r\n      }\r\n    }\r\n    return props;\r\n  }\r\n  return baseProps;\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\r\nimport type {\r\n  Fiber,\r\n  ContextDependency,\r\n  Dependencies,\r\n} from './ReactInternalTypes';\r\nimport type {StackCursor} from './ReactFiberStack.old';\r\nimport type {Lanes} from './ReactFiberLane.old';\r\nimport type {SharedQueue} from './ReactFiberClassUpdateQueue.old';\r\n\r\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\r\nimport {createCursor, push, pop} from './ReactFiberStack.old';\r\nimport {\r\n  ContextProvider,\r\n  ClassComponent,\r\n  DehydratedFragment,\r\n} from './ReactWorkTags';\r\nimport {\r\n  NoLanes,\r\n  NoTimestamp,\r\n  isSubsetOfLanes,\r\n  includesSomeLane,\r\n  mergeLanes,\r\n  pickArbitraryLane,\r\n} from './ReactFiberLane.old';\r\nimport {\r\n  NoFlags,\r\n  DidPropagateContext,\r\n  NeedsPropagation,\r\n} from './ReactFiberFlags';\r\n\r\nimport is from 'shared/objectIs';\r\nimport {createUpdate, ForceUpdate} from './ReactFiberClassUpdateQueue.old';\r\nimport {markWorkInProgressReceivedUpdate} from './ReactFiberBeginWork.old';\r\nimport {\r\n  enableLazyContextPropagation,\r\n  enableServerContext,\r\n} from 'shared/ReactFeatureFlags';\r\nimport {REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED} from 'shared/ReactSymbols';\r\n\r\nconst valueCursor: StackCursor<mixed> = createCursor(null);\r\n\r\nlet rendererSigil;\r\nif (__DEV__) {\r\n  // Use this to detect multiple renderers using the same context\r\n  rendererSigil = {};\r\n}\r\n\r\nlet currentlyRenderingFiber: Fiber | null = null;\r\nlet lastContextDependency: ContextDependency<mixed> | null = null;\r\nlet lastFullyObservedContext: ReactContext<any> | null = null;\r\n\r\nlet isDisallowedContextReadInDEV: boolean = false;\r\n\r\nexport function resetContextDependencies(): void {\r\n  // This is called right before React yields execution, to ensure `readContext`\r\n  // cannot be called outside the render phase.\r\n  currentlyRenderingFiber = null;\r\n  lastContextDependency = null;\r\n  lastFullyObservedContext = null;\r\n  if (__DEV__) {\r\n    isDisallowedContextReadInDEV = false;\r\n  }\r\n}\r\n\r\nexport function enterDisallowedContextReadInDEV(): void {\r\n  if (__DEV__) {\r\n    isDisallowedContextReadInDEV = true;\r\n  }\r\n}\r\n\r\nexport function exitDisallowedContextReadInDEV(): void {\r\n  if (__DEV__) {\r\n    isDisallowedContextReadInDEV = false;\r\n  }\r\n}\r\n\r\nexport function pushProvider<T>(\r\n  providerFiber: Fiber,\r\n  context: ReactContext<T>,\r\n  nextValue: T,\r\n): void {\r\n  if (isPrimaryRenderer) {\r\n    push(valueCursor, context._currentValue, providerFiber);\r\n\r\n    context._currentValue = nextValue;\r\n    if (__DEV__) {\r\n      if (\r\n        context._currentRenderer !== undefined &&\r\n        context._currentRenderer !== null &&\r\n        context._currentRenderer !== rendererSigil\r\n      ) {\r\n        console.error(\r\n          'Detected multiple renderers concurrently rendering the ' +\r\n            'same context provider. This is currently unsupported.',\r\n        );\r\n      }\r\n      context._currentRenderer = rendererSigil;\r\n    }\r\n  } else {\r\n    push(valueCursor, context._currentValue2, providerFiber);\r\n\r\n    context._currentValue2 = nextValue;\r\n    if (__DEV__) {\r\n      if (\r\n        context._currentRenderer2 !== undefined &&\r\n        context._currentRenderer2 !== null &&\r\n        context._currentRenderer2 !== rendererSigil\r\n      ) {\r\n        console.error(\r\n          'Detected multiple renderers concurrently rendering the ' +\r\n            'same context provider. This is currently unsupported.',\r\n        );\r\n      }\r\n      context._currentRenderer2 = rendererSigil;\r\n    }\r\n  }\r\n}\r\n\r\nexport function popProvider(\r\n  context: ReactContext<any>,\r\n  providerFiber: Fiber,\r\n): void {\r\n  const currentValue = valueCursor.current;\r\n  pop(valueCursor, providerFiber);\r\n  if (isPrimaryRenderer) {\r\n    if (\r\n      enableServerContext &&\r\n      currentValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED\r\n    ) {\r\n      context._currentValue = context._defaultValue;\r\n    } else {\r\n      context._currentValue = currentValue;\r\n    }\r\n  } else {\r\n    if (\r\n      enableServerContext &&\r\n      currentValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED\r\n    ) {\r\n      context._currentValue2 = context._defaultValue;\r\n    } else {\r\n      context._currentValue2 = currentValue;\r\n    }\r\n  }\r\n}\r\n\r\nexport function scheduleContextWorkOnParentPath(\r\n  parent: Fiber | null,\r\n  renderLanes: Lanes,\r\n  propagationRoot: Fiber,\r\n) {\r\n  // Update the child lanes of all the ancestors, including the alternates.\r\n  let node = parent;\r\n  while (node !== null) {\r\n    const alternate = node.alternate;\r\n    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\r\n      node.childLanes = mergeLanes(node.childLanes, renderLanes);\r\n      if (alternate !== null) {\r\n        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\r\n      }\r\n    } else if (\r\n      alternate !== null &&\r\n      !isSubsetOfLanes(alternate.childLanes, renderLanes)\r\n    ) {\r\n      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\r\n    } else {\r\n      // Neither alternate was updated.\r\n      // Normally, this would mean that the rest of the\r\n      // ancestor path already has sufficient priority.\r\n      // However, this is not necessarily true inside offscreen\r\n      // or fallback trees because childLanes may be inconsistent\r\n      // with the surroundings. This is why we continue the loop.\r\n    }\r\n    if (node === propagationRoot) {\r\n      break;\r\n    }\r\n    node = node.return;\r\n  }\r\n  if (__DEV__) {\r\n    if (node !== propagationRoot) {\r\n      console.error(\r\n        'Expected to find the propagation root when scheduling context work. ' +\r\n          'This error is likely caused by a bug in React. Please file an issue.',\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport function propagateContextChange<T>(\r\n  workInProgress: Fiber,\r\n  context: ReactContext<T>,\r\n  renderLanes: Lanes,\r\n): void {\r\n  if (enableLazyContextPropagation) {\r\n    // TODO: This path is only used by Cache components. Update\r\n    // lazilyPropagateParentContextChanges to look for Cache components so they\r\n    // can take advantage of lazy propagation.\r\n    const forcePropagateEntireTree = true;\r\n    propagateContextChanges(\r\n      workInProgress,\r\n      [context],\r\n      renderLanes,\r\n      forcePropagateEntireTree,\r\n    );\r\n  } else {\r\n    propagateContextChange_eager(workInProgress, context, renderLanes);\r\n  }\r\n}\r\n\r\nfunction propagateContextChange_eager<T>(\r\n  workInProgress: Fiber,\r\n  context: ReactContext<T>,\r\n  renderLanes: Lanes,\r\n): void {\r\n  // Only used by eager implementation\r\n  if (enableLazyContextPropagation) {\r\n    return;\r\n  }\r\n  let fiber = workInProgress.child;\r\n  if (fiber !== null) {\r\n    // Set the return pointer of the child to the work-in-progress fiber.\r\n    fiber.return = workInProgress;\r\n  }\r\n  while (fiber !== null) {\r\n    let nextFiber;\r\n\r\n    // Visit this fiber.\r\n    const list = fiber.dependencies;\r\n    if (list !== null) {\r\n      nextFiber = fiber.child;\r\n\r\n      let dependency = list.firstContext;\r\n      while (dependency !== null) {\r\n        // Check if the context matches.\r\n        if (dependency.context === context) {\r\n          // Match! Schedule an update on this fiber.\r\n          if (fiber.tag === ClassComponent) {\r\n            // Schedule a force update on the work-in-progress.\r\n            const lane = pickArbitraryLane(renderLanes);\r\n            const update = createUpdate(NoTimestamp, lane);\r\n            update.tag = ForceUpdate;\r\n            // TODO: Because we don't have a work-in-progress, this will add the\r\n            // update to the current fiber, too, which means it will persist even if\r\n            // this render is thrown away. Since it's a race condition, not sure it's\r\n            // worth fixing.\r\n\r\n            // Inlined `enqueueUpdate` to remove interleaved update check\r\n            const updateQueue = fiber.updateQueue;\r\n            if (updateQueue === null) {\r\n              // Only occurs if the fiber has been unmounted.\r\n            } else {\r\n              const sharedQueue: SharedQueue<any> = (updateQueue: any).shared;\r\n              const pending = sharedQueue.pending;\r\n              if (pending === null) {\r\n                // This is the first update. Create a circular list.\r\n                update.next = update;\r\n              } else {\r\n                update.next = pending.next;\r\n                pending.next = update;\r\n              }\r\n              sharedQueue.pending = update;\r\n            }\r\n          }\r\n\r\n          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\r\n          const alternate = fiber.alternate;\r\n          if (alternate !== null) {\r\n            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\r\n          }\r\n          scheduleContextWorkOnParentPath(\r\n            fiber.return,\r\n            renderLanes,\r\n            workInProgress,\r\n          );\r\n\r\n          // Mark the updated lanes on the list, too.\r\n          list.lanes = mergeLanes(list.lanes, renderLanes);\r\n\r\n          // Since we already found a match, we can stop traversing the\r\n          // dependency list.\r\n          break;\r\n        }\r\n        dependency = dependency.next;\r\n      }\r\n    } else if (fiber.tag === ContextProvider) {\r\n      // Don't scan deeper if this is a matching provider\r\n      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\r\n    } else if (fiber.tag === DehydratedFragment) {\r\n      // If a dehydrated suspense boundary is in this subtree, we don't know\r\n      // if it will have any context consumers in it. The best we can do is\r\n      // mark it as having updates.\r\n      const parentSuspense = fiber.return;\r\n\r\n      if (parentSuspense === null) {\r\n        throw new Error(\r\n          'We just came from a parent so we must have had a parent. This is a bug in React.',\r\n        );\r\n      }\r\n\r\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\r\n      const alternate = parentSuspense.alternate;\r\n      if (alternate !== null) {\r\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\r\n      }\r\n      // This is intentionally passing this fiber as the parent\r\n      // because we want to schedule this fiber as having work\r\n      // on its children. We'll use the childLanes on\r\n      // this fiber to indicate that a context has changed.\r\n      scheduleContextWorkOnParentPath(\r\n        parentSuspense,\r\n        renderLanes,\r\n        workInProgress,\r\n      );\r\n      nextFiber = fiber.sibling;\r\n    } else {\r\n      // Traverse down.\r\n      nextFiber = fiber.child;\r\n    }\r\n\r\n    if (nextFiber !== null) {\r\n      // Set the return pointer of the child to the work-in-progress fiber.\r\n      nextFiber.return = fiber;\r\n    } else {\r\n      // No child. Traverse to next sibling.\r\n      nextFiber = fiber;\r\n      while (nextFiber !== null) {\r\n        if (nextFiber === workInProgress) {\r\n          // We're back to the root of this subtree. Exit.\r\n          nextFiber = null;\r\n          break;\r\n        }\r\n        const sibling = nextFiber.sibling;\r\n        if (sibling !== null) {\r\n          // Set the return pointer of the sibling to the work-in-progress fiber.\r\n          sibling.return = nextFiber.return;\r\n          nextFiber = sibling;\r\n          break;\r\n        }\r\n        // No more siblings. Traverse up.\r\n        nextFiber = nextFiber.return;\r\n      }\r\n    }\r\n    fiber = nextFiber;\r\n  }\r\n}\r\n\r\nfunction propagateContextChanges<T>(\r\n  workInProgress: Fiber,\r\n  contexts: Array<any>,\r\n  renderLanes: Lanes,\r\n  forcePropagateEntireTree: boolean,\r\n): void {\r\n  // Only used by lazy implementation\r\n  if (!enableLazyContextPropagation) {\r\n    return;\r\n  }\r\n  let fiber = workInProgress.child;\r\n  if (fiber !== null) {\r\n    // Set the return pointer of the child to the work-in-progress fiber.\r\n    fiber.return = workInProgress;\r\n  }\r\n  while (fiber !== null) {\r\n    let nextFiber;\r\n\r\n    // Visit this fiber.\r\n    const list = fiber.dependencies;\r\n    if (list !== null) {\r\n      nextFiber = fiber.child;\r\n\r\n      let dep = list.firstContext;\r\n      findChangedDep: while (dep !== null) {\r\n        // Assigning these to constants to help Flow\r\n        const dependency = dep;\r\n        const consumer = fiber;\r\n        findContext: for (let i = 0; i < contexts.length; i++) {\r\n          const context: ReactContext<T> = contexts[i];\r\n          // Check if the context matches.\r\n          // TODO: Compare selected values to bail out early.\r\n          if (dependency.context === context) {\r\n            // Match! Schedule an update on this fiber.\r\n\r\n            // In the lazy implementation, don't mark a dirty flag on the\r\n            // dependency itself. Not all changes are propagated, so we can't\r\n            // rely on the propagation function alone to determine whether\r\n            // something has changed; the consumer will check. In the future, we\r\n            // could add back a dirty flag as an optimization to avoid double\r\n            // checking, but until we have selectors it's not really worth\r\n            // the trouble.\r\n            consumer.lanes = mergeLanes(consumer.lanes, renderLanes);\r\n            const alternate = consumer.alternate;\r\n            if (alternate !== null) {\r\n              alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\r\n            }\r\n            scheduleContextWorkOnParentPath(\r\n              consumer.return,\r\n              renderLanes,\r\n              workInProgress,\r\n            );\r\n\r\n            if (!forcePropagateEntireTree) {\r\n              // During lazy propagation, when we find a match, we can defer\r\n              // propagating changes to the children, because we're going to\r\n              // visit them during render. We should continue propagating the\r\n              // siblings, though\r\n              nextFiber = null;\r\n            }\r\n\r\n            // Since we already found a match, we can stop traversing the\r\n            // dependency list.\r\n            break findChangedDep;\r\n          }\r\n        }\r\n        dep = dependency.next;\r\n      }\r\n    } else if (fiber.tag === DehydratedFragment) {\r\n      // If a dehydrated suspense boundary is in this subtree, we don't know\r\n      // if it will have any context consumers in it. The best we can do is\r\n      // mark it as having updates.\r\n      const parentSuspense = fiber.return;\r\n\r\n      if (parentSuspense === null) {\r\n        throw new Error(\r\n          'We just came from a parent so we must have had a parent. This is a bug in React.',\r\n        );\r\n      }\r\n\r\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\r\n      const alternate = parentSuspense.alternate;\r\n      if (alternate !== null) {\r\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\r\n      }\r\n      // This is intentionally passing this fiber as the parent\r\n      // because we want to schedule this fiber as having work\r\n      // on its children. We'll use the childLanes on\r\n      // this fiber to indicate that a context has changed.\r\n      scheduleContextWorkOnParentPath(\r\n        parentSuspense,\r\n        renderLanes,\r\n        workInProgress,\r\n      );\r\n      nextFiber = null;\r\n    } else {\r\n      // Traverse down.\r\n      nextFiber = fiber.child;\r\n    }\r\n\r\n    if (nextFiber !== null) {\r\n      // Set the return pointer of the child to the work-in-progress fiber.\r\n      nextFiber.return = fiber;\r\n    } else {\r\n      // No child. Traverse to next sibling.\r\n      nextFiber = fiber;\r\n      while (nextFiber !== null) {\r\n        if (nextFiber === workInProgress) {\r\n          // We're back to the root of this subtree. Exit.\r\n          nextFiber = null;\r\n          break;\r\n        }\r\n        const sibling = nextFiber.sibling;\r\n        if (sibling !== null) {\r\n          // Set the return pointer of the sibling to the work-in-progress fiber.\r\n          sibling.return = nextFiber.return;\r\n          nextFiber = sibling;\r\n          break;\r\n        }\r\n        // No more siblings. Traverse up.\r\n        nextFiber = nextFiber.return;\r\n      }\r\n    }\r\n    fiber = nextFiber;\r\n  }\r\n}\r\n\r\nexport function lazilyPropagateParentContextChanges(\r\n  current: Fiber,\r\n  workInProgress: Fiber,\r\n  renderLanes: Lanes,\r\n) {\r\n  const forcePropagateEntireTree = false;\r\n  propagateParentContextChanges(\r\n    current,\r\n    workInProgress,\r\n    renderLanes,\r\n    forcePropagateEntireTree,\r\n  );\r\n}\r\n\r\n// Used for propagating a deferred tree (Suspense, Offscreen). We must propagate\r\n// to the entire subtree, because we won't revisit it until after the current\r\n// render has completed, at which point we'll have lost track of which providers\r\n// have changed.\r\nexport function propagateParentContextChangesToDeferredTree(\r\n  current: Fiber,\r\n  workInProgress: Fiber,\r\n  renderLanes: Lanes,\r\n) {\r\n  const forcePropagateEntireTree = true;\r\n  propagateParentContextChanges(\r\n    current,\r\n    workInProgress,\r\n    renderLanes,\r\n    forcePropagateEntireTree,\r\n  );\r\n}\r\n\r\nfunction propagateParentContextChanges(\r\n  current: Fiber,\r\n  workInProgress: Fiber,\r\n  renderLanes: Lanes,\r\n  forcePropagateEntireTree: boolean,\r\n) {\r\n  if (!enableLazyContextPropagation) {\r\n    return;\r\n  }\r\n\r\n  // Collect all the parent providers that changed. Since this is usually small\r\n  // number, we use an Array instead of Set.\r\n  let contexts = null;\r\n  let parent = workInProgress;\r\n  let isInsidePropagationBailout = false;\r\n  while (parent !== null) {\r\n    if (!isInsidePropagationBailout) {\r\n      if ((parent.flags & NeedsPropagation) !== NoFlags) {\r\n        isInsidePropagationBailout = true;\r\n      } else if ((parent.flags & DidPropagateContext) !== NoFlags) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (parent.tag === ContextProvider) {\r\n      const currentParent = parent.alternate;\r\n\r\n      if (currentParent === null) {\r\n        throw new Error('Should have a current fiber. This is a bug in React.');\r\n      }\r\n\r\n      const oldProps = currentParent.memoizedProps;\r\n      if (oldProps !== null) {\r\n        const providerType: ReactProviderType<any> = parent.type;\r\n        const context: ReactContext<any> = providerType._context;\r\n\r\n        const newProps = parent.pendingProps;\r\n        const newValue = newProps.value;\r\n\r\n        const oldValue = oldProps.value;\r\n\r\n        if (!is(newValue, oldValue)) {\r\n          if (contexts !== null) {\r\n            contexts.push(context);\r\n          } else {\r\n            contexts = [context];\r\n          }\r\n        }\r\n      }\r\n    }\r\n    parent = parent.return;\r\n  }\r\n\r\n  if (contexts !== null) {\r\n    // If there were any changed providers, search through the children and\r\n    // propagate their changes.\r\n    propagateContextChanges(\r\n      workInProgress,\r\n      contexts,\r\n      renderLanes,\r\n      forcePropagateEntireTree,\r\n    );\r\n  }\r\n\r\n  // This is an optimization so that we only propagate once per subtree. If a\r\n  // deeply nested child bails out, and it calls this propagation function, it\r\n  // uses this flag to know that the remaining ancestor providers have already\r\n  // been propagated.\r\n  //\r\n  // NOTE: This optimization is only necessary because we sometimes enter the\r\n  // begin phase of nodes that don't have any work scheduled on them —\r\n  // specifically, the siblings of a node that _does_ have scheduled work. The\r\n  // siblings will bail out and call this function again, even though we already\r\n  // propagated content changes to it and its subtree. So we use this flag to\r\n  // mark that the parent providers already propagated.\r\n  //\r\n  // Unfortunately, though, we need to ignore this flag when we're inside a\r\n  // tree whose context propagation was deferred — that's what the\r\n  // `NeedsPropagation` flag is for.\r\n  //\r\n  // If we could instead bail out before entering the siblings' begin phase,\r\n  // then we could remove both `DidPropagateContext` and `NeedsPropagation`.\r\n  // Consider this as part of the next refactor to the fiber tree structure.\r\n  workInProgress.flags |= DidPropagateContext;\r\n}\r\n\r\nexport function checkIfContextChanged(\r\n  currentDependencies: Dependencies,\r\n): boolean {\r\n  if (!enableLazyContextPropagation) {\r\n    return false;\r\n  }\r\n  // Iterate over the current dependencies to see if something changed. This\r\n  // only gets called if props and state has already bailed out, so it's a\r\n  // relatively uncommon path, except at the root of a changed subtree.\r\n  // Alternatively, we could move these comparisons into `readContext`, but\r\n  // that's a much hotter path, so I think this is an appropriate trade off.\r\n  let dependency = currentDependencies.firstContext;\r\n  while (dependency !== null) {\r\n    const context = dependency.context;\r\n    const newValue = isPrimaryRenderer\r\n      ? context._currentValue\r\n      : context._currentValue2;\r\n    const oldValue = dependency.memoizedValue;\r\n    if (!is(newValue, oldValue)) {\r\n      return true;\r\n    }\r\n    dependency = dependency.next;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function prepareToReadContext(\r\n  workInProgress: Fiber,\r\n  renderLanes: Lanes,\r\n): void {\r\n  currentlyRenderingFiber = workInProgress;\r\n  lastContextDependency = null;\r\n  lastFullyObservedContext = null;\r\n\r\n  const dependencies = workInProgress.dependencies;\r\n  if (dependencies !== null) {\r\n    if (enableLazyContextPropagation) {\r\n      // Reset the work-in-progress list\r\n      dependencies.firstContext = null;\r\n    } else {\r\n      const firstContext = dependencies.firstContext;\r\n      if (firstContext !== null) {\r\n        if (includesSomeLane(dependencies.lanes, renderLanes)) {\r\n          // Context list has a pending update. Mark that this fiber performed work.\r\n          markWorkInProgressReceivedUpdate();\r\n        }\r\n        // Reset the work-in-progress list\r\n        dependencies.firstContext = null;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function readContext<T>(context: ReactContext<T>): T {\r\n  if (__DEV__) {\r\n    // This warning would fire if you read context inside a Hook like useMemo.\r\n    // Unlike the class check below, it's not enforced in production for perf.\r\n    if (isDisallowedContextReadInDEV) {\r\n      console.error(\r\n        'Context can only be read while React is rendering. ' +\r\n          'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\r\n          'In function components, you can read it directly in the function body, but not ' +\r\n          'inside Hooks like useReducer() or useMemo().',\r\n      );\r\n    }\r\n  }\r\n\r\n  const value = isPrimaryRenderer\r\n    ? context._currentValue\r\n    : context._currentValue2;\r\n\r\n  if (lastFullyObservedContext === context) {\r\n    // Nothing to do. We already observe everything in this context.\r\n  } else {\r\n    const contextItem = {\r\n      context: ((context: any): ReactContext<mixed>),\r\n      memoizedValue: value,\r\n      next: null,\r\n    };\r\n\r\n    if (lastContextDependency === null) {\r\n      if (currentlyRenderingFiber === null) {\r\n        throw new Error(\r\n          'Context can only be read while React is rendering. ' +\r\n            'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\r\n            'In function components, you can read it directly in the function body, but not ' +\r\n            'inside Hooks like useReducer() or useMemo().',\r\n        );\r\n      }\r\n\r\n      // This is the first dependency for this component. Create a new list.\r\n      lastContextDependency = contextItem;\r\n      currentlyRenderingFiber.dependencies = {\r\n        lanes: NoLanes,\r\n        firstContext: contextItem,\r\n      };\r\n      if (enableLazyContextPropagation) {\r\n        currentlyRenderingFiber.flags |= NeedsPropagation;\r\n      }\r\n    } else {\r\n      // Append a new context item.\r\n      lastContextDependency = lastContextDependency.next = contextItem;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\r\nimport type {\r\n  UpdateQueue as HookQueue,\r\n  Update as HookUpdate,\r\n} from './ReactFiberHooks.old';\r\nimport type {\r\n  SharedQueue as ClassQueue,\r\n  Update as ClassUpdate,\r\n} from './ReactFiberClassUpdateQueue.old';\r\nimport type {Lane, Lanes} from './ReactFiberLane.old';\r\nimport type {OffscreenInstance} from './ReactFiberOffscreenComponent';\r\n\r\nimport {\r\n  warnAboutUpdateOnNotYetMountedFiberInDEV,\r\n  throwIfInfiniteUpdateLoopDetected,\r\n} from './ReactFiberWorkLoop.old';\r\nimport {\r\n  NoLane,\r\n  NoLanes,\r\n  mergeLanes,\r\n  markHiddenUpdate,\r\n} from './ReactFiberLane.old';\r\nimport {NoFlags, Placement, Hydrating} from './ReactFiberFlags';\r\nimport {HostRoot, OffscreenComponent} from './ReactWorkTags';\r\nimport {OffscreenVisible} from './ReactFiberOffscreenComponent';\r\n\r\nexport type ConcurrentUpdate = {\r\n  next: ConcurrentUpdate,\r\n  lane: Lane,\r\n};\r\n\r\ntype ConcurrentQueue = {\r\n  pending: ConcurrentUpdate | null,\r\n};\r\n\r\n// If a render is in progress, and we receive an update from a concurrent event,\r\n// we wait until the current render is over (either finished or interrupted)\r\n// before adding it to the fiber/hook queue. Push to this array so we can\r\n// access the queue, fiber, update, et al later.\r\nconst concurrentQueues: Array<any> = [];\r\nlet concurrentQueuesIndex = 0;\r\n\r\nlet concurrentlyUpdatedLanes: Lanes = NoLanes;\r\n\r\nexport function finishQueueingConcurrentUpdates(): void {\r\n  const endIndex = concurrentQueuesIndex;\r\n  concurrentQueuesIndex = 0;\r\n\r\n  concurrentlyUpdatedLanes = NoLanes;\r\n\r\n  let i = 0;\r\n  while (i < endIndex) {\r\n    const fiber: Fiber = concurrentQueues[i];\r\n    concurrentQueues[i++] = null;\r\n    const queue: ConcurrentQueue = concurrentQueues[i];\r\n    concurrentQueues[i++] = null;\r\n    const update: ConcurrentUpdate = concurrentQueues[i];\r\n    concurrentQueues[i++] = null;\r\n    const lane: Lane = concurrentQueues[i];\r\n    concurrentQueues[i++] = null;\r\n\r\n    if (queue !== null && update !== null) {\r\n      const pending = queue.pending;\r\n      if (pending === null) {\r\n        // This is the first update. Create a circular list.\r\n        update.next = update;\r\n      } else {\r\n        update.next = pending.next;\r\n        pending.next = update;\r\n      }\r\n      queue.pending = update;\r\n    }\r\n\r\n    if (lane !== NoLane) {\r\n      markUpdateLaneFromFiberToRoot(fiber, update, lane);\r\n    }\r\n  }\r\n}\r\n\r\nexport function getConcurrentlyUpdatedLanes(): Lanes {\r\n  return concurrentlyUpdatedLanes;\r\n}\r\n\r\nfunction enqueueUpdate(\r\n  fiber: Fiber,\r\n  queue: ConcurrentQueue | null,\r\n  update: ConcurrentUpdate | null,\r\n  lane: Lane,\r\n) {\r\n  // Don't update the `childLanes` on the return path yet. If we already in\r\n  // the middle of rendering, wait until after it has completed.\r\n  concurrentQueues[concurrentQueuesIndex++] = fiber;\r\n  concurrentQueues[concurrentQueuesIndex++] = queue;\r\n  concurrentQueues[concurrentQueuesIndex++] = update;\r\n  concurrentQueues[concurrentQueuesIndex++] = lane;\r\n\r\n  concurrentlyUpdatedLanes = mergeLanes(concurrentlyUpdatedLanes, lane);\r\n\r\n  // The fiber's `lane` field is used in some places to check if any work is\r\n  // scheduled, to perform an eager bailout, so we need to update it immediately.\r\n  // TODO: We should probably move this to the \"shared\" queue instead.\r\n  fiber.lanes = mergeLanes(fiber.lanes, lane);\r\n  const alternate = fiber.alternate;\r\n  if (alternate !== null) {\r\n    alternate.lanes = mergeLanes(alternate.lanes, lane);\r\n  }\r\n}\r\n\r\nexport function enqueueConcurrentHookUpdate<S, A>(\r\n  fiber: Fiber,\r\n  queue: HookQueue<S, A>,\r\n  update: HookUpdate<S, A>,\r\n  lane: Lane,\r\n): FiberRoot | null {\r\n  const concurrentQueue: ConcurrentQueue = (queue: any);\r\n  const concurrentUpdate: ConcurrentUpdate = (update: any);\r\n  enqueueUpdate(fiber, concurrentQueue, concurrentUpdate, lane);\r\n  return getRootForUpdatedFiber(fiber);\r\n}\r\n\r\nexport function enqueueConcurrentHookUpdateAndEagerlyBailout<S, A>(\r\n  fiber: Fiber,\r\n  queue: HookQueue<S, A>,\r\n  update: HookUpdate<S, A>,\r\n): void {\r\n  // This function is used to queue an update that doesn't need a rerender. The\r\n  // only reason we queue it is in case there's a subsequent higher priority\r\n  // update that causes it to be rebased.\r\n  const lane = NoLane;\r\n  const concurrentQueue: ConcurrentQueue = (queue: any);\r\n  const concurrentUpdate: ConcurrentUpdate = (update: any);\r\n  enqueueUpdate(fiber, concurrentQueue, concurrentUpdate, lane);\r\n}\r\n\r\nexport function enqueueConcurrentClassUpdate<State>(\r\n  fiber: Fiber,\r\n  queue: ClassQueue<State>,\r\n  update: ClassUpdate<State>,\r\n  lane: Lane,\r\n): FiberRoot | null {\r\n  const concurrentQueue: ConcurrentQueue = (queue: any);\r\n  const concurrentUpdate: ConcurrentUpdate = (update: any);\r\n  enqueueUpdate(fiber, concurrentQueue, concurrentUpdate, lane);\r\n  return getRootForUpdatedFiber(fiber);\r\n}\r\n\r\nexport function enqueueConcurrentRenderForLane(\r\n  fiber: Fiber,\r\n  lane: Lane,\r\n): FiberRoot | null {\r\n  enqueueUpdate(fiber, null, null, lane);\r\n  return getRootForUpdatedFiber(fiber);\r\n}\r\n\r\n// Calling this function outside this module should only be done for backwards\r\n// compatibility and should always be accompanied by a warning.\r\nexport function unsafe_markUpdateLaneFromFiberToRoot(\r\n  sourceFiber: Fiber,\r\n  lane: Lane,\r\n): FiberRoot | null {\r\n  // NOTE: For Hyrum's Law reasons, if an infinite update loop is detected, it\r\n  // should throw before `markUpdateLaneFromFiberToRoot` is called. But this is\r\n  // undefined behavior and we can change it if we need to; it just so happens\r\n  // that, at the time of this writing, there's an internal product test that\r\n  // happens to rely on this.\r\n  const root = getRootForUpdatedFiber(sourceFiber);\r\n  markUpdateLaneFromFiberToRoot(sourceFiber, null, lane);\r\n  return root;\r\n}\r\n\r\nfunction markUpdateLaneFromFiberToRoot(\r\n  sourceFiber: Fiber,\r\n  update: ConcurrentUpdate | null,\r\n  lane: Lane,\r\n): void {\r\n  // Update the source fiber's lanes\r\n  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\r\n  let alternate = sourceFiber.alternate;\r\n  if (alternate !== null) {\r\n    alternate.lanes = mergeLanes(alternate.lanes, lane);\r\n  }\r\n  // Walk the parent path to the root and update the child lanes.\r\n  let isHidden = false;\r\n  let parent = sourceFiber.return;\r\n  let node = sourceFiber;\r\n  while (parent !== null) {\r\n    parent.childLanes = mergeLanes(parent.childLanes, lane);\r\n    alternate = parent.alternate;\r\n    if (alternate !== null) {\r\n      alternate.childLanes = mergeLanes(alternate.childLanes, lane);\r\n    }\r\n\r\n    if (parent.tag === OffscreenComponent) {\r\n      // Check if this offscreen boundary is currently hidden.\r\n      //\r\n      // The instance may be null if the Offscreen parent was unmounted. Usually\r\n      // the parent wouldn't be reachable in that case because we disconnect\r\n      // fibers from the tree when they are deleted. However, there's a weird\r\n      // edge case where setState is called on a fiber that was interrupted\r\n      // before it ever mounted. Because it never mounts, it also never gets\r\n      // deleted. Because it never gets deleted, its return pointer never gets\r\n      // disconnected. Which means it may be attached to a deleted Offscreen\r\n      // parent node. (This discovery suggests it may be better for memory usage\r\n      // if we don't attach the `return` pointer until the commit phase, though\r\n      // in order to do that we'd need some other way to track the return\r\n      // pointer during the initial render, like on the stack.)\r\n      //\r\n      // This case is always accompanied by a warning, but we still need to\r\n      // account for it. (There may be other cases that we haven't discovered,\r\n      // too.)\r\n      const offscreenInstance: OffscreenInstance | null = parent.stateNode;\r\n      if (\r\n        offscreenInstance !== null &&\r\n        !(offscreenInstance.visibility & OffscreenVisible)\r\n      ) {\r\n        isHidden = true;\r\n      }\r\n    }\r\n\r\n    node = parent;\r\n    parent = parent.return;\r\n  }\r\n\r\n  if (isHidden && update !== null && node.tag === HostRoot) {\r\n    const root: FiberRoot = node.stateNode;\r\n    markHiddenUpdate(root, update, lane);\r\n  }\r\n}\r\n\r\nfunction getRootForUpdatedFiber(sourceFiber: Fiber): FiberRoot | null {\r\n  // TODO: We will detect and infinite update loop and throw even if this fiber\r\n  // has already unmounted. This isn't really necessary but it happens to be the\r\n  // current behavior we've used for several release cycles. Consider not\r\n  // performing this check if the updated fiber already unmounted, since it's\r\n  // not possible for that to cause an infinite update loop.\r\n  throwIfInfiniteUpdateLoopDetected();\r\n\r\n  // When a setState happens, we must ensure the root is scheduled. Because\r\n  // update queues do not have a backpointer to the root, the only way to do\r\n  // this currently is to walk up the return path. This used to not be a big\r\n  // deal because we would have to walk up the return path to set\r\n  // the `childLanes`, anyway, but now those two traversals happen at\r\n  // different times.\r\n  // TODO: Consider adding a `root` backpointer on the update queue.\r\n  detectUpdateOnUnmountedFiber(sourceFiber, sourceFiber);\r\n  let node = sourceFiber;\r\n  let parent = node.return;\r\n  while (parent !== null) {\r\n    detectUpdateOnUnmountedFiber(sourceFiber, node);\r\n    node = parent;\r\n    parent = node.return;\r\n  }\r\n  return node.tag === HostRoot ? (node.stateNode: FiberRoot) : null;\r\n}\r\n\r\nfunction detectUpdateOnUnmountedFiber(sourceFiber: Fiber, parent: Fiber) {\r\n  if (__DEV__) {\r\n    const alternate = parent.alternate;\r\n    if (\r\n      alternate === null &&\r\n      (parent.flags & (Placement | Hydrating)) !== NoFlags\r\n    ) {\r\n      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\n// UpdateQueue is a linked list of prioritized updates.\r\n//\r\n// Like fibers, update queues come in pairs: a current queue, which represents\r\n// the visible state of the screen, and a work-in-progress queue, which can be\r\n// mutated and processed asynchronously before it is committed — a form of\r\n// double buffering. If a work-in-progress render is discarded before finishing,\r\n// we create a new work-in-progress by cloning the current queue.\r\n//\r\n// Both queues share a persistent, singly-linked list structure. To schedule an\r\n// update, we append it to the end of both queues. Each queue maintains a\r\n// pointer to first update in the persistent list that hasn't been processed.\r\n// The work-in-progress pointer always has a position equal to or greater than\r\n// the current queue, since we always work on that one. The current queue's\r\n// pointer is only updated during the commit phase, when we swap in the\r\n// work-in-progress.\r\n//\r\n// For example:\r\n//\r\n//   Current pointer:           A - B - C - D - E - F\r\n//   Work-in-progress pointer:              D - E - F\r\n//                                          ^\r\n//                                          The work-in-progress queue has\r\n//                                          processed more updates than current.\r\n//\r\n// The reason we append to both queues is because otherwise we might drop\r\n// updates without ever processing them. For example, if we only add updates to\r\n// the work-in-progress queue, some updates could be lost whenever a work-in\r\n// -progress render restarts by cloning from current. Similarly, if we only add\r\n// updates to the current queue, the updates will be lost whenever an already\r\n// in-progress queue commits and swaps with the current queue. However, by\r\n// adding to both queues, we guarantee that the update will be part of the next\r\n// work-in-progress. (And because the work-in-progress queue becomes the\r\n// current queue once it commits, there's no danger of applying the same\r\n// update twice.)\r\n//\r\n// Prioritization\r\n// --------------\r\n//\r\n// Updates are not sorted by priority, but by insertion; new updates are always\r\n// appended to the end of the list.\r\n//\r\n// The priority is still important, though. When processing the update queue\r\n// during the render phase, only the updates with sufficient priority are\r\n// included in the result. If we skip an update because it has insufficient\r\n// priority, it remains in the queue to be processed later, during a lower\r\n// priority render. Crucially, all updates subsequent to a skipped update also\r\n// remain in the queue *regardless of their priority*. That means high priority\r\n// updates are sometimes processed twice, at two separate priorities. We also\r\n// keep track of a base state, that represents the state before the first\r\n// update in the queue is applied.\r\n//\r\n// For example:\r\n//\r\n//   Given a base state of '', and the following queue of updates\r\n//\r\n//     A1 - B2 - C1 - D2\r\n//\r\n//   where the number indicates the priority, and the update is applied to the\r\n//   previous state by appending a letter, React will process these updates as\r\n//   two separate renders, one per distinct priority level:\r\n//\r\n//   First render, at priority 1:\r\n//     Base state: ''\r\n//     Updates: [A1, C1]\r\n//     Result state: 'AC'\r\n//\r\n//   Second render, at priority 2:\r\n//     Base state: 'A'            <-  The base state does not include C1,\r\n//                                    because B2 was skipped.\r\n//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2\r\n//     Result state: 'ABCD'\r\n//\r\n// Because we process updates in insertion order, and rebase high priority\r\n// updates when preceding updates are skipped, the final result is deterministic\r\n// regardless of priority. Intermediate state may vary according to system\r\n// resources, but the final state is always the same.\r\n\r\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\r\nimport type {Lanes, Lane} from './ReactFiberLane.old';\r\n\r\nimport {\r\n  NoLane,\r\n  NoLanes,\r\n  OffscreenLane,\r\n  isSubsetOfLanes,\r\n  mergeLanes,\r\n  removeLanes,\r\n  isTransitionLane,\r\n  intersectLanes,\r\n  markRootEntangled,\r\n} from './ReactFiberLane.old';\r\nimport {\r\n  enterDisallowedContextReadInDEV,\r\n  exitDisallowedContextReadInDEV,\r\n} from './ReactFiberNewContext.old';\r\nimport {\r\n  Callback,\r\n  Visibility,\r\n  ShouldCapture,\r\n  DidCapture,\r\n} from './ReactFiberFlags';\r\n\r\nimport {debugRenderPhaseSideEffectsForStrictMode} from 'shared/ReactFeatureFlags';\r\n\r\nimport {StrictLegacyMode} from './ReactTypeOfMode';\r\nimport {\r\n  markSkippedUpdateLanes,\r\n  isUnsafeClassRenderPhaseUpdate,\r\n  getWorkInProgressRootRenderLanes,\r\n} from './ReactFiberWorkLoop.old';\r\nimport {\r\n  enqueueConcurrentClassUpdate,\r\n  unsafe_markUpdateLaneFromFiberToRoot,\r\n} from './ReactFiberConcurrentUpdates.old';\r\nimport {setIsStrictModeForDevtools} from './ReactFiberDevToolsHook.old';\r\n\r\nimport assign from 'shared/assign';\r\n\r\nexport type Update<State> = {\r\n  // TODO: Temporary field. Will remove this by storing a map of\r\n  // transition -> event time on the root.\r\n  eventTime: number,\r\n  lane: Lane,\r\n\r\n  tag: 0 | 1 | 2 | 3,\r\n  payload: any,\r\n  callback: (() => mixed) | null,\r\n\r\n  next: Update<State> | null,\r\n};\r\n\r\nexport type SharedQueue<State> = {\r\n  pending: Update<State> | null,\r\n  lanes: Lanes,\r\n  hiddenCallbacks: Array<() => mixed> | null,\r\n};\r\n\r\nexport type UpdateQueue<State> = {\r\n  baseState: State,\r\n  firstBaseUpdate: Update<State> | null,\r\n  lastBaseUpdate: Update<State> | null,\r\n  shared: SharedQueue<State>,\r\n  callbacks: Array<() => mixed> | null,\r\n};\r\n\r\nexport const UpdateState = 0;\r\nexport const ReplaceState = 1;\r\nexport const ForceUpdate = 2;\r\nexport const CaptureUpdate = 3;\r\n\r\n// Global state that is reset at the beginning of calling `processUpdateQueue`.\r\n// It should only be read right after calling `processUpdateQueue`, via\r\n// `checkHasForceUpdateAfterProcessing`.\r\nlet hasForceUpdate = false;\r\n\r\nlet didWarnUpdateInsideUpdate;\r\nlet currentlyProcessingQueue;\r\nexport let resetCurrentlyProcessingQueue: () => void;\r\nif (__DEV__) {\r\n  didWarnUpdateInsideUpdate = false;\r\n  currentlyProcessingQueue = null;\r\n  resetCurrentlyProcessingQueue = () => {\r\n    currentlyProcessingQueue = null;\r\n  };\r\n}\r\n\r\nexport function initializeUpdateQueue<State>(fiber: Fiber): void {\r\n  const queue: UpdateQueue<State> = {\r\n    baseState: fiber.memoizedState,\r\n    firstBaseUpdate: null,\r\n    lastBaseUpdate: null,\r\n    shared: {\r\n      pending: null,\r\n      lanes: NoLanes,\r\n      hiddenCallbacks: null,\r\n    },\r\n    callbacks: null,\r\n  };\r\n  fiber.updateQueue = queue;\r\n}\r\n\r\nexport function cloneUpdateQueue<State>(\r\n  current: Fiber,\r\n  workInProgress: Fiber,\r\n): void {\r\n  // Clone the update queue from current. Unless it's already a clone.\r\n  const queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\r\n  const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\r\n  if (queue === currentQueue) {\r\n    const clone: UpdateQueue<State> = {\r\n      baseState: currentQueue.baseState,\r\n      firstBaseUpdate: currentQueue.firstBaseUpdate,\r\n      lastBaseUpdate: currentQueue.lastBaseUpdate,\r\n      shared: currentQueue.shared,\r\n      callbacks: null,\r\n    };\r\n    workInProgress.updateQueue = clone;\r\n  }\r\n}\r\n\r\nexport function createUpdate(eventTime: number, lane: Lane): Update<*> {\r\n  const update: Update<*> = {\r\n    eventTime,\r\n    lane,\r\n\r\n    tag: UpdateState,\r\n    payload: null,\r\n    callback: null,\r\n\r\n    next: null,\r\n  };\r\n  return update;\r\n}\r\n\r\nexport function enqueueUpdate<State>(\r\n  fiber: Fiber,\r\n  update: Update<State>,\r\n  lane: Lane,\r\n): FiberRoot | null {\r\n  const updateQueue = fiber.updateQueue;\r\n  if (updateQueue === null) {\r\n    // Only occurs if the fiber has been unmounted.\r\n    return null;\r\n  }\r\n\r\n  const sharedQueue: SharedQueue<State> = (updateQueue: any).shared;\r\n\r\n  if (__DEV__) {\r\n    if (\r\n      currentlyProcessingQueue === sharedQueue &&\r\n      !didWarnUpdateInsideUpdate\r\n    ) {\r\n      console.error(\r\n        'An update (setState, replaceState, or forceUpdate) was scheduled ' +\r\n          'from inside an update function. Update functions should be pure, ' +\r\n          'with zero side-effects. Consider using componentDidUpdate or a ' +\r\n          'callback.',\r\n      );\r\n      didWarnUpdateInsideUpdate = true;\r\n    }\r\n  }\r\n\r\n  if (isUnsafeClassRenderPhaseUpdate(fiber)) {\r\n    // This is an unsafe render phase update. Add directly to the update\r\n    // queue so we can process it immediately during the current render.\r\n    const pending = sharedQueue.pending;\r\n    if (pending === null) {\r\n      // This is the first update. Create a circular list.\r\n      update.next = update;\r\n    } else {\r\n      update.next = pending.next;\r\n      pending.next = update;\r\n    }\r\n    sharedQueue.pending = update;\r\n\r\n    // Update the childLanes even though we're most likely already rendering\r\n    // this fiber. This is for backwards compatibility in the case where you\r\n    // update a different component during render phase than the one that is\r\n    // currently renderings (a pattern that is accompanied by a warning).\r\n    return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);\r\n  } else {\r\n    return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);\r\n  }\r\n}\r\n\r\nexport function entangleTransitions(root: FiberRoot, fiber: Fiber, lane: Lane) {\r\n  const updateQueue = fiber.updateQueue;\r\n  if (updateQueue === null) {\r\n    // Only occurs if the fiber has been unmounted.\r\n    return;\r\n  }\r\n\r\n  const sharedQueue: SharedQueue<mixed> = (updateQueue: any).shared;\r\n  if (isTransitionLane(lane)) {\r\n    let queueLanes = sharedQueue.lanes;\r\n\r\n    // If any entangled lanes are no longer pending on the root, then they must\r\n    // have finished. We can remove them from the shared queue, which represents\r\n    // a superset of the actually pending lanes. In some cases we may entangle\r\n    // more than we need to, but that's OK. In fact it's worse if we *don't*\r\n    // entangle when we should.\r\n    queueLanes = intersectLanes(queueLanes, root.pendingLanes);\r\n\r\n    // Entangle the new transition lane with the other transition lanes.\r\n    const newQueueLanes = mergeLanes(queueLanes, lane);\r\n    sharedQueue.lanes = newQueueLanes;\r\n    // Even if queue.lanes already include lane, we don't know for certain if\r\n    // the lane finished since the last time we entangled it. So we need to\r\n    // entangle it again, just to be sure.\r\n    markRootEntangled(root, newQueueLanes);\r\n  }\r\n}\r\n\r\nexport function enqueueCapturedUpdate<State>(\r\n  workInProgress: Fiber,\r\n  capturedUpdate: Update<State>,\r\n) {\r\n  // Captured updates are updates that are thrown by a child during the render\r\n  // phase. They should be discarded if the render is aborted. Therefore,\r\n  // we should only put them on the work-in-progress queue, not the current one.\r\n  let queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\r\n\r\n  // Check if the work-in-progress queue is a clone.\r\n  const current = workInProgress.alternate;\r\n  if (current !== null) {\r\n    const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\r\n    if (queue === currentQueue) {\r\n      // The work-in-progress queue is the same as current. This happens when\r\n      // we bail out on a parent fiber that then captures an error thrown by\r\n      // a child. Since we want to append the update only to the work-in\r\n      // -progress queue, we need to clone the updates. We usually clone during\r\n      // processUpdateQueue, but that didn't happen in this case because we\r\n      // skipped over the parent when we bailed out.\r\n      let newFirst = null;\r\n      let newLast = null;\r\n      const firstBaseUpdate = queue.firstBaseUpdate;\r\n      if (firstBaseUpdate !== null) {\r\n        // Loop through the updates and clone them.\r\n        let update = firstBaseUpdate;\r\n        do {\r\n          const clone: Update<State> = {\r\n            eventTime: update.eventTime,\r\n            lane: update.lane,\r\n\r\n            tag: update.tag,\r\n            payload: update.payload,\r\n            // When this update is rebased, we should not fire its\r\n            // callback again.\r\n            callback: null,\r\n\r\n            next: null,\r\n          };\r\n          if (newLast === null) {\r\n            newFirst = newLast = clone;\r\n          } else {\r\n            newLast.next = clone;\r\n            newLast = clone;\r\n          }\r\n          update = update.next;\r\n        } while (update !== null);\r\n\r\n        // Append the captured update the end of the cloned list.\r\n        if (newLast === null) {\r\n          newFirst = newLast = capturedUpdate;\r\n        } else {\r\n          newLast.next = capturedUpdate;\r\n          newLast = capturedUpdate;\r\n        }\r\n      } else {\r\n        // There are no base updates.\r\n        newFirst = newLast = capturedUpdate;\r\n      }\r\n      queue = {\r\n        baseState: currentQueue.baseState,\r\n        firstBaseUpdate: newFirst,\r\n        lastBaseUpdate: newLast,\r\n        shared: currentQueue.shared,\r\n        callbacks: currentQueue.callbacks,\r\n      };\r\n      workInProgress.updateQueue = queue;\r\n      return;\r\n    }\r\n  }\r\n\r\n  // Append the update to the end of the list.\r\n  const lastBaseUpdate = queue.lastBaseUpdate;\r\n  if (lastBaseUpdate === null) {\r\n    queue.firstBaseUpdate = capturedUpdate;\r\n  } else {\r\n    lastBaseUpdate.next = capturedUpdate;\r\n  }\r\n  queue.lastBaseUpdate = capturedUpdate;\r\n}\r\n\r\nfunction getStateFromUpdate<State>(\r\n  workInProgress: Fiber,\r\n  queue: UpdateQueue<State>,\r\n  update: Update<State>,\r\n  prevState: State,\r\n  nextProps: any,\r\n  instance: any,\r\n): any {\r\n  switch (update.tag) {\r\n    case ReplaceState: {\r\n      const payload = update.payload;\r\n      if (typeof payload === 'function') {\r\n        // Updater function\r\n        if (__DEV__) {\r\n          enterDisallowedContextReadInDEV();\r\n        }\r\n        const nextState = payload.call(instance, prevState, nextProps);\r\n        if (__DEV__) {\r\n          if (\r\n            debugRenderPhaseSideEffectsForStrictMode &&\r\n            workInProgress.mode & StrictLegacyMode\r\n          ) {\r\n            setIsStrictModeForDevtools(true);\r\n            try {\r\n              payload.call(instance, prevState, nextProps);\r\n            } finally {\r\n              setIsStrictModeForDevtools(false);\r\n            }\r\n          }\r\n          exitDisallowedContextReadInDEV();\r\n        }\r\n        return nextState;\r\n      }\r\n      // State object\r\n      return payload;\r\n    }\r\n    case CaptureUpdate: {\r\n      workInProgress.flags =\r\n        (workInProgress.flags & ~ShouldCapture) | DidCapture;\r\n    }\r\n    // Intentional fallthrough\r\n    case UpdateState: {\r\n      const payload = update.payload;\r\n      let partialState;\r\n      if (typeof payload === 'function') {\r\n        // Updater function\r\n        if (__DEV__) {\r\n          enterDisallowedContextReadInDEV();\r\n        }\r\n        partialState = payload.call(instance, prevState, nextProps);\r\n        if (__DEV__) {\r\n          if (\r\n            debugRenderPhaseSideEffectsForStrictMode &&\r\n            workInProgress.mode & StrictLegacyMode\r\n          ) {\r\n            setIsStrictModeForDevtools(true);\r\n            try {\r\n              payload.call(instance, prevState, nextProps);\r\n            } finally {\r\n              setIsStrictModeForDevtools(false);\r\n            }\r\n          }\r\n          exitDisallowedContextReadInDEV();\r\n        }\r\n      } else {\r\n        // Partial state object\r\n        partialState = payload;\r\n      }\r\n      if (partialState === null || partialState === undefined) {\r\n        // Null and undefined are treated as no-ops.\r\n        return prevState;\r\n      }\r\n      // Merge the partial state and the previous state.\r\n      return assign({}, prevState, partialState);\r\n    }\r\n    case ForceUpdate: {\r\n      hasForceUpdate = true;\r\n      return prevState;\r\n    }\r\n  }\r\n  return prevState;\r\n}\r\n\r\nexport function processUpdateQueue<State>(\r\n  workInProgress: Fiber,\r\n  props: any,\r\n  instance: any,\r\n  renderLanes: Lanes,\r\n): void {\r\n  // This is always non-null on a ClassComponent or HostRoot\r\n  const queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\r\n\r\n  hasForceUpdate = false;\r\n\r\n  if (__DEV__) {\r\n    // $FlowFixMe[escaped-generic] discovered when updating Flow\r\n    currentlyProcessingQueue = queue.shared;\r\n  }\r\n\r\n  let firstBaseUpdate = queue.firstBaseUpdate;\r\n  let lastBaseUpdate = queue.lastBaseUpdate;\r\n\r\n  // Check if there are pending updates. If so, transfer them to the base queue.\r\n  let pendingQueue = queue.shared.pending;\r\n  if (pendingQueue !== null) {\r\n    queue.shared.pending = null;\r\n\r\n    // The pending queue is circular. Disconnect the pointer between first\r\n    // and last so that it's non-circular.\r\n    const lastPendingUpdate = pendingQueue;\r\n    const firstPendingUpdate = lastPendingUpdate.next;\r\n    lastPendingUpdate.next = null;\r\n    // Append pending updates to base queue\r\n    if (lastBaseUpdate === null) {\r\n      firstBaseUpdate = firstPendingUpdate;\r\n    } else {\r\n      lastBaseUpdate.next = firstPendingUpdate;\r\n    }\r\n    lastBaseUpdate = lastPendingUpdate;\r\n\r\n    // If there's a current queue, and it's different from the base queue, then\r\n    // we need to transfer the updates to that queue, too. Because the base\r\n    // queue is a singly-linked list with no cycles, we can append to both\r\n    // lists and take advantage of structural sharing.\r\n    // TODO: Pass `current` as argument\r\n    const current = workInProgress.alternate;\r\n    if (current !== null) {\r\n      // This is always non-null on a ClassComponent or HostRoot\r\n      const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\r\n      const currentLastBaseUpdate = currentQueue.lastBaseUpdate;\r\n      if (currentLastBaseUpdate !== lastBaseUpdate) {\r\n        if (currentLastBaseUpdate === null) {\r\n          currentQueue.firstBaseUpdate = firstPendingUpdate;\r\n        } else {\r\n          currentLastBaseUpdate.next = firstPendingUpdate;\r\n        }\r\n        currentQueue.lastBaseUpdate = lastPendingUpdate;\r\n      }\r\n    }\r\n  }\r\n\r\n  // These values may change as we process the queue.\r\n  if (firstBaseUpdate !== null) {\r\n    // Iterate through the list of updates to compute the result.\r\n    let newState = queue.baseState;\r\n    // TODO: Don't need to accumulate this. Instead, we can remove renderLanes\r\n    // from the original lanes.\r\n    let newLanes = NoLanes;\r\n\r\n    let newBaseState = null;\r\n    let newFirstBaseUpdate = null;\r\n    let newLastBaseUpdate = null;\r\n\r\n    let update = firstBaseUpdate;\r\n    do {\r\n      // TODO: Don't need this field anymore\r\n      const updateEventTime = update.eventTime;\r\n\r\n      // An extra OffscreenLane bit is added to updates that were made to\r\n      // a hidden tree, so that we can distinguish them from updates that were\r\n      // already there when the tree was hidden.\r\n      const updateLane = removeLanes(update.lane, OffscreenLane);\r\n      const isHiddenUpdate = updateLane !== update.lane;\r\n\r\n      // Check if this update was made while the tree was hidden. If so, then\r\n      // it's not a \"base\" update and we should disregard the extra base lanes\r\n      // that were added to renderLanes when we entered the Offscreen tree.\r\n      const shouldSkipUpdate = isHiddenUpdate\r\n        ? !isSubsetOfLanes(getWorkInProgressRootRenderLanes(), updateLane)\r\n        : !isSubsetOfLanes(renderLanes, updateLane);\r\n\r\n      if (shouldSkipUpdate) {\r\n        // Priority is insufficient. Skip this update. If this is the first\r\n        // skipped update, the previous update/state is the new base\r\n        // update/state.\r\n        const clone: Update<State> = {\r\n          eventTime: updateEventTime,\r\n          lane: updateLane,\r\n\r\n          tag: update.tag,\r\n          payload: update.payload,\r\n          callback: update.callback,\r\n\r\n          next: null,\r\n        };\r\n        if (newLastBaseUpdate === null) {\r\n          newFirstBaseUpdate = newLastBaseUpdate = clone;\r\n          newBaseState = newState;\r\n        } else {\r\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\r\n        }\r\n        // Update the remaining priority in the queue.\r\n        newLanes = mergeLanes(newLanes, updateLane);\r\n      } else {\r\n        // This update does have sufficient priority.\r\n\r\n        if (newLastBaseUpdate !== null) {\r\n          const clone: Update<State> = {\r\n            eventTime: updateEventTime,\r\n            // This update is going to be committed so we never want uncommit\r\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\r\n            // this will never be skipped by the check above.\r\n            lane: NoLane,\r\n\r\n            tag: update.tag,\r\n            payload: update.payload,\r\n\r\n            // When this update is rebased, we should not fire its\r\n            // callback again.\r\n            callback: null,\r\n\r\n            next: null,\r\n          };\r\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\r\n        }\r\n\r\n        // Process this update.\r\n        newState = getStateFromUpdate(\r\n          workInProgress,\r\n          queue,\r\n          update,\r\n          newState,\r\n          props,\r\n          instance,\r\n        );\r\n        const callback = update.callback;\r\n        if (callback !== null) {\r\n          workInProgress.flags |= Callback;\r\n          if (isHiddenUpdate) {\r\n            workInProgress.flags |= Visibility;\r\n          }\r\n          const callbacks = queue.callbacks;\r\n          if (callbacks === null) {\r\n            queue.callbacks = [callback];\r\n          } else {\r\n            callbacks.push(callback);\r\n          }\r\n        }\r\n      }\r\n      update = update.next;\r\n      if (update === null) {\r\n        pendingQueue = queue.shared.pending;\r\n        if (pendingQueue === null) {\r\n          break;\r\n        } else {\r\n          // An update was scheduled from inside a reducer. Add the new\r\n          // pending updates to the end of the list and keep processing.\r\n          const lastPendingUpdate = pendingQueue;\r\n          // Intentionally unsound. Pending updates form a circular list, but we\r\n          // unravel them when transferring them to the base queue.\r\n          const firstPendingUpdate = ((lastPendingUpdate.next: any): Update<State>);\r\n          lastPendingUpdate.next = null;\r\n          update = firstPendingUpdate;\r\n          queue.lastBaseUpdate = lastPendingUpdate;\r\n          queue.shared.pending = null;\r\n        }\r\n      }\r\n    } while (true);\r\n\r\n    if (newLastBaseUpdate === null) {\r\n      newBaseState = newState;\r\n    }\r\n\r\n    queue.baseState = ((newBaseState: any): State);\r\n    queue.firstBaseUpdate = newFirstBaseUpdate;\r\n    queue.lastBaseUpdate = newLastBaseUpdate;\r\n\r\n    if (firstBaseUpdate === null) {\r\n      // `queue.lanes` is used for entangling transitions. We can set it back to\r\n      // zero once the queue is empty.\r\n      queue.shared.lanes = NoLanes;\r\n    }\r\n\r\n    // Set the remaining expiration time to be whatever is remaining in the queue.\r\n    // This should be fine because the only two other things that contribute to\r\n    // expiration time are props and context. We're already in the middle of the\r\n    // begin phase by the time we start processing the queue, so we've already\r\n    // dealt with the props. Context in components that specify\r\n    // shouldComponentUpdate is tricky; but we'll have to account for\r\n    // that regardless.\r\n    markSkippedUpdateLanes(newLanes);\r\n    workInProgress.lanes = newLanes;\r\n    workInProgress.memoizedState = newState;\r\n  }\r\n\r\n  if (__DEV__) {\r\n    currentlyProcessingQueue = null;\r\n  }\r\n}\r\n\r\nfunction callCallback(callback, context) {\r\n  if (typeof callback !== 'function') {\r\n    throw new Error(\r\n      'Invalid argument passed as callback. Expected a function. Instead ' +\r\n        `received: ${callback}`,\r\n    );\r\n  }\r\n\r\n  callback.call(context);\r\n}\r\n\r\nexport function resetHasForceUpdateBeforeProcessing() {\r\n  hasForceUpdate = false;\r\n}\r\n\r\nexport function checkHasForceUpdateAfterProcessing(): boolean {\r\n  return hasForceUpdate;\r\n}\r\n\r\nexport function deferHiddenCallbacks<State>(\r\n  updateQueue: UpdateQueue<State>,\r\n): void {\r\n  // When an update finishes on a hidden component, its callback should not\r\n  // be fired until/unless the component is made visible again. Stash the\r\n  // callback on the shared queue object so it can be fired later.\r\n  const newHiddenCallbacks = updateQueue.callbacks;\r\n  if (newHiddenCallbacks !== null) {\r\n    const existingHiddenCallbacks = updateQueue.shared.hiddenCallbacks;\r\n    if (existingHiddenCallbacks === null) {\r\n      updateQueue.shared.hiddenCallbacks = newHiddenCallbacks;\r\n    } else {\r\n      updateQueue.shared.hiddenCallbacks = existingHiddenCallbacks.concat(\r\n        newHiddenCallbacks,\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport function commitHiddenCallbacks<State>(\r\n  updateQueue: UpdateQueue<State>,\r\n  context: any,\r\n): void {\r\n  // This component is switching from hidden -> visible. Commit any callbacks\r\n  // that were previously deferred.\r\n  const hiddenCallbacks = updateQueue.shared.hiddenCallbacks;\r\n  if (hiddenCallbacks !== null) {\r\n    updateQueue.shared.hiddenCallbacks = null;\r\n    for (let i = 0; i < hiddenCallbacks.length; i++) {\r\n      const callback = hiddenCallbacks[i];\r\n      callCallback(callback, context);\r\n    }\r\n  }\r\n}\r\n\r\nexport function commitCallbacks<State>(\r\n  updateQueue: UpdateQueue<State>,\r\n  context: any,\r\n): void {\r\n  const callbacks = updateQueue.callbacks;\r\n  if (callbacks !== null) {\r\n    updateQueue.callbacks = null;\r\n    for (let i = 0; i < callbacks.length; i++) {\r\n      const callback = callbacks[i];\r\n      callCallback(callback, context);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {Fiber} from './ReactInternalTypes';\r\nimport type {Lanes} from './ReactFiberLane.old';\r\nimport type {UpdateQueue} from './ReactFiberClassUpdateQueue.old';\r\nimport type {Flags} from './ReactFiberFlags';\r\n\r\nimport * as React from 'react';\r\nimport {LayoutStatic, Update, Snapshot} from './ReactFiberFlags';\r\nimport {\r\n  debugRenderPhaseSideEffectsForStrictMode,\r\n  disableLegacyContext,\r\n  enableDebugTracing,\r\n  enableSchedulingProfiler,\r\n  warnAboutDeprecatedLifecycles,\r\n  enableLazyContextPropagation,\r\n} from 'shared/ReactFeatureFlags';\r\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\r\nimport {isMounted} from './ReactFiberTreeReflection';\r\nimport {get as getInstance, set as setInstance} from 'shared/ReactInstanceMap';\r\nimport shallowEqual from 'shared/shallowEqual';\r\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\r\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\r\nimport assign from 'shared/assign';\r\nimport isArray from 'shared/isArray';\r\nimport {REACT_CONTEXT_TYPE, REACT_PROVIDER_TYPE} from 'shared/ReactSymbols';\r\n\r\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\r\nimport {DebugTracingMode, StrictLegacyMode} from './ReactTypeOfMode';\r\n\r\nimport {\r\n  enqueueUpdate,\r\n  entangleTransitions,\r\n  processUpdateQueue,\r\n  checkHasForceUpdateAfterProcessing,\r\n  resetHasForceUpdateBeforeProcessing,\r\n  createUpdate,\r\n  ReplaceState,\r\n  ForceUpdate,\r\n  initializeUpdateQueue,\r\n  cloneUpdateQueue,\r\n} from './ReactFiberClassUpdateQueue.old';\r\nimport {NoLanes} from './ReactFiberLane.old';\r\nimport {\r\n  cacheContext,\r\n  getMaskedContext,\r\n  getUnmaskedContext,\r\n  hasContextChanged,\r\n  emptyContextObject,\r\n} from './ReactFiberContext.old';\r\nimport {readContext, checkIfContextChanged} from './ReactFiberNewContext.old';\r\nimport {\r\n  requestEventTime,\r\n  requestUpdateLane,\r\n  scheduleUpdateOnFiber,\r\n} from './ReactFiberWorkLoop.old';\r\nimport {logForceUpdateScheduled, logStateUpdateScheduled} from './DebugTracing';\r\nimport {\r\n  markForceUpdateScheduled,\r\n  markStateUpdateScheduled,\r\n  setIsStrictModeForDevtools,\r\n} from './ReactFiberDevToolsHook.old';\r\n\r\nconst fakeInternalInstance = {};\r\n\r\n// React.Component uses a shared frozen object by default.\r\n// We'll use it to determine whether we need to initialize legacy refs.\r\nexport const emptyRefsObject = new React.Component().refs;\r\n\r\nlet didWarnAboutStateAssignmentForComponent;\r\nlet didWarnAboutUninitializedState;\r\nlet didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\r\nlet didWarnAboutLegacyLifecyclesAndDerivedState;\r\nlet didWarnAboutUndefinedDerivedState;\r\nlet warnOnUndefinedDerivedState;\r\nlet warnOnInvalidCallback;\r\nlet didWarnAboutDirectlyAssigningPropsToState;\r\nlet didWarnAboutContextTypeAndContextTypes;\r\nlet didWarnAboutInvalidateContextType;\r\n\r\nif (__DEV__) {\r\n  didWarnAboutStateAssignmentForComponent = new Set();\r\n  didWarnAboutUninitializedState = new Set();\r\n  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\r\n  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\r\n  didWarnAboutDirectlyAssigningPropsToState = new Set();\r\n  didWarnAboutUndefinedDerivedState = new Set();\r\n  didWarnAboutContextTypeAndContextTypes = new Set();\r\n  didWarnAboutInvalidateContextType = new Set();\r\n\r\n  const didWarnOnInvalidCallback = new Set();\r\n\r\n  warnOnInvalidCallback = function(callback: mixed, callerName: string) {\r\n    if (callback === null || typeof callback === 'function') {\r\n      return;\r\n    }\r\n    const key = callerName + '_' + (callback: any);\r\n    if (!didWarnOnInvalidCallback.has(key)) {\r\n      didWarnOnInvalidCallback.add(key);\r\n      console.error(\r\n        '%s(...): Expected the last optional `callback` argument to be a ' +\r\n          'function. Instead received: %s.',\r\n        callerName,\r\n        callback,\r\n      );\r\n    }\r\n  };\r\n\r\n  warnOnUndefinedDerivedState = function(type, partialState) {\r\n    if (partialState === undefined) {\r\n      const componentName = getComponentNameFromType(type) || 'Component';\r\n      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\r\n        didWarnAboutUndefinedDerivedState.add(componentName);\r\n        console.error(\r\n          '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' +\r\n            'You have returned undefined.',\r\n          componentName,\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  // This is so gross but it's at least non-critical and can be removed if\r\n  // it causes problems. This is meant to give a nicer error message for\r\n  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\r\n  // ...)) which otherwise throws a \"_processChildContext is not a function\"\r\n  // exception.\r\n  Object.defineProperty(fakeInternalInstance, '_processChildContext', {\r\n    enumerable: false,\r\n    value: function() {\r\n      throw new Error(\r\n        '_processChildContext is not available in React 16+. This likely ' +\r\n          'means you have multiple copies of React and are attempting to nest ' +\r\n          'a React 15 tree inside a React 16 tree using ' +\r\n          \"unstable_renderSubtreeIntoContainer, which isn't supported. Try \" +\r\n          'to make sure you have only one copy of React (and ideally, switch ' +\r\n          'to ReactDOM.createPortal).',\r\n      );\r\n    },\r\n  });\r\n  Object.freeze(fakeInternalInstance);\r\n}\r\n\r\nfunction applyDerivedStateFromProps(\r\n  workInProgress: Fiber,\r\n  ctor: any,\r\n  getDerivedStateFromProps: (props: any, state: any) => any,\r\n  nextProps: any,\r\n) {\r\n  const prevState = workInProgress.memoizedState;\r\n  let partialState = getDerivedStateFromProps(nextProps, prevState);\r\n  if (__DEV__) {\r\n    if (\r\n      debugRenderPhaseSideEffectsForStrictMode &&\r\n      workInProgress.mode & StrictLegacyMode\r\n    ) {\r\n      setIsStrictModeForDevtools(true);\r\n      try {\r\n        // Invoke the function an extra time to help detect side-effects.\r\n        partialState = getDerivedStateFromProps(nextProps, prevState);\r\n      } finally {\r\n        setIsStrictModeForDevtools(false);\r\n      }\r\n    }\r\n    warnOnUndefinedDerivedState(ctor, partialState);\r\n  }\r\n  // Merge the partial state and the previous state.\r\n  const memoizedState =\r\n    partialState === null || partialState === undefined\r\n      ? prevState\r\n      : assign({}, prevState, partialState);\r\n  workInProgress.memoizedState = memoizedState;\r\n\r\n  // Once the update queue is empty, persist the derived state onto the\r\n  // base state.\r\n  if (workInProgress.lanes === NoLanes) {\r\n    // Queue is always non-null for classes\r\n    const updateQueue: UpdateQueue<any> = (workInProgress.updateQueue: any);\r\n    updateQueue.baseState = memoizedState;\r\n  }\r\n}\r\n\r\nconst classComponentUpdater = {\r\n  isMounted,\r\n  enqueueSetState(inst, payload, callback) {\r\n    const fiber = getInstance(inst);\r\n    const eventTime = requestEventTime();\r\n    const lane = requestUpdateLane(fiber);\r\n\r\n    const update = createUpdate(eventTime, lane);\r\n    update.payload = payload;\r\n    if (callback !== undefined && callback !== null) {\r\n      if (__DEV__) {\r\n        warnOnInvalidCallback(callback, 'setState');\r\n      }\r\n      update.callback = callback;\r\n    }\r\n\r\n    const root = enqueueUpdate(fiber, update, lane);\r\n    if (root !== null) {\r\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\r\n      entangleTransitions(root, fiber, lane);\r\n    }\r\n\r\n    if (__DEV__) {\r\n      if (enableDebugTracing) {\r\n        if (fiber.mode & DebugTracingMode) {\r\n          const name = getComponentNameFromFiber(fiber) || 'Unknown';\r\n          logStateUpdateScheduled(name, lane, payload);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (enableSchedulingProfiler) {\r\n      markStateUpdateScheduled(fiber, lane);\r\n    }\r\n  },\r\n  enqueueReplaceState(inst, payload, callback) {\r\n    const fiber = getInstance(inst);\r\n    const eventTime = requestEventTime();\r\n    const lane = requestUpdateLane(fiber);\r\n\r\n    const update = createUpdate(eventTime, lane);\r\n    update.tag = ReplaceState;\r\n    update.payload = payload;\r\n\r\n    if (callback !== undefined && callback !== null) {\r\n      if (__DEV__) {\r\n        warnOnInvalidCallback(callback, 'replaceState');\r\n      }\r\n      update.callback = callback;\r\n    }\r\n\r\n    const root = enqueueUpdate(fiber, update, lane);\r\n    if (root !== null) {\r\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\r\n      entangleTransitions(root, fiber, lane);\r\n    }\r\n\r\n    if (__DEV__) {\r\n      if (enableDebugTracing) {\r\n        if (fiber.mode & DebugTracingMode) {\r\n          const name = getComponentNameFromFiber(fiber) || 'Unknown';\r\n          logStateUpdateScheduled(name, lane, payload);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (enableSchedulingProfiler) {\r\n      markStateUpdateScheduled(fiber, lane);\r\n    }\r\n  },\r\n  enqueueForceUpdate(inst, callback) {\r\n    const fiber = getInstance(inst);\r\n    const eventTime = requestEventTime();\r\n    const lane = requestUpdateLane(fiber);\r\n\r\n    const update = createUpdate(eventTime, lane);\r\n    update.tag = ForceUpdate;\r\n\r\n    if (callback !== undefined && callback !== null) {\r\n      if (__DEV__) {\r\n        warnOnInvalidCallback(callback, 'forceUpdate');\r\n      }\r\n      update.callback = callback;\r\n    }\r\n\r\n    const root = enqueueUpdate(fiber, update, lane);\r\n    if (root !== null) {\r\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\r\n      entangleTransitions(root, fiber, lane);\r\n    }\r\n\r\n    if (__DEV__) {\r\n      if (enableDebugTracing) {\r\n        if (fiber.mode & DebugTracingMode) {\r\n          const name = getComponentNameFromFiber(fiber) || 'Unknown';\r\n          logForceUpdateScheduled(name, lane);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (enableSchedulingProfiler) {\r\n      markForceUpdateScheduled(fiber, lane);\r\n    }\r\n  },\r\n};\r\n\r\nfunction checkShouldComponentUpdate(\r\n  workInProgress,\r\n  ctor,\r\n  oldProps,\r\n  newProps,\r\n  oldState,\r\n  newState,\r\n  nextContext,\r\n) {\r\n  const instance = workInProgress.stateNode;\r\n  if (typeof instance.shouldComponentUpdate === 'function') {\r\n    let shouldUpdate = instance.shouldComponentUpdate(\r\n      newProps,\r\n      newState,\r\n      nextContext,\r\n    );\r\n    if (__DEV__) {\r\n      if (\r\n        debugRenderPhaseSideEffectsForStrictMode &&\r\n        workInProgress.mode & StrictLegacyMode\r\n      ) {\r\n        setIsStrictModeForDevtools(true);\r\n        try {\r\n          // Invoke the function an extra time to help detect side-effects.\r\n          shouldUpdate = instance.shouldComponentUpdate(\r\n            newProps,\r\n            newState,\r\n            nextContext,\r\n          );\r\n        } finally {\r\n          setIsStrictModeForDevtools(false);\r\n        }\r\n      }\r\n      if (shouldUpdate === undefined) {\r\n        console.error(\r\n          '%s.shouldComponentUpdate(): Returned undefined instead of a ' +\r\n            'boolean value. Make sure to return true or false.',\r\n          getComponentNameFromType(ctor) || 'Component',\r\n        );\r\n      }\r\n    }\r\n\r\n    return shouldUpdate;\r\n  }\r\n\r\n  if (ctor.prototype && ctor.prototype.isPureReactComponent) {\r\n    return (\r\n      !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)\r\n    );\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction checkClassInstance(workInProgress: Fiber, ctor: any, newProps: any) {\r\n  const instance = workInProgress.stateNode;\r\n  if (__DEV__) {\r\n    const name = getComponentNameFromType(ctor) || 'Component';\r\n    const renderPresent = instance.render;\r\n\r\n    if (!renderPresent) {\r\n      if (ctor.prototype && typeof ctor.prototype.render === 'function') {\r\n        console.error(\r\n          '%s(...): No `render` method found on the returned component ' +\r\n            'instance: did you accidentally return an object from the constructor?',\r\n          name,\r\n        );\r\n      } else {\r\n        console.error(\r\n          '%s(...): No `render` method found on the returned component ' +\r\n            'instance: you may have forgotten to define `render`.',\r\n          name,\r\n        );\r\n      }\r\n    }\r\n\r\n    if (\r\n      instance.getInitialState &&\r\n      !instance.getInitialState.isReactClassApproved &&\r\n      !instance.state\r\n    ) {\r\n      console.error(\r\n        'getInitialState was defined on %s, a plain JavaScript class. ' +\r\n          'This is only supported for classes created using React.createClass. ' +\r\n          'Did you mean to define a state property instead?',\r\n        name,\r\n      );\r\n    }\r\n    if (\r\n      instance.getDefaultProps &&\r\n      !instance.getDefaultProps.isReactClassApproved\r\n    ) {\r\n      console.error(\r\n        'getDefaultProps was defined on %s, a plain JavaScript class. ' +\r\n          'This is only supported for classes created using React.createClass. ' +\r\n          'Use a static property to define defaultProps instead.',\r\n        name,\r\n      );\r\n    }\r\n    if (instance.propTypes) {\r\n      console.error(\r\n        'propTypes was defined as an instance property on %s. Use a static ' +\r\n          'property to define propTypes instead.',\r\n        name,\r\n      );\r\n    }\r\n    if (instance.contextType) {\r\n      console.error(\r\n        'contextType was defined as an instance property on %s. Use a static ' +\r\n          'property to define contextType instead.',\r\n        name,\r\n      );\r\n    }\r\n\r\n    if (disableLegacyContext) {\r\n      if (ctor.childContextTypes) {\r\n        console.error(\r\n          '%s uses the legacy childContextTypes API which is no longer supported. ' +\r\n            'Use React.createContext() instead.',\r\n          name,\r\n        );\r\n      }\r\n      if (ctor.contextTypes) {\r\n        console.error(\r\n          '%s uses the legacy contextTypes API which is no longer supported. ' +\r\n            'Use React.createContext() with static contextType instead.',\r\n          name,\r\n        );\r\n      }\r\n    } else {\r\n      if (instance.contextTypes) {\r\n        console.error(\r\n          'contextTypes was defined as an instance property on %s. Use a static ' +\r\n            'property to define contextTypes instead.',\r\n          name,\r\n        );\r\n      }\r\n\r\n      if (\r\n        ctor.contextType &&\r\n        ctor.contextTypes &&\r\n        !didWarnAboutContextTypeAndContextTypes.has(ctor)\r\n      ) {\r\n        didWarnAboutContextTypeAndContextTypes.add(ctor);\r\n        console.error(\r\n          '%s declares both contextTypes and contextType static properties. ' +\r\n            'The legacy contextTypes property will be ignored.',\r\n          name,\r\n        );\r\n      }\r\n    }\r\n\r\n    if (typeof instance.componentShouldUpdate === 'function') {\r\n      console.error(\r\n        '%s has a method called ' +\r\n          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\r\n          'The name is phrased as a question because the function is ' +\r\n          'expected to return a value.',\r\n        name,\r\n      );\r\n    }\r\n    if (\r\n      ctor.prototype &&\r\n      ctor.prototype.isPureReactComponent &&\r\n      typeof instance.shouldComponentUpdate !== 'undefined'\r\n    ) {\r\n      console.error(\r\n        '%s has a method called shouldComponentUpdate(). ' +\r\n          'shouldComponentUpdate should not be used when extending React.PureComponent. ' +\r\n          'Please extend React.Component if shouldComponentUpdate is used.',\r\n        getComponentNameFromType(ctor) || 'A pure component',\r\n      );\r\n    }\r\n    if (typeof instance.componentDidUnmount === 'function') {\r\n      console.error(\r\n        '%s has a method called ' +\r\n          'componentDidUnmount(). But there is no such lifecycle method. ' +\r\n          'Did you mean componentWillUnmount()?',\r\n        name,\r\n      );\r\n    }\r\n    if (typeof instance.componentDidReceiveProps === 'function') {\r\n      console.error(\r\n        '%s has a method called ' +\r\n          'componentDidReceiveProps(). But there is no such lifecycle method. ' +\r\n          'If you meant to update the state in response to changing props, ' +\r\n          'use componentWillReceiveProps(). If you meant to fetch data or ' +\r\n          'run side-effects or mutations after React has updated the UI, use componentDidUpdate().',\r\n        name,\r\n      );\r\n    }\r\n    if (typeof instance.componentWillRecieveProps === 'function') {\r\n      console.error(\r\n        '%s has a method called ' +\r\n          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',\r\n        name,\r\n      );\r\n    }\r\n    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {\r\n      console.error(\r\n        '%s has a method called ' +\r\n          'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?',\r\n        name,\r\n      );\r\n    }\r\n    const hasMutatedProps = instance.props !== newProps;\r\n    if (instance.props !== undefined && hasMutatedProps) {\r\n      console.error(\r\n        '%s(...): When calling super() in `%s`, make sure to pass ' +\r\n          \"up the same props that your component's constructor was passed.\",\r\n        name,\r\n        name,\r\n      );\r\n    }\r\n    if (instance.defaultProps) {\r\n      console.error(\r\n        'Setting defaultProps as an instance property on %s is not supported and will be ignored.' +\r\n          ' Instead, define defaultProps as a static property on %s.',\r\n        name,\r\n        name,\r\n      );\r\n    }\r\n\r\n    if (\r\n      typeof instance.getSnapshotBeforeUpdate === 'function' &&\r\n      typeof instance.componentDidUpdate !== 'function' &&\r\n      !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)\r\n    ) {\r\n      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\r\n      console.error(\r\n        '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' +\r\n          'This component defines getSnapshotBeforeUpdate() only.',\r\n        getComponentNameFromType(ctor),\r\n      );\r\n    }\r\n\r\n    if (typeof instance.getDerivedStateFromProps === 'function') {\r\n      console.error(\r\n        '%s: getDerivedStateFromProps() is defined as an instance method ' +\r\n          'and will be ignored. Instead, declare it as a static method.',\r\n        name,\r\n      );\r\n    }\r\n    if (typeof instance.getDerivedStateFromError === 'function') {\r\n      console.error(\r\n        '%s: getDerivedStateFromError() is defined as an instance method ' +\r\n          'and will be ignored. Instead, declare it as a static method.',\r\n        name,\r\n      );\r\n    }\r\n    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {\r\n      console.error(\r\n        '%s: getSnapshotBeforeUpdate() is defined as a static method ' +\r\n          'and will be ignored. Instead, declare it as an instance method.',\r\n        name,\r\n      );\r\n    }\r\n    const state = instance.state;\r\n    if (state && (typeof state !== 'object' || isArray(state))) {\r\n      console.error('%s.state: must be set to an object or null', name);\r\n    }\r\n    if (\r\n      typeof instance.getChildContext === 'function' &&\r\n      typeof ctor.childContextTypes !== 'object'\r\n    ) {\r\n      console.error(\r\n        '%s.getChildContext(): childContextTypes must be defined in order to ' +\r\n          'use getChildContext().',\r\n        name,\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction adoptClassInstance(workInProgress: Fiber, instance: any): void {\r\n  instance.updater = classComponentUpdater;\r\n  workInProgress.stateNode = instance;\r\n  // The instance needs access to the fiber so that it can schedule updates\r\n  setInstance(instance, workInProgress);\r\n  if (__DEV__) {\r\n    instance._reactInternalInstance = fakeInternalInstance;\r\n  }\r\n}\r\n\r\nfunction constructClassInstance(\r\n  workInProgress: Fiber,\r\n  ctor: any,\r\n  props: any,\r\n): any {\r\n  let isLegacyContextConsumer = false;\r\n  let unmaskedContext = emptyContextObject;\r\n  let context = emptyContextObject;\r\n  const contextType = ctor.contextType;\r\n\r\n  if (__DEV__) {\r\n    if ('contextType' in ctor) {\r\n      const isValid =\r\n        // Allow null for conditional declaration\r\n        contextType === null ||\r\n        (contextType !== undefined &&\r\n          contextType.$$typeof === REACT_CONTEXT_TYPE &&\r\n          contextType._context === undefined); // Not a <Context.Consumer>\r\n\r\n      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\r\n        didWarnAboutInvalidateContextType.add(ctor);\r\n\r\n        let addendum = '';\r\n        if (contextType === undefined) {\r\n          addendum =\r\n            ' However, it is set to undefined. ' +\r\n            'This can be caused by a typo or by mixing up named and default imports. ' +\r\n            'This can also happen due to a circular dependency, so ' +\r\n            'try moving the createContext() call to a separate file.';\r\n        } else if (typeof contextType !== 'object') {\r\n          addendum = ' However, it is set to a ' + typeof contextType + '.';\r\n        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\r\n          addendum = ' Did you accidentally pass the Context.Provider instead?';\r\n        } else if (contextType._context !== undefined) {\r\n          // <Context.Consumer>\r\n          addendum = ' Did you accidentally pass the Context.Consumer instead?';\r\n        } else {\r\n          addendum =\r\n            ' However, it is set to an object with keys {' +\r\n            Object.keys(contextType).join(', ') +\r\n            '}.';\r\n        }\r\n        console.error(\r\n          '%s defines an invalid contextType. ' +\r\n            'contextType should point to the Context object returned by React.createContext().%s',\r\n          getComponentNameFromType(ctor) || 'Component',\r\n          addendum,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  if (typeof contextType === 'object' && contextType !== null) {\r\n    context = readContext((contextType: any));\r\n  } else if (!disableLegacyContext) {\r\n    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\r\n    const contextTypes = ctor.contextTypes;\r\n    isLegacyContextConsumer =\r\n      contextTypes !== null && contextTypes !== undefined;\r\n    context = isLegacyContextConsumer\r\n      ? getMaskedContext(workInProgress, unmaskedContext)\r\n      : emptyContextObject;\r\n  }\r\n\r\n  let instance = new ctor(props, context);\r\n  // Instantiate twice to help detect side-effects.\r\n  if (__DEV__) {\r\n    if (\r\n      debugRenderPhaseSideEffectsForStrictMode &&\r\n      workInProgress.mode & StrictLegacyMode\r\n    ) {\r\n      setIsStrictModeForDevtools(true);\r\n      try {\r\n        instance = new ctor(props, context); // eslint-disable-line no-new\r\n      } finally {\r\n        setIsStrictModeForDevtools(false);\r\n      }\r\n    }\r\n  }\r\n\r\n  const state = (workInProgress.memoizedState =\r\n    instance.state !== null && instance.state !== undefined\r\n      ? instance.state\r\n      : null);\r\n  adoptClassInstance(workInProgress, instance);\r\n\r\n  if (__DEV__) {\r\n    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {\r\n      const componentName = getComponentNameFromType(ctor) || 'Component';\r\n      if (!didWarnAboutUninitializedState.has(componentName)) {\r\n        didWarnAboutUninitializedState.add(componentName);\r\n        console.error(\r\n          '`%s` uses `getDerivedStateFromProps` but its initial state is ' +\r\n            '%s. This is not recommended. Instead, define the initial state by ' +\r\n            'assigning an object to `this.state` in the constructor of `%s`. ' +\r\n            'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.',\r\n          componentName,\r\n          instance.state === null ? 'null' : 'undefined',\r\n          componentName,\r\n        );\r\n      }\r\n    }\r\n\r\n    // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\r\n    // Warn about these lifecycles if they are present.\r\n    // Don't warn about react-lifecycles-compat polyfilled methods though.\r\n    if (\r\n      typeof ctor.getDerivedStateFromProps === 'function' ||\r\n      typeof instance.getSnapshotBeforeUpdate === 'function'\r\n    ) {\r\n      let foundWillMountName = null;\r\n      let foundWillReceivePropsName = null;\r\n      let foundWillUpdateName = null;\r\n      if (\r\n        typeof instance.componentWillMount === 'function' &&\r\n        instance.componentWillMount.__suppressDeprecationWarning !== true\r\n      ) {\r\n        foundWillMountName = 'componentWillMount';\r\n      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\r\n        foundWillMountName = 'UNSAFE_componentWillMount';\r\n      }\r\n      if (\r\n        typeof instance.componentWillReceiveProps === 'function' &&\r\n        instance.componentWillReceiveProps.__suppressDeprecationWarning !== true\r\n      ) {\r\n        foundWillReceivePropsName = 'componentWillReceiveProps';\r\n      } else if (\r\n        typeof instance.UNSAFE_componentWillReceiveProps === 'function'\r\n      ) {\r\n        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\r\n      }\r\n      if (\r\n        typeof instance.componentWillUpdate === 'function' &&\r\n        instance.componentWillUpdate.__suppressDeprecationWarning !== true\r\n      ) {\r\n        foundWillUpdateName = 'componentWillUpdate';\r\n      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\r\n        foundWillUpdateName = 'UNSAFE_componentWillUpdate';\r\n      }\r\n      if (\r\n        foundWillMountName !== null ||\r\n        foundWillReceivePropsName !== null ||\r\n        foundWillUpdateName !== null\r\n      ) {\r\n        const componentName = getComponentNameFromType(ctor) || 'Component';\r\n        const newApiName =\r\n          typeof ctor.getDerivedStateFromProps === 'function'\r\n            ? 'getDerivedStateFromProps()'\r\n            : 'getSnapshotBeforeUpdate()';\r\n        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(componentName)) {\r\n          didWarnAboutLegacyLifecyclesAndDerivedState.add(componentName);\r\n          console.error(\r\n            'Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' +\r\n              '%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n' +\r\n              'The above lifecycles should be removed. Learn more about this warning here:\\n' +\r\n              'https://reactjs.org/link/unsafe-component-lifecycles',\r\n            componentName,\r\n            newApiName,\r\n            foundWillMountName !== null ? `\\n  ${foundWillMountName}` : '',\r\n            foundWillReceivePropsName !== null\r\n              ? `\\n  ${foundWillReceivePropsName}`\r\n              : '',\r\n            foundWillUpdateName !== null ? `\\n  ${foundWillUpdateName}` : '',\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Cache unmasked context so we can avoid recreating masked context unless necessary.\r\n  // ReactFiberContext usually updates this cache but can't for newly-created instances.\r\n  if (isLegacyContextConsumer) {\r\n    cacheContext(workInProgress, unmaskedContext, context);\r\n  }\r\n\r\n  return instance;\r\n}\r\n\r\nfunction callComponentWillMount(workInProgress, instance) {\r\n  const oldState = instance.state;\r\n\r\n  if (typeof instance.componentWillMount === 'function') {\r\n    instance.componentWillMount();\r\n  }\r\n  if (typeof instance.UNSAFE_componentWillMount === 'function') {\r\n    instance.UNSAFE_componentWillMount();\r\n  }\r\n\r\n  if (oldState !== instance.state) {\r\n    if (__DEV__) {\r\n      console.error(\r\n        '%s.componentWillMount(): Assigning directly to this.state is ' +\r\n          \"deprecated (except inside a component's \" +\r\n          'constructor). Use setState instead.',\r\n        getComponentNameFromFiber(workInProgress) || 'Component',\r\n      );\r\n    }\r\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\r\n  }\r\n}\r\n\r\nfunction callComponentWillReceiveProps(\r\n  workInProgress,\r\n  instance,\r\n  newProps,\r\n  nextContext,\r\n) {\r\n  const oldState = instance.state;\r\n  if (typeof instance.componentWillReceiveProps === 'function') {\r\n    instance.componentWillReceiveProps(newProps, nextContext);\r\n  }\r\n  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\r\n    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\r\n  }\r\n\r\n  if (instance.state !== oldState) {\r\n    if (__DEV__) {\r\n      const componentName =\r\n        getComponentNameFromFiber(workInProgress) || 'Component';\r\n      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\r\n        didWarnAboutStateAssignmentForComponent.add(componentName);\r\n        console.error(\r\n          '%s.componentWillReceiveProps(): Assigning directly to ' +\r\n            \"this.state is deprecated (except inside a component's \" +\r\n            'constructor). Use setState instead.',\r\n          componentName,\r\n        );\r\n      }\r\n    }\r\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\r\n  }\r\n}\r\n\r\n// Invokes the mount life-cycles on a previously never rendered instance.\r\nfunction mountClassInstance(\r\n  workInProgress: Fiber,\r\n  ctor: any,\r\n  newProps: any,\r\n  renderLanes: Lanes,\r\n): void {\r\n  if (__DEV__) {\r\n    checkClassInstance(workInProgress, ctor, newProps);\r\n  }\r\n\r\n  const instance = workInProgress.stateNode;\r\n  instance.props = newProps;\r\n  instance.state = workInProgress.memoizedState;\r\n  instance.refs = emptyRefsObject;\r\n\r\n  initializeUpdateQueue(workInProgress);\r\n\r\n  const contextType = ctor.contextType;\r\n  if (typeof contextType === 'object' && contextType !== null) {\r\n    instance.context = readContext(contextType);\r\n  } else if (disableLegacyContext) {\r\n    instance.context = emptyContextObject;\r\n  } else {\r\n    const unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\r\n    instance.context = getMaskedContext(workInProgress, unmaskedContext);\r\n  }\r\n\r\n  if (__DEV__) {\r\n    if (instance.state === newProps) {\r\n      const componentName = getComponentNameFromType(ctor) || 'Component';\r\n      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\r\n        didWarnAboutDirectlyAssigningPropsToState.add(componentName);\r\n        console.error(\r\n          '%s: It is not recommended to assign props directly to state ' +\r\n            \"because updates to props won't be reflected in state. \" +\r\n            'In most cases, it is better to use props directly.',\r\n          componentName,\r\n        );\r\n      }\r\n    }\r\n\r\n    if (workInProgress.mode & StrictLegacyMode) {\r\n      ReactStrictModeWarnings.recordLegacyContextWarning(\r\n        workInProgress,\r\n        instance,\r\n      );\r\n    }\r\n\r\n    if (warnAboutDeprecatedLifecycles) {\r\n      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(\r\n        workInProgress,\r\n        instance,\r\n      );\r\n    }\r\n  }\r\n\r\n  instance.state = workInProgress.memoizedState;\r\n\r\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\r\n  if (typeof getDerivedStateFromProps === 'function') {\r\n    applyDerivedStateFromProps(\r\n      workInProgress,\r\n      ctor,\r\n      getDerivedStateFromProps,\r\n      newProps,\r\n    );\r\n    instance.state = workInProgress.memoizedState;\r\n  }\r\n\r\n  // In order to support react-lifecycles-compat polyfilled components,\r\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\r\n  if (\r\n    typeof ctor.getDerivedStateFromProps !== 'function' &&\r\n    typeof instance.getSnapshotBeforeUpdate !== 'function' &&\r\n    (typeof instance.UNSAFE_componentWillMount === 'function' ||\r\n      typeof instance.componentWillMount === 'function')\r\n  ) {\r\n    callComponentWillMount(workInProgress, instance);\r\n    // If we had additional state updates during this life-cycle, let's\r\n    // process them now.\r\n    processUpdateQueue(workInProgress, newProps, instance, renderLanes);\r\n    instance.state = workInProgress.memoizedState;\r\n  }\r\n\r\n  if (typeof instance.componentDidMount === 'function') {\r\n    const fiberFlags: Flags = Update | LayoutStatic;\r\n    workInProgress.flags |= fiberFlags;\r\n  }\r\n}\r\n\r\nfunction resumeMountClassInstance(\r\n  workInProgress: Fiber,\r\n  ctor: any,\r\n  newProps: any,\r\n  renderLanes: Lanes,\r\n): boolean {\r\n  const instance = workInProgress.stateNode;\r\n\r\n  const oldProps = workInProgress.memoizedProps;\r\n  instance.props = oldProps;\r\n\r\n  const oldContext = instance.context;\r\n  const contextType = ctor.contextType;\r\n  let nextContext = emptyContextObject;\r\n  if (typeof contextType === 'object' && contextType !== null) {\r\n    nextContext = readContext(contextType);\r\n  } else if (!disableLegacyContext) {\r\n    const nextLegacyUnmaskedContext = getUnmaskedContext(\r\n      workInProgress,\r\n      ctor,\r\n      true,\r\n    );\r\n    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);\r\n  }\r\n\r\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\r\n  const hasNewLifecycles =\r\n    typeof getDerivedStateFromProps === 'function' ||\r\n    typeof instance.getSnapshotBeforeUpdate === 'function';\r\n\r\n  // Note: During these life-cycles, instance.props/instance.state are what\r\n  // ever the previously attempted to render - not the \"current\". However,\r\n  // during componentDidUpdate we pass the \"current\" props.\r\n\r\n  // In order to support react-lifecycles-compat polyfilled components,\r\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\r\n  if (\r\n    !hasNewLifecycles &&\r\n    (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||\r\n      typeof instance.componentWillReceiveProps === 'function')\r\n  ) {\r\n    if (oldProps !== newProps || oldContext !== nextContext) {\r\n      callComponentWillReceiveProps(\r\n        workInProgress,\r\n        instance,\r\n        newProps,\r\n        nextContext,\r\n      );\r\n    }\r\n  }\r\n\r\n  resetHasForceUpdateBeforeProcessing();\r\n\r\n  const oldState = workInProgress.memoizedState;\r\n  let newState = (instance.state = oldState);\r\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\r\n  newState = workInProgress.memoizedState;\r\n  if (\r\n    oldProps === newProps &&\r\n    oldState === newState &&\r\n    !hasContextChanged() &&\r\n    !checkHasForceUpdateAfterProcessing()\r\n  ) {\r\n    // If an update was already in progress, we should schedule an Update\r\n    // effect even though we're bailing out, so that cWU/cDU are called.\r\n    if (typeof instance.componentDidMount === 'function') {\r\n      const fiberFlags: Flags = Update | LayoutStatic;\r\n      workInProgress.flags |= fiberFlags;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  if (typeof getDerivedStateFromProps === 'function') {\r\n    applyDerivedStateFromProps(\r\n      workInProgress,\r\n      ctor,\r\n      getDerivedStateFromProps,\r\n      newProps,\r\n    );\r\n    newState = workInProgress.memoizedState;\r\n  }\r\n\r\n  const shouldUpdate =\r\n    checkHasForceUpdateAfterProcessing() ||\r\n    checkShouldComponentUpdate(\r\n      workInProgress,\r\n      ctor,\r\n      oldProps,\r\n      newProps,\r\n      oldState,\r\n      newState,\r\n      nextContext,\r\n    );\r\n\r\n  if (shouldUpdate) {\r\n    // In order to support react-lifecycles-compat polyfilled components,\r\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\r\n    if (\r\n      !hasNewLifecycles &&\r\n      (typeof instance.UNSAFE_componentWillMount === 'function' ||\r\n        typeof instance.componentWillMount === 'function')\r\n    ) {\r\n      if (typeof instance.componentWillMount === 'function') {\r\n        instance.componentWillMount();\r\n      }\r\n      if (typeof instance.UNSAFE_componentWillMount === 'function') {\r\n        instance.UNSAFE_componentWillMount();\r\n      }\r\n    }\r\n    if (typeof instance.componentDidMount === 'function') {\r\n      const fiberFlags: Flags = Update | LayoutStatic;\r\n      workInProgress.flags |= fiberFlags;\r\n    }\r\n  } else {\r\n    // If an update was already in progress, we should schedule an Update\r\n    // effect even though we're bailing out, so that cWU/cDU are called.\r\n    if (typeof instance.componentDidMount === 'function') {\r\n      const fiberFlags: Flags = Update | LayoutStatic;\r\n      workInProgress.flags |= fiberFlags;\r\n    }\r\n\r\n    // If shouldComponentUpdate returned false, we should still update the\r\n    // memoized state to indicate that this work can be reused.\r\n    workInProgress.memoizedProps = newProps;\r\n    workInProgress.memoizedState = newState;\r\n  }\r\n\r\n  // Update the existing instance's state, props, and context pointers even\r\n  // if shouldComponentUpdate returns false.\r\n  instance.props = newProps;\r\n  instance.state = newState;\r\n  instance.context = nextContext;\r\n\r\n  return shouldUpdate;\r\n}\r\n\r\n// Invokes the update life-cycles and returns false if it shouldn't rerender.\r\nfunction updateClassInstance(\r\n  current: Fiber,\r\n  workInProgress: Fiber,\r\n  ctor: any,\r\n  newProps: any,\r\n  renderLanes: Lanes,\r\n): boolean {\r\n  const instance = workInProgress.stateNode;\r\n\r\n  cloneUpdateQueue(current, workInProgress);\r\n\r\n  const unresolvedOldProps = workInProgress.memoizedProps;\r\n  const oldProps =\r\n    workInProgress.type === workInProgress.elementType\r\n      ? unresolvedOldProps\r\n      : resolveDefaultProps(workInProgress.type, unresolvedOldProps);\r\n  instance.props = oldProps;\r\n  const unresolvedNewProps = workInProgress.pendingProps;\r\n\r\n  const oldContext = instance.context;\r\n  const contextType = ctor.contextType;\r\n  let nextContext = emptyContextObject;\r\n  if (typeof contextType === 'object' && contextType !== null) {\r\n    nextContext = readContext(contextType);\r\n  } else if (!disableLegacyContext) {\r\n    const nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\r\n    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);\r\n  }\r\n\r\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\r\n  const hasNewLifecycles =\r\n    typeof getDerivedStateFromProps === 'function' ||\r\n    typeof instance.getSnapshotBeforeUpdate === 'function';\r\n\r\n  // Note: During these life-cycles, instance.props/instance.state are what\r\n  // ever the previously attempted to render - not the \"current\". However,\r\n  // during componentDidUpdate we pass the \"current\" props.\r\n\r\n  // In order to support react-lifecycles-compat polyfilled components,\r\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\r\n  if (\r\n    !hasNewLifecycles &&\r\n    (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||\r\n      typeof instance.componentWillReceiveProps === 'function')\r\n  ) {\r\n    if (\r\n      unresolvedOldProps !== unresolvedNewProps ||\r\n      oldContext !== nextContext\r\n    ) {\r\n      callComponentWillReceiveProps(\r\n        workInProgress,\r\n        instance,\r\n        newProps,\r\n        nextContext,\r\n      );\r\n    }\r\n  }\r\n\r\n  resetHasForceUpdateBeforeProcessing();\r\n\r\n  const oldState = workInProgress.memoizedState;\r\n  let newState = (instance.state = oldState);\r\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\r\n  newState = workInProgress.memoizedState;\r\n\r\n  if (\r\n    unresolvedOldProps === unresolvedNewProps &&\r\n    oldState === newState &&\r\n    !hasContextChanged() &&\r\n    !checkHasForceUpdateAfterProcessing() &&\r\n    !(\r\n      enableLazyContextPropagation &&\r\n      current !== null &&\r\n      current.dependencies !== null &&\r\n      checkIfContextChanged(current.dependencies)\r\n    )\r\n  ) {\r\n    // If an update was already in progress, we should schedule an Update\r\n    // effect even though we're bailing out, so that cWU/cDU are called.\r\n    if (typeof instance.componentDidUpdate === 'function') {\r\n      if (\r\n        unresolvedOldProps !== current.memoizedProps ||\r\n        oldState !== current.memoizedState\r\n      ) {\r\n        workInProgress.flags |= Update;\r\n      }\r\n    }\r\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\r\n      if (\r\n        unresolvedOldProps !== current.memoizedProps ||\r\n        oldState !== current.memoizedState\r\n      ) {\r\n        workInProgress.flags |= Snapshot;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  if (typeof getDerivedStateFromProps === 'function') {\r\n    applyDerivedStateFromProps(\r\n      workInProgress,\r\n      ctor,\r\n      getDerivedStateFromProps,\r\n      newProps,\r\n    );\r\n    newState = workInProgress.memoizedState;\r\n  }\r\n\r\n  const shouldUpdate =\r\n    checkHasForceUpdateAfterProcessing() ||\r\n    checkShouldComponentUpdate(\r\n      workInProgress,\r\n      ctor,\r\n      oldProps,\r\n      newProps,\r\n      oldState,\r\n      newState,\r\n      nextContext,\r\n    ) ||\r\n    // TODO: In some cases, we'll end up checking if context has changed twice,\r\n    // both before and after `shouldComponentUpdate` has been called. Not ideal,\r\n    // but I'm loath to refactor this function. This only happens for memoized\r\n    // components so it's not that common.\r\n    (enableLazyContextPropagation &&\r\n      current !== null &&\r\n      current.dependencies !== null &&\r\n      checkIfContextChanged(current.dependencies));\r\n\r\n  if (shouldUpdate) {\r\n    // In order to support react-lifecycles-compat polyfilled components,\r\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\r\n    if (\r\n      !hasNewLifecycles &&\r\n      (typeof instance.UNSAFE_componentWillUpdate === 'function' ||\r\n        typeof instance.componentWillUpdate === 'function')\r\n    ) {\r\n      if (typeof instance.componentWillUpdate === 'function') {\r\n        instance.componentWillUpdate(newProps, newState, nextContext);\r\n      }\r\n      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\r\n        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\r\n      }\r\n    }\r\n    if (typeof instance.componentDidUpdate === 'function') {\r\n      workInProgress.flags |= Update;\r\n    }\r\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\r\n      workInProgress.flags |= Snapshot;\r\n    }\r\n  } else {\r\n    // If an update was already in progress, we should schedule an Update\r\n    // effect even though we're bailing out, so that cWU/cDU are called.\r\n    if (typeof instance.componentDidUpdate === 'function') {\r\n      if (\r\n        unresolvedOldProps !== current.memoizedProps ||\r\n        oldState !== current.memoizedState\r\n      ) {\r\n        workInProgress.flags |= Update;\r\n      }\r\n    }\r\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\r\n      if (\r\n        unresolvedOldProps !== current.memoizedProps ||\r\n        oldState !== current.memoizedState\r\n      ) {\r\n        workInProgress.flags |= Snapshot;\r\n      }\r\n    }\r\n\r\n    // If shouldComponentUpdate returned false, we should still update the\r\n    // memoized props/state to indicate that this work can be reused.\r\n    workInProgress.memoizedProps = newProps;\r\n    workInProgress.memoizedState = newState;\r\n  }\r\n\r\n  // Update the existing instance's state, props, and context pointers even\r\n  // if shouldComponentUpdate returns false.\r\n  instance.props = newProps;\r\n  instance.state = newState;\r\n  instance.context = nextContext;\r\n\r\n  return shouldUpdate;\r\n}\r\n\r\nexport {\r\n  adoptClassInstance,\r\n  constructClassInstance,\r\n  mountClassInstance,\r\n  resumeMountClassInstance,\r\n  updateClassInstance,\r\n};\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {ReactElement} from 'shared/ReactElementType';\r\nimport type {ReactPortal} from 'shared/ReactTypes';\r\nimport type {Fiber} from './ReactInternalTypes';\r\nimport type {Lanes} from './ReactFiberLane.old';\r\n\r\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\r\nimport {\r\n  Placement,\r\n  ChildDeletion,\r\n  Forked,\r\n  PlacementDEV,\r\n} from './ReactFiberFlags';\r\nimport {\r\n  getIteratorFn,\r\n  REACT_ELEMENT_TYPE,\r\n  REACT_FRAGMENT_TYPE,\r\n  REACT_PORTAL_TYPE,\r\n  REACT_LAZY_TYPE,\r\n} from 'shared/ReactSymbols';\r\nimport {ClassComponent, HostText, HostPortal, Fragment} from './ReactWorkTags';\r\nimport isArray from 'shared/isArray';\r\nimport {warnAboutStringRefs} from 'shared/ReactFeatureFlags';\r\nimport {checkPropStringCoercion} from 'shared/CheckStringCoercion';\r\n\r\nimport {\r\n  createWorkInProgress,\r\n  resetWorkInProgress,\r\n  createFiberFromElement,\r\n  createFiberFromFragment,\r\n  createFiberFromText,\r\n  createFiberFromPortal,\r\n} from './ReactFiber.old';\r\nimport {emptyRefsObject} from './ReactFiberClassComponent.old';\r\nimport {isCompatibleFamilyForHotReloading} from './ReactFiberHotReloading.old';\r\nimport {StrictLegacyMode} from './ReactTypeOfMode';\r\nimport {getIsHydrating} from './ReactFiberHydrationContext.old';\r\nimport {pushTreeFork} from './ReactFiberTreeContext.old';\r\n\r\nlet didWarnAboutMaps;\r\nlet didWarnAboutGenerators;\r\nlet didWarnAboutStringRefs;\r\nlet ownerHasKeyUseWarning;\r\nlet ownerHasFunctionTypeWarning;\r\nlet warnForMissingKey = (child: mixed, returnFiber: Fiber) => {};\r\n\r\nif (__DEV__) {\r\n  didWarnAboutMaps = false;\r\n  didWarnAboutGenerators = false;\r\n  didWarnAboutStringRefs = {};\r\n\r\n  /**\r\n   * Warn if there's no key explicitly set on dynamic arrays of children or\r\n   * object keys are not valid. This allows us to keep track of children between\r\n   * updates.\r\n   */\r\n  ownerHasKeyUseWarning = {};\r\n  ownerHasFunctionTypeWarning = {};\r\n\r\n  warnForMissingKey = (child: mixed, returnFiber: Fiber) => {\r\n    if (child === null || typeof child !== 'object') {\r\n      return;\r\n    }\r\n    if (!child._store || child._store.validated || child.key != null) {\r\n      return;\r\n    }\r\n\r\n    if (typeof child._store !== 'object') {\r\n      throw new Error(\r\n        'React Component in warnForMissingKey should have a _store. ' +\r\n          'This error is likely caused by a bug in React. Please file an issue.',\r\n      );\r\n    }\r\n\r\n    // $FlowFixMe unable to narrow type from mixed to writable object\r\n    child._store.validated = true;\r\n\r\n    const componentName = getComponentNameFromFiber(returnFiber) || 'Component';\r\n\r\n    if (ownerHasKeyUseWarning[componentName]) {\r\n      return;\r\n    }\r\n    ownerHasKeyUseWarning[componentName] = true;\r\n\r\n    console.error(\r\n      'Each child in a list should have a unique ' +\r\n        '\"key\" prop. See https://reactjs.org/link/warning-keys for ' +\r\n        'more information.',\r\n    );\r\n  };\r\n}\r\n\r\nfunction coerceRef(\r\n  returnFiber: Fiber,\r\n  current: Fiber | null,\r\n  element: ReactElement,\r\n) {\r\n  const mixedRef = element.ref;\r\n  if (\r\n    mixedRef !== null &&\r\n    typeof mixedRef !== 'function' &&\r\n    typeof mixedRef !== 'object'\r\n  ) {\r\n    if (__DEV__) {\r\n      // TODO: Clean this up once we turn on the string ref warning for\r\n      // everyone, because the strict mode case will no longer be relevant\r\n      if (\r\n        (returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) &&\r\n        // We warn in ReactElement.js if owner and self are equal for string refs\r\n        // because these cannot be automatically converted to an arrow function\r\n        // using a codemod. Therefore, we don't have to warn about string refs again.\r\n        !(\r\n          element._owner &&\r\n          element._self &&\r\n          element._owner.stateNode !== element._self\r\n        )\r\n      ) {\r\n        const componentName =\r\n          getComponentNameFromFiber(returnFiber) || 'Component';\r\n        if (!didWarnAboutStringRefs[componentName]) {\r\n          if (warnAboutStringRefs) {\r\n            console.error(\r\n              'Component \"%s\" contains the string ref \"%s\". Support for string refs ' +\r\n                'will be removed in a future major release. We recommend using ' +\r\n                'useRef() or createRef() instead. ' +\r\n                'Learn more about using refs safely here: ' +\r\n                'https://reactjs.org/link/strict-mode-string-ref',\r\n              componentName,\r\n              mixedRef,\r\n            );\r\n          } else {\r\n            console.error(\r\n              'A string ref, \"%s\", has been found within a strict mode tree. ' +\r\n                'String refs are a source of potential bugs and should be avoided. ' +\r\n                'We recommend using useRef() or createRef() instead. ' +\r\n                'Learn more about using refs safely here: ' +\r\n                'https://reactjs.org/link/strict-mode-string-ref',\r\n              mixedRef,\r\n            );\r\n          }\r\n          didWarnAboutStringRefs[componentName] = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (element._owner) {\r\n      const owner: ?Fiber = (element._owner: any);\r\n      let inst;\r\n      if (owner) {\r\n        const ownerFiber = ((owner: any): Fiber);\r\n\r\n        if (ownerFiber.tag !== ClassComponent) {\r\n          throw new Error(\r\n            'Function components cannot have string refs. ' +\r\n              'We recommend using useRef() instead. ' +\r\n              'Learn more about using refs safely here: ' +\r\n              'https://reactjs.org/link/strict-mode-string-ref',\r\n          );\r\n        }\r\n\r\n        inst = ownerFiber.stateNode;\r\n      }\r\n\r\n      if (!inst) {\r\n        throw new Error(\r\n          `Missing owner for string ref ${mixedRef}. This error is likely caused by a ` +\r\n            'bug in React. Please file an issue.',\r\n        );\r\n      }\r\n      // Assigning this to a const so Flow knows it won't change in the closure\r\n      const resolvedInst = inst;\r\n\r\n      if (__DEV__) {\r\n        checkPropStringCoercion(mixedRef, 'ref');\r\n      }\r\n      const stringRef = '' + mixedRef;\r\n      // Check if previous string ref matches new string ref\r\n      if (\r\n        current !== null &&\r\n        current.ref !== null &&\r\n        typeof current.ref === 'function' &&\r\n        current.ref._stringRef === stringRef\r\n      ) {\r\n        return current.ref;\r\n      }\r\n      const ref = function(value) {\r\n        let refs = resolvedInst.refs;\r\n        if (refs === emptyRefsObject) {\r\n          // This is a lazy pooled frozen object, so we need to initialize.\r\n          refs = resolvedInst.refs = {};\r\n        }\r\n        if (value === null) {\r\n          delete refs[stringRef];\r\n        } else {\r\n          refs[stringRef] = value;\r\n        }\r\n      };\r\n      ref._stringRef = stringRef;\r\n      return ref;\r\n    } else {\r\n      if (typeof mixedRef !== 'string') {\r\n        throw new Error(\r\n          'Expected ref to be a function, a string, an object returned by React.createRef(), or null.',\r\n        );\r\n      }\r\n\r\n      if (!element._owner) {\r\n        throw new Error(\r\n          `Element ref was specified as a string (${mixedRef}) but no owner was set. This could happen for one of` +\r\n            ' the following reasons:\\n' +\r\n            '1. You may be adding a ref to a function component\\n' +\r\n            \"2. You may be adding a ref to a component that was not created inside a component's render method\\n\" +\r\n            '3. You have multiple copies of React loaded\\n' +\r\n            'See https://reactjs.org/link/refs-must-have-owner for more information.',\r\n        );\r\n      }\r\n    }\r\n  }\r\n  return mixedRef;\r\n}\r\n\r\nfunction throwOnInvalidObjectType(returnFiber: Fiber, newChild: Object) {\r\n  const childString = Object.prototype.toString.call(newChild);\r\n\r\n  throw new Error(\r\n    `Objects are not valid as a React child (found: ${\r\n      childString === '[object Object]'\r\n        ? 'object with keys {' + Object.keys(newChild).join(', ') + '}'\r\n        : childString\r\n    }). ` +\r\n      'If you meant to render a collection of children, use an array ' +\r\n      'instead.',\r\n  );\r\n}\r\n\r\nfunction warnOnFunctionType(returnFiber: Fiber) {\r\n  if (__DEV__) {\r\n    const componentName = getComponentNameFromFiber(returnFiber) || 'Component';\r\n\r\n    if (ownerHasFunctionTypeWarning[componentName]) {\r\n      return;\r\n    }\r\n    ownerHasFunctionTypeWarning[componentName] = true;\r\n\r\n    console.error(\r\n      'Functions are not valid as a React child. This may happen if ' +\r\n        'you return a Component instead of <Component /> from render. ' +\r\n        'Or maybe you meant to call this function rather than return it.',\r\n    );\r\n  }\r\n}\r\n\r\nfunction resolveLazy(lazyType) {\r\n  const payload = lazyType._payload;\r\n  const init = lazyType._init;\r\n  return init(payload);\r\n}\r\n\r\n// This wrapper function exists because I expect to clone the code in each path\r\n// to be able to optimize each path individually by branching early. This needs\r\n// a compiler or we can do it manually. Helpers that don't need this branching\r\n// live outside of this function.\r\nfunction ChildReconciler(shouldTrackSideEffects) {\r\n  function deleteChild(returnFiber: Fiber, childToDelete: Fiber): void {\r\n    if (!shouldTrackSideEffects) {\r\n      // Noop.\r\n      return;\r\n    }\r\n    const deletions = returnFiber.deletions;\r\n    if (deletions === null) {\r\n      returnFiber.deletions = [childToDelete];\r\n      returnFiber.flags |= ChildDeletion;\r\n    } else {\r\n      deletions.push(childToDelete);\r\n    }\r\n  }\r\n\r\n  function deleteRemainingChildren(\r\n    returnFiber: Fiber,\r\n    currentFirstChild: Fiber | null,\r\n  ): null {\r\n    if (!shouldTrackSideEffects) {\r\n      // Noop.\r\n      return null;\r\n    }\r\n\r\n    // TODO: For the shouldClone case, this could be micro-optimized a bit by\r\n    // assuming that after the first child we've already added everything.\r\n    let childToDelete = currentFirstChild;\r\n    while (childToDelete !== null) {\r\n      deleteChild(returnFiber, childToDelete);\r\n      childToDelete = childToDelete.sibling;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  function mapRemainingChildren(\r\n    returnFiber: Fiber,\r\n    currentFirstChild: Fiber,\r\n  ): Map<string | number, Fiber> {\r\n    // Add the remaining children to a temporary map so that we can find them by\r\n    // keys quickly. Implicit (null) keys get added to this set with their index\r\n    // instead.\r\n    const existingChildren: Map<string | number, Fiber> = new Map();\r\n\r\n    let existingChild = currentFirstChild;\r\n    while (existingChild !== null) {\r\n      if (existingChild.key !== null) {\r\n        existingChildren.set(existingChild.key, existingChild);\r\n      } else {\r\n        existingChildren.set(existingChild.index, existingChild);\r\n      }\r\n      existingChild = existingChild.sibling;\r\n    }\r\n    return existingChildren;\r\n  }\r\n\r\n  function useFiber(fiber: Fiber, pendingProps: mixed): Fiber {\r\n    // We currently set sibling to null and index to 0 here because it is easy\r\n    // to forget to do before returning it. E.g. for the single child case.\r\n    const clone = createWorkInProgress(fiber, pendingProps);\r\n    clone.index = 0;\r\n    clone.sibling = null;\r\n    return clone;\r\n  }\r\n\r\n  function placeChild(\r\n    newFiber: Fiber,\r\n    lastPlacedIndex: number,\r\n    newIndex: number,\r\n  ): number {\r\n    newFiber.index = newIndex;\r\n    if (!shouldTrackSideEffects) {\r\n      // During hydration, the useId algorithm needs to know which fibers are\r\n      // part of a list of children (arrays, iterators).\r\n      newFiber.flags |= Forked;\r\n      return lastPlacedIndex;\r\n    }\r\n    const current = newFiber.alternate;\r\n    if (current !== null) {\r\n      const oldIndex = current.index;\r\n      if (oldIndex < lastPlacedIndex) {\r\n        // This is a move.\r\n        newFiber.flags |= Placement | PlacementDEV;\r\n        return lastPlacedIndex;\r\n      } else {\r\n        // This item can stay in place.\r\n        return oldIndex;\r\n      }\r\n    } else {\r\n      // This is an insertion.\r\n      newFiber.flags |= Placement | PlacementDEV;\r\n      return lastPlacedIndex;\r\n    }\r\n  }\r\n\r\n  function placeSingleChild(newFiber: Fiber): Fiber {\r\n    // This is simpler for the single child case. We only need to do a\r\n    // placement for inserting new children.\r\n    if (shouldTrackSideEffects && newFiber.alternate === null) {\r\n      newFiber.flags |= Placement | PlacementDEV;\r\n    }\r\n    return newFiber;\r\n  }\r\n\r\n  function updateTextNode(\r\n    returnFiber: Fiber,\r\n    current: Fiber | null,\r\n    textContent: string,\r\n    lanes: Lanes,\r\n  ) {\r\n    if (current === null || current.tag !== HostText) {\r\n      // Insert\r\n      const created = createFiberFromText(textContent, returnFiber.mode, lanes);\r\n      created.return = returnFiber;\r\n      return created;\r\n    } else {\r\n      // Update\r\n      const existing = useFiber(current, textContent);\r\n      existing.return = returnFiber;\r\n      return existing;\r\n    }\r\n  }\r\n\r\n  function updateElement(\r\n    returnFiber: Fiber,\r\n    current: Fiber | null,\r\n    element: ReactElement,\r\n    lanes: Lanes,\r\n  ): Fiber {\r\n    const elementType = element.type;\r\n    if (elementType === REACT_FRAGMENT_TYPE) {\r\n      return updateFragment(\r\n        returnFiber,\r\n        current,\r\n        element.props.children,\r\n        lanes,\r\n        element.key,\r\n      );\r\n    }\r\n    if (current !== null) {\r\n      if (\r\n        current.elementType === elementType ||\r\n        // Keep this check inline so it only runs on the false path:\r\n        (__DEV__\r\n          ? isCompatibleFamilyForHotReloading(current, element)\r\n          : false) ||\r\n        // Lazy types should reconcile their resolved type.\r\n        // We need to do this after the Hot Reloading check above,\r\n        // because hot reloading has different semantics than prod because\r\n        // it doesn't resuspend. So we can't let the call below suspend.\r\n        (typeof elementType === 'object' &&\r\n          elementType !== null &&\r\n          elementType.$$typeof === REACT_LAZY_TYPE &&\r\n          resolveLazy(elementType) === current.type)\r\n      ) {\r\n        // Move based on index\r\n        const existing = useFiber(current, element.props);\r\n        existing.ref = coerceRef(returnFiber, current, element);\r\n        existing.return = returnFiber;\r\n        if (__DEV__) {\r\n          existing._debugSource = element._source;\r\n          existing._debugOwner = element._owner;\r\n        }\r\n        return existing;\r\n      }\r\n    }\r\n    // Insert\r\n    const created = createFiberFromElement(element, returnFiber.mode, lanes);\r\n    created.ref = coerceRef(returnFiber, current, element);\r\n    created.return = returnFiber;\r\n    return created;\r\n  }\r\n\r\n  function updatePortal(\r\n    returnFiber: Fiber,\r\n    current: Fiber | null,\r\n    portal: ReactPortal,\r\n    lanes: Lanes,\r\n  ): Fiber {\r\n    if (\r\n      current === null ||\r\n      current.tag !== HostPortal ||\r\n      current.stateNode.containerInfo !== portal.containerInfo ||\r\n      current.stateNode.implementation !== portal.implementation\r\n    ) {\r\n      // Insert\r\n      const created = createFiberFromPortal(portal, returnFiber.mode, lanes);\r\n      created.return = returnFiber;\r\n      return created;\r\n    } else {\r\n      // Update\r\n      const existing = useFiber(current, portal.children || []);\r\n      existing.return = returnFiber;\r\n      return existing;\r\n    }\r\n  }\r\n\r\n  function updateFragment(\r\n    returnFiber: Fiber,\r\n    current: Fiber | null,\r\n    fragment: Iterable<*>,\r\n    lanes: Lanes,\r\n    key: null | string,\r\n  ): Fiber {\r\n    if (current === null || current.tag !== Fragment) {\r\n      // Insert\r\n      const created = createFiberFromFragment(\r\n        fragment,\r\n        returnFiber.mode,\r\n        lanes,\r\n        key,\r\n      );\r\n      created.return = returnFiber;\r\n      return created;\r\n    } else {\r\n      // Update\r\n      const existing = useFiber(current, fragment);\r\n      existing.return = returnFiber;\r\n      return existing;\r\n    }\r\n  }\r\n\r\n  function createChild(\r\n    returnFiber: Fiber,\r\n    newChild: any,\r\n    lanes: Lanes,\r\n  ): Fiber | null {\r\n    if (\r\n      (typeof newChild === 'string' && newChild !== '') ||\r\n      typeof newChild === 'number'\r\n    ) {\r\n      // Text nodes don't have keys. If the previous node is implicitly keyed\r\n      // we can continue to replace it without aborting even if it is not a text\r\n      // node.\r\n      const created = createFiberFromText(\r\n        '' + newChild,\r\n        returnFiber.mode,\r\n        lanes,\r\n      );\r\n      created.return = returnFiber;\r\n      return created;\r\n    }\r\n\r\n    if (typeof newChild === 'object' && newChild !== null) {\r\n      switch (newChild.$$typeof) {\r\n        case REACT_ELEMENT_TYPE: {\r\n          const created = createFiberFromElement(\r\n            newChild,\r\n            returnFiber.mode,\r\n            lanes,\r\n          );\r\n          created.ref = coerceRef(returnFiber, null, newChild);\r\n          created.return = returnFiber;\r\n          return created;\r\n        }\r\n        case REACT_PORTAL_TYPE: {\r\n          const created = createFiberFromPortal(\r\n            newChild,\r\n            returnFiber.mode,\r\n            lanes,\r\n          );\r\n          created.return = returnFiber;\r\n          return created;\r\n        }\r\n        case REACT_LAZY_TYPE: {\r\n          const payload = newChild._payload;\r\n          const init = newChild._init;\r\n          return createChild(returnFiber, init(payload), lanes);\r\n        }\r\n      }\r\n\r\n      if (isArray(newChild) || getIteratorFn(newChild)) {\r\n        const created = createFiberFromFragment(\r\n          newChild,\r\n          returnFiber.mode,\r\n          lanes,\r\n          null,\r\n        );\r\n        created.return = returnFiber;\r\n        return created;\r\n      }\r\n\r\n      throwOnInvalidObjectType(returnFiber, newChild);\r\n    }\r\n\r\n    if (__DEV__) {\r\n      if (typeof newChild === 'function') {\r\n        warnOnFunctionType(returnFiber);\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  function updateSlot(\r\n    returnFiber: Fiber,\r\n    oldFiber: Fiber | null,\r\n    newChild: any,\r\n    lanes: Lanes,\r\n  ): Fiber | null {\r\n    // Update the fiber if the keys match, otherwise return null.\r\n\r\n    const key = oldFiber !== null ? oldFiber.key : null;\r\n\r\n    if (\r\n      (typeof newChild === 'string' && newChild !== '') ||\r\n      typeof newChild === 'number'\r\n    ) {\r\n      // Text nodes don't have keys. If the previous node is implicitly keyed\r\n      // we can continue to replace it without aborting even if it is not a text\r\n      // node.\r\n      if (key !== null) {\r\n        return null;\r\n      }\r\n      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);\r\n    }\r\n\r\n    if (typeof newChild === 'object' && newChild !== null) {\r\n      switch (newChild.$$typeof) {\r\n        case REACT_ELEMENT_TYPE: {\r\n          if (newChild.key === key) {\r\n            return updateElement(returnFiber, oldFiber, newChild, lanes);\r\n          } else {\r\n            return null;\r\n          }\r\n        }\r\n        case REACT_PORTAL_TYPE: {\r\n          if (newChild.key === key) {\r\n            return updatePortal(returnFiber, oldFiber, newChild, lanes);\r\n          } else {\r\n            return null;\r\n          }\r\n        }\r\n        case REACT_LAZY_TYPE: {\r\n          const payload = newChild._payload;\r\n          const init = newChild._init;\r\n          return updateSlot(returnFiber, oldFiber, init(payload), lanes);\r\n        }\r\n      }\r\n\r\n      if (isArray(newChild) || getIteratorFn(newChild)) {\r\n        if (key !== null) {\r\n          return null;\r\n        }\r\n\r\n        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);\r\n      }\r\n\r\n      throwOnInvalidObjectType(returnFiber, newChild);\r\n    }\r\n\r\n    if (__DEV__) {\r\n      if (typeof newChild === 'function') {\r\n        warnOnFunctionType(returnFiber);\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  function updateFromMap(\r\n    existingChildren: Map<string | number, Fiber>,\r\n    returnFiber: Fiber,\r\n    newIdx: number,\r\n    newChild: any,\r\n    lanes: Lanes,\r\n  ): Fiber | null {\r\n    if (\r\n      (typeof newChild === 'string' && newChild !== '') ||\r\n      typeof newChild === 'number'\r\n    ) {\r\n      // Text nodes don't have keys, so we neither have to check the old nor\r\n      // new node for the key. If both are text nodes, they match.\r\n      const matchedFiber = existingChildren.get(newIdx) || null;\r\n      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);\r\n    }\r\n\r\n    if (typeof newChild === 'object' && newChild !== null) {\r\n      switch (newChild.$$typeof) {\r\n        case REACT_ELEMENT_TYPE: {\r\n          const matchedFiber =\r\n            existingChildren.get(\r\n              newChild.key === null ? newIdx : newChild.key,\r\n            ) || null;\r\n          return updateElement(returnFiber, matchedFiber, newChild, lanes);\r\n        }\r\n        case REACT_PORTAL_TYPE: {\r\n          const matchedFiber =\r\n            existingChildren.get(\r\n              newChild.key === null ? newIdx : newChild.key,\r\n            ) || null;\r\n          return updatePortal(returnFiber, matchedFiber, newChild, lanes);\r\n        }\r\n        case REACT_LAZY_TYPE:\r\n          const payload = newChild._payload;\r\n          const init = newChild._init;\r\n          return updateFromMap(\r\n            existingChildren,\r\n            returnFiber,\r\n            newIdx,\r\n            init(payload),\r\n            lanes,\r\n          );\r\n      }\r\n\r\n      if (isArray(newChild) || getIteratorFn(newChild)) {\r\n        const matchedFiber = existingChildren.get(newIdx) || null;\r\n        return updateFragment(returnFiber, matchedFiber, newChild, lanes, null);\r\n      }\r\n\r\n      throwOnInvalidObjectType(returnFiber, newChild);\r\n    }\r\n\r\n    if (__DEV__) {\r\n      if (typeof newChild === 'function') {\r\n        warnOnFunctionType(returnFiber);\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Warns if there is a duplicate or missing key\r\n   */\r\n  function warnOnInvalidKey(\r\n    child: mixed,\r\n    knownKeys: Set<string> | null,\r\n    returnFiber: Fiber,\r\n  ): Set<string> | null {\r\n    if (__DEV__) {\r\n      if (typeof child !== 'object' || child === null) {\r\n        return knownKeys;\r\n      }\r\n      switch (child.$$typeof) {\r\n        case REACT_ELEMENT_TYPE:\r\n        case REACT_PORTAL_TYPE:\r\n          warnForMissingKey(child, returnFiber);\r\n          const key = child.key;\r\n          if (typeof key !== 'string') {\r\n            break;\r\n          }\r\n          if (knownKeys === null) {\r\n            knownKeys = new Set();\r\n            knownKeys.add(key);\r\n            break;\r\n          }\r\n          if (!knownKeys.has(key)) {\r\n            knownKeys.add(key);\r\n            break;\r\n          }\r\n          console.error(\r\n            'Encountered two children with the same key, `%s`. ' +\r\n              'Keys should be unique so that components maintain their identity ' +\r\n              'across updates. Non-unique keys may cause children to be ' +\r\n              'duplicated and/or omitted — the behavior is unsupported and ' +\r\n              'could change in a future version.',\r\n            key,\r\n          );\r\n          break;\r\n        case REACT_LAZY_TYPE:\r\n          const payload = child._payload;\r\n          const init = (child._init: any);\r\n          warnOnInvalidKey(init(payload), knownKeys, returnFiber);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    return knownKeys;\r\n  }\r\n\r\n  function reconcileChildrenArray(\r\n    returnFiber: Fiber,\r\n    currentFirstChild: Fiber | null,\r\n    newChildren: Array<*>,\r\n    lanes: Lanes,\r\n  ): Fiber | null {\r\n    // This algorithm can't optimize by searching from both ends since we\r\n    // don't have backpointers on fibers. I'm trying to see how far we can get\r\n    // with that model. If it ends up not being worth the tradeoffs, we can\r\n    // add it later.\r\n\r\n    // Even with a two ended optimization, we'd want to optimize for the case\r\n    // where there are few changes and brute force the comparison instead of\r\n    // going for the Map. It'd like to explore hitting that path first in\r\n    // forward-only mode and only go for the Map once we notice that we need\r\n    // lots of look ahead. This doesn't handle reversal as well as two ended\r\n    // search but that's unusual. Besides, for the two ended optimization to\r\n    // work on Iterables, we'd need to copy the whole set.\r\n\r\n    // In this first iteration, we'll just live with hitting the bad case\r\n    // (adding everything to a Map) in for every insert/move.\r\n\r\n    // If you change this code, also update reconcileChildrenIterator() which\r\n    // uses the same algorithm.\r\n\r\n    if (__DEV__) {\r\n      // First, validate keys.\r\n      let knownKeys = null;\r\n      for (let i = 0; i < newChildren.length; i++) {\r\n        const child = newChildren[i];\r\n        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\r\n      }\r\n    }\r\n\r\n    let resultingFirstChild: Fiber | null = null;\r\n    let previousNewFiber: Fiber | null = null;\r\n\r\n    let oldFiber = currentFirstChild;\r\n    let lastPlacedIndex = 0;\r\n    let newIdx = 0;\r\n    let nextOldFiber = null;\r\n    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\r\n      if (oldFiber.index > newIdx) {\r\n        nextOldFiber = oldFiber;\r\n        oldFiber = null;\r\n      } else {\r\n        nextOldFiber = oldFiber.sibling;\r\n      }\r\n      const newFiber = updateSlot(\r\n        returnFiber,\r\n        oldFiber,\r\n        newChildren[newIdx],\r\n        lanes,\r\n      );\r\n      if (newFiber === null) {\r\n        // TODO: This breaks on empty slots like null children. That's\r\n        // unfortunate because it triggers the slow path all the time. We need\r\n        // a better way to communicate whether this was a miss or null,\r\n        // boolean, undefined, etc.\r\n        if (oldFiber === null) {\r\n          oldFiber = nextOldFiber;\r\n        }\r\n        break;\r\n      }\r\n      if (shouldTrackSideEffects) {\r\n        if (oldFiber && newFiber.alternate === null) {\r\n          // We matched the slot, but we didn't reuse the existing fiber, so we\r\n          // need to delete the existing child.\r\n          deleteChild(returnFiber, oldFiber);\r\n        }\r\n      }\r\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\r\n      if (previousNewFiber === null) {\r\n        // TODO: Move out of the loop. This only happens for the first run.\r\n        resultingFirstChild = newFiber;\r\n      } else {\r\n        // TODO: Defer siblings if we're not at the right index for this slot.\r\n        // I.e. if we had null values before, then we want to defer this\r\n        // for each null value. However, we also don't want to call updateSlot\r\n        // with the previous one.\r\n        previousNewFiber.sibling = newFiber;\r\n      }\r\n      previousNewFiber = newFiber;\r\n      oldFiber = nextOldFiber;\r\n    }\r\n\r\n    if (newIdx === newChildren.length) {\r\n      // We've reached the end of the new children. We can delete the rest.\r\n      deleteRemainingChildren(returnFiber, oldFiber);\r\n      if (getIsHydrating()) {\r\n        const numberOfForks = newIdx;\r\n        pushTreeFork(returnFiber, numberOfForks);\r\n      }\r\n      return resultingFirstChild;\r\n    }\r\n\r\n    if (oldFiber === null) {\r\n      // If we don't have any more existing children we can choose a fast path\r\n      // since the rest will all be insertions.\r\n      for (; newIdx < newChildren.length; newIdx++) {\r\n        const newFiber = createChild(returnFiber, newChildren[newIdx], lanes);\r\n        if (newFiber === null) {\r\n          continue;\r\n        }\r\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\r\n        if (previousNewFiber === null) {\r\n          // TODO: Move out of the loop. This only happens for the first run.\r\n          resultingFirstChild = newFiber;\r\n        } else {\r\n          previousNewFiber.sibling = newFiber;\r\n        }\r\n        previousNewFiber = newFiber;\r\n      }\r\n      if (getIsHydrating()) {\r\n        const numberOfForks = newIdx;\r\n        pushTreeFork(returnFiber, numberOfForks);\r\n      }\r\n      return resultingFirstChild;\r\n    }\r\n\r\n    // Add all children to a key map for quick lookups.\r\n    const existingChildren = mapRemainingChildren(returnFiber, oldFiber);\r\n\r\n    // Keep scanning and use the map to restore deleted items as moves.\r\n    for (; newIdx < newChildren.length; newIdx++) {\r\n      const newFiber = updateFromMap(\r\n        existingChildren,\r\n        returnFiber,\r\n        newIdx,\r\n        newChildren[newIdx],\r\n        lanes,\r\n      );\r\n      if (newFiber !== null) {\r\n        if (shouldTrackSideEffects) {\r\n          if (newFiber.alternate !== null) {\r\n            // The new fiber is a work in progress, but if there exists a\r\n            // current, that means that we reused the fiber. We need to delete\r\n            // it from the child list so that we don't add it to the deletion\r\n            // list.\r\n            existingChildren.delete(\r\n              newFiber.key === null ? newIdx : newFiber.key,\r\n            );\r\n          }\r\n        }\r\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\r\n        if (previousNewFiber === null) {\r\n          resultingFirstChild = newFiber;\r\n        } else {\r\n          previousNewFiber.sibling = newFiber;\r\n        }\r\n        previousNewFiber = newFiber;\r\n      }\r\n    }\r\n\r\n    if (shouldTrackSideEffects) {\r\n      // Any existing children that weren't consumed above were deleted. We need\r\n      // to add them to the deletion list.\r\n      existingChildren.forEach(child => deleteChild(returnFiber, child));\r\n    }\r\n\r\n    if (getIsHydrating()) {\r\n      const numberOfForks = newIdx;\r\n      pushTreeFork(returnFiber, numberOfForks);\r\n    }\r\n    return resultingFirstChild;\r\n  }\r\n\r\n  function reconcileChildrenIterator(\r\n    returnFiber: Fiber,\r\n    currentFirstChild: Fiber | null,\r\n    newChildrenIterable: Iterable<*>,\r\n    lanes: Lanes,\r\n  ): Fiber | null {\r\n    // This is the same implementation as reconcileChildrenArray(),\r\n    // but using the iterator instead.\r\n\r\n    const iteratorFn = getIteratorFn(newChildrenIterable);\r\n\r\n    if (typeof iteratorFn !== 'function') {\r\n      throw new Error(\r\n        'An object is not an iterable. This error is likely caused by a bug in ' +\r\n          'React. Please file an issue.',\r\n      );\r\n    }\r\n\r\n    if (__DEV__) {\r\n      // We don't support rendering Generators because it's a mutation.\r\n      // See https://github.com/facebook/react/issues/12995\r\n      if (\r\n        typeof Symbol === 'function' &&\r\n        // $FlowFixMe Flow doesn't know about toStringTag\r\n        newChildrenIterable[Symbol.toStringTag] === 'Generator'\r\n      ) {\r\n        if (!didWarnAboutGenerators) {\r\n          console.error(\r\n            'Using Generators as children is unsupported and will likely yield ' +\r\n              'unexpected results because enumerating a generator mutates it. ' +\r\n              'You may convert it to an array with `Array.from()` or the ' +\r\n              '`[...spread]` operator before rendering. Keep in mind ' +\r\n              'you might need to polyfill these features for older browsers.',\r\n          );\r\n        }\r\n        didWarnAboutGenerators = true;\r\n      }\r\n\r\n      // Warn about using Maps as children\r\n      if ((newChildrenIterable: any).entries === iteratorFn) {\r\n        if (!didWarnAboutMaps) {\r\n          console.error(\r\n            'Using Maps as children is not supported. ' +\r\n              'Use an array of keyed ReactElements instead.',\r\n          );\r\n        }\r\n        didWarnAboutMaps = true;\r\n      }\r\n\r\n      // First, validate keys.\r\n      // We'll get a different iterator later for the main pass.\r\n      const newChildren = iteratorFn.call(newChildrenIterable);\r\n      if (newChildren) {\r\n        let knownKeys = null;\r\n        let step = newChildren.next();\r\n        for (; !step.done; step = newChildren.next()) {\r\n          const child = step.value;\r\n          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\r\n        }\r\n      }\r\n    }\r\n\r\n    const newChildren = iteratorFn.call(newChildrenIterable);\r\n\r\n    if (newChildren == null) {\r\n      throw new Error('An iterable object provided no iterator.');\r\n    }\r\n\r\n    let resultingFirstChild: Fiber | null = null;\r\n    let previousNewFiber: Fiber | null = null;\r\n\r\n    let oldFiber = currentFirstChild;\r\n    let lastPlacedIndex = 0;\r\n    let newIdx = 0;\r\n    let nextOldFiber = null;\r\n\r\n    let step = newChildren.next();\r\n    for (\r\n      ;\r\n      oldFiber !== null && !step.done;\r\n      newIdx++, step = newChildren.next()\r\n    ) {\r\n      if (oldFiber.index > newIdx) {\r\n        nextOldFiber = oldFiber;\r\n        oldFiber = null;\r\n      } else {\r\n        nextOldFiber = oldFiber.sibling;\r\n      }\r\n      const newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\r\n      if (newFiber === null) {\r\n        // TODO: This breaks on empty slots like null children. That's\r\n        // unfortunate because it triggers the slow path all the time. We need\r\n        // a better way to communicate whether this was a miss or null,\r\n        // boolean, undefined, etc.\r\n        if (oldFiber === null) {\r\n          oldFiber = nextOldFiber;\r\n        }\r\n        break;\r\n      }\r\n      if (shouldTrackSideEffects) {\r\n        if (oldFiber && newFiber.alternate === null) {\r\n          // We matched the slot, but we didn't reuse the existing fiber, so we\r\n          // need to delete the existing child.\r\n          deleteChild(returnFiber, oldFiber);\r\n        }\r\n      }\r\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\r\n      if (previousNewFiber === null) {\r\n        // TODO: Move out of the loop. This only happens for the first run.\r\n        resultingFirstChild = newFiber;\r\n      } else {\r\n        // TODO: Defer siblings if we're not at the right index for this slot.\r\n        // I.e. if we had null values before, then we want to defer this\r\n        // for each null value. However, we also don't want to call updateSlot\r\n        // with the previous one.\r\n        previousNewFiber.sibling = newFiber;\r\n      }\r\n      previousNewFiber = newFiber;\r\n      oldFiber = nextOldFiber;\r\n    }\r\n\r\n    if (step.done) {\r\n      // We've reached the end of the new children. We can delete the rest.\r\n      deleteRemainingChildren(returnFiber, oldFiber);\r\n      if (getIsHydrating()) {\r\n        const numberOfForks = newIdx;\r\n        pushTreeFork(returnFiber, numberOfForks);\r\n      }\r\n      return resultingFirstChild;\r\n    }\r\n\r\n    if (oldFiber === null) {\r\n      // If we don't have any more existing children we can choose a fast path\r\n      // since the rest will all be insertions.\r\n      for (; !step.done; newIdx++, step = newChildren.next()) {\r\n        const newFiber = createChild(returnFiber, step.value, lanes);\r\n        if (newFiber === null) {\r\n          continue;\r\n        }\r\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\r\n        if (previousNewFiber === null) {\r\n          // TODO: Move out of the loop. This only happens for the first run.\r\n          resultingFirstChild = newFiber;\r\n        } else {\r\n          previousNewFiber.sibling = newFiber;\r\n        }\r\n        previousNewFiber = newFiber;\r\n      }\r\n      if (getIsHydrating()) {\r\n        const numberOfForks = newIdx;\r\n        pushTreeFork(returnFiber, numberOfForks);\r\n      }\r\n      return resultingFirstChild;\r\n    }\r\n\r\n    // Add all children to a key map for quick lookups.\r\n    const existingChildren = mapRemainingChildren(returnFiber, oldFiber);\r\n\r\n    // Keep scanning and use the map to restore deleted items as moves.\r\n    for (; !step.done; newIdx++, step = newChildren.next()) {\r\n      const newFiber = updateFromMap(\r\n        existingChildren,\r\n        returnFiber,\r\n        newIdx,\r\n        step.value,\r\n        lanes,\r\n      );\r\n      if (newFiber !== null) {\r\n        if (shouldTrackSideEffects) {\r\n          if (newFiber.alternate !== null) {\r\n            // The new fiber is a work in progress, but if there exists a\r\n            // current, that means that we reused the fiber. We need to delete\r\n            // it from the child list so that we don't add it to the deletion\r\n            // list.\r\n            existingChildren.delete(\r\n              newFiber.key === null ? newIdx : newFiber.key,\r\n            );\r\n          }\r\n        }\r\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\r\n        if (previousNewFiber === null) {\r\n          resultingFirstChild = newFiber;\r\n        } else {\r\n          previousNewFiber.sibling = newFiber;\r\n        }\r\n        previousNewFiber = newFiber;\r\n      }\r\n    }\r\n\r\n    if (shouldTrackSideEffects) {\r\n      // Any existing children that weren't consumed above were deleted. We need\r\n      // to add them to the deletion list.\r\n      existingChildren.forEach(child => deleteChild(returnFiber, child));\r\n    }\r\n\r\n    if (getIsHydrating()) {\r\n      const numberOfForks = newIdx;\r\n      pushTreeFork(returnFiber, numberOfForks);\r\n    }\r\n    return resultingFirstChild;\r\n  }\r\n\r\n  function reconcileSingleTextNode(\r\n    returnFiber: Fiber,\r\n    currentFirstChild: Fiber | null,\r\n    textContent: string,\r\n    lanes: Lanes,\r\n  ): Fiber {\r\n    // There's no need to check for keys on text nodes since we don't have a\r\n    // way to define them.\r\n    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\r\n      // We already have an existing node so let's just update it and delete\r\n      // the rest.\r\n      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\r\n      const existing = useFiber(currentFirstChild, textContent);\r\n      existing.return = returnFiber;\r\n      return existing;\r\n    }\r\n    // The existing first child is not a text node so we need to create one\r\n    // and delete the existing ones.\r\n    deleteRemainingChildren(returnFiber, currentFirstChild);\r\n    const created = createFiberFromText(textContent, returnFiber.mode, lanes);\r\n    created.return = returnFiber;\r\n    return created;\r\n  }\r\n\r\n  function reconcileSingleElement(\r\n    returnFiber: Fiber,\r\n    currentFirstChild: Fiber | null,\r\n    element: ReactElement,\r\n    lanes: Lanes,\r\n  ): Fiber {\r\n    const key = element.key;\r\n    let child = currentFirstChild;\r\n    while (child !== null) {\r\n      // TODO: If key === null and child.key === null, then this only applies to\r\n      // the first item in the list.\r\n      if (child.key === key) {\r\n        const elementType = element.type;\r\n        if (elementType === REACT_FRAGMENT_TYPE) {\r\n          if (child.tag === Fragment) {\r\n            deleteRemainingChildren(returnFiber, child.sibling);\r\n            const existing = useFiber(child, element.props.children);\r\n            existing.return = returnFiber;\r\n            if (__DEV__) {\r\n              existing._debugSource = element._source;\r\n              existing._debugOwner = element._owner;\r\n            }\r\n            return existing;\r\n          }\r\n        } else {\r\n          if (\r\n            child.elementType === elementType ||\r\n            // Keep this check inline so it only runs on the false path:\r\n            (__DEV__\r\n              ? isCompatibleFamilyForHotReloading(child, element)\r\n              : false) ||\r\n            // Lazy types should reconcile their resolved type.\r\n            // We need to do this after the Hot Reloading check above,\r\n            // because hot reloading has different semantics than prod because\r\n            // it doesn't resuspend. So we can't let the call below suspend.\r\n            (typeof elementType === 'object' &&\r\n              elementType !== null &&\r\n              elementType.$$typeof === REACT_LAZY_TYPE &&\r\n              resolveLazy(elementType) === child.type)\r\n          ) {\r\n            deleteRemainingChildren(returnFiber, child.sibling);\r\n            const existing = useFiber(child, element.props);\r\n            existing.ref = coerceRef(returnFiber, child, element);\r\n            existing.return = returnFiber;\r\n            if (__DEV__) {\r\n              existing._debugSource = element._source;\r\n              existing._debugOwner = element._owner;\r\n            }\r\n            return existing;\r\n          }\r\n        }\r\n        // Didn't match.\r\n        deleteRemainingChildren(returnFiber, child);\r\n        break;\r\n      } else {\r\n        deleteChild(returnFiber, child);\r\n      }\r\n      child = child.sibling;\r\n    }\r\n\r\n    if (element.type === REACT_FRAGMENT_TYPE) {\r\n      const created = createFiberFromFragment(\r\n        element.props.children,\r\n        returnFiber.mode,\r\n        lanes,\r\n        element.key,\r\n      );\r\n      created.return = returnFiber;\r\n      return created;\r\n    } else {\r\n      const created = createFiberFromElement(element, returnFiber.mode, lanes);\r\n      created.ref = coerceRef(returnFiber, currentFirstChild, element);\r\n      created.return = returnFiber;\r\n      return created;\r\n    }\r\n  }\r\n\r\n  function reconcileSinglePortal(\r\n    returnFiber: Fiber,\r\n    currentFirstChild: Fiber | null,\r\n    portal: ReactPortal,\r\n    lanes: Lanes,\r\n  ): Fiber {\r\n    const key = portal.key;\r\n    let child = currentFirstChild;\r\n    while (child !== null) {\r\n      // TODO: If key === null and child.key === null, then this only applies to\r\n      // the first item in the list.\r\n      if (child.key === key) {\r\n        if (\r\n          child.tag === HostPortal &&\r\n          child.stateNode.containerInfo === portal.containerInfo &&\r\n          child.stateNode.implementation === portal.implementation\r\n        ) {\r\n          deleteRemainingChildren(returnFiber, child.sibling);\r\n          const existing = useFiber(child, portal.children || []);\r\n          existing.return = returnFiber;\r\n          return existing;\r\n        } else {\r\n          deleteRemainingChildren(returnFiber, child);\r\n          break;\r\n        }\r\n      } else {\r\n        deleteChild(returnFiber, child);\r\n      }\r\n      child = child.sibling;\r\n    }\r\n\r\n    const created = createFiberFromPortal(portal, returnFiber.mode, lanes);\r\n    created.return = returnFiber;\r\n    return created;\r\n  }\r\n\r\n  // This API will tag the children with the side-effect of the reconciliation\r\n  // itself. They will be added to the side-effect list as we pass through the\r\n  // children and the parent.\r\n  function reconcileChildFibers(\r\n    returnFiber: Fiber,\r\n    currentFirstChild: Fiber | null,\r\n    newChild: any,\r\n    lanes: Lanes,\r\n  ): Fiber | null {\r\n    // This function is not recursive.\r\n    // If the top level item is an array, we treat it as a set of children,\r\n    // not as a fragment. Nested arrays on the other hand will be treated as\r\n    // fragment nodes. Recursion happens at the normal flow.\r\n\r\n    // Handle top level unkeyed fragments as if they were arrays.\r\n    // This leads to an ambiguity between <>{[...]}</> and <>...</>.\r\n    // We treat the ambiguous cases above the same.\r\n    const isUnkeyedTopLevelFragment =\r\n      typeof newChild === 'object' &&\r\n      newChild !== null &&\r\n      newChild.type === REACT_FRAGMENT_TYPE &&\r\n      newChild.key === null;\r\n    if (isUnkeyedTopLevelFragment) {\r\n      newChild = newChild.props.children;\r\n    }\r\n\r\n    // Handle object types\r\n    if (typeof newChild === 'object' && newChild !== null) {\r\n      switch (newChild.$$typeof) {\r\n        case REACT_ELEMENT_TYPE:\r\n          return placeSingleChild(\r\n            reconcileSingleElement(\r\n              returnFiber,\r\n              currentFirstChild,\r\n              newChild,\r\n              lanes,\r\n            ),\r\n          );\r\n        case REACT_PORTAL_TYPE:\r\n          return placeSingleChild(\r\n            reconcileSinglePortal(\r\n              returnFiber,\r\n              currentFirstChild,\r\n              newChild,\r\n              lanes,\r\n            ),\r\n          );\r\n        case REACT_LAZY_TYPE:\r\n          const payload = newChild._payload;\r\n          const init = newChild._init;\r\n          // TODO: This function is supposed to be non-recursive.\r\n          return reconcileChildFibers(\r\n            returnFiber,\r\n            currentFirstChild,\r\n            init(payload),\r\n            lanes,\r\n          );\r\n      }\r\n\r\n      if (isArray(newChild)) {\r\n        return reconcileChildrenArray(\r\n          returnFiber,\r\n          currentFirstChild,\r\n          newChild,\r\n          lanes,\r\n        );\r\n      }\r\n\r\n      if (getIteratorFn(newChild)) {\r\n        return reconcileChildrenIterator(\r\n          returnFiber,\r\n          currentFirstChild,\r\n          newChild,\r\n          lanes,\r\n        );\r\n      }\r\n\r\n      throwOnInvalidObjectType(returnFiber, newChild);\r\n    }\r\n\r\n    if (\r\n      (typeof newChild === 'string' && newChild !== '') ||\r\n      typeof newChild === 'number'\r\n    ) {\r\n      return placeSingleChild(\r\n        reconcileSingleTextNode(\r\n          returnFiber,\r\n          currentFirstChild,\r\n          '' + newChild,\r\n          lanes,\r\n        ),\r\n      );\r\n    }\r\n\r\n    if (__DEV__) {\r\n      if (typeof newChild === 'function') {\r\n        warnOnFunctionType(returnFiber);\r\n      }\r\n    }\r\n\r\n    // Remaining cases are all treated as empty.\r\n    return deleteRemainingChildren(returnFiber, currentFirstChild);\r\n  }\r\n\r\n  return reconcileChildFibers;\r\n}\r\n\r\nexport const reconcileChildFibers = ChildReconciler(true);\r\nexport const mountChildFibers = ChildReconciler(false);\r\n\r\nexport function cloneChildFibers(\r\n  current: Fiber | null,\r\n  workInProgress: Fiber,\r\n): void {\r\n  if (current !== null && workInProgress.child !== current.child) {\r\n    throw new Error('Resuming work not yet implemented.');\r\n  }\r\n\r\n  if (workInProgress.child === null) {\r\n    return;\r\n  }\r\n\r\n  let currentChild = workInProgress.child;\r\n  let newChild = createWorkInProgress(currentChild, currentChild.pendingProps);\r\n  workInProgress.child = newChild;\r\n\r\n  newChild.return = workInProgress;\r\n  while (currentChild.sibling !== null) {\r\n    currentChild = currentChild.sibling;\r\n    newChild = newChild.sibling = createWorkInProgress(\r\n      currentChild,\r\n      currentChild.pendingProps,\r\n    );\r\n    newChild.return = workInProgress;\r\n  }\r\n  newChild.sibling = null;\r\n}\r\n\r\n// Reset a workInProgress child set to prepare it for a second pass.\r\nexport function resetChildFibers(workInProgress: Fiber, lanes: Lanes): void {\r\n  let child = workInProgress.child;\r\n  while (child !== null) {\r\n    resetWorkInProgress(child, lanes);\r\n    child = child.sibling;\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {Fiber} from './ReactInternalTypes';\r\nimport type {StackCursor} from './ReactFiberStack.old';\r\nimport type {Lanes} from './ReactFiberLane.old';\r\n\r\nimport {createCursor, push, pop} from './ReactFiberStack.old';\r\n\r\nimport {getRenderLanes, setRenderLanes} from './ReactFiberWorkLoop.old';\r\nimport {NoLanes, mergeLanes} from './ReactFiberLane.old';\r\n\r\n// TODO: Remove `renderLanes` context in favor of hidden context\r\ntype HiddenContext = {\r\n  // Represents the lanes that must be included when processing updates in\r\n  // order to reveal the hidden content.\r\n  // TODO: Remove `subtreeLanes` context from work loop in favor of this one.\r\n  baseLanes: number,\r\n  ...\r\n};\r\n\r\n// TODO: This isn't being used yet, but it's intended to replace the\r\n// InvisibleParentContext that is currently managed by SuspenseContext.\r\nexport const currentTreeHiddenStackCursor: StackCursor<HiddenContext | null> = createCursor(\r\n  null,\r\n);\r\nexport const prevRenderLanesStackCursor: StackCursor<Lanes> = createCursor(\r\n  NoLanes,\r\n);\r\n\r\nexport function pushHiddenContext(fiber: Fiber, context: HiddenContext): void {\r\n  const prevRenderLanes = getRenderLanes();\r\n  push(prevRenderLanesStackCursor, prevRenderLanes, fiber);\r\n  push(currentTreeHiddenStackCursor, context, fiber);\r\n\r\n  // When rendering a subtree that's currently hidden, we must include all\r\n  // lanes that would have rendered if the hidden subtree hadn't been deferred.\r\n  // That is, in order to reveal content from hidden -> visible, we must commit\r\n  // all the updates that we skipped when we originally hid the tree.\r\n  setRenderLanes(mergeLanes(prevRenderLanes, context.baseLanes));\r\n}\r\n\r\nexport function reuseHiddenContextOnStack(fiber: Fiber): void {\r\n  // This subtree is not currently hidden, so we don't need to add any lanes\r\n  // to the render lanes. But we still need to push something to avoid a\r\n  // context mismatch. Reuse the existing context on the stack.\r\n  push(prevRenderLanesStackCursor, getRenderLanes(), fiber);\r\n  push(\r\n    currentTreeHiddenStackCursor,\r\n    currentTreeHiddenStackCursor.current,\r\n    fiber,\r\n  );\r\n}\r\n\r\nexport function popHiddenContext(fiber: Fiber): void {\r\n  // Restore the previous render lanes from the stack\r\n  setRenderLanes(prevRenderLanesStackCursor.current);\r\n\r\n  pop(currentTreeHiddenStackCursor, fiber);\r\n  pop(prevRenderLanesStackCursor, fiber);\r\n}\r\n\r\nexport function isCurrentTreeHidden(): boolean {\r\n  return currentTreeHiddenStackCursor.current !== null;\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {Fiber} from './ReactInternalTypes';\r\nimport type {StackCursor} from './ReactFiberStack.old';\r\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\r\n\r\nimport {enableSuspenseAvoidThisFallback} from 'shared/ReactFeatureFlags';\r\nimport {createCursor, push, pop} from './ReactFiberStack.old';\r\nimport {isCurrentTreeHidden} from './ReactFiberHiddenContext.old';\r\nimport {SuspenseComponent, OffscreenComponent} from './ReactWorkTags';\r\n\r\n// The Suspense handler is the boundary that should capture if something\r\n// suspends, i.e. it's the nearest `catch` block on the stack.\r\nconst suspenseHandlerStackCursor: StackCursor<Fiber | null> = createCursor(\r\n  null,\r\n);\r\n\r\nfunction shouldAvoidedBoundaryCapture(\r\n  workInProgress: Fiber,\r\n  handlerOnStack: Fiber,\r\n  props: any,\r\n): boolean {\r\n  if (enableSuspenseAvoidThisFallback) {\r\n    // If the parent is already showing content, and we're not inside a hidden\r\n    // tree, then we should show the avoided fallback.\r\n    if (handlerOnStack.alternate !== null && !isCurrentTreeHidden()) {\r\n      return true;\r\n    }\r\n\r\n    // If the handler on the stack is also an avoided boundary, then we should\r\n    // favor this inner one.\r\n    if (\r\n      handlerOnStack.tag === SuspenseComponent &&\r\n      handlerOnStack.memoizedProps.unstable_avoidThisFallback === true\r\n    ) {\r\n      return true;\r\n    }\r\n\r\n    // If this avoided boundary is dehydrated, then it should capture.\r\n    const suspenseState: SuspenseState | null = workInProgress.memoizedState;\r\n    if (suspenseState !== null && suspenseState.dehydrated !== null) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  // If none of those cases apply, then we should avoid this fallback and show\r\n  // the outer one instead.\r\n  return false;\r\n}\r\n\r\nexport function pushPrimaryTreeSuspenseHandler(handler: Fiber): void {\r\n  const props = handler.pendingProps;\r\n  const handlerOnStack = suspenseHandlerStackCursor.current;\r\n  if (\r\n    enableSuspenseAvoidThisFallback &&\r\n    props.unstable_avoidThisFallback === true &&\r\n    handlerOnStack !== null &&\r\n    !shouldAvoidedBoundaryCapture(handler, handlerOnStack, props)\r\n  ) {\r\n    // This boundary should not capture if something suspends. Reuse the\r\n    // existing handler on the stack.\r\n    push(suspenseHandlerStackCursor, handlerOnStack, handler);\r\n  } else {\r\n    // Push this handler onto the stack.\r\n    push(suspenseHandlerStackCursor, handler, handler);\r\n  }\r\n}\r\n\r\nexport function pushFallbackTreeSuspenseHandler(fiber: Fiber): void {\r\n  // We're about to render the fallback. If something in the fallback suspends,\r\n  // it's akin to throwing inside of a `catch` block. This boundary should not\r\n  // capture. Reuse the existing handler on the stack.\r\n  reuseSuspenseHandlerOnStack(fiber);\r\n}\r\n\r\nexport function pushOffscreenSuspenseHandler(fiber: Fiber): void {\r\n  if (fiber.tag === OffscreenComponent) {\r\n    push(suspenseHandlerStackCursor, fiber, fiber);\r\n  } else {\r\n    // This is a LegacyHidden component.\r\n    reuseSuspenseHandlerOnStack(fiber);\r\n  }\r\n}\r\n\r\nexport function reuseSuspenseHandlerOnStack(fiber: Fiber) {\r\n  push(suspenseHandlerStackCursor, getSuspenseHandler(), fiber);\r\n}\r\n\r\nexport function getSuspenseHandler(): Fiber | null {\r\n  return suspenseHandlerStackCursor.current;\r\n}\r\n\r\nexport function popSuspenseHandler(fiber: Fiber): void {\r\n  pop(suspenseHandlerStackCursor, fiber);\r\n}\r\n\r\n// SuspenseList context\r\n// TODO: Move to a separate module? We may change the SuspenseList\r\n// implementation to hide/show in the commit phase, anyway.\r\nexport opaque type SuspenseContext = number;\r\nexport opaque type SubtreeSuspenseContext: SuspenseContext = number;\r\nexport opaque type ShallowSuspenseContext: SuspenseContext = number;\r\n\r\nconst DefaultSuspenseContext: SuspenseContext = 0b00;\r\n\r\nconst SubtreeSuspenseContextMask: SuspenseContext = 0b01;\r\n\r\n// ForceSuspenseFallback can be used by SuspenseList to force newly added\r\n// items into their fallback state during one of the render passes.\r\nexport const ForceSuspenseFallback: ShallowSuspenseContext = 0b10;\r\n\r\nexport const suspenseStackCursor: StackCursor<SuspenseContext> = createCursor(\r\n  DefaultSuspenseContext,\r\n);\r\n\r\nexport function hasSuspenseListContext(\r\n  parentContext: SuspenseContext,\r\n  flag: SuspenseContext,\r\n): boolean {\r\n  return (parentContext & flag) !== 0;\r\n}\r\n\r\nexport function setDefaultShallowSuspenseListContext(\r\n  parentContext: SuspenseContext,\r\n): SuspenseContext {\r\n  return parentContext & SubtreeSuspenseContextMask;\r\n}\r\n\r\nexport function setShallowSuspenseListContext(\r\n  parentContext: SuspenseContext,\r\n  shallowContext: ShallowSuspenseContext,\r\n): SuspenseContext {\r\n  return (parentContext & SubtreeSuspenseContextMask) | shallowContext;\r\n}\r\n\r\nexport function pushSuspenseListContext(\r\n  fiber: Fiber,\r\n  newContext: SuspenseContext,\r\n): void {\r\n  push(suspenseStackCursor, newContext, fiber);\r\n}\r\n\r\nexport function popSuspenseListContext(fiber: Fiber): void {\r\n  pop(suspenseStackCursor, fiber);\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {ReactNodeList, Wakeable} from 'shared/ReactTypes';\r\nimport type {Fiber} from './ReactInternalTypes';\r\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\r\nimport type {Lane} from './ReactFiberLane.old';\r\nimport type {TreeContext} from './ReactFiberTreeContext.old';\r\n\r\nimport {SuspenseComponent, SuspenseListComponent} from './ReactWorkTags';\r\nimport {NoFlags, DidCapture} from './ReactFiberFlags';\r\nimport {\r\n  isSuspenseInstancePending,\r\n  isSuspenseInstanceFallback,\r\n} from './ReactFiberHostConfig';\r\n\r\nexport type SuspenseProps = {\r\n  children?: ReactNodeList,\r\n  fallback?: ReactNodeList,\r\n\r\n  // TODO: Add \"unstable_\" prefix?\r\n  suspenseCallback?: (Set<Wakeable> | null) => mixed,\r\n\r\n  unstable_expectedLoadTime?: number,\r\n  unstable_name?: string,\r\n};\r\n\r\n// A null SuspenseState represents an unsuspended normal Suspense boundary.\r\n// A non-null SuspenseState means that it is blocked for one reason or another.\r\n// - A non-null dehydrated field means it's blocked pending hydration.\r\n//   - A non-null dehydrated field can use isSuspenseInstancePending or\r\n//     isSuspenseInstanceFallback to query the reason for being dehydrated.\r\n// - A null dehydrated field means it's blocked by something suspending and\r\n//   we're currently showing a fallback instead.\r\nexport type SuspenseState = {\r\n  // If this boundary is still dehydrated, we store the SuspenseInstance\r\n  // here to indicate that it is dehydrated (flag) and for quick access\r\n  // to check things like isSuspenseInstancePending.\r\n  dehydrated: null | SuspenseInstance,\r\n  treeContext: null | TreeContext,\r\n  // Represents the lane we should attempt to hydrate a dehydrated boundary at.\r\n  // OffscreenLane is the default for dehydrated boundaries.\r\n  // NoLane is the default for normal boundaries, which turns into \"normal\" pri.\r\n  retryLane: Lane,\r\n};\r\n\r\nexport type SuspenseListTailMode = 'collapsed' | 'hidden' | void;\r\n\r\nexport type SuspenseListRenderState = {\r\n  isBackwards: boolean,\r\n  // The currently rendering tail row.\r\n  rendering: null | Fiber,\r\n  // The absolute time when we started rendering the most recent tail row.\r\n  renderingStartTime: number,\r\n  // The last of the already rendered children.\r\n  last: null | Fiber,\r\n  // Remaining rows on the tail of the list.\r\n  tail: null | Fiber,\r\n  // Tail insertions setting.\r\n  tailMode: SuspenseListTailMode,\r\n};\r\n\r\nexport function findFirstSuspended(row: Fiber): null | Fiber {\r\n  let node = row;\r\n  while (node !== null) {\r\n    if (node.tag === SuspenseComponent) {\r\n      const state: SuspenseState | null = node.memoizedState;\r\n      if (state !== null) {\r\n        const dehydrated: null | SuspenseInstance = state.dehydrated;\r\n        if (\r\n          dehydrated === null ||\r\n          isSuspenseInstancePending(dehydrated) ||\r\n          isSuspenseInstanceFallback(dehydrated)\r\n        ) {\r\n          return node;\r\n        }\r\n      }\r\n    } else if (\r\n      node.tag === SuspenseListComponent &&\r\n      // revealOrder undefined can't be trusted because it don't\r\n      // keep track of whether it suspended or not.\r\n      node.memoizedProps.revealOrder !== undefined\r\n    ) {\r\n      const didSuspend = (node.flags & DidCapture) !== NoFlags;\r\n      if (didSuspend) {\r\n        return node;\r\n      }\r\n    } else if (node.child !== null) {\r\n      node.child.return = node;\r\n      node = node.child;\r\n      continue;\r\n    }\r\n    if (node === row) {\r\n      return null;\r\n    }\r\n    while (node.sibling === null) {\r\n      if (node.return === null || node.return === row) {\r\n        return null;\r\n      }\r\n      node = node.return;\r\n    }\r\n    node.sibling.return = node.return;\r\n    node = node.sibling;\r\n  }\r\n  return null;\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nexport type HookFlags = number;\r\n\r\nexport const NoFlags = /*   */ 0b00000;\r\n\r\n// Represents whether effect should fire.\r\nexport const HasEffect = /* */ 0b00001;\r\n\r\n// Represents the phase in which the effect (not the clean-up) fires.\r\nexport const Snapshot = /*  */ 0b00010;\r\nexport const Insertion = /* */ 0b00100;\r\nexport const Layout = /*    */ 0b01000;\r\nexport const Passive = /*   */ 0b10000;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {MutableSource, MutableSourceVersion} from 'shared/ReactTypes';\r\nimport type {FiberRoot} from './ReactInternalTypes';\r\n\r\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\r\n\r\n// Work in progress version numbers only apply to a single render,\r\n// and should be reset before starting a new render.\r\n// This tracks which mutable sources need to be reset after a render.\r\nconst workInProgressSources: Array<MutableSource<any>> = [];\r\n\r\nlet rendererSigil;\r\nif (__DEV__) {\r\n  // Used to detect multiple renderers using the same mutable source.\r\n  rendererSigil = {};\r\n}\r\n\r\nexport function markSourceAsDirty(mutableSource: MutableSource<any>): void {\r\n  workInProgressSources.push(mutableSource);\r\n}\r\n\r\nexport function resetWorkInProgressVersions(): void {\r\n  for (let i = 0; i < workInProgressSources.length; i++) {\r\n    const mutableSource = workInProgressSources[i];\r\n    if (isPrimaryRenderer) {\r\n      mutableSource._workInProgressVersionPrimary = null;\r\n    } else {\r\n      mutableSource._workInProgressVersionSecondary = null;\r\n    }\r\n  }\r\n  workInProgressSources.length = 0;\r\n}\r\n\r\nexport function getWorkInProgressVersion(\r\n  mutableSource: MutableSource<any>,\r\n): null | MutableSourceVersion {\r\n  if (isPrimaryRenderer) {\r\n    return mutableSource._workInProgressVersionPrimary;\r\n  } else {\r\n    return mutableSource._workInProgressVersionSecondary;\r\n  }\r\n}\r\n\r\nexport function setWorkInProgressVersion(\r\n  mutableSource: MutableSource<any>,\r\n  version: MutableSourceVersion,\r\n): void {\r\n  if (isPrimaryRenderer) {\r\n    mutableSource._workInProgressVersionPrimary = version;\r\n  } else {\r\n    mutableSource._workInProgressVersionSecondary = version;\r\n  }\r\n  workInProgressSources.push(mutableSource);\r\n}\r\n\r\nexport function warnAboutMultipleRenderersDEV(\r\n  mutableSource: MutableSource<any>,\r\n): void {\r\n  if (__DEV__) {\r\n    if (isPrimaryRenderer) {\r\n      if (mutableSource._currentPrimaryRenderer == null) {\r\n        mutableSource._currentPrimaryRenderer = rendererSigil;\r\n      } else if (mutableSource._currentPrimaryRenderer !== rendererSigil) {\r\n        console.error(\r\n          'Detected multiple renderers concurrently rendering the ' +\r\n            'same mutable source. This is currently unsupported.',\r\n        );\r\n      }\r\n    } else {\r\n      if (mutableSource._currentSecondaryRenderer == null) {\r\n        mutableSource._currentSecondaryRenderer = rendererSigil;\r\n      } else if (mutableSource._currentSecondaryRenderer !== rendererSigil) {\r\n        console.error(\r\n          'Detected multiple renderers concurrently rendering the ' +\r\n            'same mutable source. This is currently unsupported.',\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Eager reads the version of a mutable source and stores it on the root.\r\n// This ensures that the version used for server rendering matches the one\r\n// that is eventually read during hydration.\r\n// If they don't match there's a potential tear and a full deopt render is required.\r\nexport function registerMutableSourceForHydration(\r\n  root: FiberRoot,\r\n  mutableSource: MutableSource<any>,\r\n): void {\r\n  const getVersion = mutableSource._getVersion;\r\n  const version = getVersion(mutableSource._source);\r\n\r\n  // TODO Clear this data once all pending hydration work is finished.\r\n  // Retaining it forever may interfere with GC.\r\n  if (root.mutableSourceEagerHydrationData == null) {\r\n    root.mutableSourceEagerHydrationData = [mutableSource, version];\r\n  } else {\r\n    root.mutableSourceEagerHydrationData.push(mutableSource, version);\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {ReactContext} from 'shared/ReactTypes';\r\nimport type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\r\n\r\nimport {enableCache} from 'shared/ReactFeatureFlags';\r\nimport {REACT_CONTEXT_TYPE} from 'shared/ReactSymbols';\r\n\r\nimport {pushProvider, popProvider} from './ReactFiberNewContext.old';\r\nimport * as Scheduler from 'scheduler';\r\n\r\n// In environments without AbortController (e.g. tests)\r\n// replace it with a lightweight shim that only has the features we use.\r\nconst AbortControllerLocal: typeof AbortController = enableCache\r\n  ? typeof AbortController !== 'undefined'\r\n    ? AbortController\r\n    : (function AbortControllerShim() {\r\n        const listeners = [];\r\n        const signal = (this.signal = {\r\n          aborted: false,\r\n          addEventListener: (type, listener) => {\r\n            listeners.push(listener);\r\n          },\r\n        });\r\n\r\n        this.abort = () => {\r\n          signal.aborted = true;\r\n          listeners.forEach(listener => listener());\r\n        };\r\n      }: AbortController)\r\n  : (null: any);\r\n\r\nexport type Cache = {\r\n  controller: AbortControllerLocal,\r\n  data: Map<() => mixed, mixed>,\r\n  refCount: number,\r\n};\r\n\r\nexport type CacheComponentState = {\r\n  +parent: Cache,\r\n  +cache: Cache,\r\n};\r\n\r\nexport type SpawnedCachePool = {\r\n  +parent: Cache,\r\n  +pool: Cache,\r\n};\r\n\r\n// Intentionally not named imports because Rollup would\r\n// use dynamic dispatch for CommonJS interop named imports.\r\nconst {\r\n  unstable_scheduleCallback: scheduleCallback,\r\n  unstable_NormalPriority: NormalPriority,\r\n} = Scheduler;\r\n\r\nexport const CacheContext: ReactContext<Cache> = enableCache\r\n  ? {\r\n      $$typeof: REACT_CONTEXT_TYPE,\r\n      // We don't use Consumer/Provider for Cache components. So we'll cheat.\r\n      Consumer: (null: any),\r\n      Provider: (null: any),\r\n      // We'll initialize these at the root.\r\n      _currentValue: (null: any),\r\n      _currentValue2: (null: any),\r\n      _threadCount: 0,\r\n      _defaultValue: (null: any),\r\n      _globalName: (null: any),\r\n    }\r\n  : (null: any);\r\n\r\nif (__DEV__ && enableCache) {\r\n  CacheContext._currentRenderer = null;\r\n  CacheContext._currentRenderer2 = null;\r\n}\r\n\r\n// Creates a new empty Cache instance with a ref-count of 0. The caller is responsible\r\n// for retaining the cache once it is in use (retainCache), and releasing the cache\r\n// once it is no longer needed (releaseCache).\r\nexport function createCache(): Cache {\r\n  if (!enableCache) {\r\n    return (null: any);\r\n  }\r\n  const cache: Cache = {\r\n    controller: new AbortControllerLocal(),\r\n    data: new Map(),\r\n    refCount: 0,\r\n  };\r\n\r\n  return cache;\r\n}\r\n\r\nexport function retainCache(cache: Cache) {\r\n  if (!enableCache) {\r\n    return;\r\n  }\r\n  if (__DEV__) {\r\n    if (cache.controller.signal.aborted) {\r\n      console.warn(\r\n        'A cache instance was retained after it was already freed. ' +\r\n          'This likely indicates a bug in React.',\r\n      );\r\n    }\r\n  }\r\n  cache.refCount++;\r\n}\r\n\r\n// Cleanup a cache instance, potentially freeing it if there are no more references\r\nexport function releaseCache(cache: Cache) {\r\n  if (!enableCache) {\r\n    return;\r\n  }\r\n  cache.refCount--;\r\n  if (__DEV__) {\r\n    if (cache.refCount < 0) {\r\n      console.warn(\r\n        'A cache instance was released after it was already freed. ' +\r\n          'This likely indicates a bug in React.',\r\n      );\r\n    }\r\n  }\r\n  if (cache.refCount === 0) {\r\n    scheduleCallback(NormalPriority, () => {\r\n      cache.controller.abort();\r\n    });\r\n  }\r\n}\r\n\r\nexport function pushCacheProvider(workInProgress: Fiber, cache: Cache) {\r\n  if (!enableCache) {\r\n    return;\r\n  }\r\n  pushProvider(workInProgress, CacheContext, cache);\r\n}\r\n\r\nexport function popCacheProvider(workInProgress: Fiber, cache: Cache) {\r\n  if (!enableCache) {\r\n    return;\r\n  }\r\n  popProvider(CacheContext, workInProgress);\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {\r\n  Wakeable,\r\n  Thenable,\r\n  PendingThenable,\r\n  FulfilledThenable,\r\n  RejectedThenable,\r\n} from 'shared/ReactTypes';\r\n\r\nlet suspendedThenable: Thenable<mixed> | null = null;\r\nlet adHocSuspendCount: number = 0;\r\n\r\n// TODO: Sparse arrays are bad for performance.\r\nlet usedThenables: Array<Thenable<any> | void> | null = null;\r\nlet lastUsedThenable: Thenable<any> | null = null;\r\n\r\nconst MAX_AD_HOC_SUSPEND_COUNT = 50;\r\n\r\nexport function isTrackingSuspendedThenable(): boolean {\r\n  return suspendedThenable !== null;\r\n}\r\n\r\nexport function suspendedThenableDidResolve(): boolean {\r\n  if (suspendedThenable !== null) {\r\n    const status = suspendedThenable.status;\r\n    return status === 'fulfilled' || status === 'rejected';\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function trackSuspendedWakeable(wakeable: Wakeable) {\r\n  // If this wakeable isn't already a thenable, turn it into one now. Then,\r\n  // when we resume the work loop, we can check if its status is\r\n  // still pending.\r\n  // TODO: Get rid of the Wakeable type? It's superseded by UntrackedThenable.\r\n  const thenable: Thenable<mixed> = (wakeable: any);\r\n\r\n  if (thenable !== lastUsedThenable) {\r\n    // If this wakeable was not just `use`-d, it must be an ad hoc wakeable\r\n    // that was thrown by an older Suspense implementation. Keep a count of\r\n    // these so that we can detect an infinite ping loop.\r\n    // TODO: Once `use` throws an opaque signal instead of the actual thenable,\r\n    // a better way to count ad hoc suspends is whether an actual thenable\r\n    // is caught by the work loop.\r\n    adHocSuspendCount++;\r\n  }\r\n  suspendedThenable = thenable;\r\n\r\n  // We use an expando to track the status and result of a thenable so that we\r\n  // can synchronously unwrap the value. Think of this as an extension of the\r\n  // Promise API, or a custom interface that is a superset of Thenable.\r\n  //\r\n  // If the thenable doesn't have a status, set it to \"pending\" and attach\r\n  // a listener that will update its status and result when it resolves.\r\n  switch (thenable.status) {\r\n    case 'fulfilled':\r\n    case 'rejected':\r\n      // A thenable that already resolved shouldn't have been thrown, so this is\r\n      // unexpected. Suggests a mistake in a userspace data library. Don't track\r\n      // this thenable, because if we keep trying it will likely infinite loop\r\n      // without ever resolving.\r\n      // TODO: Log a warning?\r\n      suspendedThenable = null;\r\n      break;\r\n    default: {\r\n      if (typeof thenable.status === 'string') {\r\n        // Only instrument the thenable if the status if not defined. If\r\n        // it's defined, but an unknown value, assume it's been instrumented by\r\n        // some custom userspace implementation. We treat it as \"pending\".\r\n        break;\r\n      }\r\n      const pendingThenable: PendingThenable<mixed> = (thenable: any);\r\n      pendingThenable.status = 'pending';\r\n      pendingThenable.then(\r\n        fulfilledValue => {\r\n          if (thenable.status === 'pending') {\r\n            const fulfilledThenable: FulfilledThenable<mixed> = (thenable: any);\r\n            fulfilledThenable.status = 'fulfilled';\r\n            fulfilledThenable.value = fulfilledValue;\r\n          }\r\n        },\r\n        (error: mixed) => {\r\n          if (thenable.status === 'pending') {\r\n            const rejectedThenable: RejectedThenable<mixed> = (thenable: any);\r\n            rejectedThenable.status = 'rejected';\r\n            rejectedThenable.reason = error;\r\n          }\r\n        },\r\n      );\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nexport function resetWakeableStateAfterEachAttempt() {\r\n  suspendedThenable = null;\r\n  adHocSuspendCount = 0;\r\n  lastUsedThenable = null;\r\n}\r\n\r\nexport function resetThenableStateOnCompletion() {\r\n  usedThenables = null;\r\n}\r\n\r\nexport function throwIfInfinitePingLoopDetected() {\r\n  if (adHocSuspendCount > MAX_AD_HOC_SUSPEND_COUNT) {\r\n    // TODO: Guard against an infinite loop by throwing an error if the same\r\n    // component suspends too many times in a row. This should be thrown from\r\n    // the render phase so that it gets the component stack.\r\n  }\r\n}\r\n\r\nexport function trackUsedThenable<T>(thenable: Thenable<T>, index: number) {\r\n  if (usedThenables === null) {\r\n    usedThenables = [];\r\n  }\r\n  usedThenables[index] = thenable;\r\n  lastUsedThenable = thenable;\r\n}\r\n\r\nexport function getPreviouslyUsedThenableAtIndex<T>(\r\n  index: number,\r\n): Thenable<T> | null {\r\n  if (usedThenables !== null) {\r\n    const thenable = usedThenables[index];\r\n    if (thenable !== undefined) {\r\n      return thenable;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {\r\n  MutableSource,\r\n  MutableSourceGetSnapshotFn,\r\n  MutableSourceSubscribeFn,\r\n  ReactContext,\r\n  StartTransitionOptions,\r\n  Usable,\r\n  Thenable,\r\n} from 'shared/ReactTypes';\r\nimport type {\r\n  Fiber,\r\n  Dispatcher,\r\n  HookType,\r\n  MemoCache,\r\n} from './ReactInternalTypes';\r\nimport type {Lanes, Lane} from './ReactFiberLane.old';\r\nimport type {HookFlags} from './ReactHookEffectTags';\r\nimport type {FiberRoot} from './ReactInternalTypes';\r\nimport type {Cache} from './ReactFiberCacheComponent.old';\r\nimport type {Flags} from './ReactFiberFlags';\r\n\r\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\r\nimport {\r\n  enableDebugTracing,\r\n  enableSchedulingProfiler,\r\n  enableNewReconciler,\r\n  enableCache,\r\n  enableUseRefAccessWarning,\r\n  enableLazyContextPropagation,\r\n  enableUseMutableSource,\r\n  enableTransitionTracing,\r\n  enableUseHook,\r\n  enableUseMemoCacheHook,\r\n  enableUseEventHook,\r\n} from 'shared/ReactFeatureFlags';\r\nimport {\r\n  REACT_CONTEXT_TYPE,\r\n  REACT_SERVER_CONTEXT_TYPE,\r\n} from 'shared/ReactSymbols';\r\n\r\nimport {NoMode, ConcurrentMode, DebugTracingMode} from './ReactTypeOfMode';\r\nimport {\r\n  NoLane,\r\n  SyncLane,\r\n  OffscreenLane,\r\n  NoLanes,\r\n  isSubsetOfLanes,\r\n  includesBlockingLane,\r\n  includesOnlyNonUrgentLanes,\r\n  claimNextTransitionLane,\r\n  mergeLanes,\r\n  removeLanes,\r\n  intersectLanes,\r\n  isTransitionLane,\r\n  markRootEntangled,\r\n  markRootMutableRead,\r\n  NoTimestamp,\r\n} from './ReactFiberLane.old';\r\nimport {\r\n  ContinuousEventPriority,\r\n  getCurrentUpdatePriority,\r\n  setCurrentUpdatePriority,\r\n  higherEventPriority,\r\n} from './ReactEventPriorities.old';\r\nimport {readContext, checkIfContextChanged} from './ReactFiberNewContext.old';\r\nimport {HostRoot, CacheComponent} from './ReactWorkTags';\r\nimport {\r\n  LayoutStatic as LayoutStaticEffect,\r\n  Passive as PassiveEffect,\r\n  PassiveStatic as PassiveStaticEffect,\r\n  StaticMask as StaticMaskEffect,\r\n  Update as UpdateEffect,\r\n  StoreConsistency,\r\n} from './ReactFiberFlags';\r\nimport {\r\n  HasEffect as HookHasEffect,\r\n  Layout as HookLayout,\r\n  Passive as HookPassive,\r\n  Insertion as HookInsertion,\r\n  Snapshot as HookSnapshot,\r\n} from './ReactHookEffectTags';\r\nimport {\r\n  getWorkInProgressRoot,\r\n  getWorkInProgressRootRenderLanes,\r\n  scheduleUpdateOnFiber,\r\n  requestUpdateLane,\r\n  requestEventTime,\r\n  markSkippedUpdateLanes,\r\n  isInvalidExecutionContextForEventFunction,\r\n} from './ReactFiberWorkLoop.old';\r\n\r\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\r\nimport is from 'shared/objectIs';\r\nimport isArray from 'shared/isArray';\r\nimport {\r\n  markWorkInProgressReceivedUpdate,\r\n  checkIfWorkInProgressReceivedUpdate,\r\n} from './ReactFiberBeginWork.old';\r\nimport {getIsHydrating} from './ReactFiberHydrationContext.old';\r\nimport {\r\n  getWorkInProgressVersion,\r\n  markSourceAsDirty,\r\n  setWorkInProgressVersion,\r\n  warnAboutMultipleRenderersDEV,\r\n} from './ReactMutableSource.old';\r\nimport {logStateUpdateScheduled} from './DebugTracing';\r\nimport {markStateUpdateScheduled} from './ReactFiberDevToolsHook.old';\r\nimport {createCache, CacheContext} from './ReactFiberCacheComponent.old';\r\nimport {\r\n  createUpdate as createLegacyQueueUpdate,\r\n  enqueueUpdate as enqueueLegacyQueueUpdate,\r\n  entangleTransitions as entangleLegacyQueueTransitions,\r\n} from './ReactFiberClassUpdateQueue.old';\r\nimport {\r\n  enqueueConcurrentHookUpdate,\r\n  enqueueConcurrentHookUpdateAndEagerlyBailout,\r\n  enqueueConcurrentRenderForLane,\r\n} from './ReactFiberConcurrentUpdates.old';\r\nimport {getTreeId} from './ReactFiberTreeContext.old';\r\nimport {now} from './Scheduler';\r\nimport {\r\n  trackUsedThenable,\r\n  getPreviouslyUsedThenableAtIndex,\r\n} from './ReactFiberWakeable.old';\r\n\r\nconst {ReactCurrentDispatcher, ReactCurrentBatchConfig} = ReactSharedInternals;\r\n\r\nexport type Update<S, A> = {\r\n  lane: Lane,\r\n  action: A,\r\n  hasEagerState: boolean,\r\n  eagerState: S | null,\r\n  next: Update<S, A>,\r\n};\r\n\r\nexport type UpdateQueue<S, A> = {\r\n  pending: Update<S, A> | null,\r\n  lanes: Lanes,\r\n  dispatch: (A => mixed) | null,\r\n  lastRenderedReducer: ((S, A) => S) | null,\r\n  lastRenderedState: S | null,\r\n};\r\n\r\nlet didWarnAboutMismatchedHooksForComponent;\r\nlet didWarnUncachedGetSnapshot;\r\nif (__DEV__) {\r\n  didWarnAboutMismatchedHooksForComponent = new Set();\r\n}\r\n\r\nexport type Hook = {\r\n  memoizedState: any,\r\n  baseState: any,\r\n  baseQueue: Update<any, any> | null,\r\n  queue: any,\r\n  next: Hook | null,\r\n};\r\n\r\nexport type Effect = {\r\n  tag: HookFlags,\r\n  create: () => (() => void) | void,\r\n  destroy: (() => void) | void,\r\n  deps: Array<mixed> | void | null,\r\n  next: Effect,\r\n};\r\n\r\ntype StoreInstance<T> = {\r\n  value: T,\r\n  getSnapshot: () => T,\r\n};\r\n\r\ntype StoreConsistencyCheck<T> = {\r\n  value: T,\r\n  getSnapshot: () => T,\r\n};\r\n\r\nexport type FunctionComponentUpdateQueue = {\r\n  lastEffect: Effect | null,\r\n  stores: Array<StoreConsistencyCheck<any>> | null,\r\n  // NOTE: optional, only set when enableUseMemoCacheHook is enabled\r\n  memoCache?: MemoCache | null,\r\n};\r\n\r\ntype BasicStateAction<S> = (S => S) | S;\r\n\r\ntype Dispatch<A> = A => void;\r\n\r\n// These are set right before calling the component.\r\nlet renderLanes: Lanes = NoLanes;\r\n// The work-in-progress fiber. I've named it differently to distinguish it from\r\n// the work-in-progress hook.\r\nlet currentlyRenderingFiber: Fiber = (null: any);\r\n\r\n// Hooks are stored as a linked list on the fiber's memoizedState field. The\r\n// current hook list is the list that belongs to the current fiber. The\r\n// work-in-progress hook list is a new list that will be added to the\r\n// work-in-progress fiber.\r\nlet currentHook: Hook | null = null;\r\nlet workInProgressHook: Hook | null = null;\r\n\r\n// Whether an update was scheduled at any point during the render phase. This\r\n// does not get reset if we do another render pass; only when we're completely\r\n// finished evaluating this component. This is an optimization so we know\r\n// whether we need to clear render phase updates after a throw.\r\nlet didScheduleRenderPhaseUpdate: boolean = false;\r\n// Where an update was scheduled only during the current render pass. This\r\n// gets reset after each attempt.\r\n// TODO: Maybe there's some way to consolidate this with\r\n// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.\r\nlet didScheduleRenderPhaseUpdateDuringThisPass: boolean = false;\r\n// Counts the number of useId hooks in this component.\r\nlet localIdCounter: number = 0;\r\n// Counts number of `use`-d thenables\r\nlet thenableIndexCounter: number = 0;\r\n\r\n// Used for ids that are generated completely client-side (i.e. not during\r\n// hydration). This counter is global, so client ids are not stable across\r\n// render attempts.\r\nlet globalClientIdCounter: number = 0;\r\n\r\nconst RE_RENDER_LIMIT = 25;\r\n\r\n// In DEV, this is the name of the currently executing primitive hook\r\nlet currentHookNameInDev: ?HookType = null;\r\n\r\n// In DEV, this list ensures that hooks are called in the same order between renders.\r\n// The list stores the order of hooks used during the initial render (mount).\r\n// Subsequent renders (updates) reference this list.\r\nlet hookTypesDev: Array<HookType> | null = null;\r\nlet hookTypesUpdateIndexDev: number = -1;\r\n\r\n// In DEV, this tracks whether currently rendering component needs to ignore\r\n// the dependencies for Hooks that need them (e.g. useEffect or useMemo).\r\n// When true, such Hooks will always be \"remounted\". Only used during hot reload.\r\nlet ignorePreviousDependencies: boolean = false;\r\n\r\nfunction mountHookTypesDev() {\r\n  if (__DEV__) {\r\n    const hookName = ((currentHookNameInDev: any): HookType);\r\n\r\n    if (hookTypesDev === null) {\r\n      hookTypesDev = [hookName];\r\n    } else {\r\n      hookTypesDev.push(hookName);\r\n    }\r\n  }\r\n}\r\n\r\nfunction updateHookTypesDev() {\r\n  if (__DEV__) {\r\n    const hookName = ((currentHookNameInDev: any): HookType);\r\n\r\n    if (hookTypesDev !== null) {\r\n      hookTypesUpdateIndexDev++;\r\n      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\r\n        warnOnHookMismatchInDev(hookName);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction checkDepsAreArrayDev(deps: mixed) {\r\n  if (__DEV__) {\r\n    if (deps !== undefined && deps !== null && !isArray(deps)) {\r\n      // Verify deps, but only on mount to avoid extra checks.\r\n      // It's unlikely their type would change as usually you define them inline.\r\n      console.error(\r\n        '%s received a final argument that is not an array (instead, received `%s`). When ' +\r\n          'specified, the final argument must be an array.',\r\n        currentHookNameInDev,\r\n        typeof deps,\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction warnOnHookMismatchInDev(currentHookName: HookType) {\r\n  if (__DEV__) {\r\n    const componentName = getComponentNameFromFiber(currentlyRenderingFiber);\r\n    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\r\n      didWarnAboutMismatchedHooksForComponent.add(componentName);\r\n\r\n      if (hookTypesDev !== null) {\r\n        let table = '';\r\n\r\n        const secondColumnStart = 30;\r\n\r\n        for (let i = 0; i <= ((hookTypesUpdateIndexDev: any): number); i++) {\r\n          const oldHookName = hookTypesDev[i];\r\n          const newHookName =\r\n            i === ((hookTypesUpdateIndexDev: any): number)\r\n              ? currentHookName\r\n              : oldHookName;\r\n\r\n          let row = `${i + 1}. ${oldHookName}`;\r\n\r\n          // Extra space so second column lines up\r\n          // lol @ IE not supporting String#repeat\r\n          while (row.length < secondColumnStart) {\r\n            row += ' ';\r\n          }\r\n\r\n          row += newHookName + '\\n';\r\n\r\n          table += row;\r\n        }\r\n\r\n        console.error(\r\n          'React has detected a change in the order of Hooks called by %s. ' +\r\n            'This will lead to bugs and errors if not fixed. ' +\r\n            'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\\n\\n' +\r\n            '   Previous render            Next render\\n' +\r\n            '   ------------------------------------------------------\\n' +\r\n            '%s' +\r\n            '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n',\r\n          componentName,\r\n          table,\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction throwInvalidHookError() {\r\n  throw new Error(\r\n    'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' +\r\n      ' one of the following reasons:\\n' +\r\n      '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' +\r\n      '2. You might be breaking the Rules of Hooks\\n' +\r\n      '3. You might have more than one copy of React in the same app\\n' +\r\n      'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.',\r\n  );\r\n}\r\n\r\nfunction areHookInputsEqual(\r\n  nextDeps: Array<mixed>,\r\n  prevDeps: Array<mixed> | null,\r\n) {\r\n  if (__DEV__) {\r\n    if (ignorePreviousDependencies) {\r\n      // Only true when this component is being hot reloaded.\r\n      return false;\r\n    }\r\n  }\r\n\r\n  if (prevDeps === null) {\r\n    if (__DEV__) {\r\n      console.error(\r\n        '%s received a final argument during this render, but not during ' +\r\n          'the previous render. Even though the final argument is optional, ' +\r\n          'its type cannot change between renders.',\r\n        currentHookNameInDev,\r\n      );\r\n    }\r\n    return false;\r\n  }\r\n\r\n  if (__DEV__) {\r\n    // Don't bother comparing lengths in prod because these arrays should be\r\n    // passed inline.\r\n    if (nextDeps.length !== prevDeps.length) {\r\n      console.error(\r\n        'The final argument passed to %s changed size between renders. The ' +\r\n          'order and size of this array must remain constant.\\n\\n' +\r\n          'Previous: %s\\n' +\r\n          'Incoming: %s',\r\n        currentHookNameInDev,\r\n        `[${prevDeps.join(', ')}]`,\r\n        `[${nextDeps.join(', ')}]`,\r\n      );\r\n    }\r\n  }\r\n  for (let i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\r\n    if (is(nextDeps[i], prevDeps[i])) {\r\n      continue;\r\n    }\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function renderWithHooks<Props, SecondArg>(\r\n  current: Fiber | null,\r\n  workInProgress: Fiber,\r\n  Component: (p: Props, arg: SecondArg) => any,\r\n  props: Props,\r\n  secondArg: SecondArg,\r\n  nextRenderLanes: Lanes,\r\n): any {\r\n  renderLanes = nextRenderLanes;\r\n  currentlyRenderingFiber = workInProgress;\r\n\r\n  if (__DEV__) {\r\n    hookTypesDev =\r\n      current !== null\r\n        ? ((current._debugHookTypes: any): Array<HookType>)\r\n        : null;\r\n    hookTypesUpdateIndexDev = -1;\r\n    // Used for hot reloading:\r\n    ignorePreviousDependencies =\r\n      current !== null && current.type !== workInProgress.type;\r\n  }\r\n\r\n  workInProgress.memoizedState = null;\r\n  workInProgress.updateQueue = null;\r\n  workInProgress.lanes = NoLanes;\r\n\r\n  // The following should have already been reset\r\n  // currentHook = null;\r\n  // workInProgressHook = null;\r\n\r\n  // didScheduleRenderPhaseUpdate = false;\r\n  // localIdCounter = 0;\r\n  // thenableIndexCounter = 0;\r\n\r\n  // TODO Warn if no hooks are used at all during mount, then some are used during update.\r\n  // Currently we will identify the update render as a mount because memoizedState === null.\r\n  // This is tricky because it's valid for certain types of components (e.g. React.lazy)\r\n\r\n  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.\r\n  // Non-stateful hooks (e.g. context) don't get added to memoizedState,\r\n  // so memoizedState would be null during updates and mounts.\r\n  if (__DEV__) {\r\n    if (current !== null && current.memoizedState !== null) {\r\n      ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;\r\n    } else if (hookTypesDev !== null) {\r\n      // This dispatcher handles an edge case where a component is updating,\r\n      // but no stateful hooks have been used.\r\n      // We want to match the production code behavior (which will use HooksDispatcherOnMount),\r\n      // but with the extra DEV validation to ensure hooks ordering hasn't changed.\r\n      // This dispatcher does that.\r\n      ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;\r\n    } else {\r\n      ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;\r\n    }\r\n  } else {\r\n    ReactCurrentDispatcher.current =\r\n      current === null || current.memoizedState === null\r\n        ? HooksDispatcherOnMount\r\n        : HooksDispatcherOnUpdate;\r\n  }\r\n\r\n  let children = Component(props, secondArg);\r\n\r\n  // Check if there was a render phase update\r\n  if (didScheduleRenderPhaseUpdateDuringThisPass) {\r\n    // Keep rendering in a loop for as long as render phase updates continue to\r\n    // be scheduled. Use a counter to prevent infinite loops.\r\n    let numberOfReRenders: number = 0;\r\n    do {\r\n      didScheduleRenderPhaseUpdateDuringThisPass = false;\r\n      localIdCounter = 0;\r\n      thenableIndexCounter = 0;\r\n\r\n      if (numberOfReRenders >= RE_RENDER_LIMIT) {\r\n        throw new Error(\r\n          'Too many re-renders. React limits the number of renders to prevent ' +\r\n            'an infinite loop.',\r\n        );\r\n      }\r\n\r\n      numberOfReRenders += 1;\r\n      if (__DEV__) {\r\n        // Even when hot reloading, allow dependencies to stabilize\r\n        // after first render to prevent infinite render phase updates.\r\n        ignorePreviousDependencies = false;\r\n      }\r\n\r\n      // Start over from the beginning of the list\r\n      currentHook = null;\r\n      workInProgressHook = null;\r\n\r\n      workInProgress.updateQueue = null;\r\n\r\n      if (__DEV__) {\r\n        // Also validate hook order for cascading updates.\r\n        hookTypesUpdateIndexDev = -1;\r\n      }\r\n\r\n      ReactCurrentDispatcher.current = __DEV__\r\n        ? HooksDispatcherOnRerenderInDEV\r\n        : HooksDispatcherOnRerender;\r\n\r\n      children = Component(props, secondArg);\r\n    } while (didScheduleRenderPhaseUpdateDuringThisPass);\r\n  }\r\n\r\n  // We can assume the previous dispatcher is always this one, since we set it\r\n  // at the beginning of the render phase and there's no re-entrance.\r\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\r\n\r\n  if (__DEV__) {\r\n    workInProgress._debugHookTypes = hookTypesDev;\r\n  }\r\n\r\n  // This check uses currentHook so that it works the same in DEV and prod bundles.\r\n  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\r\n  const didRenderTooFewHooks =\r\n    currentHook !== null && currentHook.next !== null;\r\n\r\n  renderLanes = NoLanes;\r\n  currentlyRenderingFiber = (null: any);\r\n\r\n  currentHook = null;\r\n  workInProgressHook = null;\r\n\r\n  if (__DEV__) {\r\n    currentHookNameInDev = null;\r\n    hookTypesDev = null;\r\n    hookTypesUpdateIndexDev = -1;\r\n\r\n    // Confirm that a static flag was not added or removed since the last\r\n    // render. If this fires, it suggests that we incorrectly reset the static\r\n    // flags in some other part of the codebase. This has happened before, for\r\n    // example, in the SuspenseList implementation.\r\n    if (\r\n      current !== null &&\r\n      (current.flags & StaticMaskEffect) !==\r\n        (workInProgress.flags & StaticMaskEffect) &&\r\n      // Disable this warning in legacy mode, because legacy Suspense is weird\r\n      // and creates false positives. To make this work in legacy mode, we'd\r\n      // need to mark fibers that commit in an incomplete state, somehow. For\r\n      // now I'll disable the warning that most of the bugs that would trigger\r\n      // it are either exclusive to concurrent mode or exist in both.\r\n      (current.mode & ConcurrentMode) !== NoMode\r\n    ) {\r\n      console.error(\r\n        'Internal React error: Expected static flag was missing. Please ' +\r\n          'notify the React team.',\r\n      );\r\n    }\r\n  }\r\n\r\n  didScheduleRenderPhaseUpdate = false;\r\n  // This is reset by checkDidRenderIdHook\r\n  // localIdCounter = 0;\r\n  thenableIndexCounter = 0;\r\n\r\n  if (didRenderTooFewHooks) {\r\n    throw new Error(\r\n      'Rendered fewer hooks than expected. This may be caused by an accidental ' +\r\n        'early return statement.',\r\n    );\r\n  }\r\n\r\n  if (enableLazyContextPropagation) {\r\n    if (current !== null) {\r\n      if (!checkIfWorkInProgressReceivedUpdate()) {\r\n        // If there were no changes to props or state, we need to check if there\r\n        // was a context change. We didn't already do this because there's no\r\n        // 1:1 correspondence between dependencies and hooks. Although, because\r\n        // there almost always is in the common case (`readContext` is an\r\n        // internal API), we could compare in there. OTOH, we only hit this case\r\n        // if everything else bails out, so on the whole it might be better to\r\n        // keep the comparison out of the common path.\r\n        const currentDependencies = current.dependencies;\r\n        if (\r\n          currentDependencies !== null &&\r\n          checkIfContextChanged(currentDependencies)\r\n        ) {\r\n          markWorkInProgressReceivedUpdate();\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return children;\r\n}\r\n\r\nexport function checkDidRenderIdHook(): boolean {\r\n  // This should be called immediately after every renderWithHooks call.\r\n  // Conceptually, it's part of the return value of renderWithHooks; it's only a\r\n  // separate function to avoid using an array tuple.\r\n  const didRenderIdHook = localIdCounter !== 0;\r\n  localIdCounter = 0;\r\n  return didRenderIdHook;\r\n}\r\n\r\nexport function bailoutHooks(\r\n  current: Fiber,\r\n  workInProgress: Fiber,\r\n  lanes: Lanes,\r\n) {\r\n  workInProgress.updateQueue = current.updateQueue;\r\n  workInProgress.flags &= ~(PassiveEffect | UpdateEffect);\r\n  current.lanes = removeLanes(current.lanes, lanes);\r\n}\r\n\r\nexport function resetHooksAfterThrow(): void {\r\n  // We can assume the previous dispatcher is always this one, since we set it\r\n  // at the beginning of the render phase and there's no re-entrance.\r\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\r\n\r\n  if (didScheduleRenderPhaseUpdate) {\r\n    // There were render phase updates. These are only valid for this render\r\n    // phase, which we are now aborting. Remove the updates from the queues so\r\n    // they do not persist to the next render. Do not remove updates from hooks\r\n    // that weren't processed.\r\n    //\r\n    // Only reset the updates from the queue if it has a clone. If it does\r\n    // not have a clone, that means it wasn't processed, and the updates were\r\n    // scheduled before we entered the render phase.\r\n    let hook: Hook | null = currentlyRenderingFiber.memoizedState;\r\n    while (hook !== null) {\r\n      const queue = hook.queue;\r\n      if (queue !== null) {\r\n        queue.pending = null;\r\n      }\r\n      hook = hook.next;\r\n    }\r\n    didScheduleRenderPhaseUpdate = false;\r\n  }\r\n\r\n  renderLanes = NoLanes;\r\n  currentlyRenderingFiber = (null: any);\r\n\r\n  currentHook = null;\r\n  workInProgressHook = null;\r\n\r\n  if (__DEV__) {\r\n    hookTypesDev = null;\r\n    hookTypesUpdateIndexDev = -1;\r\n\r\n    currentHookNameInDev = null;\r\n\r\n    isUpdatingOpaqueValueInRenderPhase = false;\r\n  }\r\n\r\n  didScheduleRenderPhaseUpdateDuringThisPass = false;\r\n  localIdCounter = 0;\r\n  thenableIndexCounter = 0;\r\n}\r\n\r\nfunction mountWorkInProgressHook(): Hook {\r\n  const hook: Hook = {\r\n    memoizedState: null,\r\n\r\n    baseState: null,\r\n    baseQueue: null,\r\n    queue: null,\r\n\r\n    next: null,\r\n  };\r\n\r\n  if (workInProgressHook === null) {\r\n    // This is the first hook in the list\r\n    currentlyRenderingFiber.memoizedState = workInProgressHook = hook;\r\n  } else {\r\n    // Append to the end of the list\r\n    workInProgressHook = workInProgressHook.next = hook;\r\n  }\r\n  return workInProgressHook;\r\n}\r\n\r\nfunction updateWorkInProgressHook(): Hook {\r\n  // This function is used both for updates and for re-renders triggered by a\r\n  // render phase update. It assumes there is either a current hook we can\r\n  // clone, or a work-in-progress hook from a previous render pass that we can\r\n  // use as a base. When we reach the end of the base list, we must switch to\r\n  // the dispatcher used for mounts.\r\n  let nextCurrentHook: null | Hook;\r\n  if (currentHook === null) {\r\n    const current = currentlyRenderingFiber.alternate;\r\n    if (current !== null) {\r\n      nextCurrentHook = current.memoizedState;\r\n    } else {\r\n      nextCurrentHook = null;\r\n    }\r\n  } else {\r\n    nextCurrentHook = currentHook.next;\r\n  }\r\n\r\n  let nextWorkInProgressHook: null | Hook;\r\n  if (workInProgressHook === null) {\r\n    nextWorkInProgressHook = currentlyRenderingFiber.memoizedState;\r\n  } else {\r\n    nextWorkInProgressHook = workInProgressHook.next;\r\n  }\r\n\r\n  if (nextWorkInProgressHook !== null) {\r\n    // There's already a work-in-progress. Reuse it.\r\n    workInProgressHook = nextWorkInProgressHook;\r\n    nextWorkInProgressHook = workInProgressHook.next;\r\n\r\n    currentHook = nextCurrentHook;\r\n  } else {\r\n    // Clone from the current hook.\r\n\r\n    if (nextCurrentHook === null) {\r\n      throw new Error('Rendered more hooks than during the previous render.');\r\n    }\r\n\r\n    currentHook = nextCurrentHook;\r\n\r\n    const newHook: Hook = {\r\n      memoizedState: currentHook.memoizedState,\r\n\r\n      baseState: currentHook.baseState,\r\n      baseQueue: currentHook.baseQueue,\r\n      queue: currentHook.queue,\r\n\r\n      next: null,\r\n    };\r\n\r\n    if (workInProgressHook === null) {\r\n      // This is the first hook in the list.\r\n      currentlyRenderingFiber.memoizedState = workInProgressHook = newHook;\r\n    } else {\r\n      // Append to the end of the list.\r\n      workInProgressHook = workInProgressHook.next = newHook;\r\n    }\r\n  }\r\n  return workInProgressHook;\r\n}\r\n\r\n// NOTE: defining two versions of this function to avoid size impact when this feature is disabled.\r\n// Previously this function was inlined, the additional `memoCache` property makes it not inlined.\r\nlet createFunctionComponentUpdateQueue: () => FunctionComponentUpdateQueue;\r\nif (enableUseMemoCacheHook) {\r\n  createFunctionComponentUpdateQueue = () => {\r\n    return {\r\n      lastEffect: null,\r\n      stores: null,\r\n      memoCache: null,\r\n    };\r\n  };\r\n} else {\r\n  createFunctionComponentUpdateQueue = () => {\r\n    return {\r\n      lastEffect: null,\r\n      stores: null,\r\n    };\r\n  };\r\n}\r\n\r\nfunction use<T>(usable: Usable<T>): T {\r\n  if (usable !== null && typeof usable === 'object') {\r\n    if (typeof usable.then === 'function') {\r\n      // This is a thenable.\r\n      const thenable: Thenable<T> = (usable: any);\r\n\r\n      // Track the position of the thenable within this fiber.\r\n      const index = thenableIndexCounter;\r\n      thenableIndexCounter += 1;\r\n\r\n      switch (thenable.status) {\r\n        case 'fulfilled': {\r\n          const fulfilledValue: T = thenable.value;\r\n          return fulfilledValue;\r\n        }\r\n        case 'rejected': {\r\n          const rejectedError = thenable.reason;\r\n          throw rejectedError;\r\n        }\r\n        default: {\r\n          const prevThenableAtIndex: Thenable<T> | null = getPreviouslyUsedThenableAtIndex(\r\n            index,\r\n          );\r\n          if (prevThenableAtIndex !== null) {\r\n            switch (prevThenableAtIndex.status) {\r\n              case 'fulfilled': {\r\n                const fulfilledValue: T = prevThenableAtIndex.value;\r\n                return fulfilledValue;\r\n              }\r\n              case 'rejected': {\r\n                const rejectedError: mixed = prevThenableAtIndex.reason;\r\n                throw rejectedError;\r\n              }\r\n              default: {\r\n                // The thenable still hasn't resolved. Suspend with the same\r\n                // thenable as last time to avoid redundant listeners.\r\n                throw prevThenableAtIndex;\r\n              }\r\n            }\r\n          } else {\r\n            // This is the first time something has been used at this index.\r\n            // Stash the thenable at the current index so we can reuse it during\r\n            // the next attempt.\r\n            trackUsedThenable(thenable, index);\r\n\r\n            // Suspend.\r\n            // TODO: Throwing here is an implementation detail that allows us to\r\n            // unwind the call stack. But we shouldn't allow it to leak into\r\n            // userspace. Throw an opaque placeholder value instead of the\r\n            // actual thenable. If it doesn't get captured by the work loop, log\r\n            // a warning, because that means something in userspace must have\r\n            // caught it.\r\n            throw thenable;\r\n          }\r\n        }\r\n      }\r\n    } else if (\r\n      usable.$$typeof === REACT_CONTEXT_TYPE ||\r\n      usable.$$typeof === REACT_SERVER_CONTEXT_TYPE\r\n    ) {\r\n      const context: ReactContext<T> = (usable: any);\r\n      return readContext(context);\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line react-internal/safe-string-coercion\r\n  throw new Error('An unsupported type was passed to use(): ' + String(usable));\r\n}\r\n\r\nfunction useMemoCache(size: number): Array<any> {\r\n  let memoCache = null;\r\n  // Fast-path, load memo cache from wip fiber if already prepared\r\n  let updateQueue: FunctionComponentUpdateQueue | null = (currentlyRenderingFiber.updateQueue: any);\r\n  if (updateQueue !== null) {\r\n    memoCache = updateQueue.memoCache;\r\n  }\r\n  // Otherwise clone from the current fiber\r\n  // TODO: not sure how to access the current fiber here other than going through\r\n  // currentlyRenderingFiber.alternate\r\n  if (memoCache == null) {\r\n    const current: Fiber | null = currentlyRenderingFiber.alternate;\r\n    if (current !== null) {\r\n      const currentUpdateQueue: FunctionComponentUpdateQueue | null = (current.updateQueue: any);\r\n      if (currentUpdateQueue !== null) {\r\n        const currentMemoCache: ?MemoCache = currentUpdateQueue.memoCache;\r\n        if (currentMemoCache != null) {\r\n          memoCache = {\r\n            data: currentMemoCache.data.map(array => array.slice()),\r\n            index: 0,\r\n          };\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // Finally fall back to allocating a fresh instance of the cache\r\n  if (memoCache == null) {\r\n    memoCache = {\r\n      data: [],\r\n      index: 0,\r\n    };\r\n  }\r\n  if (updateQueue === null) {\r\n    updateQueue = createFunctionComponentUpdateQueue();\r\n    currentlyRenderingFiber.updateQueue = updateQueue;\r\n  }\r\n  updateQueue.memoCache = memoCache;\r\n\r\n  let data = memoCache.data[memoCache.index];\r\n  if (data === undefined) {\r\n    data = memoCache.data[memoCache.index] = new Array(size);\r\n  } else if (data.length !== size) {\r\n    // TODO: consider warning or throwing here\r\n    if (__DEV__) {\r\n      console.error(\r\n        'Expected a constant size argument for each invocation of useMemoCache. ' +\r\n          'The previous cache was allocated with size %s but size %s was requested.',\r\n        data.length,\r\n        size,\r\n      );\r\n    }\r\n  }\r\n  memoCache.index++;\r\n  return data;\r\n}\r\n\r\nfunction basicStateReducer<S>(state: S, action: BasicStateAction<S>): S {\r\n  // $FlowFixMe: Flow doesn't like mixed types\r\n  return typeof action === 'function' ? action(state) : action;\r\n}\r\n\r\nfunction mountReducer<S, I, A>(\r\n  reducer: (S, A) => S,\r\n  initialArg: I,\r\n  init?: I => S,\r\n): [S, Dispatch<A>] {\r\n  const hook = mountWorkInProgressHook();\r\n  let initialState;\r\n  if (init !== undefined) {\r\n    initialState = init(initialArg);\r\n  } else {\r\n    initialState = ((initialArg: any): S);\r\n  }\r\n  hook.memoizedState = hook.baseState = initialState;\r\n  const queue: UpdateQueue<S, A> = {\r\n    pending: null,\r\n    lanes: NoLanes,\r\n    dispatch: null,\r\n    lastRenderedReducer: reducer,\r\n    lastRenderedState: (initialState: any),\r\n  };\r\n  hook.queue = queue;\r\n  const dispatch: Dispatch<A> = (queue.dispatch = (dispatchReducerAction.bind(\r\n    null,\r\n    currentlyRenderingFiber,\r\n    queue,\r\n  ): any));\r\n  return [hook.memoizedState, dispatch];\r\n}\r\n\r\nfunction updateReducer<S, I, A>(\r\n  reducer: (S, A) => S,\r\n  initialArg: I,\r\n  init?: I => S,\r\n): [S, Dispatch<A>] {\r\n  const hook = updateWorkInProgressHook();\r\n  const queue = hook.queue;\r\n\r\n  if (queue === null) {\r\n    throw new Error(\r\n      'Should have a queue. This is likely a bug in React. Please file an issue.',\r\n    );\r\n  }\r\n\r\n  queue.lastRenderedReducer = reducer;\r\n\r\n  const current: Hook = (currentHook: any);\r\n\r\n  // The last rebase update that is NOT part of the base state.\r\n  let baseQueue = current.baseQueue;\r\n\r\n  // The last pending update that hasn't been processed yet.\r\n  const pendingQueue = queue.pending;\r\n  if (pendingQueue !== null) {\r\n    // We have new updates that haven't been processed yet.\r\n    // We'll add them to the base queue.\r\n    if (baseQueue !== null) {\r\n      // Merge the pending queue and the base queue.\r\n      const baseFirst = baseQueue.next;\r\n      const pendingFirst = pendingQueue.next;\r\n      baseQueue.next = pendingFirst;\r\n      pendingQueue.next = baseFirst;\r\n    }\r\n    if (__DEV__) {\r\n      if (current.baseQueue !== baseQueue) {\r\n        // Internal invariant that should never happen, but feasibly could in\r\n        // the future if we implement resuming, or some form of that.\r\n        console.error(\r\n          'Internal error: Expected work-in-progress queue to be a clone. ' +\r\n            'This is a bug in React.',\r\n        );\r\n      }\r\n    }\r\n    current.baseQueue = baseQueue = pendingQueue;\r\n    queue.pending = null;\r\n  }\r\n\r\n  if (baseQueue !== null) {\r\n    // We have a queue to process.\r\n    const first = baseQueue.next;\r\n    let newState = current.baseState;\r\n\r\n    let newBaseState = null;\r\n    let newBaseQueueFirst = null;\r\n    let newBaseQueueLast = null;\r\n    let update = first;\r\n    do {\r\n      // An extra OffscreenLane bit is added to updates that were made to\r\n      // a hidden tree, so that we can distinguish them from updates that were\r\n      // already there when the tree was hidden.\r\n      const updateLane = removeLanes(update.lane, OffscreenLane);\r\n      const isHiddenUpdate = updateLane !== update.lane;\r\n\r\n      // Check if this update was made while the tree was hidden. If so, then\r\n      // it's not a \"base\" update and we should disregard the extra base lanes\r\n      // that were added to renderLanes when we entered the Offscreen tree.\r\n      const shouldSkipUpdate = isHiddenUpdate\r\n        ? !isSubsetOfLanes(getWorkInProgressRootRenderLanes(), updateLane)\r\n        : !isSubsetOfLanes(renderLanes, updateLane);\r\n\r\n      if (shouldSkipUpdate) {\r\n        // Priority is insufficient. Skip this update. If this is the first\r\n        // skipped update, the previous update/state is the new base\r\n        // update/state.\r\n        const clone: Update<S, A> = {\r\n          lane: updateLane,\r\n          action: update.action,\r\n          hasEagerState: update.hasEagerState,\r\n          eagerState: update.eagerState,\r\n          next: (null: any),\r\n        };\r\n        if (newBaseQueueLast === null) {\r\n          newBaseQueueFirst = newBaseQueueLast = clone;\r\n          newBaseState = newState;\r\n        } else {\r\n          newBaseQueueLast = newBaseQueueLast.next = clone;\r\n        }\r\n        // Update the remaining priority in the queue.\r\n        // TODO: Don't need to accumulate this. Instead, we can remove\r\n        // renderLanes from the original lanes.\r\n        currentlyRenderingFiber.lanes = mergeLanes(\r\n          currentlyRenderingFiber.lanes,\r\n          updateLane,\r\n        );\r\n        markSkippedUpdateLanes(updateLane);\r\n      } else {\r\n        // This update does have sufficient priority.\r\n\r\n        if (newBaseQueueLast !== null) {\r\n          const clone: Update<S, A> = {\r\n            // This update is going to be committed so we never want uncommit\r\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\r\n            // this will never be skipped by the check above.\r\n            lane: NoLane,\r\n            action: update.action,\r\n            hasEagerState: update.hasEagerState,\r\n            eagerState: update.eagerState,\r\n            next: (null: any),\r\n          };\r\n          newBaseQueueLast = newBaseQueueLast.next = clone;\r\n        }\r\n\r\n        // Process this update.\r\n        if (update.hasEagerState) {\r\n          // If this update is a state update (not a reducer) and was processed eagerly,\r\n          // we can use the eagerly computed state\r\n          newState = ((update.eagerState: any): S);\r\n        } else {\r\n          const action = update.action;\r\n          newState = reducer(newState, action);\r\n        }\r\n      }\r\n      update = update.next;\r\n    } while (update !== null && update !== first);\r\n\r\n    if (newBaseQueueLast === null) {\r\n      newBaseState = newState;\r\n    } else {\r\n      newBaseQueueLast.next = (newBaseQueueFirst: any);\r\n    }\r\n\r\n    // Mark that the fiber performed work, but only if the new state is\r\n    // different from the current state.\r\n    if (!is(newState, hook.memoizedState)) {\r\n      markWorkInProgressReceivedUpdate();\r\n    }\r\n\r\n    hook.memoizedState = newState;\r\n    hook.baseState = newBaseState;\r\n    hook.baseQueue = newBaseQueueLast;\r\n\r\n    queue.lastRenderedState = newState;\r\n  }\r\n\r\n  if (baseQueue === null) {\r\n    // `queue.lanes` is used for entangling transitions. We can set it back to\r\n    // zero once the queue is empty.\r\n    queue.lanes = NoLanes;\r\n  }\r\n\r\n  const dispatch: Dispatch<A> = (queue.dispatch: any);\r\n  return [hook.memoizedState, dispatch];\r\n}\r\n\r\nfunction rerenderReducer<S, I, A>(\r\n  reducer: (S, A) => S,\r\n  initialArg: I,\r\n  init?: I => S,\r\n): [S, Dispatch<A>] {\r\n  const hook = updateWorkInProgressHook();\r\n  const queue = hook.queue;\r\n\r\n  if (queue === null) {\r\n    throw new Error(\r\n      'Should have a queue. This is likely a bug in React. Please file an issue.',\r\n    );\r\n  }\r\n\r\n  queue.lastRenderedReducer = reducer;\r\n\r\n  // This is a re-render. Apply the new render phase updates to the previous\r\n  // work-in-progress hook.\r\n  const dispatch: Dispatch<A> = (queue.dispatch: any);\r\n  const lastRenderPhaseUpdate = queue.pending;\r\n  let newState = hook.memoizedState;\r\n  if (lastRenderPhaseUpdate !== null) {\r\n    // The queue doesn't persist past this render pass.\r\n    queue.pending = null;\r\n\r\n    const firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\r\n    let update = firstRenderPhaseUpdate;\r\n    do {\r\n      // Process this render phase update. We don't have to check the\r\n      // priority because it will always be the same as the current\r\n      // render's.\r\n      const action = update.action;\r\n      newState = reducer(newState, action);\r\n      update = update.next;\r\n    } while (update !== firstRenderPhaseUpdate);\r\n\r\n    // Mark that the fiber performed work, but only if the new state is\r\n    // different from the current state.\r\n    if (!is(newState, hook.memoizedState)) {\r\n      markWorkInProgressReceivedUpdate();\r\n    }\r\n\r\n    hook.memoizedState = newState;\r\n    // Don't persist the state accumulated from the render phase updates to\r\n    // the base state unless the queue is empty.\r\n    // TODO: Not sure if this is the desired semantics, but it's what we\r\n    // do for gDSFP. I can't remember why.\r\n    if (hook.baseQueue === null) {\r\n      hook.baseState = newState;\r\n    }\r\n\r\n    queue.lastRenderedState = newState;\r\n  }\r\n  return [newState, dispatch];\r\n}\r\n\r\ntype MutableSourceMemoizedState<Source, Snapshot> = {\r\n  refs: {\r\n    getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\r\n    setSnapshot: Snapshot => void,\r\n  },\r\n  source: MutableSource<any>,\r\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\r\n};\r\n\r\nfunction readFromUnsubscribedMutableSource<Source, Snapshot>(\r\n  root: FiberRoot,\r\n  source: MutableSource<Source>,\r\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\r\n): Snapshot {\r\n  if (__DEV__) {\r\n    warnAboutMultipleRenderersDEV(source);\r\n  }\r\n\r\n  const getVersion = source._getVersion;\r\n  const version = getVersion(source._source);\r\n\r\n  // Is it safe for this component to read from this source during the current render?\r\n  let isSafeToReadFromSource = false;\r\n\r\n  // Check the version first.\r\n  // If this render has already been started with a specific version,\r\n  // we can use it alone to determine if we can safely read from the source.\r\n  const currentRenderVersion = getWorkInProgressVersion(source);\r\n  if (currentRenderVersion !== null) {\r\n    // It's safe to read if the store hasn't been mutated since the last time\r\n    // we read something.\r\n    isSafeToReadFromSource = currentRenderVersion === version;\r\n  } else {\r\n    // If there's no version, then this is the first time we've read from the\r\n    // source during the current render pass, so we need to do a bit more work.\r\n    // What we need to determine is if there are any hooks that already\r\n    // subscribed to the source, and if so, whether there are any pending\r\n    // mutations that haven't been synchronized yet.\r\n    //\r\n    // If there are no pending mutations, then `root.mutableReadLanes` will be\r\n    // empty, and we know we can safely read.\r\n    //\r\n    // If there *are* pending mutations, we may still be able to safely read\r\n    // if the currently rendering lanes are inclusive of the pending mutation\r\n    // lanes, since that guarantees that the value we're about to read from\r\n    // the source is consistent with the values that we read during the most\r\n    // recent mutation.\r\n    isSafeToReadFromSource = isSubsetOfLanes(\r\n      renderLanes,\r\n      root.mutableReadLanes,\r\n    );\r\n\r\n    if (isSafeToReadFromSource) {\r\n      // If it's safe to read from this source during the current render,\r\n      // store the version in case other components read from it.\r\n      // A changed version number will let those components know to throw and restart the render.\r\n      setWorkInProgressVersion(source, version);\r\n    }\r\n  }\r\n\r\n  if (isSafeToReadFromSource) {\r\n    const snapshot = getSnapshot(source._source);\r\n    if (__DEV__) {\r\n      if (typeof snapshot === 'function') {\r\n        console.error(\r\n          'Mutable source should not return a function as the snapshot value. ' +\r\n            'Functions may close over mutable values and cause tearing.',\r\n        );\r\n      }\r\n    }\r\n    return snapshot;\r\n  } else {\r\n    // This handles the special case of a mutable source being shared between renderers.\r\n    // In that case, if the source is mutated between the first and second renderer,\r\n    // The second renderer don't know that it needs to reset the WIP version during unwind,\r\n    // (because the hook only marks sources as dirty if it's written to their WIP version).\r\n    // That would cause this tear check to throw again and eventually be visible to the user.\r\n    // We can avoid this infinite loop by explicitly marking the source as dirty.\r\n    //\r\n    // This can lead to tearing in the first renderer when it resumes,\r\n    // but there's nothing we can do about that (short of throwing here and refusing to continue the render).\r\n    markSourceAsDirty(source);\r\n\r\n    // Intentioally throw an error to force React to retry synchronously. During\r\n    // the synchronous retry, it will block interleaved mutations, so we should\r\n    // get a consistent read. Therefore, the following error should never be\r\n    // visible to the user.\r\n\r\n    // We expect this error not to be thrown during the synchronous retry,\r\n    // because we blocked interleaved mutations.\r\n    throw new Error(\r\n      'Cannot read from mutable source during the current render without tearing. This may be a bug in React. Please file an issue.',\r\n    );\r\n  }\r\n}\r\n\r\nfunction useMutableSource<Source, Snapshot>(\r\n  hook: Hook,\r\n  source: MutableSource<Source>,\r\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\r\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\r\n): Snapshot {\r\n  if (!enableUseMutableSource) {\r\n    return (undefined: any);\r\n  }\r\n\r\n  const root = ((getWorkInProgressRoot(): any): FiberRoot);\r\n\r\n  if (root === null) {\r\n    throw new Error(\r\n      'Expected a work-in-progress root. This is a bug in React. Please file an issue.',\r\n    );\r\n  }\r\n\r\n  const getVersion = source._getVersion;\r\n  const version = getVersion(source._source);\r\n\r\n  const dispatcher = ReactCurrentDispatcher.current;\r\n\r\n  // eslint-disable-next-line prefer-const\r\n  let [currentSnapshot, setSnapshot] = dispatcher.useState(() =>\r\n    readFromUnsubscribedMutableSource(root, source, getSnapshot),\r\n  );\r\n  let snapshot = currentSnapshot;\r\n\r\n  // Grab a handle to the state hook as well.\r\n  // We use it to clear the pending update queue if we have a new source.\r\n  const stateHook = ((workInProgressHook: any): Hook);\r\n\r\n  const memoizedState = ((hook.memoizedState: any): MutableSourceMemoizedState<\r\n    Source,\r\n    Snapshot,\r\n  >);\r\n  const refs = memoizedState.refs;\r\n  const prevGetSnapshot = refs.getSnapshot;\r\n  const prevSource = memoizedState.source;\r\n  const prevSubscribe = memoizedState.subscribe;\r\n\r\n  const fiber = currentlyRenderingFiber;\r\n\r\n  hook.memoizedState = ({\r\n    refs,\r\n    source,\r\n    subscribe,\r\n  }: MutableSourceMemoizedState<Source, Snapshot>);\r\n\r\n  // Sync the values needed by our subscription handler after each commit.\r\n  dispatcher.useEffect(() => {\r\n    refs.getSnapshot = getSnapshot;\r\n\r\n    // Normally the dispatch function for a state hook never changes,\r\n    // but this hook recreates the queue in certain cases  to avoid updates from stale sources.\r\n    // handleChange() below needs to reference the dispatch function without re-subscribing,\r\n    // so we use a ref to ensure that it always has the latest version.\r\n    refs.setSnapshot = setSnapshot;\r\n\r\n    // Check for a possible change between when we last rendered now.\r\n    const maybeNewVersion = getVersion(source._source);\r\n    if (!is(version, maybeNewVersion)) {\r\n      const maybeNewSnapshot = getSnapshot(source._source);\r\n      if (__DEV__) {\r\n        if (typeof maybeNewSnapshot === 'function') {\r\n          console.error(\r\n            'Mutable source should not return a function as the snapshot value. ' +\r\n              'Functions may close over mutable values and cause tearing.',\r\n          );\r\n        }\r\n      }\r\n\r\n      if (!is(snapshot, maybeNewSnapshot)) {\r\n        setSnapshot(maybeNewSnapshot);\r\n\r\n        const lane = requestUpdateLane(fiber);\r\n        markRootMutableRead(root, lane);\r\n      }\r\n      // If the source mutated between render and now,\r\n      // there may be state updates already scheduled from the old source.\r\n      // Entangle the updates so that they render in the same batch.\r\n      markRootEntangled(root, root.mutableReadLanes);\r\n    }\r\n  }, [getSnapshot, source, subscribe]);\r\n\r\n  // If we got a new source or subscribe function, re-subscribe in a passive effect.\r\n  dispatcher.useEffect(() => {\r\n    const handleChange = () => {\r\n      const latestGetSnapshot = refs.getSnapshot;\r\n      const latestSetSnapshot = refs.setSnapshot;\r\n\r\n      try {\r\n        latestSetSnapshot(latestGetSnapshot(source._source));\r\n\r\n        // Record a pending mutable source update with the same expiration time.\r\n        const lane = requestUpdateLane(fiber);\r\n\r\n        markRootMutableRead(root, lane);\r\n      } catch (error) {\r\n        // A selector might throw after a source mutation.\r\n        // e.g. it might try to read from a part of the store that no longer exists.\r\n        // In this case we should still schedule an update with React.\r\n        // Worst case the selector will throw again and then an error boundary will handle it.\r\n        latestSetSnapshot(\r\n          (() => {\r\n            throw error;\r\n          }: any),\r\n        );\r\n      }\r\n    };\r\n\r\n    const unsubscribe = subscribe(source._source, handleChange);\r\n    if (__DEV__) {\r\n      if (typeof unsubscribe !== 'function') {\r\n        console.error(\r\n          'Mutable source subscribe function must return an unsubscribe function.',\r\n        );\r\n      }\r\n    }\r\n\r\n    return unsubscribe;\r\n  }, [source, subscribe]);\r\n\r\n  // If any of the inputs to useMutableSource change, reading is potentially unsafe.\r\n  //\r\n  // If either the source or the subscription have changed we can't can't trust the update queue.\r\n  // Maybe the source changed in a way that the old subscription ignored but the new one depends on.\r\n  //\r\n  // If the getSnapshot function changed, we also shouldn't rely on the update queue.\r\n  // It's possible that the underlying source was mutated between the when the last \"change\" event fired,\r\n  // and when the current render (with the new getSnapshot function) is processed.\r\n  //\r\n  // In both cases, we need to throw away pending updates (since they are no longer relevant)\r\n  // and treat reading from the source as we do in the mount case.\r\n  if (\r\n    !is(prevGetSnapshot, getSnapshot) ||\r\n    !is(prevSource, source) ||\r\n    !is(prevSubscribe, subscribe)\r\n  ) {\r\n    // Create a new queue and setState method,\r\n    // So if there are interleaved updates, they get pushed to the older queue.\r\n    // When this becomes current, the previous queue and dispatch method will be discarded,\r\n    // including any interleaving updates that occur.\r\n    const newQueue: UpdateQueue<Snapshot, BasicStateAction<Snapshot>> = {\r\n      pending: null,\r\n      lanes: NoLanes,\r\n      dispatch: null,\r\n      lastRenderedReducer: basicStateReducer,\r\n      lastRenderedState: snapshot,\r\n    };\r\n    newQueue.dispatch = setSnapshot = (dispatchSetState.bind(\r\n      null,\r\n      currentlyRenderingFiber,\r\n      newQueue,\r\n    ): any);\r\n    stateHook.queue = newQueue;\r\n    stateHook.baseQueue = null;\r\n    snapshot = readFromUnsubscribedMutableSource(root, source, getSnapshot);\r\n    stateHook.memoizedState = stateHook.baseState = snapshot;\r\n  }\r\n\r\n  return snapshot;\r\n}\r\n\r\nfunction mountMutableSource<Source, Snapshot>(\r\n  source: MutableSource<Source>,\r\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\r\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\r\n): Snapshot {\r\n  if (!enableUseMutableSource) {\r\n    return (undefined: any);\r\n  }\r\n\r\n  const hook = mountWorkInProgressHook();\r\n  hook.memoizedState = ({\r\n    refs: {\r\n      getSnapshot,\r\n      setSnapshot: (null: any),\r\n    },\r\n    source,\r\n    subscribe,\r\n  }: MutableSourceMemoizedState<Source, Snapshot>);\r\n  return useMutableSource(hook, source, getSnapshot, subscribe);\r\n}\r\n\r\nfunction updateMutableSource<Source, Snapshot>(\r\n  source: MutableSource<Source>,\r\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\r\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\r\n): Snapshot {\r\n  if (!enableUseMutableSource) {\r\n    return (undefined: any);\r\n  }\r\n\r\n  const hook = updateWorkInProgressHook();\r\n  return useMutableSource(hook, source, getSnapshot, subscribe);\r\n}\r\n\r\nfunction mountSyncExternalStore<T>(\r\n  subscribe: (() => void) => () => void,\r\n  getSnapshot: () => T,\r\n  getServerSnapshot?: () => T,\r\n): T {\r\n  const fiber = currentlyRenderingFiber;\r\n  const hook = mountWorkInProgressHook();\r\n\r\n  let nextSnapshot;\r\n  const isHydrating = getIsHydrating();\r\n  if (isHydrating) {\r\n    if (getServerSnapshot === undefined) {\r\n      throw new Error(\r\n        'Missing getServerSnapshot, which is required for ' +\r\n          'server-rendered content. Will revert to client rendering.',\r\n      );\r\n    }\r\n    nextSnapshot = getServerSnapshot();\r\n    if (__DEV__) {\r\n      if (!didWarnUncachedGetSnapshot) {\r\n        if (nextSnapshot !== getServerSnapshot()) {\r\n          console.error(\r\n            'The result of getServerSnapshot should be cached to avoid an infinite loop',\r\n          );\r\n          didWarnUncachedGetSnapshot = true;\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    nextSnapshot = getSnapshot();\r\n    if (__DEV__) {\r\n      if (!didWarnUncachedGetSnapshot) {\r\n        const cachedSnapshot = getSnapshot();\r\n        if (!is(nextSnapshot, cachedSnapshot)) {\r\n          console.error(\r\n            'The result of getSnapshot should be cached to avoid an infinite loop',\r\n          );\r\n          didWarnUncachedGetSnapshot = true;\r\n        }\r\n      }\r\n    }\r\n    // Unless we're rendering a blocking lane, schedule a consistency check.\r\n    // Right before committing, we will walk the tree and check if any of the\r\n    // stores were mutated.\r\n    //\r\n    // We won't do this if we're hydrating server-rendered content, because if\r\n    // the content is stale, it's already visible anyway. Instead we'll patch\r\n    // it up in a passive effect.\r\n    const root: FiberRoot | null = getWorkInProgressRoot();\r\n\r\n    if (root === null) {\r\n      throw new Error(\r\n        'Expected a work-in-progress root. This is a bug in React. Please file an issue.',\r\n      );\r\n    }\r\n\r\n    if (!includesBlockingLane(root, renderLanes)) {\r\n      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\r\n    }\r\n  }\r\n\r\n  // Read the current snapshot from the store on every render. This breaks the\r\n  // normal rules of React, and only works because store updates are\r\n  // always synchronous.\r\n  hook.memoizedState = nextSnapshot;\r\n  const inst: StoreInstance<T> = {\r\n    value: nextSnapshot,\r\n    getSnapshot,\r\n  };\r\n  hook.queue = inst;\r\n\r\n  // Schedule an effect to subscribe to the store.\r\n  mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);\r\n\r\n  // Schedule an effect to update the mutable instance fields. We will update\r\n  // this whenever subscribe, getSnapshot, or value changes. Because there's no\r\n  // clean-up function, and we track the deps correctly, we can call pushEffect\r\n  // directly, without storing any additional state. For the same reason, we\r\n  // don't need to set a static flag, either.\r\n  // TODO: We can move this to the passive phase once we add a pre-commit\r\n  // consistency check. See the next comment.\r\n  fiber.flags |= PassiveEffect;\r\n  pushEffect(\r\n    HookHasEffect | HookPassive,\r\n    updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot),\r\n    undefined,\r\n    null,\r\n  );\r\n\r\n  return nextSnapshot;\r\n}\r\n\r\nfunction updateSyncExternalStore<T>(\r\n  subscribe: (() => void) => () => void,\r\n  getSnapshot: () => T,\r\n  getServerSnapshot?: () => T,\r\n): T {\r\n  const fiber = currentlyRenderingFiber;\r\n  const hook = updateWorkInProgressHook();\r\n  // Read the current snapshot from the store on every render. This breaks the\r\n  // normal rules of React, and only works because store updates are\r\n  // always synchronous.\r\n  const nextSnapshot = getSnapshot();\r\n  if (__DEV__) {\r\n    if (!didWarnUncachedGetSnapshot) {\r\n      const cachedSnapshot = getSnapshot();\r\n      if (!is(nextSnapshot, cachedSnapshot)) {\r\n        console.error(\r\n          'The result of getSnapshot should be cached to avoid an infinite loop',\r\n        );\r\n        didWarnUncachedGetSnapshot = true;\r\n      }\r\n    }\r\n  }\r\n  const prevSnapshot = hook.memoizedState;\r\n  const snapshotChanged = !is(prevSnapshot, nextSnapshot);\r\n  if (snapshotChanged) {\r\n    hook.memoizedState = nextSnapshot;\r\n    markWorkInProgressReceivedUpdate();\r\n  }\r\n  const inst = hook.queue;\r\n\r\n  updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [\r\n    subscribe,\r\n  ]);\r\n\r\n  // Whenever getSnapshot or subscribe changes, we need to check in the\r\n  // commit phase if there was an interleaved mutation. In concurrent mode\r\n  // this can happen all the time, but even in synchronous mode, an earlier\r\n  // effect may have mutated the store.\r\n  if (\r\n    inst.getSnapshot !== getSnapshot ||\r\n    snapshotChanged ||\r\n    // Check if the susbcribe function changed. We can save some memory by\r\n    // checking whether we scheduled a subscription effect above.\r\n    (workInProgressHook !== null &&\r\n      workInProgressHook.memoizedState.tag & HookHasEffect)\r\n  ) {\r\n    fiber.flags |= PassiveEffect;\r\n    pushEffect(\r\n      HookHasEffect | HookPassive,\r\n      updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot),\r\n      undefined,\r\n      null,\r\n    );\r\n\r\n    // Unless we're rendering a blocking lane, schedule a consistency check.\r\n    // Right before committing, we will walk the tree and check if any of the\r\n    // stores were mutated.\r\n    const root: FiberRoot | null = getWorkInProgressRoot();\r\n\r\n    if (root === null) {\r\n      throw new Error(\r\n        'Expected a work-in-progress root. This is a bug in React. Please file an issue.',\r\n      );\r\n    }\r\n\r\n    if (!includesBlockingLane(root, renderLanes)) {\r\n      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\r\n    }\r\n  }\r\n\r\n  return nextSnapshot;\r\n}\r\n\r\nfunction pushStoreConsistencyCheck<T>(\r\n  fiber: Fiber,\r\n  getSnapshot: () => T,\r\n  renderedSnapshot: T,\r\n) {\r\n  fiber.flags |= StoreConsistency;\r\n  const check: StoreConsistencyCheck<T> = {\r\n    getSnapshot,\r\n    value: renderedSnapshot,\r\n  };\r\n  let componentUpdateQueue: null | FunctionComponentUpdateQueue = (currentlyRenderingFiber.updateQueue: any);\r\n  if (componentUpdateQueue === null) {\r\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\r\n    currentlyRenderingFiber.updateQueue = (componentUpdateQueue: any);\r\n    componentUpdateQueue.stores = [check];\r\n  } else {\r\n    const stores = componentUpdateQueue.stores;\r\n    if (stores === null) {\r\n      componentUpdateQueue.stores = [check];\r\n    } else {\r\n      stores.push(check);\r\n    }\r\n  }\r\n}\r\n\r\nfunction updateStoreInstance<T>(\r\n  fiber: Fiber,\r\n  inst: StoreInstance<T>,\r\n  nextSnapshot: T,\r\n  getSnapshot: () => T,\r\n) {\r\n  // These are updated in the passive phase\r\n  inst.value = nextSnapshot;\r\n  inst.getSnapshot = getSnapshot;\r\n\r\n  // Something may have been mutated in between render and commit. This could\r\n  // have been in an event that fired before the passive effects, or it could\r\n  // have been in a layout effect. In that case, we would have used the old\r\n  // snapsho and getSnapshot values to bail out. We need to check one more time.\r\n  if (checkIfSnapshotChanged(inst)) {\r\n    // Force a re-render.\r\n    forceStoreRerender(fiber);\r\n  }\r\n}\r\n\r\nfunction subscribeToStore<T>(fiber, inst: StoreInstance<T>, subscribe) {\r\n  const handleStoreChange = () => {\r\n    // The store changed. Check if the snapshot changed since the last time we\r\n    // read from the store.\r\n    if (checkIfSnapshotChanged(inst)) {\r\n      // Force a re-render.\r\n      forceStoreRerender(fiber);\r\n    }\r\n  };\r\n  // Subscribe to the store and return a clean-up function.\r\n  return subscribe(handleStoreChange);\r\n}\r\n\r\nfunction checkIfSnapshotChanged<T>(inst: StoreInstance<T>): boolean {\r\n  const latestGetSnapshot = inst.getSnapshot;\r\n  const prevValue = inst.value;\r\n  try {\r\n    const nextValue = latestGetSnapshot();\r\n    return !is(prevValue, nextValue);\r\n  } catch (error) {\r\n    return true;\r\n  }\r\n}\r\n\r\nfunction forceStoreRerender(fiber) {\r\n  const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\r\n  if (root !== null) {\r\n    scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\r\n  }\r\n}\r\n\r\nfunction mountState<S>(\r\n  initialState: (() => S) | S,\r\n): [S, Dispatch<BasicStateAction<S>>] {\r\n  const hook = mountWorkInProgressHook();\r\n  if (typeof initialState === 'function') {\r\n    // $FlowFixMe: Flow doesn't like mixed types\r\n    initialState = initialState();\r\n  }\r\n  hook.memoizedState = hook.baseState = initialState;\r\n  const queue: UpdateQueue<S, BasicStateAction<S>> = {\r\n    pending: null,\r\n    lanes: NoLanes,\r\n    dispatch: null,\r\n    lastRenderedReducer: basicStateReducer,\r\n    lastRenderedState: (initialState: any),\r\n  };\r\n  hook.queue = queue;\r\n  const dispatch: Dispatch<\r\n    BasicStateAction<S>,\r\n  > = (queue.dispatch = (dispatchSetState.bind(\r\n    null,\r\n    currentlyRenderingFiber,\r\n    queue,\r\n  ): any));\r\n  return [hook.memoizedState, dispatch];\r\n}\r\n\r\nfunction updateState<S>(\r\n  initialState: (() => S) | S,\r\n): [S, Dispatch<BasicStateAction<S>>] {\r\n  return updateReducer(basicStateReducer, (initialState: any));\r\n}\r\n\r\nfunction rerenderState<S>(\r\n  initialState: (() => S) | S,\r\n): [S, Dispatch<BasicStateAction<S>>] {\r\n  return rerenderReducer(basicStateReducer, (initialState: any));\r\n}\r\n\r\nfunction pushEffect(tag, create, destroy, deps: Array<mixed> | void | null) {\r\n  const effect: Effect = {\r\n    tag,\r\n    create,\r\n    destroy,\r\n    deps,\r\n    // Circular\r\n    next: (null: any),\r\n  };\r\n  let componentUpdateQueue: null | FunctionComponentUpdateQueue = (currentlyRenderingFiber.updateQueue: any);\r\n  if (componentUpdateQueue === null) {\r\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\r\n    currentlyRenderingFiber.updateQueue = (componentUpdateQueue: any);\r\n    componentUpdateQueue.lastEffect = effect.next = effect;\r\n  } else {\r\n    const lastEffect = componentUpdateQueue.lastEffect;\r\n    if (lastEffect === null) {\r\n      componentUpdateQueue.lastEffect = effect.next = effect;\r\n    } else {\r\n      const firstEffect = lastEffect.next;\r\n      lastEffect.next = effect;\r\n      effect.next = firstEffect;\r\n      componentUpdateQueue.lastEffect = effect;\r\n    }\r\n  }\r\n  return effect;\r\n}\r\n\r\nlet stackContainsErrorMessage: boolean | null = null;\r\n\r\nfunction getCallerStackFrame(): string {\r\n  // eslint-disable-next-line react-internal/prod-error-codes\r\n  const stackFrames = new Error('Error message').stack.split('\\n');\r\n\r\n  // Some browsers (e.g. Chrome) include the error message in the stack\r\n  // but others (e.g. Firefox) do not.\r\n  if (stackContainsErrorMessage === null) {\r\n    stackContainsErrorMessage = stackFrames[0].includes('Error message');\r\n  }\r\n\r\n  return stackContainsErrorMessage\r\n    ? stackFrames.slice(3, 4).join('\\n')\r\n    : stackFrames.slice(2, 3).join('\\n');\r\n}\r\n\r\nfunction mountRef<T>(initialValue: T): {current: T} {\r\n  const hook = mountWorkInProgressHook();\r\n  if (enableUseRefAccessWarning) {\r\n    if (__DEV__) {\r\n      // Support lazy initialization pattern shown in docs.\r\n      // We need to store the caller stack frame so that we don't warn on subsequent renders.\r\n      let hasBeenInitialized = initialValue != null;\r\n      let lazyInitGetterStack = null;\r\n      let didCheckForLazyInit = false;\r\n\r\n      // Only warn once per component+hook.\r\n      let didWarnAboutRead = false;\r\n      let didWarnAboutWrite = false;\r\n\r\n      let current = initialValue;\r\n      const ref = {\r\n        get current() {\r\n          if (!hasBeenInitialized) {\r\n            didCheckForLazyInit = true;\r\n            lazyInitGetterStack = getCallerStackFrame();\r\n          } else if (currentlyRenderingFiber !== null && !didWarnAboutRead) {\r\n            if (\r\n              lazyInitGetterStack === null ||\r\n              lazyInitGetterStack !== getCallerStackFrame()\r\n            ) {\r\n              didWarnAboutRead = true;\r\n              console.warn(\r\n                '%s: Unsafe read of a mutable value during render.\\n\\n' +\r\n                  'Reading from a ref during render is only safe if:\\n' +\r\n                  '1. The ref value has not been updated, or\\n' +\r\n                  '2. The ref holds a lazily-initialized value that is only set once.\\n',\r\n                getComponentNameFromFiber(currentlyRenderingFiber) || 'Unknown',\r\n              );\r\n            }\r\n          }\r\n          return current;\r\n        },\r\n        set current(value) {\r\n          if (currentlyRenderingFiber !== null && !didWarnAboutWrite) {\r\n            if (hasBeenInitialized || !didCheckForLazyInit) {\r\n              didWarnAboutWrite = true;\r\n              console.warn(\r\n                '%s: Unsafe write of a mutable value during render.\\n\\n' +\r\n                  'Writing to a ref during render is only safe if the ref holds ' +\r\n                  'a lazily-initialized value that is only set once.\\n',\r\n                getComponentNameFromFiber(currentlyRenderingFiber) || 'Unknown',\r\n              );\r\n            }\r\n          }\r\n\r\n          hasBeenInitialized = true;\r\n          current = value;\r\n        },\r\n      };\r\n      Object.seal(ref);\r\n      hook.memoizedState = ref;\r\n      return ref;\r\n    } else {\r\n      const ref = {current: initialValue};\r\n      hook.memoizedState = ref;\r\n      return ref;\r\n    }\r\n  } else {\r\n    const ref = {current: initialValue};\r\n    hook.memoizedState = ref;\r\n    return ref;\r\n  }\r\n}\r\n\r\nfunction updateRef<T>(initialValue: T): {current: T} {\r\n  const hook = updateWorkInProgressHook();\r\n  return hook.memoizedState;\r\n}\r\n\r\nfunction mountEffectImpl(\r\n  fiberFlags,\r\n  hookFlags,\r\n  create,\r\n  deps: Array<mixed> | void | null,\r\n): void {\r\n  const hook = mountWorkInProgressHook();\r\n  const nextDeps = deps === undefined ? null : deps;\r\n  currentlyRenderingFiber.flags |= fiberFlags;\r\n  hook.memoizedState = pushEffect(\r\n    HookHasEffect | hookFlags,\r\n    create,\r\n    undefined,\r\n    nextDeps,\r\n  );\r\n}\r\n\r\nfunction updateEffectImpl(\r\n  fiberFlags,\r\n  hookFlags,\r\n  create,\r\n  deps: Array<mixed> | void | null,\r\n): void {\r\n  const hook = updateWorkInProgressHook();\r\n  const nextDeps = deps === undefined ? null : deps;\r\n  let destroy = undefined;\r\n\r\n  if (currentHook !== null) {\r\n    const prevEffect = currentHook.memoizedState;\r\n    destroy = prevEffect.destroy;\r\n    if (nextDeps !== null) {\r\n      const prevDeps = prevEffect.deps;\r\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\r\n        hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  currentlyRenderingFiber.flags |= fiberFlags;\r\n\r\n  hook.memoizedState = pushEffect(\r\n    HookHasEffect | hookFlags,\r\n    create,\r\n    destroy,\r\n    nextDeps,\r\n  );\r\n}\r\n\r\nfunction mountEffect(\r\n  create: () => (() => void) | void,\r\n  deps: Array<mixed> | void | null,\r\n): void {\r\n  return mountEffectImpl(\r\n    PassiveEffect | PassiveStaticEffect,\r\n    HookPassive,\r\n    create,\r\n    deps,\r\n  );\r\n}\r\n\r\nfunction updateEffect(\r\n  create: () => (() => void) | void,\r\n  deps: Array<mixed> | void | null,\r\n): void {\r\n  return updateEffectImpl(PassiveEffect, HookPassive, create, deps);\r\n}\r\n\r\nfunction mountEvent<T>(callback: () => T): () => T {\r\n  const hook = mountWorkInProgressHook();\r\n  const ref = {current: callback};\r\n\r\n  function event() {\r\n    if (isInvalidExecutionContextForEventFunction()) {\r\n      throw new Error('An event from useEvent was called during render.');\r\n    }\r\n    return ref.current.apply(undefined, arguments);\r\n  }\r\n\r\n  // TODO: We don't need all the overhead of an effect object since there are no deps and no\r\n  // clean up functions.\r\n  mountEffectImpl(\r\n    UpdateEffect,\r\n    HookSnapshot,\r\n    () => {\r\n      ref.current = callback;\r\n    },\r\n    [ref, callback],\r\n  );\r\n\r\n  hook.memoizedState = [ref, event];\r\n\r\n  return event;\r\n}\r\n\r\nfunction updateEvent<T>(callback: () => T): () => T {\r\n  const hook = updateWorkInProgressHook();\r\n  const ref = hook.memoizedState[0];\r\n\r\n  updateEffectImpl(\r\n    UpdateEffect,\r\n    HookSnapshot,\r\n    () => {\r\n      ref.current = callback;\r\n    },\r\n    [ref, callback],\r\n  );\r\n\r\n  return hook.memoizedState[1];\r\n}\r\n\r\nfunction mountInsertionEffect(\r\n  create: () => (() => void) | void,\r\n  deps: Array<mixed> | void | null,\r\n): void {\r\n  return mountEffectImpl(UpdateEffect, HookInsertion, create, deps);\r\n}\r\n\r\nfunction updateInsertionEffect(\r\n  create: () => (() => void) | void,\r\n  deps: Array<mixed> | void | null,\r\n): void {\r\n  return updateEffectImpl(UpdateEffect, HookInsertion, create, deps);\r\n}\r\n\r\nfunction mountLayoutEffect(\r\n  create: () => (() => void) | void,\r\n  deps: Array<mixed> | void | null,\r\n): void {\r\n  const fiberFlags: Flags = UpdateEffect | LayoutStaticEffect;\r\n  return mountEffectImpl(fiberFlags, HookLayout, create, deps);\r\n}\r\n\r\nfunction updateLayoutEffect(\r\n  create: () => (() => void) | void,\r\n  deps: Array<mixed> | void | null,\r\n): void {\r\n  return updateEffectImpl(UpdateEffect, HookLayout, create, deps);\r\n}\r\n\r\nfunction imperativeHandleEffect<T>(\r\n  create: () => T,\r\n  ref: {current: T | null} | ((inst: T | null) => mixed) | null | void,\r\n) {\r\n  if (typeof ref === 'function') {\r\n    const refCallback = ref;\r\n    const inst = create();\r\n    refCallback(inst);\r\n    return () => {\r\n      refCallback(null);\r\n    };\r\n  } else if (ref !== null && ref !== undefined) {\r\n    const refObject = ref;\r\n    if (__DEV__) {\r\n      if (!refObject.hasOwnProperty('current')) {\r\n        console.error(\r\n          'Expected useImperativeHandle() first argument to either be a ' +\r\n            'ref callback or React.createRef() object. Instead received: %s.',\r\n          'an object with keys {' + Object.keys(refObject).join(', ') + '}',\r\n        );\r\n      }\r\n    }\r\n    const inst = create();\r\n    refObject.current = inst;\r\n    return () => {\r\n      refObject.current = null;\r\n    };\r\n  }\r\n}\r\n\r\nfunction mountImperativeHandle<T>(\r\n  ref: {current: T | null} | ((inst: T | null) => mixed) | null | void,\r\n  create: () => T,\r\n  deps: Array<mixed> | void | null,\r\n): void {\r\n  if (__DEV__) {\r\n    if (typeof create !== 'function') {\r\n      console.error(\r\n        'Expected useImperativeHandle() second argument to be a function ' +\r\n          'that creates a handle. Instead received: %s.',\r\n        create !== null ? typeof create : 'null',\r\n      );\r\n    }\r\n  }\r\n\r\n  // TODO: If deps are provided, should we skip comparing the ref itself?\r\n  const effectDeps =\r\n    deps !== null && deps !== undefined ? deps.concat([ref]) : null;\r\n\r\n  const fiberFlags: Flags = UpdateEffect | LayoutStaticEffect;\r\n  return mountEffectImpl(\r\n    fiberFlags,\r\n    HookLayout,\r\n    imperativeHandleEffect.bind(null, create, ref),\r\n    effectDeps,\r\n  );\r\n}\r\n\r\nfunction updateImperativeHandle<T>(\r\n  ref: {current: T | null} | ((inst: T | null) => mixed) | null | void,\r\n  create: () => T,\r\n  deps: Array<mixed> | void | null,\r\n): void {\r\n  if (__DEV__) {\r\n    if (typeof create !== 'function') {\r\n      console.error(\r\n        'Expected useImperativeHandle() second argument to be a function ' +\r\n          'that creates a handle. Instead received: %s.',\r\n        create !== null ? typeof create : 'null',\r\n      );\r\n    }\r\n  }\r\n\r\n  // TODO: If deps are provided, should we skip comparing the ref itself?\r\n  const effectDeps =\r\n    deps !== null && deps !== undefined ? deps.concat([ref]) : null;\r\n\r\n  return updateEffectImpl(\r\n    UpdateEffect,\r\n    HookLayout,\r\n    imperativeHandleEffect.bind(null, create, ref),\r\n    effectDeps,\r\n  );\r\n}\r\n\r\nfunction mountDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\r\n  // This hook is normally a no-op.\r\n  // The react-debug-hooks package injects its own implementation\r\n  // so that e.g. DevTools can display custom hook values.\r\n}\r\n\r\nconst updateDebugValue = mountDebugValue;\r\n\r\nfunction mountCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\r\n  const hook = mountWorkInProgressHook();\r\n  const nextDeps = deps === undefined ? null : deps;\r\n  hook.memoizedState = [callback, nextDeps];\r\n  return callback;\r\n}\r\n\r\nfunction updateCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\r\n  const hook = updateWorkInProgressHook();\r\n  const nextDeps = deps === undefined ? null : deps;\r\n  const prevState = hook.memoizedState;\r\n  if (prevState !== null) {\r\n    if (nextDeps !== null) {\r\n      const prevDeps: Array<mixed> | null = prevState[1];\r\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\r\n        return prevState[0];\r\n      }\r\n    }\r\n  }\r\n  hook.memoizedState = [callback, nextDeps];\r\n  return callback;\r\n}\r\n\r\nfunction mountMemo<T>(\r\n  nextCreate: () => T,\r\n  deps: Array<mixed> | void | null,\r\n): T {\r\n  const hook = mountWorkInProgressHook();\r\n  const nextDeps = deps === undefined ? null : deps;\r\n  const nextValue = nextCreate();\r\n  hook.memoizedState = [nextValue, nextDeps];\r\n  return nextValue;\r\n}\r\n\r\nfunction updateMemo<T>(\r\n  nextCreate: () => T,\r\n  deps: Array<mixed> | void | null,\r\n): T {\r\n  const hook = updateWorkInProgressHook();\r\n  const nextDeps = deps === undefined ? null : deps;\r\n  const prevState = hook.memoizedState;\r\n  if (prevState !== null) {\r\n    // Assume these are defined. If they're not, areHookInputsEqual will warn.\r\n    if (nextDeps !== null) {\r\n      const prevDeps: Array<mixed> | null = prevState[1];\r\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\r\n        return prevState[0];\r\n      }\r\n    }\r\n  }\r\n  const nextValue = nextCreate();\r\n  hook.memoizedState = [nextValue, nextDeps];\r\n  return nextValue;\r\n}\r\n\r\nfunction mountDeferredValue<T>(value: T): T {\r\n  const hook = mountWorkInProgressHook();\r\n  hook.memoizedState = value;\r\n  return value;\r\n}\r\n\r\nfunction updateDeferredValue<T>(value: T): T {\r\n  const hook = updateWorkInProgressHook();\r\n  const resolvedCurrentHook: Hook = (currentHook: any);\r\n  const prevValue: T = resolvedCurrentHook.memoizedState;\r\n  return updateDeferredValueImpl(hook, prevValue, value);\r\n}\r\n\r\nfunction rerenderDeferredValue<T>(value: T): T {\r\n  const hook = updateWorkInProgressHook();\r\n  if (currentHook === null) {\r\n    // This is a rerender during a mount.\r\n    hook.memoizedState = value;\r\n    return value;\r\n  } else {\r\n    // This is a rerender during an update.\r\n    const prevValue: T = currentHook.memoizedState;\r\n    return updateDeferredValueImpl(hook, prevValue, value);\r\n  }\r\n}\r\n\r\nfunction updateDeferredValueImpl<T>(hook: Hook, prevValue: T, value: T): T {\r\n  const shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);\r\n  if (shouldDeferValue) {\r\n    // This is an urgent update. If the value has changed, keep using the\r\n    // previous value and spawn a deferred render to update it later.\r\n\r\n    if (!is(value, prevValue)) {\r\n      // Schedule a deferred render\r\n      const deferredLane = claimNextTransitionLane();\r\n      currentlyRenderingFiber.lanes = mergeLanes(\r\n        currentlyRenderingFiber.lanes,\r\n        deferredLane,\r\n      );\r\n      markSkippedUpdateLanes(deferredLane);\r\n\r\n      // Set this to true to indicate that the rendered value is inconsistent\r\n      // from the latest value. The name \"baseState\" doesn't really match how we\r\n      // use it because we're reusing a state hook field instead of creating a\r\n      // new one.\r\n      hook.baseState = true;\r\n    }\r\n\r\n    // Reuse the previous value\r\n    return prevValue;\r\n  } else {\r\n    // This is not an urgent update, so we can use the latest value regardless\r\n    // of what it is. No need to defer it.\r\n\r\n    // However, if we're currently inside a spawned render, then we need to mark\r\n    // this as an update to prevent the fiber from bailing out.\r\n    //\r\n    // `baseState` is true when the current value is different from the rendered\r\n    // value. The name doesn't really match how we use it because we're reusing\r\n    // a state hook field instead of creating a new one.\r\n    if (hook.baseState) {\r\n      // Flip this back to false.\r\n      hook.baseState = false;\r\n      markWorkInProgressReceivedUpdate();\r\n    }\r\n\r\n    hook.memoizedState = value;\r\n    return value;\r\n  }\r\n}\r\n\r\nfunction startTransition(setPending, callback, options) {\r\n  const previousPriority = getCurrentUpdatePriority();\r\n  setCurrentUpdatePriority(\r\n    higherEventPriority(previousPriority, ContinuousEventPriority),\r\n  );\r\n\r\n  setPending(true);\r\n\r\n  const prevTransition = ReactCurrentBatchConfig.transition;\r\n  ReactCurrentBatchConfig.transition = {};\r\n  const currentTransition = ReactCurrentBatchConfig.transition;\r\n\r\n  if (enableTransitionTracing) {\r\n    if (options !== undefined && options.name !== undefined) {\r\n      ReactCurrentBatchConfig.transition.name = options.name;\r\n      ReactCurrentBatchConfig.transition.startTime = now();\r\n    }\r\n  }\r\n\r\n  if (__DEV__) {\r\n    ReactCurrentBatchConfig.transition._updatedFibers = new Set();\r\n  }\r\n\r\n  try {\r\n    setPending(false);\r\n    callback();\r\n  } finally {\r\n    setCurrentUpdatePriority(previousPriority);\r\n\r\n    ReactCurrentBatchConfig.transition = prevTransition;\r\n\r\n    if (__DEV__) {\r\n      if (prevTransition === null && currentTransition._updatedFibers) {\r\n        const updatedFibersCount = currentTransition._updatedFibers.size;\r\n        if (updatedFibersCount > 10) {\r\n          console.warn(\r\n            'Detected a large number of updates inside startTransition. ' +\r\n              'If this is due to a subscription please re-write it to use React provided hooks. ' +\r\n              'Otherwise concurrent mode guarantees are off the table.',\r\n          );\r\n        }\r\n        currentTransition._updatedFibers.clear();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction mountTransition(): [\r\n  boolean,\r\n  (callback: () => void, options?: StartTransitionOptions) => void,\r\n] {\r\n  const [isPending, setPending] = mountState(false);\r\n  // The `start` method never changes.\r\n  const start = startTransition.bind(null, setPending);\r\n  const hook = mountWorkInProgressHook();\r\n  hook.memoizedState = start;\r\n  return [isPending, start];\r\n}\r\n\r\nfunction updateTransition(): [\r\n  boolean,\r\n  (callback: () => void, options?: StartTransitionOptions) => void,\r\n] {\r\n  const [isPending] = updateState(false);\r\n  const hook = updateWorkInProgressHook();\r\n  const start = hook.memoizedState;\r\n  return [isPending, start];\r\n}\r\n\r\nfunction rerenderTransition(): [\r\n  boolean,\r\n  (callback: () => void, options?: StartTransitionOptions) => void,\r\n] {\r\n  const [isPending] = rerenderState(false);\r\n  const hook = updateWorkInProgressHook();\r\n  const start = hook.memoizedState;\r\n  return [isPending, start];\r\n}\r\n\r\nlet isUpdatingOpaqueValueInRenderPhase = false;\r\nexport function getIsUpdatingOpaqueValueInRenderPhaseInDEV(): boolean | void {\r\n  if (__DEV__) {\r\n    return isUpdatingOpaqueValueInRenderPhase;\r\n  }\r\n}\r\n\r\nfunction mountId(): string {\r\n  const hook = mountWorkInProgressHook();\r\n\r\n  const root = ((getWorkInProgressRoot(): any): FiberRoot);\r\n  // TODO: In Fizz, id generation is specific to each server config. Maybe we\r\n  // should do this in Fiber, too? Deferring this decision for now because\r\n  // there's no other place to store the prefix except for an internal field on\r\n  // the public createRoot object, which the fiber tree does not currently have\r\n  // a reference to.\r\n  const identifierPrefix = root.identifierPrefix;\r\n\r\n  let id;\r\n  if (getIsHydrating()) {\r\n    const treeId = getTreeId();\r\n\r\n    // Use a captial R prefix for server-generated ids.\r\n    id = ':' + identifierPrefix + 'R' + treeId;\r\n\r\n    // Unless this is the first id at this level, append a number at the end\r\n    // that represents the position of this useId hook among all the useId\r\n    // hooks for this fiber.\r\n    const localId = localIdCounter++;\r\n    if (localId > 0) {\r\n      id += 'H' + localId.toString(32);\r\n    }\r\n\r\n    id += ':';\r\n  } else {\r\n    // Use a lowercase r prefix for client-generated ids.\r\n    const globalClientId = globalClientIdCounter++;\r\n    id = ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';\r\n  }\r\n\r\n  hook.memoizedState = id;\r\n  return id;\r\n}\r\n\r\nfunction updateId(): string {\r\n  const hook = updateWorkInProgressHook();\r\n  const id: string = hook.memoizedState;\r\n  return id;\r\n}\r\n\r\nfunction mountRefresh() {\r\n  const hook = mountWorkInProgressHook();\r\n  const refresh = (hook.memoizedState = refreshCache.bind(\r\n    null,\r\n    currentlyRenderingFiber,\r\n  ));\r\n  return refresh;\r\n}\r\n\r\nfunction updateRefresh() {\r\n  const hook = updateWorkInProgressHook();\r\n  return hook.memoizedState;\r\n}\r\n\r\nfunction refreshCache<T>(fiber: Fiber, seedKey: ?() => T, seedValue: T) {\r\n  if (!enableCache) {\r\n    return;\r\n  }\r\n  // TODO: Does Cache work in legacy mode? Should decide and write a test.\r\n  // TODO: Consider warning if the refresh is at discrete priority, or if we\r\n  // otherwise suspect that it wasn't batched properly.\r\n  let provider = fiber.return;\r\n  while (provider !== null) {\r\n    switch (provider.tag) {\r\n      case CacheComponent:\r\n      case HostRoot: {\r\n        // Schedule an update on the cache boundary to trigger a refresh.\r\n        const lane = requestUpdateLane(provider);\r\n        const eventTime = requestEventTime();\r\n        const refreshUpdate = createLegacyQueueUpdate(eventTime, lane);\r\n        const root = enqueueLegacyQueueUpdate(provider, refreshUpdate, lane);\r\n        if (root !== null) {\r\n          scheduleUpdateOnFiber(root, provider, lane, eventTime);\r\n          entangleLegacyQueueTransitions(root, provider, lane);\r\n        }\r\n\r\n        // TODO: If a refresh never commits, the new cache created here must be\r\n        // released. A simple case is start refreshing a cache boundary, but then\r\n        // unmount that boundary before the refresh completes.\r\n        const seededCache = createCache();\r\n        if (seedKey !== null && seedKey !== undefined && root !== null) {\r\n          // Seed the cache with the value passed by the caller. This could be\r\n          // from a server mutation, or it could be a streaming response.\r\n          seededCache.data.set(seedKey, seedValue);\r\n        }\r\n\r\n        const payload = {\r\n          cache: seededCache,\r\n        };\r\n        refreshUpdate.payload = payload;\r\n        return;\r\n      }\r\n    }\r\n    provider = provider.return;\r\n  }\r\n  // TODO: Warn if unmounted?\r\n}\r\n\r\nfunction dispatchReducerAction<S, A>(\r\n  fiber: Fiber,\r\n  queue: UpdateQueue<S, A>,\r\n  action: A,\r\n) {\r\n  if (__DEV__) {\r\n    if (typeof arguments[3] === 'function') {\r\n      console.error(\r\n        \"State updates from the useState() and useReducer() Hooks don't support the \" +\r\n          'second callback argument. To execute a side effect after ' +\r\n          'rendering, declare it in the component body with useEffect().',\r\n      );\r\n    }\r\n  }\r\n\r\n  const lane = requestUpdateLane(fiber);\r\n\r\n  const update: Update<S, A> = {\r\n    lane,\r\n    action,\r\n    hasEagerState: false,\r\n    eagerState: null,\r\n    next: (null: any),\r\n  };\r\n\r\n  if (isRenderPhaseUpdate(fiber)) {\r\n    enqueueRenderPhaseUpdate(queue, update);\r\n  } else {\r\n    const root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\r\n    if (root !== null) {\r\n      const eventTime = requestEventTime();\r\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\r\n      entangleTransitionUpdate(root, queue, lane);\r\n    }\r\n  }\r\n\r\n  markUpdateInDevTools(fiber, lane, action);\r\n}\r\n\r\nfunction dispatchSetState<S, A>(\r\n  fiber: Fiber,\r\n  queue: UpdateQueue<S, A>,\r\n  action: A,\r\n) {\r\n  if (__DEV__) {\r\n    if (typeof arguments[3] === 'function') {\r\n      console.error(\r\n        \"State updates from the useState() and useReducer() Hooks don't support the \" +\r\n          'second callback argument. To execute a side effect after ' +\r\n          'rendering, declare it in the component body with useEffect().',\r\n      );\r\n    }\r\n  }\r\n\r\n  const lane = requestUpdateLane(fiber);\r\n\r\n  const update: Update<S, A> = {\r\n    lane,\r\n    action,\r\n    hasEagerState: false,\r\n    eagerState: null,\r\n    next: (null: any),\r\n  };\r\n\r\n  if (isRenderPhaseUpdate(fiber)) {\r\n    enqueueRenderPhaseUpdate(queue, update);\r\n  } else {\r\n    const alternate = fiber.alternate;\r\n    if (\r\n      fiber.lanes === NoLanes &&\r\n      (alternate === null || alternate.lanes === NoLanes)\r\n    ) {\r\n      // The queue is currently empty, which means we can eagerly compute the\r\n      // next state before entering the render phase. If the new state is the\r\n      // same as the current state, we may be able to bail out entirely.\r\n      const lastRenderedReducer = queue.lastRenderedReducer;\r\n      if (lastRenderedReducer !== null) {\r\n        let prevDispatcher;\r\n        if (__DEV__) {\r\n          prevDispatcher = ReactCurrentDispatcher.current;\r\n          ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\r\n        }\r\n        try {\r\n          const currentState: S = (queue.lastRenderedState: any);\r\n          const eagerState = lastRenderedReducer(currentState, action);\r\n          // Stash the eagerly computed state, and the reducer used to compute\r\n          // it, on the update object. If the reducer hasn't changed by the\r\n          // time we enter the render phase, then the eager state can be used\r\n          // without calling the reducer again.\r\n          update.hasEagerState = true;\r\n          update.eagerState = eagerState;\r\n          if (is(eagerState, currentState)) {\r\n            // Fast path. We can bail out without scheduling React to re-render.\r\n            // It's still possible that we'll need to rebase this update later,\r\n            // if the component re-renders for a different reason and by that\r\n            // time the reducer has changed.\r\n            // TODO: Do we still need to entangle transitions in this case?\r\n            enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update);\r\n            return;\r\n          }\r\n        } catch (error) {\r\n          // Suppress the error. It will throw again in the render phase.\r\n        } finally {\r\n          if (__DEV__) {\r\n            ReactCurrentDispatcher.current = prevDispatcher;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\r\n    if (root !== null) {\r\n      const eventTime = requestEventTime();\r\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\r\n      entangleTransitionUpdate(root, queue, lane);\r\n    }\r\n  }\r\n\r\n  markUpdateInDevTools(fiber, lane, action);\r\n}\r\n\r\nfunction isRenderPhaseUpdate(fiber: Fiber) {\r\n  const alternate = fiber.alternate;\r\n  return (\r\n    fiber === currentlyRenderingFiber ||\r\n    (alternate !== null && alternate === currentlyRenderingFiber)\r\n  );\r\n}\r\n\r\nfunction enqueueRenderPhaseUpdate<S, A>(\r\n  queue: UpdateQueue<S, A>,\r\n  update: Update<S, A>,\r\n) {\r\n  // This is a render phase update. Stash it in a lazily-created map of\r\n  // queue -> linked list of updates. After this render pass, we'll restart\r\n  // and apply the stashed updates on top of the work-in-progress hook.\r\n  didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\r\n  const pending = queue.pending;\r\n  if (pending === null) {\r\n    // This is the first update. Create a circular list.\r\n    update.next = update;\r\n  } else {\r\n    update.next = pending.next;\r\n    pending.next = update;\r\n  }\r\n  queue.pending = update;\r\n}\r\n\r\n// TODO: Move to ReactFiberConcurrentUpdates?\r\nfunction entangleTransitionUpdate<S, A>(\r\n  root: FiberRoot,\r\n  queue: UpdateQueue<S, A>,\r\n  lane: Lane,\r\n) {\r\n  if (isTransitionLane(lane)) {\r\n    let queueLanes = queue.lanes;\r\n\r\n    // If any entangled lanes are no longer pending on the root, then they\r\n    // must have finished. We can remove them from the shared queue, which\r\n    // represents a superset of the actually pending lanes. In some cases we\r\n    // may entangle more than we need to, but that's OK. In fact it's worse if\r\n    // we *don't* entangle when we should.\r\n    queueLanes = intersectLanes(queueLanes, root.pendingLanes);\r\n\r\n    // Entangle the new transition lane with the other transition lanes.\r\n    const newQueueLanes = mergeLanes(queueLanes, lane);\r\n    queue.lanes = newQueueLanes;\r\n    // Even if queue.lanes already include lane, we don't know for certain if\r\n    // the lane finished since the last time we entangled it. So we need to\r\n    // entangle it again, just to be sure.\r\n    markRootEntangled(root, newQueueLanes);\r\n  }\r\n}\r\n\r\nfunction markUpdateInDevTools<A>(fiber, lane, action: A) {\r\n  if (__DEV__) {\r\n    if (enableDebugTracing) {\r\n      if (fiber.mode & DebugTracingMode) {\r\n        const name = getComponentNameFromFiber(fiber) || 'Unknown';\r\n        logStateUpdateScheduled(name, lane, action);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (enableSchedulingProfiler) {\r\n    markStateUpdateScheduled(fiber, lane);\r\n  }\r\n}\r\n\r\nfunction getCacheSignal(): AbortSignal {\r\n  if (!enableCache) {\r\n    throw new Error('Not implemented.');\r\n  }\r\n  const cache: Cache = readContext(CacheContext);\r\n  return cache.controller.signal;\r\n}\r\n\r\nfunction getCacheForType<T>(resourceType: () => T): T {\r\n  if (!enableCache) {\r\n    throw new Error('Not implemented.');\r\n  }\r\n  const cache: Cache = readContext(CacheContext);\r\n  let cacheForType: T | void = (cache.data.get(resourceType): any);\r\n  if (cacheForType === undefined) {\r\n    cacheForType = resourceType();\r\n    cache.data.set(resourceType, cacheForType);\r\n  }\r\n  return cacheForType;\r\n}\r\n\r\nexport const ContextOnlyDispatcher: Dispatcher = {\r\n  readContext,\r\n\r\n  useCallback: throwInvalidHookError,\r\n  useContext: throwInvalidHookError,\r\n  useEffect: throwInvalidHookError,\r\n  useImperativeHandle: throwInvalidHookError,\r\n  useInsertionEffect: throwInvalidHookError,\r\n  useLayoutEffect: throwInvalidHookError,\r\n  useMemo: throwInvalidHookError,\r\n  useReducer: throwInvalidHookError,\r\n  useRef: throwInvalidHookError,\r\n  useState: throwInvalidHookError,\r\n  useDebugValue: throwInvalidHookError,\r\n  useDeferredValue: throwInvalidHookError,\r\n  useTransition: throwInvalidHookError,\r\n  useMutableSource: throwInvalidHookError,\r\n  useSyncExternalStore: throwInvalidHookError,\r\n  useId: throwInvalidHookError,\r\n\r\n  unstable_isNewReconciler: enableNewReconciler,\r\n};\r\nif (enableCache) {\r\n  (ContextOnlyDispatcher: Dispatcher).getCacheSignal = getCacheSignal;\r\n  (ContextOnlyDispatcher: Dispatcher).getCacheForType = getCacheForType;\r\n  (ContextOnlyDispatcher: Dispatcher).useCacheRefresh = throwInvalidHookError;\r\n}\r\nif (enableUseHook) {\r\n  (ContextOnlyDispatcher: Dispatcher).use = throwInvalidHookError;\r\n}\r\nif (enableUseMemoCacheHook) {\r\n  (ContextOnlyDispatcher: Dispatcher).useMemoCache = throwInvalidHookError;\r\n}\r\nif (enableUseEventHook) {\r\n  (ContextOnlyDispatcher: Dispatcher).useEvent = throwInvalidHookError;\r\n}\r\n\r\nconst HooksDispatcherOnMount: Dispatcher = {\r\n  readContext,\r\n\r\n  useCallback: mountCallback,\r\n  useContext: readContext,\r\n  useEffect: mountEffect,\r\n  useImperativeHandle: mountImperativeHandle,\r\n  useLayoutEffect: mountLayoutEffect,\r\n  useInsertionEffect: mountInsertionEffect,\r\n  useMemo: mountMemo,\r\n  useReducer: mountReducer,\r\n  useRef: mountRef,\r\n  useState: mountState,\r\n  useDebugValue: mountDebugValue,\r\n  useDeferredValue: mountDeferredValue,\r\n  useTransition: mountTransition,\r\n  useMutableSource: mountMutableSource,\r\n  useSyncExternalStore: mountSyncExternalStore,\r\n  useId: mountId,\r\n\r\n  unstable_isNewReconciler: enableNewReconciler,\r\n};\r\nif (enableCache) {\r\n  (HooksDispatcherOnMount: Dispatcher).getCacheSignal = getCacheSignal;\r\n  (HooksDispatcherOnMount: Dispatcher).getCacheForType = getCacheForType;\r\n  // $FlowFixMe[escaped-generic] discovered when updating Flow\r\n  (HooksDispatcherOnMount: Dispatcher).useCacheRefresh = mountRefresh;\r\n}\r\nif (enableUseHook) {\r\n  (HooksDispatcherOnMount: Dispatcher).use = use;\r\n}\r\nif (enableUseMemoCacheHook) {\r\n  (HooksDispatcherOnMount: Dispatcher).useMemoCache = useMemoCache;\r\n}\r\nif (enableUseEventHook) {\r\n  (HooksDispatcherOnMount: Dispatcher).useEvent = mountEvent;\r\n}\r\nconst HooksDispatcherOnUpdate: Dispatcher = {\r\n  readContext,\r\n\r\n  useCallback: updateCallback,\r\n  useContext: readContext,\r\n  useEffect: updateEffect,\r\n  useImperativeHandle: updateImperativeHandle,\r\n  useInsertionEffect: updateInsertionEffect,\r\n  useLayoutEffect: updateLayoutEffect,\r\n  useMemo: updateMemo,\r\n  useReducer: updateReducer,\r\n  useRef: updateRef,\r\n  useState: updateState,\r\n  useDebugValue: updateDebugValue,\r\n  useDeferredValue: updateDeferredValue,\r\n  useTransition: updateTransition,\r\n  useMutableSource: updateMutableSource,\r\n  useSyncExternalStore: updateSyncExternalStore,\r\n  useId: updateId,\r\n\r\n  unstable_isNewReconciler: enableNewReconciler,\r\n};\r\nif (enableCache) {\r\n  (HooksDispatcherOnUpdate: Dispatcher).getCacheSignal = getCacheSignal;\r\n  (HooksDispatcherOnUpdate: Dispatcher).getCacheForType = getCacheForType;\r\n  (HooksDispatcherOnUpdate: Dispatcher).useCacheRefresh = updateRefresh;\r\n}\r\nif (enableUseMemoCacheHook) {\r\n  (HooksDispatcherOnUpdate: Dispatcher).useMemoCache = useMemoCache;\r\n}\r\nif (enableUseHook) {\r\n  (HooksDispatcherOnUpdate: Dispatcher).use = use;\r\n}\r\nif (enableUseEventHook) {\r\n  (HooksDispatcherOnUpdate: Dispatcher).useEvent = updateEvent;\r\n}\r\n\r\nconst HooksDispatcherOnRerender: Dispatcher = {\r\n  readContext,\r\n\r\n  useCallback: updateCallback,\r\n  useContext: readContext,\r\n  useEffect: updateEffect,\r\n  useImperativeHandle: updateImperativeHandle,\r\n  useInsertionEffect: updateInsertionEffect,\r\n  useLayoutEffect: updateLayoutEffect,\r\n  useMemo: updateMemo,\r\n  useReducer: rerenderReducer,\r\n  useRef: updateRef,\r\n  useState: rerenderState,\r\n  useDebugValue: updateDebugValue,\r\n  useDeferredValue: rerenderDeferredValue,\r\n  useTransition: rerenderTransition,\r\n  useMutableSource: updateMutableSource,\r\n  useSyncExternalStore: updateSyncExternalStore,\r\n  useId: updateId,\r\n\r\n  unstable_isNewReconciler: enableNewReconciler,\r\n};\r\nif (enableCache) {\r\n  (HooksDispatcherOnRerender: Dispatcher).getCacheSignal = getCacheSignal;\r\n  (HooksDispatcherOnRerender: Dispatcher).getCacheForType = getCacheForType;\r\n  (HooksDispatcherOnRerender: Dispatcher).useCacheRefresh = updateRefresh;\r\n}\r\nif (enableUseHook) {\r\n  (HooksDispatcherOnRerender: Dispatcher).use = use;\r\n}\r\nif (enableUseMemoCacheHook) {\r\n  (HooksDispatcherOnRerender: Dispatcher).useMemoCache = useMemoCache;\r\n}\r\nif (enableUseEventHook) {\r\n  (HooksDispatcherOnRerender: Dispatcher).useEvent = updateEvent;\r\n}\r\n\r\nlet HooksDispatcherOnMountInDEV: Dispatcher | null = null;\r\nlet HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher | null = null;\r\nlet HooksDispatcherOnUpdateInDEV: Dispatcher | null = null;\r\nlet HooksDispatcherOnRerenderInDEV: Dispatcher | null = null;\r\nlet InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher | null = null;\r\nlet InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher | null = null;\r\nlet InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher | null = null;\r\n\r\nif (__DEV__) {\r\n  const warnInvalidContextAccess = () => {\r\n    console.error(\r\n      'Context can only be read while React is rendering. ' +\r\n        'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\r\n        'In function components, you can read it directly in the function body, but not ' +\r\n        'inside Hooks like useReducer() or useMemo().',\r\n    );\r\n  };\r\n\r\n  const warnInvalidHookAccess = () => {\r\n    console.error(\r\n      'Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' +\r\n        'You can only call Hooks at the top level of your React function. ' +\r\n        'For more information, see ' +\r\n        'https://reactjs.org/link/rules-of-hooks',\r\n    );\r\n  };\r\n\r\n  HooksDispatcherOnMountInDEV = {\r\n    readContext<T>(context: ReactContext<T>): T {\r\n      return readContext(context);\r\n    },\r\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\r\n      currentHookNameInDev = 'useCallback';\r\n      mountHookTypesDev();\r\n      checkDepsAreArrayDev(deps);\r\n      return mountCallback(callback, deps);\r\n    },\r\n    useContext<T>(context: ReactContext<T>): T {\r\n      currentHookNameInDev = 'useContext';\r\n      mountHookTypesDev();\r\n      return readContext(context);\r\n    },\r\n    useEffect(\r\n      create: () => (() => void) | void,\r\n      deps: Array<mixed> | void | null,\r\n    ): void {\r\n      currentHookNameInDev = 'useEffect';\r\n      mountHookTypesDev();\r\n      checkDepsAreArrayDev(deps);\r\n      return mountEffect(create, deps);\r\n    },\r\n    useImperativeHandle<T>(\r\n      ref: {current: T | null} | ((inst: T | null) => mixed) | null | void,\r\n      create: () => T,\r\n      deps: Array<mixed> | void | null,\r\n    ): void {\r\n      currentHookNameInDev = 'useImperativeHandle';\r\n      mountHookTypesDev();\r\n      checkDepsAreArrayDev(deps);\r\n      return mountImperativeHandle(ref, create, deps);\r\n    },\r\n    useInsertionEffect(\r\n      create: () => (() => void) | void,\r\n      deps: Array<mixed> | void | null,\r\n    ): void {\r\n      currentHookNameInDev = 'useInsertionEffect';\r\n      mountHookTypesDev();\r\n      checkDepsAreArrayDev(deps);\r\n      return mountInsertionEffect(create, deps);\r\n    },\r\n    useLayoutEffect(\r\n      create: () => (() => void) | void,\r\n      deps: Array<mixed> | void | null,\r\n    ): void {\r\n      currentHookNameInDev = 'useLayoutEffect';\r\n      mountHookTypesDev();\r\n      checkDepsAreArrayDev(deps);\r\n      return mountLayoutEffect(create, deps);\r\n    },\r\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\r\n      currentHookNameInDev = 'useMemo';\r\n      mountHookTypesDev();\r\n      checkDepsAreArrayDev(deps);\r\n      const prevDispatcher = ReactCurrentDispatcher.current;\r\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\r\n      try {\r\n        return mountMemo(create, deps);\r\n      } finally {\r\n        ReactCurrentDispatcher.current = prevDispatcher;\r\n      }\r\n    },\r\n    useReducer<S, I, A>(\r\n      reducer: (S, A) => S,\r\n      initialArg: I,\r\n      init?: I => S,\r\n    ): [S, Dispatch<A>] {\r\n      currentHookNameInDev = 'useReducer';\r\n      mountHookTypesDev();\r\n      const prevDispatcher = ReactCurrentDispatcher.current;\r\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\r\n      try {\r\n        return mountReducer(reducer, initialArg, init);\r\n      } finally {\r\n        ReactCurrentDispatcher.current = prevDispatcher;\r\n      }\r\n    },\r\n    useRef<T>(initialValue: T): {current: T} {\r\n      currentHookNameInDev = 'useRef';\r\n      mountHookTypesDev();\r\n      return mountRef(initialValue);\r\n    },\r\n    useState<S>(\r\n      initialState: (() => S) | S,\r\n    ): [S, Dispatch<BasicStateAction<S>>] {\r\n      currentHookNameInDev = 'useState';\r\n      mountHookTypesDev();\r\n      const prevDispatcher = ReactCurrentDispatcher.current;\r\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\r\n      try {\r\n        return mountState(initialState);\r\n      } finally {\r\n        ReactCurrentDispatcher.current = prevDispatcher;\r\n      }\r\n    },\r\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\r\n      currentHookNameInDev = 'useDebugValue';\r\n      mountHookTypesDev();\r\n      return mountDebugValue(value, formatterFn);\r\n    },\r\n    useDeferredValue<T>(value: T): T {\r\n      currentHookNameInDev = 'useDeferredValue';\r\n      mountHookTypesDev();\r\n      return mountDeferredValue(value);\r\n    },\r\n    useTransition(): [boolean, (() => void) => void] {\r\n      currentHookNameInDev = 'useTransition';\r\n      mountHookTypesDev();\r\n      return mountTransition();\r\n    },\r\n    useMutableSource<Source, Snapshot>(\r\n      source: MutableSource<Source>,\r\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\r\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\r\n    ): Snapshot {\r\n      currentHookNameInDev = 'useMutableSource';\r\n      mountHookTypesDev();\r\n      return mountMutableSource(source, getSnapshot, subscribe);\r\n    },\r\n    useSyncExternalStore<T>(\r\n      subscribe: (() => void) => () => void,\r\n      getSnapshot: () => T,\r\n      getServerSnapshot?: () => T,\r\n    ): T {\r\n      currentHookNameInDev = 'useSyncExternalStore';\r\n      mountHookTypesDev();\r\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\r\n    },\r\n    useId(): string {\r\n      currentHookNameInDev = 'useId';\r\n      mountHookTypesDev();\r\n      return mountId();\r\n    },\r\n\r\n    unstable_isNewReconciler: enableNewReconciler,\r\n  };\r\n  if (enableCache) {\r\n    (HooksDispatcherOnMountInDEV: Dispatcher).getCacheSignal = getCacheSignal;\r\n    (HooksDispatcherOnMountInDEV: Dispatcher).getCacheForType = getCacheForType;\r\n    (HooksDispatcherOnMountInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\r\n      currentHookNameInDev = 'useCacheRefresh';\r\n      mountHookTypesDev();\r\n      return mountRefresh();\r\n    };\r\n  }\r\n  if (enableUseHook) {\r\n    (HooksDispatcherOnMountInDEV: Dispatcher).use = use;\r\n  }\r\n  if (enableUseMemoCacheHook) {\r\n    (HooksDispatcherOnMountInDEV: Dispatcher).useMemoCache = useMemoCache;\r\n  }\r\n  if (enableUseEventHook) {\r\n    (HooksDispatcherOnMountInDEV: Dispatcher).useEvent = function useEvent<T>(\r\n      callback: () => T,\r\n    ): () => T {\r\n      currentHookNameInDev = 'useEvent';\r\n      mountHookTypesDev();\r\n      return mountEvent(callback);\r\n    };\r\n  }\r\n\r\n  HooksDispatcherOnMountWithHookTypesInDEV = {\r\n    readContext<T>(context: ReactContext<T>): T {\r\n      return readContext(context);\r\n    },\r\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\r\n      currentHookNameInDev = 'useCallback';\r\n      updateHookTypesDev();\r\n      return mountCallback(callback, deps);\r\n    },\r\n    useContext<T>(context: ReactContext<T>): T {\r\n      currentHookNameInDev = 'useContext';\r\n      updateHookTypesDev();\r\n      return readContext(context);\r\n    },\r\n    useEffect(\r\n      create: () => (() => void) | void,\r\n      deps: Array<mixed> | void | null,\r\n    ): void {\r\n      currentHookNameInDev = 'useEffect';\r\n      updateHookTypesDev();\r\n      return mountEffect(create, deps);\r\n    },\r\n    useImperativeHandle<T>(\r\n      ref: {current: T | null} | ((inst: T | null) => mixed) | null | void,\r\n      create: () => T,\r\n      deps: Array<mixed> | void | null,\r\n    ): void {\r\n      currentHookNameInDev = 'useImperativeHandle';\r\n      updateHookTypesDev();\r\n      return mountImperativeHandle(ref, create, deps);\r\n    },\r\n    useInsertionEffect(\r\n      create: () => (() => void) | void,\r\n      deps: Array<mixed> | void | null,\r\n    ): void {\r\n      currentHookNameInDev = 'useInsertionEffect';\r\n      updateHookTypesDev();\r\n      return mountInsertionEffect(create, deps);\r\n    },\r\n    useLayoutEffect(\r\n      create: () => (() => void) | void,\r\n      deps: Array<mixed> | void | null,\r\n    ): void {\r\n      currentHookNameInDev = 'useLayoutEffect';\r\n      updateHookTypesDev();\r\n      return mountLayoutEffect(create, deps);\r\n    },\r\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\r\n      currentHookNameInDev = 'useMemo';\r\n      updateHookTypesDev();\r\n      const prevDispatcher = ReactCurrentDispatcher.current;\r\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\r\n      try {\r\n        return mountMemo(create, deps);\r\n      } finally {\r\n        ReactCurrentDispatcher.current = prevDispatcher;\r\n      }\r\n    },\r\n    useReducer<S, I, A>(\r\n      reducer: (S, A) => S,\r\n      initialArg: I,\r\n      init?: I => S,\r\n    ): [S, Dispatch<A>] {\r\n      currentHookNameInDev = 'useReducer';\r\n      updateHookTypesDev();\r\n      const prevDispatcher = ReactCurrentDispatcher.current;\r\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\r\n      try {\r\n        return mountReducer(reducer, initialArg, init);\r\n      } finally {\r\n        ReactCurrentDispatcher.current = prevDispatcher;\r\n      }\r\n    },\r\n    useRef<T>(initialValue: T): {current: T} {\r\n      currentHookNameInDev = 'useRef';\r\n      updateHookTypesDev();\r\n      return mountRef(initialValue);\r\n    },\r\n    useState<S>(\r\n      initialState: (() => S) | S,\r\n    ): [S, Dispatch<BasicStateAction<S>>] {\r\n      currentHookNameInDev = 'useState';\r\n      updateHookTypesDev();\r\n      const prevDispatcher = ReactCurrentDispatcher.current;\r\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\r\n      try {\r\n        return mountState(initialState);\r\n      } finally {\r\n        ReactCurrentDispatcher.current = prevDispatcher;\r\n      }\r\n    },\r\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\r\n      currentHookNameInDev = 'useDebugValue';\r\n      updateHookTypesDev();\r\n      return mountDebugValue(value, formatterFn);\r\n    },\r\n    useDeferredValue<T>(value: T): T {\r\n      currentHookNameInDev = 'useDeferredValue';\r\n      updateHookTypesDev();\r\n      return mountDeferredValue(value);\r\n    },\r\n    useTransition(): [boolean, (() => void) => void] {\r\n      currentHookNameInDev = 'useTransition';\r\n      updateHookTypesDev();\r\n      return mountTransition();\r\n    },\r\n    useMutableSource<Source, Snapshot>(\r\n      source: MutableSource<Source>,\r\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\r\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\r\n    ): Snapshot {\r\n      currentHookNameInDev = 'useMutableSource';\r\n      updateHookTypesDev();\r\n      return mountMutableSource(source, getSnapshot, subscribe);\r\n    },\r\n    useSyncExternalStore<T>(\r\n      subscribe: (() => void) => () => void,\r\n      getSnapshot: () => T,\r\n      getServerSnapshot?: () => T,\r\n    ): T {\r\n      currentHookNameInDev = 'useSyncExternalStore';\r\n      updateHookTypesDev();\r\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\r\n    },\r\n    useId(): string {\r\n      currentHookNameInDev = 'useId';\r\n      updateHookTypesDev();\r\n      return mountId();\r\n    },\r\n\r\n    unstable_isNewReconciler: enableNewReconciler,\r\n  };\r\n  if (enableCache) {\r\n    (HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher).getCacheSignal = getCacheSignal;\r\n    (HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher).getCacheForType = getCacheForType;\r\n    (HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\r\n      currentHookNameInDev = 'useCacheRefresh';\r\n      updateHookTypesDev();\r\n      return mountRefresh();\r\n    };\r\n  }\r\n  if (enableUseHook) {\r\n    (HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher).use = use;\r\n  }\r\n  if (enableUseMemoCacheHook) {\r\n    (HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher).useMemoCache = useMemoCache;\r\n  }\r\n  if (enableUseEventHook) {\r\n    (HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher).useEvent = function useEvent<\r\n      T,\r\n    >(callback: () => T): () => T {\r\n      currentHookNameInDev = 'useEvent';\r\n      updateHookTypesDev();\r\n      return mountEvent(callback);\r\n    };\r\n  }\r\n\r\n  HooksDispatcherOnUpdateInDEV = {\r\n    readContext<T>(context: ReactContext<T>): T {\r\n      return readContext(context);\r\n    },\r\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\r\n      currentHookNameInDev = 'useCallback';\r\n      updateHookTypesDev();\r\n      return updateCallback(callback, deps);\r\n    },\r\n    useContext<T>(context: ReactContext<T>): T {\r\n      currentHookNameInDev = 'useContext';\r\n      updateHookTypesDev();\r\n      return readContext(context);\r\n    },\r\n    useEffect(\r\n      create: () => (() => void) | void,\r\n      deps: Array<mixed> | void | null,\r\n    ): void {\r\n      currentHookNameInDev = 'useEffect';\r\n      updateHookTypesDev();\r\n      return updateEffect(create, deps);\r\n    },\r\n    useImperativeHandle<T>(\r\n      ref: {current: T | null} | ((inst: T | null) => mixed) | null | void,\r\n      create: () => T,\r\n      deps: Array<mixed> | void | null,\r\n    ): void {\r\n      currentHookNameInDev = 'useImperativeHandle';\r\n      updateHookTypesDev();\r\n      return updateImperativeHandle(ref, create, deps);\r\n    },\r\n    useInsertionEffect(\r\n      create: () => (() => void) | void,\r\n      deps: Array<mixed> | void | null,\r\n    ): void {\r\n      currentHookNameInDev = 'useInsertionEffect';\r\n      updateHookTypesDev();\r\n      return updateInsertionEffect(create, deps);\r\n    },\r\n    useLayoutEffect(\r\n      create: () => (() => void) | void,\r\n      deps: Array<mixed> | void | null,\r\n    ): void {\r\n      currentHookNameInDev = 'useLayoutEffect';\r\n      updateHookTypesDev();\r\n      return updateLayoutEffect(create, deps);\r\n    },\r\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\r\n      currentHookNameInDev = 'useMemo';\r\n      updateHookTypesDev();\r\n      const prevDispatcher = ReactCurrentDispatcher.current;\r\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\r\n      try {\r\n        return updateMemo(create, deps);\r\n      } finally {\r\n        ReactCurrentDispatcher.current = prevDispatcher;\r\n      }\r\n    },\r\n    useReducer<S, I, A>(\r\n      reducer: (S, A) => S,\r\n      initialArg: I,\r\n      init?: I => S,\r\n    ): [S, Dispatch<A>] {\r\n      currentHookNameInDev = 'useReducer';\r\n      updateHookTypesDev();\r\n      const prevDispatcher = ReactCurrentDispatcher.current;\r\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\r\n      try {\r\n        return updateReducer(reducer, initialArg, init);\r\n      } finally {\r\n        ReactCurrentDispatcher.current = prevDispatcher;\r\n      }\r\n    },\r\n    useRef<T>(initialValue: T): {current: T} {\r\n      currentHookNameInDev = 'useRef';\r\n      updateHookTypesDev();\r\n      return updateRef(initialValue);\r\n    },\r\n    useState<S>(\r\n      initialState: (() => S) | S,\r\n    ): [S, Dispatch<BasicStateAction<S>>] {\r\n      currentHookNameInDev = 'useState';\r\n      updateHookTypesDev();\r\n      const prevDispatcher = ReactCurrentDispatcher.current;\r\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\r\n      try {\r\n        return updateState(initialState);\r\n      } finally {\r\n        ReactCurrentDispatcher.current = prevDispatcher;\r\n      }\r\n    },\r\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\r\n      currentHookNameInDev = 'useDebugValue';\r\n      updateHookTypesDev();\r\n      return updateDebugValue(value, formatterFn);\r\n    },\r\n    useDeferredValue<T>(value: T): T {\r\n      currentHookNameInDev = 'useDeferredValue';\r\n      updateHookTypesDev();\r\n      return updateDeferredValue(value);\r\n    },\r\n    useTransition(): [boolean, (() => void) => void] {\r\n      currentHookNameInDev = 'useTransition';\r\n      updateHookTypesDev();\r\n      return updateTransition();\r\n    },\r\n    useMutableSource<Source, Snapshot>(\r\n      source: MutableSource<Source>,\r\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\r\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\r\n    ): Snapshot {\r\n      currentHookNameInDev = 'useMutableSource';\r\n      updateHookTypesDev();\r\n      return updateMutableSource(source, getSnapshot, subscribe);\r\n    },\r\n    useSyncExternalStore<T>(\r\n      subscribe: (() => void) => () => void,\r\n      getSnapshot: () => T,\r\n      getServerSnapshot?: () => T,\r\n    ): T {\r\n      currentHookNameInDev = 'useSyncExternalStore';\r\n      updateHookTypesDev();\r\n      return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\r\n    },\r\n    useId(): string {\r\n      currentHookNameInDev = 'useId';\r\n      updateHookTypesDev();\r\n      return updateId();\r\n    },\r\n\r\n    unstable_isNewReconciler: enableNewReconciler,\r\n  };\r\n  if (enableCache) {\r\n    (HooksDispatcherOnUpdateInDEV: Dispatcher).getCacheSignal = getCacheSignal;\r\n    (HooksDispatcherOnUpdateInDEV: Dispatcher).getCacheForType = getCacheForType;\r\n    (HooksDispatcherOnUpdateInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\r\n      currentHookNameInDev = 'useCacheRefresh';\r\n      updateHookTypesDev();\r\n      return updateRefresh();\r\n    };\r\n  }\r\n  if (enableUseHook) {\r\n    (HooksDispatcherOnUpdateInDEV: Dispatcher).use = use;\r\n  }\r\n  if (enableUseMemoCacheHook) {\r\n    (HooksDispatcherOnUpdateInDEV: Dispatcher).useMemoCache = useMemoCache;\r\n  }\r\n  if (enableUseEventHook) {\r\n    (HooksDispatcherOnUpdateInDEV: Dispatcher).useEvent = function useEvent<T>(\r\n      callback: () => T,\r\n    ): () => T {\r\n      currentHookNameInDev = 'useEvent';\r\n      updateHookTypesDev();\r\n      return updateEvent(callback);\r\n    };\r\n  }\r\n\r\n  HooksDispatcherOnRerenderInDEV = {\r\n    readContext<T>(context: ReactContext<T>): T {\r\n      return readContext(context);\r\n    },\r\n\r\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\r\n      currentHookNameInDev = 'useCallback';\r\n      updateHookTypesDev();\r\n      return updateCallback(callback, deps);\r\n    },\r\n    useContext<T>(context: ReactContext<T>): T {\r\n      currentHookNameInDev = 'useContext';\r\n      updateHookTypesDev();\r\n      return readContext(context);\r\n    },\r\n    useEffect(\r\n      create: () => (() => void) | void,\r\n      deps: Array<mixed> | void | null,\r\n    ): void {\r\n      currentHookNameInDev = 'useEffect';\r\n      updateHookTypesDev();\r\n      return updateEffect(create, deps);\r\n    },\r\n    useImperativeHandle<T>(\r\n      ref: {current: T | null} | ((inst: T | null) => mixed) | null | void,\r\n      create: () => T,\r\n      deps: Array<mixed> | void | null,\r\n    ): void {\r\n      currentHookNameInDev = 'useImperativeHandle';\r\n      updateHookTypesDev();\r\n      return updateImperativeHandle(ref, create, deps);\r\n    },\r\n    useInsertionEffect(\r\n      create: () => (() => void) | void,\r\n      deps: Array<mixed> | void | null,\r\n    ): void {\r\n      currentHookNameInDev = 'useInsertionEffect';\r\n      updateHookTypesDev();\r\n      return updateInsertionEffect(create, deps);\r\n    },\r\n    useLayoutEffect(\r\n      create: () => (() => void) | void,\r\n      deps: Array<mixed> | void | null,\r\n    ): void {\r\n      currentHookNameInDev = 'useLayoutEffect';\r\n      updateHookTypesDev();\r\n      return updateLayoutEffect(create, deps);\r\n    },\r\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\r\n      currentHookNameInDev = 'useMemo';\r\n      updateHookTypesDev();\r\n      const prevDispatcher = ReactCurrentDispatcher.current;\r\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\r\n      try {\r\n        return updateMemo(create, deps);\r\n      } finally {\r\n        ReactCurrentDispatcher.current = prevDispatcher;\r\n      }\r\n    },\r\n    useReducer<S, I, A>(\r\n      reducer: (S, A) => S,\r\n      initialArg: I,\r\n      init?: I => S,\r\n    ): [S, Dispatch<A>] {\r\n      currentHookNameInDev = 'useReducer';\r\n      updateHookTypesDev();\r\n      const prevDispatcher = ReactCurrentDispatcher.current;\r\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\r\n      try {\r\n        return rerenderReducer(reducer, initialArg, init);\r\n      } finally {\r\n        ReactCurrentDispatcher.current = prevDispatcher;\r\n      }\r\n    },\r\n    useRef<T>(initialValue: T): {current: T} {\r\n      currentHookNameInDev = 'useRef';\r\n      updateHookTypesDev();\r\n      return updateRef(initialValue);\r\n    },\r\n    useState<S>(\r\n      initialState: (() => S) | S,\r\n    ): [S, Dispatch<BasicStateAction<S>>] {\r\n      currentHookNameInDev = 'useState';\r\n      updateHookTypesDev();\r\n      const prevDispatcher = ReactCurrentDispatcher.current;\r\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\r\n      try {\r\n        return rerenderState(initialState);\r\n      } finally {\r\n        ReactCurrentDispatcher.current = prevDispatcher;\r\n      }\r\n    },\r\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\r\n      currentHookNameInDev = 'useDebugValue';\r\n      updateHookTypesDev();\r\n      return updateDebugValue(value, formatterFn);\r\n    },\r\n    useDeferredValue<T>(value: T): T {\r\n      currentHookNameInDev = 'useDeferredValue';\r\n      updateHookTypesDev();\r\n      return rerenderDeferredValue(value);\r\n    },\r\n    useTransition(): [boolean, (() => void) => void] {\r\n      currentHookNameInDev = 'useTransition';\r\n      updateHookTypesDev();\r\n      return rerenderTransition();\r\n    },\r\n    useMutableSource<Source, Snapshot>(\r\n      source: MutableSource<Source>,\r\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\r\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\r\n    ): Snapshot {\r\n      currentHookNameInDev = 'useMutableSource';\r\n      updateHookTypesDev();\r\n      return updateMutableSource(source, getSnapshot, subscribe);\r\n    },\r\n    useSyncExternalStore<T>(\r\n      subscribe: (() => void) => () => void,\r\n      getSnapshot: () => T,\r\n      getServerSnapshot?: () => T,\r\n    ): T {\r\n      currentHookNameInDev = 'useSyncExternalStore';\r\n      updateHookTypesDev();\r\n      return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\r\n    },\r\n    useId(): string {\r\n      currentHookNameInDev = 'useId';\r\n      updateHookTypesDev();\r\n      return updateId();\r\n    },\r\n\r\n    unstable_isNewReconciler: enableNewReconciler,\r\n  };\r\n  if (enableCache) {\r\n    (HooksDispatcherOnRerenderInDEV: Dispatcher).getCacheSignal = getCacheSignal;\r\n    (HooksDispatcherOnRerenderInDEV: Dispatcher).getCacheForType = getCacheForType;\r\n    (HooksDispatcherOnRerenderInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\r\n      currentHookNameInDev = 'useCacheRefresh';\r\n      updateHookTypesDev();\r\n      return updateRefresh();\r\n    };\r\n  }\r\n  if (enableUseHook) {\r\n    (HooksDispatcherOnRerenderInDEV: Dispatcher).use = use;\r\n  }\r\n  if (enableUseMemoCacheHook) {\r\n    (HooksDispatcherOnRerenderInDEV: Dispatcher).useMemoCache = useMemoCache;\r\n  }\r\n  if (enableUseEventHook) {\r\n    (HooksDispatcherOnRerenderInDEV: Dispatcher).useEvent = function useEvent<\r\n      T,\r\n    >(callback: () => T): () => T {\r\n      currentHookNameInDev = 'useEvent';\r\n      updateHookTypesDev();\r\n      return updateEvent(callback);\r\n    };\r\n  }\r\n\r\n  InvalidNestedHooksDispatcherOnMountInDEV = {\r\n    readContext<T>(context: ReactContext<T>): T {\r\n      warnInvalidContextAccess();\r\n      return readContext(context);\r\n    },\r\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\r\n      currentHookNameInDev = 'useCallback';\r\n      warnInvalidHookAccess();\r\n      mountHookTypesDev();\r\n      return mountCallback(callback, deps);\r\n    },\r\n    useContext<T>(context: ReactContext<T>): T {\r\n      currentHookNameInDev = 'useContext';\r\n      warnInvalidHookAccess();\r\n      mountHookTypesDev();\r\n      return readContext(context);\r\n    },\r\n    useEffect(\r\n      create: () => (() => void) | void,\r\n      deps: Array<mixed> | void | null,\r\n    ): void {\r\n      currentHookNameInDev = 'useEffect';\r\n      warnInvalidHookAccess();\r\n      mountHookTypesDev();\r\n      return mountEffect(create, deps);\r\n    },\r\n    useImperativeHandle<T>(\r\n      ref: {current: T | null} | ((inst: T | null) => mixed) | null | void,\r\n      create: () => T,\r\n      deps: Array<mixed> | void | null,\r\n    ): void {\r\n      currentHookNameInDev = 'useImperativeHandle';\r\n      warnInvalidHookAccess();\r\n      mountHookTypesDev();\r\n      return mountImperativeHandle(ref, create, deps);\r\n    },\r\n    useInsertionEffect(\r\n      create: () => (() => void) | void,\r\n      deps: Array<mixed> | void | null,\r\n    ): void {\r\n      currentHookNameInDev = 'useInsertionEffect';\r\n      warnInvalidHookAccess();\r\n      mountHookTypesDev();\r\n      return mountInsertionEffect(create, deps);\r\n    },\r\n    useLayoutEffect(\r\n      create: () => (() => void) | void,\r\n      deps: Array<mixed> | void | null,\r\n    ): void {\r\n      currentHookNameInDev = 'useLayoutEffect';\r\n      warnInvalidHookAccess();\r\n      mountHookTypesDev();\r\n      return mountLayoutEffect(create, deps);\r\n    },\r\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\r\n      currentHookNameInDev = 'useMemo';\r\n      warnInvalidHookAccess();\r\n      mountHookTypesDev();\r\n      const prevDispatcher = ReactCurrentDispatcher.current;\r\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\r\n      try {\r\n        return mountMemo(create, deps);\r\n      } finally {\r\n        ReactCurrentDispatcher.current = prevDispatcher;\r\n      }\r\n    },\r\n    useReducer<S, I, A>(\r\n      reducer: (S, A) => S,\r\n      initialArg: I,\r\n      init?: I => S,\r\n    ): [S, Dispatch<A>] {\r\n      currentHookNameInDev = 'useReducer';\r\n      warnInvalidHookAccess();\r\n      mountHookTypesDev();\r\n      const prevDispatcher = ReactCurrentDispatcher.current;\r\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\r\n      try {\r\n        return mountReducer(reducer, initialArg, init);\r\n      } finally {\r\n        ReactCurrentDispatcher.current = prevDispatcher;\r\n      }\r\n    },\r\n    useRef<T>(initialValue: T): {current: T} {\r\n      currentHookNameInDev = 'useRef';\r\n      warnInvalidHookAccess();\r\n      mountHookTypesDev();\r\n      return mountRef(initialValue);\r\n    },\r\n    useState<S>(\r\n      initialState: (() => S) | S,\r\n    ): [S, Dispatch<BasicStateAction<S>>] {\r\n      currentHookNameInDev = 'useState';\r\n      warnInvalidHookAccess();\r\n      mountHookTypesDev();\r\n      const prevDispatcher = ReactCurrentDispatcher.current;\r\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\r\n      try {\r\n        return mountState(initialState);\r\n      } finally {\r\n        ReactCurrentDispatcher.current = prevDispatcher;\r\n      }\r\n    },\r\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\r\n      currentHookNameInDev = 'useDebugValue';\r\n      warnInvalidHookAccess();\r\n      mountHookTypesDev();\r\n      return mountDebugValue(value, formatterFn);\r\n    },\r\n    useDeferredValue<T>(value: T): T {\r\n      currentHookNameInDev = 'useDeferredValue';\r\n      warnInvalidHookAccess();\r\n      mountHookTypesDev();\r\n      return mountDeferredValue(value);\r\n    },\r\n    useTransition(): [boolean, (() => void) => void] {\r\n      currentHookNameInDev = 'useTransition';\r\n      warnInvalidHookAccess();\r\n      mountHookTypesDev();\r\n      return mountTransition();\r\n    },\r\n    useMutableSource<Source, Snapshot>(\r\n      source: MutableSource<Source>,\r\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\r\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\r\n    ): Snapshot {\r\n      currentHookNameInDev = 'useMutableSource';\r\n      warnInvalidHookAccess();\r\n      mountHookTypesDev();\r\n      return mountMutableSource(source, getSnapshot, subscribe);\r\n    },\r\n    useSyncExternalStore<T>(\r\n      subscribe: (() => void) => () => void,\r\n      getSnapshot: () => T,\r\n      getServerSnapshot?: () => T,\r\n    ): T {\r\n      currentHookNameInDev = 'useSyncExternalStore';\r\n      warnInvalidHookAccess();\r\n      mountHookTypesDev();\r\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\r\n    },\r\n    useId(): string {\r\n      currentHookNameInDev = 'useId';\r\n      warnInvalidHookAccess();\r\n      mountHookTypesDev();\r\n      return mountId();\r\n    },\r\n\r\n    unstable_isNewReconciler: enableNewReconciler,\r\n  };\r\n  if (enableCache) {\r\n    (InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher).getCacheSignal = getCacheSignal;\r\n    (InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher).getCacheForType = getCacheForType;\r\n    (InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\r\n      currentHookNameInDev = 'useCacheRefresh';\r\n      mountHookTypesDev();\r\n      return mountRefresh();\r\n    };\r\n  }\r\n  if (enableUseHook) {\r\n    (InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher).use = function<T>(\r\n      usable: Usable<T>,\r\n    ): T {\r\n      warnInvalidHookAccess();\r\n      return use(usable);\r\n    };\r\n  }\r\n  if (enableUseMemoCacheHook) {\r\n    (InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher).useMemoCache = function(\r\n      size: number,\r\n    ): Array<any> {\r\n      warnInvalidHookAccess();\r\n      return useMemoCache(size);\r\n    };\r\n  }\r\n  if (enableUseEventHook) {\r\n    (InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher).useEvent = function useEvent<\r\n      T,\r\n    >(callback: () => T): () => T {\r\n      currentHookNameInDev = 'useEvent';\r\n      warnInvalidHookAccess();\r\n      mountHookTypesDev();\r\n      return mountEvent(callback);\r\n    };\r\n  }\r\n\r\n  InvalidNestedHooksDispatcherOnUpdateInDEV = {\r\n    readContext<T>(context: ReactContext<T>): T {\r\n      warnInvalidContextAccess();\r\n      return readContext(context);\r\n    },\r\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\r\n      currentHookNameInDev = 'useCallback';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      return updateCallback(callback, deps);\r\n    },\r\n    useContext<T>(context: ReactContext<T>): T {\r\n      currentHookNameInDev = 'useContext';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      return readContext(context);\r\n    },\r\n    useEffect(\r\n      create: () => (() => void) | void,\r\n      deps: Array<mixed> | void | null,\r\n    ): void {\r\n      currentHookNameInDev = 'useEffect';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      return updateEffect(create, deps);\r\n    },\r\n    useImperativeHandle<T>(\r\n      ref: {current: T | null} | ((inst: T | null) => mixed) | null | void,\r\n      create: () => T,\r\n      deps: Array<mixed> | void | null,\r\n    ): void {\r\n      currentHookNameInDev = 'useImperativeHandle';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      return updateImperativeHandle(ref, create, deps);\r\n    },\r\n    useInsertionEffect(\r\n      create: () => (() => void) | void,\r\n      deps: Array<mixed> | void | null,\r\n    ): void {\r\n      currentHookNameInDev = 'useInsertionEffect';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      return updateInsertionEffect(create, deps);\r\n    },\r\n    useLayoutEffect(\r\n      create: () => (() => void) | void,\r\n      deps: Array<mixed> | void | null,\r\n    ): void {\r\n      currentHookNameInDev = 'useLayoutEffect';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      return updateLayoutEffect(create, deps);\r\n    },\r\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\r\n      currentHookNameInDev = 'useMemo';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      const prevDispatcher = ReactCurrentDispatcher.current;\r\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\r\n      try {\r\n        return updateMemo(create, deps);\r\n      } finally {\r\n        ReactCurrentDispatcher.current = prevDispatcher;\r\n      }\r\n    },\r\n    useReducer<S, I, A>(\r\n      reducer: (S, A) => S,\r\n      initialArg: I,\r\n      init?: I => S,\r\n    ): [S, Dispatch<A>] {\r\n      currentHookNameInDev = 'useReducer';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      const prevDispatcher = ReactCurrentDispatcher.current;\r\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\r\n      try {\r\n        return updateReducer(reducer, initialArg, init);\r\n      } finally {\r\n        ReactCurrentDispatcher.current = prevDispatcher;\r\n      }\r\n    },\r\n    useRef<T>(initialValue: T): {current: T} {\r\n      currentHookNameInDev = 'useRef';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      return updateRef(initialValue);\r\n    },\r\n    useState<S>(\r\n      initialState: (() => S) | S,\r\n    ): [S, Dispatch<BasicStateAction<S>>] {\r\n      currentHookNameInDev = 'useState';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      const prevDispatcher = ReactCurrentDispatcher.current;\r\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\r\n      try {\r\n        return updateState(initialState);\r\n      } finally {\r\n        ReactCurrentDispatcher.current = prevDispatcher;\r\n      }\r\n    },\r\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\r\n      currentHookNameInDev = 'useDebugValue';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      return updateDebugValue(value, formatterFn);\r\n    },\r\n    useDeferredValue<T>(value: T): T {\r\n      currentHookNameInDev = 'useDeferredValue';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      return updateDeferredValue(value);\r\n    },\r\n    useTransition(): [boolean, (() => void) => void] {\r\n      currentHookNameInDev = 'useTransition';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      return updateTransition();\r\n    },\r\n    useMutableSource<Source, Snapshot>(\r\n      source: MutableSource<Source>,\r\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\r\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\r\n    ): Snapshot {\r\n      currentHookNameInDev = 'useMutableSource';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      return updateMutableSource(source, getSnapshot, subscribe);\r\n    },\r\n    useSyncExternalStore<T>(\r\n      subscribe: (() => void) => () => void,\r\n      getSnapshot: () => T,\r\n      getServerSnapshot?: () => T,\r\n    ): T {\r\n      currentHookNameInDev = 'useSyncExternalStore';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\r\n    },\r\n    useId(): string {\r\n      currentHookNameInDev = 'useId';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      return updateId();\r\n    },\r\n\r\n    unstable_isNewReconciler: enableNewReconciler,\r\n  };\r\n  if (enableCache) {\r\n    (InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher).getCacheSignal = getCacheSignal;\r\n    (InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher).getCacheForType = getCacheForType;\r\n    (InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\r\n      currentHookNameInDev = 'useCacheRefresh';\r\n      updateHookTypesDev();\r\n      return updateRefresh();\r\n    };\r\n  }\r\n  if (enableUseHook) {\r\n    (InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher).use = function<T>(\r\n      usable: Usable<T>,\r\n    ): T {\r\n      warnInvalidHookAccess();\r\n      return use(usable);\r\n    };\r\n  }\r\n  if (enableUseMemoCacheHook) {\r\n    (InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher).useMemoCache = function(\r\n      size: number,\r\n    ): Array<any> {\r\n      warnInvalidHookAccess();\r\n      return useMemoCache(size);\r\n    };\r\n  }\r\n  if (enableUseEventHook) {\r\n    (InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher).useEvent = function useEvent<\r\n      T,\r\n    >(callback: () => T): () => T {\r\n      currentHookNameInDev = 'useEvent';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      return updateEvent(callback);\r\n    };\r\n  }\r\n\r\n  InvalidNestedHooksDispatcherOnRerenderInDEV = {\r\n    readContext<T>(context: ReactContext<T>): T {\r\n      warnInvalidContextAccess();\r\n      return readContext(context);\r\n    },\r\n\r\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\r\n      currentHookNameInDev = 'useCallback';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      return updateCallback(callback, deps);\r\n    },\r\n    useContext<T>(context: ReactContext<T>): T {\r\n      currentHookNameInDev = 'useContext';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      return readContext(context);\r\n    },\r\n    useEffect(\r\n      create: () => (() => void) | void,\r\n      deps: Array<mixed> | void | null,\r\n    ): void {\r\n      currentHookNameInDev = 'useEffect';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      return updateEffect(create, deps);\r\n    },\r\n    useImperativeHandle<T>(\r\n      ref: {current: T | null} | ((inst: T | null) => mixed) | null | void,\r\n      create: () => T,\r\n      deps: Array<mixed> | void | null,\r\n    ): void {\r\n      currentHookNameInDev = 'useImperativeHandle';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      return updateImperativeHandle(ref, create, deps);\r\n    },\r\n    useInsertionEffect(\r\n      create: () => (() => void) | void,\r\n      deps: Array<mixed> | void | null,\r\n    ): void {\r\n      currentHookNameInDev = 'useInsertionEffect';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      return updateInsertionEffect(create, deps);\r\n    },\r\n    useLayoutEffect(\r\n      create: () => (() => void) | void,\r\n      deps: Array<mixed> | void | null,\r\n    ): void {\r\n      currentHookNameInDev = 'useLayoutEffect';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      return updateLayoutEffect(create, deps);\r\n    },\r\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\r\n      currentHookNameInDev = 'useMemo';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      const prevDispatcher = ReactCurrentDispatcher.current;\r\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\r\n      try {\r\n        return updateMemo(create, deps);\r\n      } finally {\r\n        ReactCurrentDispatcher.current = prevDispatcher;\r\n      }\r\n    },\r\n    useReducer<S, I, A>(\r\n      reducer: (S, A) => S,\r\n      initialArg: I,\r\n      init?: I => S,\r\n    ): [S, Dispatch<A>] {\r\n      currentHookNameInDev = 'useReducer';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      const prevDispatcher = ReactCurrentDispatcher.current;\r\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\r\n      try {\r\n        return rerenderReducer(reducer, initialArg, init);\r\n      } finally {\r\n        ReactCurrentDispatcher.current = prevDispatcher;\r\n      }\r\n    },\r\n    useRef<T>(initialValue: T): {current: T} {\r\n      currentHookNameInDev = 'useRef';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      return updateRef(initialValue);\r\n    },\r\n    useState<S>(\r\n      initialState: (() => S) | S,\r\n    ): [S, Dispatch<BasicStateAction<S>>] {\r\n      currentHookNameInDev = 'useState';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      const prevDispatcher = ReactCurrentDispatcher.current;\r\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\r\n      try {\r\n        return rerenderState(initialState);\r\n      } finally {\r\n        ReactCurrentDispatcher.current = prevDispatcher;\r\n      }\r\n    },\r\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\r\n      currentHookNameInDev = 'useDebugValue';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      return updateDebugValue(value, formatterFn);\r\n    },\r\n    useDeferredValue<T>(value: T): T {\r\n      currentHookNameInDev = 'useDeferredValue';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      return rerenderDeferredValue(value);\r\n    },\r\n    useTransition(): [boolean, (() => void) => void] {\r\n      currentHookNameInDev = 'useTransition';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      return rerenderTransition();\r\n    },\r\n    useMutableSource<Source, Snapshot>(\r\n      source: MutableSource<Source>,\r\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\r\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\r\n    ): Snapshot {\r\n      currentHookNameInDev = 'useMutableSource';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      return updateMutableSource(source, getSnapshot, subscribe);\r\n    },\r\n    useSyncExternalStore<T>(\r\n      subscribe: (() => void) => () => void,\r\n      getSnapshot: () => T,\r\n      getServerSnapshot?: () => T,\r\n    ): T {\r\n      currentHookNameInDev = 'useSyncExternalStore';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\r\n    },\r\n    useId(): string {\r\n      currentHookNameInDev = 'useId';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      return updateId();\r\n    },\r\n\r\n    unstable_isNewReconciler: enableNewReconciler,\r\n  };\r\n  if (enableCache) {\r\n    (InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher).getCacheSignal = getCacheSignal;\r\n    (InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher).getCacheForType = getCacheForType;\r\n    (InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\r\n      currentHookNameInDev = 'useCacheRefresh';\r\n      updateHookTypesDev();\r\n      return updateRefresh();\r\n    };\r\n  }\r\n  if (enableUseHook) {\r\n    (InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher).use = function<T>(\r\n      usable: Usable<T>,\r\n    ): T {\r\n      warnInvalidHookAccess();\r\n      return use(usable);\r\n    };\r\n  }\r\n  if (enableUseMemoCacheHook) {\r\n    (InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher).useMemoCache = function(\r\n      size: number,\r\n    ): Array<any> {\r\n      warnInvalidHookAccess();\r\n      return useMemoCache(size);\r\n    };\r\n  }\r\n  if (enableUseEventHook) {\r\n    (InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher).useEvent = function useEvent<\r\n      T,\r\n    >(callback: () => T): () => T {\r\n      currentHookNameInDev = 'useEvent';\r\n      warnInvalidHookAccess();\r\n      updateHookTypesDev();\r\n      return updateEvent(callback);\r\n    };\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {Fiber} from './ReactInternalTypes';\r\n\r\nimport {\r\n  enableProfilerCommitHooks,\r\n  enableProfilerNestedUpdatePhase,\r\n  enableProfilerTimer,\r\n} from 'shared/ReactFeatureFlags';\r\nimport {HostRoot, Profiler} from './ReactWorkTags';\r\n\r\n// Intentionally not named imports because Rollup would use dynamic dispatch for\r\n// CommonJS interop named imports.\r\nimport * as Scheduler from 'scheduler';\r\n\r\nconst {unstable_now: now} = Scheduler;\r\n\r\nexport type ProfilerTimer = {\r\n  getCommitTime(): number,\r\n  isCurrentUpdateNested(): boolean,\r\n  markNestedUpdateScheduled(): void,\r\n  recordCommitTime(): void,\r\n  startProfilerTimer(fiber: Fiber): void,\r\n  stopProfilerTimerIfRunning(fiber: Fiber): void,\r\n  stopProfilerTimerIfRunningAndRecordDelta(fiber: Fiber): void,\r\n  syncNestedUpdateFlag(): void,\r\n  ...\r\n};\r\n\r\nlet commitTime: number = 0;\r\nlet layoutEffectStartTime: number = -1;\r\nlet profilerStartTime: number = -1;\r\nlet passiveEffectStartTime: number = -1;\r\n\r\n/**\r\n * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).\r\n *\r\n * The overall sequence is:\r\n *   1. render\r\n *   2. commit (and call `onRender`, `onCommit`)\r\n *   3. check for nested updates\r\n *   4. flush passive effects (and call `onPostCommit`)\r\n *\r\n * Nested updates are identified in step 3 above,\r\n * but step 4 still applies to the work that was just committed.\r\n * We use two flags to track nested updates then:\r\n * one tracks whether the upcoming update is a nested update,\r\n * and the other tracks whether the current update was a nested update.\r\n * The first value gets synced to the second at the start of the render phase.\r\n */\r\nlet currentUpdateIsNested: boolean = false;\r\nlet nestedUpdateScheduled: boolean = false;\r\n\r\nfunction isCurrentUpdateNested(): boolean {\r\n  return currentUpdateIsNested;\r\n}\r\n\r\nfunction markNestedUpdateScheduled(): void {\r\n  if (enableProfilerNestedUpdatePhase) {\r\n    nestedUpdateScheduled = true;\r\n  }\r\n}\r\n\r\nfunction resetNestedUpdateFlag(): void {\r\n  if (enableProfilerNestedUpdatePhase) {\r\n    currentUpdateIsNested = false;\r\n    nestedUpdateScheduled = false;\r\n  }\r\n}\r\n\r\nfunction syncNestedUpdateFlag(): void {\r\n  if (enableProfilerNestedUpdatePhase) {\r\n    currentUpdateIsNested = nestedUpdateScheduled;\r\n    nestedUpdateScheduled = false;\r\n  }\r\n}\r\n\r\nfunction getCommitTime(): number {\r\n  return commitTime;\r\n}\r\n\r\nfunction recordCommitTime(): void {\r\n  if (!enableProfilerTimer) {\r\n    return;\r\n  }\r\n  commitTime = now();\r\n}\r\n\r\nfunction startProfilerTimer(fiber: Fiber): void {\r\n  if (!enableProfilerTimer) {\r\n    return;\r\n  }\r\n\r\n  profilerStartTime = now();\r\n\r\n  if (((fiber.actualStartTime: any): number) < 0) {\r\n    fiber.actualStartTime = now();\r\n  }\r\n}\r\n\r\nfunction stopProfilerTimerIfRunning(fiber: Fiber): void {\r\n  if (!enableProfilerTimer) {\r\n    return;\r\n  }\r\n  profilerStartTime = -1;\r\n}\r\n\r\nfunction stopProfilerTimerIfRunningAndRecordDelta(\r\n  fiber: Fiber,\r\n  overrideBaseTime: boolean,\r\n): void {\r\n  if (!enableProfilerTimer) {\r\n    return;\r\n  }\r\n\r\n  if (profilerStartTime >= 0) {\r\n    const elapsedTime = now() - profilerStartTime;\r\n    // $FlowFixMe[unsafe-addition] addition with possible null/undefined value\r\n    fiber.actualDuration += elapsedTime;\r\n    if (overrideBaseTime) {\r\n      fiber.selfBaseDuration = elapsedTime;\r\n    }\r\n    profilerStartTime = -1;\r\n  }\r\n}\r\n\r\nfunction recordLayoutEffectDuration(fiber: Fiber): void {\r\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\r\n    return;\r\n  }\r\n\r\n  if (layoutEffectStartTime >= 0) {\r\n    const elapsedTime = now() - layoutEffectStartTime;\r\n\r\n    layoutEffectStartTime = -1;\r\n\r\n    // Store duration on the next nearest Profiler ancestor\r\n    // Or the root (for the DevTools Profiler to read)\r\n    let parentFiber = fiber.return;\r\n    while (parentFiber !== null) {\r\n      switch (parentFiber.tag) {\r\n        case HostRoot:\r\n          const root = parentFiber.stateNode;\r\n          root.effectDuration += elapsedTime;\r\n          return;\r\n        case Profiler:\r\n          const parentStateNode = parentFiber.stateNode;\r\n          parentStateNode.effectDuration += elapsedTime;\r\n          return;\r\n      }\r\n      parentFiber = parentFiber.return;\r\n    }\r\n  }\r\n}\r\n\r\nfunction recordPassiveEffectDuration(fiber: Fiber): void {\r\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\r\n    return;\r\n  }\r\n\r\n  if (passiveEffectStartTime >= 0) {\r\n    const elapsedTime = now() - passiveEffectStartTime;\r\n\r\n    passiveEffectStartTime = -1;\r\n\r\n    // Store duration on the next nearest Profiler ancestor\r\n    // Or the root (for the DevTools Profiler to read)\r\n    let parentFiber = fiber.return;\r\n    while (parentFiber !== null) {\r\n      switch (parentFiber.tag) {\r\n        case HostRoot:\r\n          const root = parentFiber.stateNode;\r\n          if (root !== null) {\r\n            root.passiveEffectDuration += elapsedTime;\r\n          }\r\n          return;\r\n        case Profiler:\r\n          const parentStateNode = parentFiber.stateNode;\r\n          if (parentStateNode !== null) {\r\n            // Detached fibers have their state node cleared out.\r\n            // In this case, the return pointer is also cleared out,\r\n            // so we won't be able to report the time spent in this Profiler's subtree.\r\n            parentStateNode.passiveEffectDuration += elapsedTime;\r\n          }\r\n          return;\r\n      }\r\n      parentFiber = parentFiber.return;\r\n    }\r\n  }\r\n}\r\n\r\nfunction startLayoutEffectTimer(): void {\r\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\r\n    return;\r\n  }\r\n  layoutEffectStartTime = now();\r\n}\r\n\r\nfunction startPassiveEffectTimer(): void {\r\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\r\n    return;\r\n  }\r\n  passiveEffectStartTime = now();\r\n}\r\n\r\nfunction transferActualDuration(fiber: Fiber): void {\r\n  // Transfer time spent rendering these children so we don't lose it\r\n  // after we rerender. This is used as a helper in special cases\r\n  // where we should count the work of multiple passes.\r\n  let child = fiber.child;\r\n  while (child) {\r\n    // $FlowFixMe[unsafe-addition] addition with possible null/undefined value\r\n    fiber.actualDuration += child.actualDuration;\r\n    child = child.sibling;\r\n  }\r\n}\r\n\r\nexport {\r\n  getCommitTime,\r\n  isCurrentUpdateNested,\r\n  markNestedUpdateScheduled,\r\n  recordCommitTime,\r\n  recordLayoutEffectDuration,\r\n  recordPassiveEffectDuration,\r\n  resetNestedUpdateFlag,\r\n  startLayoutEffectTimer,\r\n  startPassiveEffectTimer,\r\n  startProfilerTimer,\r\n  stopProfilerTimerIfRunning,\r\n  stopProfilerTimerIfRunningAndRecordDelta,\r\n  syncNestedUpdateFlag,\r\n  transferActualDuration,\r\n};\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {Fiber} from './ReactInternalTypes';\r\n\r\nimport {getStackByFiberInDevAndProd} from './ReactFiberComponentStack';\r\n\r\nexport type CapturedValue<T> = {\r\n  value: T,\r\n  source: Fiber | null,\r\n  stack: string | null,\r\n  digest: string | null,\r\n};\r\n\r\nexport function createCapturedValueAtFiber<T>(\r\n  value: T,\r\n  source: Fiber,\r\n): CapturedValue<T> {\r\n  // If the value is an error, call this function immediately after it is thrown\r\n  // so the stack is accurate.\r\n  return {\r\n    value,\r\n    source,\r\n    stack: getStackByFiberInDevAndProd(source),\r\n    digest: null,\r\n  };\r\n}\r\n\r\nexport function createCapturedValue<T>(\r\n  value: T,\r\n  digest: ?string,\r\n  stack: ?string,\r\n): CapturedValue<T> {\r\n  return {\r\n    value,\r\n    source: null,\r\n    stack: stack != null ? stack : null,\r\n    digest: digest != null ? digest : null,\r\n  };\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {Fiber} from './ReactInternalTypes';\r\nimport type {CapturedValue} from './ReactCapturedValue';\r\n\r\n// This module is forked in different environments.\r\n// By default, return `true` to log errors to the console.\r\n// Forks can return `false` if this isn't desirable.\r\n\r\nexport function showErrorDialog(\r\n  boundary: Fiber,\r\n  errorInfo: CapturedValue<mixed>,\r\n): boolean {\r\n  return true;\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {Fiber} from './ReactInternalTypes';\r\nimport type {CapturedValue} from './ReactCapturedValue';\r\n\r\nimport {showErrorDialog} from './ReactFiberErrorDialog';\r\nimport {ClassComponent} from './ReactWorkTags';\r\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\r\nimport {HostRoot} from 'react-reconciler/src/ReactWorkTags';\r\n\r\nexport function logCapturedError(\r\n  boundary: Fiber,\r\n  errorInfo: CapturedValue<mixed>,\r\n): void {\r\n  try {\r\n    const logError = showErrorDialog(boundary, errorInfo);\r\n\r\n    // Allow injected showErrorDialog() to prevent default console.error logging.\r\n    // This enables renderers like ReactNative to better manage redbox behavior.\r\n    if (logError === false) {\r\n      return;\r\n    }\r\n\r\n    const error = (errorInfo.value: any);\r\n    if (__DEV__) {\r\n      const source = errorInfo.source;\r\n      const stack = errorInfo.stack;\r\n      const componentStack = stack !== null ? stack : '';\r\n      // Browsers support silencing uncaught errors by calling\r\n      // `preventDefault()` in window `error` handler.\r\n      // We record this information as an expando on the error.\r\n      if (error != null && error._suppressLogging) {\r\n        if (boundary.tag === ClassComponent) {\r\n          // The error is recoverable and was silenced.\r\n          // Ignore it and don't print the stack addendum.\r\n          // This is handy for testing error boundaries without noise.\r\n          return;\r\n        }\r\n        // The error is fatal. Since the silencing might have\r\n        // been accidental, we'll surface it anyway.\r\n        // However, the browser would have silenced the original error\r\n        // so we'll print it first, and then print the stack addendum.\r\n        console['error'](error); // Don't transform to our wrapper\r\n        // For a more detailed description of this block, see:\r\n        // https://github.com/facebook/react/pull/13384\r\n      }\r\n\r\n      const componentName = source ? getComponentNameFromFiber(source) : null;\r\n      const componentNameMessage = componentName\r\n        ? `The above error occurred in the <${componentName}> component:`\r\n        : 'The above error occurred in one of your React components:';\r\n\r\n      let errorBoundaryMessage;\r\n      if (boundary.tag === HostRoot) {\r\n        errorBoundaryMessage =\r\n          'Consider adding an error boundary to your tree to customize error handling behavior.\\n' +\r\n          'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';\r\n      } else {\r\n        const errorBoundaryName =\r\n          getComponentNameFromFiber(boundary) || 'Anonymous';\r\n        errorBoundaryMessage =\r\n          `React will try to recreate this component tree from scratch ` +\r\n          `using the error boundary you provided, ${errorBoundaryName}.`;\r\n      }\r\n      const combinedMessage =\r\n        `${componentNameMessage}\\n${componentStack}\\n\\n` +\r\n        `${errorBoundaryMessage}`;\r\n\r\n      // In development, we provide our own message with just the component stack.\r\n      // We don't include the original error message and JS stack because the browser\r\n      // has already printed it. Even if the application swallows the error, it is still\r\n      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\r\n      console['error'](combinedMessage); // Don't transform to our wrapper\r\n    } else {\r\n      // In production, we print the error directly.\r\n      // This will include the message, the JS stack, and anything the browser wants to show.\r\n      // We pass the error object instead of custom message so that the browser displays the error natively.\r\n      console['error'](error); // Don't transform to our wrapper\r\n    }\r\n  } catch (e) {\r\n    // This method must not throw, or React internal state will get messed up.\r\n    // If console.error is overridden, or logCapturedError() shows a dialog that throws,\r\n    // we want to report this error outside of the normal stack as a last resort.\r\n    // https://github.com/facebook/react/issues/13188\r\n    setTimeout(() => {\r\n      throw e;\r\n    });\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {Fiber} from './ReactInternalTypes';\r\nimport type {FiberRoot} from './ReactInternalTypes';\r\nimport type {Lane, Lanes} from './ReactFiberLane.old';\r\nimport type {CapturedValue} from './ReactCapturedValue';\r\nimport type {Update} from './ReactFiberClassUpdateQueue.old';\r\nimport type {Wakeable} from 'shared/ReactTypes';\r\nimport type {OffscreenQueue} from './ReactFiberOffscreenComponent';\r\n\r\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\r\nimport {\r\n  ClassComponent,\r\n  HostRoot,\r\n  IncompleteClassComponent,\r\n  FunctionComponent,\r\n  ForwardRef,\r\n  SimpleMemoComponent,\r\n  SuspenseComponent,\r\n  OffscreenComponent,\r\n} from './ReactWorkTags';\r\nimport {\r\n  DidCapture,\r\n  Incomplete,\r\n  NoFlags,\r\n  ShouldCapture,\r\n  LifecycleEffectMask,\r\n  ForceUpdateForLegacySuspense,\r\n  ForceClientRender,\r\n} from './ReactFiberFlags';\r\nimport {NoMode, ConcurrentMode, DebugTracingMode} from './ReactTypeOfMode';\r\nimport {\r\n  enableDebugTracing,\r\n  enableLazyContextPropagation,\r\n  enableUpdaterTracking,\r\n} from 'shared/ReactFeatureFlags';\r\nimport {createCapturedValueAtFiber} from './ReactCapturedValue';\r\nimport {\r\n  enqueueCapturedUpdate,\r\n  createUpdate,\r\n  CaptureUpdate,\r\n  ForceUpdate,\r\n  enqueueUpdate,\r\n} from './ReactFiberClassUpdateQueue.old';\r\nimport {markFailedErrorBoundaryForHotReloading} from './ReactFiberHotReloading.old';\r\nimport {getSuspenseHandler} from './ReactFiberSuspenseContext.old';\r\nimport {\r\n  renderDidError,\r\n  renderDidSuspendDelayIfPossible,\r\n  onUncaughtError,\r\n  markLegacyErrorBoundaryAsFailed,\r\n  isAlreadyFailedLegacyErrorBoundary,\r\n  attachPingListener,\r\n  restorePendingUpdaters,\r\n} from './ReactFiberWorkLoop.old';\r\nimport {propagateParentContextChangesToDeferredTree} from './ReactFiberNewContext.old';\r\nimport {logCapturedError} from './ReactFiberErrorLogger';\r\nimport {logComponentSuspended} from './DebugTracing';\r\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\r\nimport {\r\n  SyncLane,\r\n  NoTimestamp,\r\n  includesSomeLane,\r\n  mergeLanes,\r\n  pickArbitraryLane,\r\n  includesSyncLane,\r\n} from './ReactFiberLane.old';\r\nimport {\r\n  getIsHydrating,\r\n  markDidThrowWhileHydratingDEV,\r\n  queueHydrationError,\r\n} from './ReactFiberHydrationContext.old';\r\n\r\nfunction createRootErrorUpdate(\r\n  fiber: Fiber,\r\n  errorInfo: CapturedValue<mixed>,\r\n  lane: Lane,\r\n): Update<mixed> {\r\n  const update = createUpdate(NoTimestamp, lane);\r\n  // Unmount the root by rendering null.\r\n  update.tag = CaptureUpdate;\r\n  // Caution: React DevTools currently depends on this property\r\n  // being called \"element\".\r\n  update.payload = {element: null};\r\n  const error = errorInfo.value;\r\n  update.callback = () => {\r\n    onUncaughtError(error);\r\n    logCapturedError(fiber, errorInfo);\r\n  };\r\n  return update;\r\n}\r\n\r\nfunction createClassErrorUpdate(\r\n  fiber: Fiber,\r\n  errorInfo: CapturedValue<mixed>,\r\n  lane: Lane,\r\n): Update<mixed> {\r\n  const update = createUpdate(NoTimestamp, lane);\r\n  update.tag = CaptureUpdate;\r\n  const getDerivedStateFromError = fiber.type.getDerivedStateFromError;\r\n  if (typeof getDerivedStateFromError === 'function') {\r\n    const error = errorInfo.value;\r\n    update.payload = () => {\r\n      return getDerivedStateFromError(error);\r\n    };\r\n    update.callback = () => {\r\n      if (__DEV__) {\r\n        markFailedErrorBoundaryForHotReloading(fiber);\r\n      }\r\n      logCapturedError(fiber, errorInfo);\r\n    };\r\n  }\r\n\r\n  const inst = fiber.stateNode;\r\n  if (inst !== null && typeof inst.componentDidCatch === 'function') {\r\n    update.callback = function callback() {\r\n      if (__DEV__) {\r\n        markFailedErrorBoundaryForHotReloading(fiber);\r\n      }\r\n      logCapturedError(fiber, errorInfo);\r\n      if (typeof getDerivedStateFromError !== 'function') {\r\n        // To preserve the preexisting retry behavior of error boundaries,\r\n        // we keep track of which ones already failed during this batch.\r\n        // This gets reset before we yield back to the browser.\r\n        // TODO: Warn in strict mode if getDerivedStateFromError is\r\n        // not defined.\r\n        markLegacyErrorBoundaryAsFailed(this);\r\n      }\r\n      const error = errorInfo.value;\r\n      const stack = errorInfo.stack;\r\n      this.componentDidCatch(error, {\r\n        componentStack: stack !== null ? stack : '',\r\n      });\r\n      if (__DEV__) {\r\n        if (typeof getDerivedStateFromError !== 'function') {\r\n          // If componentDidCatch is the only error boundary method defined,\r\n          // then it needs to call setState to recover from errors.\r\n          // If no state update is scheduled then the boundary will swallow the error.\r\n          if (!includesSomeLane(fiber.lanes, (SyncLane: Lane))) {\r\n            console.error(\r\n              '%s: Error boundaries should implement getDerivedStateFromError(). ' +\r\n                'In that method, return a state update to display an error message or fallback UI.',\r\n              getComponentNameFromFiber(fiber) || 'Unknown',\r\n            );\r\n          }\r\n        }\r\n      }\r\n    };\r\n  }\r\n  return update;\r\n}\r\n\r\nfunction resetSuspendedComponent(sourceFiber: Fiber, rootRenderLanes: Lanes) {\r\n  if (enableLazyContextPropagation) {\r\n    const currentSourceFiber = sourceFiber.alternate;\r\n    if (currentSourceFiber !== null) {\r\n      // Since we never visited the children of the suspended component, we\r\n      // need to propagate the context change now, to ensure that we visit\r\n      // them during the retry.\r\n      //\r\n      // We don't have to do this for errors because we retry errors without\r\n      // committing in between. So this is specific to Suspense.\r\n      propagateParentContextChangesToDeferredTree(\r\n        currentSourceFiber,\r\n        sourceFiber,\r\n        rootRenderLanes,\r\n      );\r\n    }\r\n  }\r\n\r\n  // Reset the memoizedState to what it was before we attempted to render it.\r\n  // A legacy mode Suspense quirk, only relevant to hook components.\r\n  const tag = sourceFiber.tag;\r\n  if (\r\n    (sourceFiber.mode & ConcurrentMode) === NoMode &&\r\n    (tag === FunctionComponent ||\r\n      tag === ForwardRef ||\r\n      tag === SimpleMemoComponent)\r\n  ) {\r\n    const currentSource = sourceFiber.alternate;\r\n    if (currentSource) {\r\n      sourceFiber.updateQueue = currentSource.updateQueue;\r\n      sourceFiber.memoizedState = currentSource.memoizedState;\r\n      sourceFiber.lanes = currentSource.lanes;\r\n    } else {\r\n      sourceFiber.updateQueue = null;\r\n      sourceFiber.memoizedState = null;\r\n    }\r\n  }\r\n}\r\n\r\nfunction markSuspenseBoundaryShouldCapture(\r\n  suspenseBoundary: Fiber,\r\n  returnFiber: Fiber,\r\n  sourceFiber: Fiber,\r\n  root: FiberRoot,\r\n  rootRenderLanes: Lanes,\r\n): Fiber | null {\r\n  // This marks a Suspense boundary so that when we're unwinding the stack,\r\n  // it captures the suspended \"exception\" and does a second (fallback) pass.\r\n  if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {\r\n    // Legacy Mode Suspense\r\n    //\r\n    // If the boundary is in legacy mode, we should *not*\r\n    // suspend the commit. Pretend as if the suspended component rendered\r\n    // null and keep rendering. When the Suspense boundary completes,\r\n    // we'll do a second pass to render the fallback.\r\n    if (suspenseBoundary === returnFiber) {\r\n      // Special case where we suspended while reconciling the children of\r\n      // a Suspense boundary's inner Offscreen wrapper fiber. This happens\r\n      // when a React.lazy component is a direct child of a\r\n      // Suspense boundary.\r\n      //\r\n      // Suspense boundaries are implemented as multiple fibers, but they\r\n      // are a single conceptual unit. The legacy mode behavior where we\r\n      // pretend the suspended fiber committed as `null` won't work,\r\n      // because in this case the \"suspended\" fiber is the inner\r\n      // Offscreen wrapper.\r\n      //\r\n      // Because the contents of the boundary haven't started rendering\r\n      // yet (i.e. nothing in the tree has partially rendered) we can\r\n      // switch to the regular, concurrent mode behavior: mark the\r\n      // boundary with ShouldCapture and enter the unwind phase.\r\n      suspenseBoundary.flags |= ShouldCapture;\r\n    } else {\r\n      suspenseBoundary.flags |= DidCapture;\r\n      sourceFiber.flags |= ForceUpdateForLegacySuspense;\r\n\r\n      // We're going to commit this fiber even though it didn't complete.\r\n      // But we shouldn't call any lifecycle methods or callbacks. Remove\r\n      // all lifecycle effect tags.\r\n      sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\r\n\r\n      if (sourceFiber.tag === ClassComponent) {\r\n        const currentSourceFiber = sourceFiber.alternate;\r\n        if (currentSourceFiber === null) {\r\n          // This is a new mount. Change the tag so it's not mistaken for a\r\n          // completed class component. For example, we should not call\r\n          // componentWillUnmount if it is deleted.\r\n          sourceFiber.tag = IncompleteClassComponent;\r\n        } else {\r\n          // When we try rendering again, we should not reuse the current fiber,\r\n          // since it's known to be in an inconsistent state. Use a force update to\r\n          // prevent a bail out.\r\n          const update = createUpdate(NoTimestamp, SyncLane);\r\n          update.tag = ForceUpdate;\r\n          enqueueUpdate(sourceFiber, update, SyncLane);\r\n        }\r\n      }\r\n\r\n      // The source fiber did not complete. Mark it with Sync priority to\r\n      // indicate that it still has pending work.\r\n      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);\r\n    }\r\n    return suspenseBoundary;\r\n  }\r\n  // Confirmed that the boundary is in a concurrent mode tree. Continue\r\n  // with the normal suspend path.\r\n  //\r\n  // After this we'll use a set of heuristics to determine whether this\r\n  // render pass will run to completion or restart or \"suspend\" the commit.\r\n  // The actual logic for this is spread out in different places.\r\n  //\r\n  // This first principle is that if we're going to suspend when we complete\r\n  // a root, then we should also restart if we get an update or ping that\r\n  // might unsuspend it, and vice versa. The only reason to suspend is\r\n  // because you think you might want to restart before committing. However,\r\n  // it doesn't make sense to restart only while in the period we're suspended.\r\n  //\r\n  // Restarting too aggressively is also not good because it starves out any\r\n  // intermediate loading state. So we use heuristics to determine when.\r\n\r\n  // Suspense Heuristics\r\n  //\r\n  // If nothing threw a Promise or all the same fallbacks are already showing,\r\n  // then don't suspend/restart.\r\n  //\r\n  // If this is an initial render of a new tree of Suspense boundaries and\r\n  // those trigger a fallback, then don't suspend/restart. We want to ensure\r\n  // that we can show the initial loading state as quickly as possible.\r\n  //\r\n  // If we hit a \"Delayed\" case, such as when we'd switch from content back into\r\n  // a fallback, then we should always suspend/restart. Transitions apply\r\n  // to this case. If none is defined, JND is used instead.\r\n  //\r\n  // If we're already showing a fallback and it gets \"retried\", allowing us to show\r\n  // another level, but there's still an inner boundary that would show a fallback,\r\n  // then we suspend/restart for 500ms since the last time we showed a fallback\r\n  // anywhere in the tree. This effectively throttles progressive loading into a\r\n  // consistent train of commits. This also gives us an opportunity to restart to\r\n  // get to the completed state slightly earlier.\r\n  //\r\n  // If there's ambiguity due to batching it's resolved in preference of:\r\n  // 1) \"delayed\", 2) \"initial render\", 3) \"retry\".\r\n  //\r\n  // We want to ensure that a \"busy\" state doesn't get force committed. We want to\r\n  // ensure that new initial loading states can commit as soon as possible.\r\n  suspenseBoundary.flags |= ShouldCapture;\r\n  // TODO: I think we can remove this, since we now use `DidCapture` in\r\n  // the begin phase to prevent an early bailout.\r\n  suspenseBoundary.lanes = rootRenderLanes;\r\n  return suspenseBoundary;\r\n}\r\n\r\nfunction throwException(\r\n  root: FiberRoot,\r\n  returnFiber: Fiber,\r\n  sourceFiber: Fiber,\r\n  value: mixed,\r\n  rootRenderLanes: Lanes,\r\n): void {\r\n  // The source fiber did not complete.\r\n  sourceFiber.flags |= Incomplete;\r\n\r\n  if (enableUpdaterTracking) {\r\n    if (isDevToolsPresent) {\r\n      // If we have pending work still, restore the original updaters\r\n      restorePendingUpdaters(root, rootRenderLanes);\r\n    }\r\n  }\r\n\r\n  if (\r\n    value !== null &&\r\n    typeof value === 'object' &&\r\n    typeof value.then === 'function'\r\n  ) {\r\n    // This is a wakeable. The component suspended.\r\n    const wakeable: Wakeable = (value: any);\r\n    resetSuspendedComponent(sourceFiber, rootRenderLanes);\r\n\r\n    if (__DEV__) {\r\n      if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {\r\n        markDidThrowWhileHydratingDEV();\r\n      }\r\n    }\r\n\r\n    if (__DEV__) {\r\n      if (enableDebugTracing) {\r\n        if (sourceFiber.mode & DebugTracingMode) {\r\n          const name = getComponentNameFromFiber(sourceFiber) || 'Unknown';\r\n          logComponentSuspended(name, wakeable);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Schedule the nearest Suspense to re-render the timed out view.\r\n    const suspenseBoundary = getSuspenseHandler();\r\n    if (suspenseBoundary !== null) {\r\n      switch (suspenseBoundary.tag) {\r\n        case SuspenseComponent: {\r\n          suspenseBoundary.flags &= ~ForceClientRender;\r\n          markSuspenseBoundaryShouldCapture(\r\n            suspenseBoundary,\r\n            returnFiber,\r\n            sourceFiber,\r\n            root,\r\n            rootRenderLanes,\r\n          );\r\n          // Retry listener\r\n          //\r\n          // If the fallback does commit, we need to attach a different type of\r\n          // listener. This one schedules an update on the Suspense boundary to\r\n          // turn the fallback state off.\r\n          //\r\n          // Stash the wakeable on the boundary fiber so we can access it in the\r\n          // commit phase.\r\n          //\r\n          // When the wakeable resolves, we'll attempt to render the boundary\r\n          // again (\"retry\").\r\n          const wakeables: Set<Wakeable> | null = (suspenseBoundary.updateQueue: any);\r\n          if (wakeables === null) {\r\n            suspenseBoundary.updateQueue = new Set([wakeable]);\r\n          } else {\r\n            wakeables.add(wakeable);\r\n          }\r\n          break;\r\n        }\r\n        case OffscreenComponent: {\r\n          if (suspenseBoundary.mode & ConcurrentMode) {\r\n            suspenseBoundary.flags |= ShouldCapture;\r\n            const offscreenQueue: OffscreenQueue | null = (suspenseBoundary.updateQueue: any);\r\n            if (offscreenQueue === null) {\r\n              const newOffscreenQueue: OffscreenQueue = {\r\n                transitions: null,\r\n                markerInstances: null,\r\n                wakeables: new Set([wakeable]),\r\n              };\r\n              suspenseBoundary.updateQueue = newOffscreenQueue;\r\n            } else {\r\n              const wakeables = offscreenQueue.wakeables;\r\n              if (wakeables === null) {\r\n                offscreenQueue.wakeables = new Set([wakeable]);\r\n              } else {\r\n                wakeables.add(wakeable);\r\n              }\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        // eslint-disable-next-line no-fallthrough\r\n        default: {\r\n          throw new Error(\r\n            `Unexpected Suspense handler tag (${suspenseBoundary.tag}). This ` +\r\n              'is a bug in React.',\r\n          );\r\n        }\r\n      }\r\n      // We only attach ping listeners in concurrent mode. Legacy Suspense always\r\n      // commits fallbacks synchronously, so there are no pings.\r\n      if (suspenseBoundary.mode & ConcurrentMode) {\r\n        attachPingListener(root, wakeable, rootRenderLanes);\r\n      }\r\n      return;\r\n    } else {\r\n      // No boundary was found. Unless this is a sync update, this is OK.\r\n      // We can suspend and wait for more data to arrive.\r\n\r\n      if (!includesSyncLane(rootRenderLanes)) {\r\n        // This is not a sync update. Suspend. Since we're not activating a\r\n        // Suspense boundary, this will unwind all the way to the root without\r\n        // performing a second pass to render a fallback. (This is arguably how\r\n        // refresh transitions should work, too, since we're not going to commit\r\n        // the fallbacks anyway.)\r\n        //\r\n        // This case also applies to initial hydration.\r\n        attachPingListener(root, wakeable, rootRenderLanes);\r\n        renderDidSuspendDelayIfPossible();\r\n        return;\r\n      }\r\n\r\n      // This is a sync/discrete update. We treat this case like an error\r\n      // because discrete renders are expected to produce a complete tree\r\n      // synchronously to maintain consistency with external state.\r\n      const uncaughtSuspenseError = new Error(\r\n        'A component suspended while responding to synchronous input. This ' +\r\n          'will cause the UI to be replaced with a loading indicator. To ' +\r\n          'fix, updates that suspend should be wrapped ' +\r\n          'with startTransition.',\r\n      );\r\n\r\n      // If we're outside a transition, fall through to the regular error path.\r\n      // The error will be caught by the nearest suspense boundary.\r\n      value = uncaughtSuspenseError;\r\n    }\r\n  } else {\r\n    // This is a regular error, not a Suspense wakeable.\r\n    if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {\r\n      markDidThrowWhileHydratingDEV();\r\n      const suspenseBoundary = getSuspenseHandler();\r\n      // If the error was thrown during hydration, we may be able to recover by\r\n      // discarding the dehydrated content and switching to a client render.\r\n      // Instead of surfacing the error, find the nearest Suspense boundary\r\n      // and render it again without hydration.\r\n      if (suspenseBoundary !== null) {\r\n        if ((suspenseBoundary.flags & ShouldCapture) === NoFlags) {\r\n          // Set a flag to indicate that we should try rendering the normal\r\n          // children again, not the fallback.\r\n          suspenseBoundary.flags |= ForceClientRender;\r\n        }\r\n        markSuspenseBoundaryShouldCapture(\r\n          suspenseBoundary,\r\n          returnFiber,\r\n          sourceFiber,\r\n          root,\r\n          rootRenderLanes,\r\n        );\r\n\r\n        // Even though the user may not be affected by this error, we should\r\n        // still log it so it can be fixed.\r\n        queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));\r\n        return;\r\n      }\r\n    } else {\r\n      // Otherwise, fall through to the error path.\r\n    }\r\n  }\r\n\r\n  value = createCapturedValueAtFiber(value, sourceFiber);\r\n  renderDidError(value);\r\n\r\n  // We didn't find a boundary that could handle this type of exception. Start\r\n  // over and traverse parent path again, this time treating the exception\r\n  // as an error.\r\n  let workInProgress = returnFiber;\r\n  do {\r\n    switch (workInProgress.tag) {\r\n      case HostRoot: {\r\n        const errorInfo = value;\r\n        workInProgress.flags |= ShouldCapture;\r\n        const lane = pickArbitraryLane(rootRenderLanes);\r\n        workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\r\n        const update = createRootErrorUpdate(workInProgress, errorInfo, lane);\r\n        enqueueCapturedUpdate(workInProgress, update);\r\n        return;\r\n      }\r\n      case ClassComponent:\r\n        // Capture and retry\r\n        const errorInfo = value;\r\n        const ctor = workInProgress.type;\r\n        const instance = workInProgress.stateNode;\r\n        if (\r\n          (workInProgress.flags & DidCapture) === NoFlags &&\r\n          (typeof ctor.getDerivedStateFromError === 'function' ||\r\n            (instance !== null &&\r\n              typeof instance.componentDidCatch === 'function' &&\r\n              !isAlreadyFailedLegacyErrorBoundary(instance)))\r\n        ) {\r\n          workInProgress.flags |= ShouldCapture;\r\n          const lane = pickArbitraryLane(rootRenderLanes);\r\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\r\n          // Schedule the error boundary to re-render using updated state\r\n          const update = createClassErrorUpdate(\r\n            workInProgress,\r\n            errorInfo,\r\n            lane,\r\n          );\r\n          enqueueCapturedUpdate(workInProgress, update);\r\n          return;\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    workInProgress = workInProgress.return;\r\n  } while (workInProgress !== null);\r\n}\r\n\r\nexport {throwException, createRootErrorUpdate, createClassErrorUpdate};\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\r\nimport type {Lanes} from './ReactFiberLane.old';\r\nimport type {StackCursor} from './ReactFiberStack.old';\r\nimport type {Cache, SpawnedCachePool} from './ReactFiberCacheComponent.old';\r\nimport type {Transition} from './ReactFiberTracingMarkerComponent.old';\r\n\r\nimport {enableCache, enableTransitionTracing} from 'shared/ReactFeatureFlags';\r\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\r\nimport {createCursor, push, pop} from './ReactFiberStack.old';\r\nimport {\r\n  getWorkInProgressRoot,\r\n  getWorkInProgressTransitions,\r\n} from './ReactFiberWorkLoop.old';\r\nimport {\r\n  createCache,\r\n  retainCache,\r\n  CacheContext,\r\n} from './ReactFiberCacheComponent.old';\r\n\r\n// When retrying a Suspense/Offscreen boundary, we restore the cache that was\r\n// used during the previous render by placing it here, on the stack.\r\nconst resumedCache: StackCursor<Cache | null> = createCursor(null);\r\n\r\n// During the render/synchronous commit phase, we don't actually process the\r\n// transitions. Therefore, we want to lazily combine transitions. Instead of\r\n// comparing the arrays of transitions when we combine them and storing them\r\n// and filtering out the duplicates, we will instead store the unprocessed transitions\r\n// in an array and actually filter them in the passive phase.\r\nconst transitionStack: StackCursor<Array<Transition> | null> = createCursor(\r\n  null,\r\n);\r\n\r\nfunction peekCacheFromPool(): Cache | null {\r\n  if (!enableCache) {\r\n    return (null: any);\r\n  }\r\n\r\n  // Check if the cache pool already has a cache we can use.\r\n\r\n  // If we're rendering inside a Suspense boundary that is currently hidden,\r\n  // we should use the same cache that we used during the previous render, if\r\n  // one exists.\r\n  const cacheResumedFromPreviousRender = resumedCache.current;\r\n  if (cacheResumedFromPreviousRender !== null) {\r\n    return cacheResumedFromPreviousRender;\r\n  }\r\n\r\n  // Otherwise, check the root's cache pool.\r\n  const root = (getWorkInProgressRoot(): any);\r\n  const cacheFromRootCachePool = root.pooledCache;\r\n\r\n  return cacheFromRootCachePool;\r\n}\r\n\r\nexport function requestCacheFromPool(renderLanes: Lanes): Cache {\r\n  // Similar to previous function, except if there's not already a cache in the\r\n  // pool, we allocate a new one.\r\n  const cacheFromPool = peekCacheFromPool();\r\n  if (cacheFromPool !== null) {\r\n    return cacheFromPool;\r\n  }\r\n\r\n  // Create a fresh cache and add it to the root cache pool. A cache can have\r\n  // multiple owners:\r\n  // - A cache pool that lives on the FiberRoot. This is where all fresh caches\r\n  //   are originally created (TODO: except during refreshes, until we implement\r\n  //   this correctly). The root takes ownership immediately when the cache is\r\n  //   created. Conceptually, root.pooledCache is an Option<Arc<Cache>> (owned),\r\n  //   and the return value of this function is a &Arc<Cache> (borrowed).\r\n  // - One of several fiber types: host root, cache boundary, suspense\r\n  //   component. These retain and release in the commit phase.\r\n\r\n  const root = (getWorkInProgressRoot(): any);\r\n  const freshCache = createCache();\r\n  root.pooledCache = freshCache;\r\n  retainCache(freshCache);\r\n  if (freshCache !== null) {\r\n    root.pooledCacheLanes |= renderLanes;\r\n  }\r\n  return freshCache;\r\n}\r\n\r\nexport function pushRootTransition(\r\n  workInProgress: Fiber,\r\n  root: FiberRoot,\r\n  renderLanes: Lanes,\r\n) {\r\n  if (enableTransitionTracing) {\r\n    const rootTransitions = getWorkInProgressTransitions();\r\n    push(transitionStack, rootTransitions, workInProgress);\r\n  }\r\n}\r\n\r\nexport function popRootTransition(\r\n  workInProgress: Fiber,\r\n  root: FiberRoot,\r\n  renderLanes: Lanes,\r\n) {\r\n  if (enableTransitionTracing) {\r\n    pop(transitionStack, workInProgress);\r\n  }\r\n}\r\n\r\nexport function pushTransition(\r\n  offscreenWorkInProgress: Fiber,\r\n  prevCachePool: SpawnedCachePool | null,\r\n  newTransitions: Array<Transition> | null,\r\n): void {\r\n  if (enableCache) {\r\n    if (prevCachePool === null) {\r\n      push(resumedCache, resumedCache.current, offscreenWorkInProgress);\r\n    } else {\r\n      push(resumedCache, prevCachePool.pool, offscreenWorkInProgress);\r\n    }\r\n  }\r\n\r\n  if (enableTransitionTracing) {\r\n    if (transitionStack.current === null) {\r\n      push(transitionStack, newTransitions, offscreenWorkInProgress);\r\n    } else if (newTransitions === null) {\r\n      push(transitionStack, transitionStack.current, offscreenWorkInProgress);\r\n    } else {\r\n      push(\r\n        transitionStack,\r\n        transitionStack.current.concat(newTransitions),\r\n        offscreenWorkInProgress,\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport function popTransition(workInProgress: Fiber, current: Fiber | null) {\r\n  if (current !== null) {\r\n    if (enableTransitionTracing) {\r\n      pop(transitionStack, workInProgress);\r\n    }\r\n\r\n    if (enableCache) {\r\n      pop(resumedCache, workInProgress);\r\n    }\r\n  }\r\n}\r\n\r\nexport function getPendingTransitions(): Array<Transition> | null {\r\n  if (!enableTransitionTracing) {\r\n    return null;\r\n  }\r\n\r\n  return transitionStack.current;\r\n}\r\n\r\nexport function getSuspendedCache(): SpawnedCachePool | null {\r\n  if (!enableCache) {\r\n    return null;\r\n  }\r\n  // This function is called when a Suspense boundary suspends. It returns the\r\n  // cache that would have been used to render fresh data during this render,\r\n  // if there was any, so that we can resume rendering with the same cache when\r\n  // we receive more data.\r\n  const cacheFromPool = peekCacheFromPool();\r\n  if (cacheFromPool === null) {\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    // We must also save the parent, so that when we resume we can detect\r\n    // a refresh.\r\n    parent: isPrimaryRenderer\r\n      ? CacheContext._currentValue\r\n      : CacheContext._currentValue2,\r\n    pool: cacheFromPool,\r\n  };\r\n}\r\n\r\nexport function getOffscreenDeferredCache(): SpawnedCachePool | null {\r\n  if (!enableCache) {\r\n    return null;\r\n  }\r\n\r\n  const cacheFromPool = peekCacheFromPool();\r\n  if (cacheFromPool === null) {\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    // We must also store the parent, so that when we resume we can detect\r\n    // a refresh.\r\n    parent: isPrimaryRenderer\r\n      ? CacheContext._currentValue\r\n      : CacheContext._currentValue2,\r\n    pool: cacheFromPool,\r\n  };\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {\r\n  ReactProviderType,\r\n  ReactContext,\r\n  ReactNodeList,\r\n} from 'shared/ReactTypes';\r\nimport type {LazyComponent as LazyComponentType} from 'react/src/ReactLazy';\r\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\r\nimport type {TypeOfMode} from './ReactTypeOfMode';\r\nimport type {Lanes, Lane} from './ReactFiberLane.old';\r\nimport type {MutableSource} from 'shared/ReactTypes';\r\nimport type {\r\n  SuspenseState,\r\n  SuspenseListRenderState,\r\n  SuspenseListTailMode,\r\n} from './ReactFiberSuspenseComponent.old';\r\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\r\nimport type {\r\n  OffscreenProps,\r\n  OffscreenState,\r\n  OffscreenQueue,\r\n  OffscreenInstance,\r\n} from './ReactFiberOffscreenComponent';\r\nimport type {\r\n  Cache,\r\n  CacheComponentState,\r\n  SpawnedCachePool,\r\n} from './ReactFiberCacheComponent.old';\r\nimport type {UpdateQueue} from './ReactFiberClassUpdateQueue.old';\r\nimport type {RootState} from './ReactFiberRoot.old';\r\nimport type {TracingMarkerInstance} from './ReactFiberTracingMarkerComponent.old';\r\nimport {\r\n  enableCPUSuspense,\r\n  enableUseMutableSource,\r\n} from 'shared/ReactFeatureFlags';\r\n\r\nimport checkPropTypes from 'shared/checkPropTypes';\r\nimport {\r\n  markComponentRenderStarted,\r\n  markComponentRenderStopped,\r\n  setIsStrictModeForDevtools,\r\n} from './ReactFiberDevToolsHook.old';\r\nimport {\r\n  IndeterminateComponent,\r\n  FunctionComponent,\r\n  ClassComponent,\r\n  HostRoot,\r\n  HostComponent,\r\n  HostText,\r\n  HostPortal,\r\n  ForwardRef,\r\n  Fragment,\r\n  Mode,\r\n  ContextProvider,\r\n  ContextConsumer,\r\n  Profiler,\r\n  SuspenseComponent,\r\n  SuspenseListComponent,\r\n  MemoComponent,\r\n  SimpleMemoComponent,\r\n  LazyComponent,\r\n  IncompleteClassComponent,\r\n  ScopeComponent,\r\n  OffscreenComponent,\r\n  LegacyHiddenComponent,\r\n  CacheComponent,\r\n  TracingMarkerComponent,\r\n} from './ReactWorkTags';\r\nimport {\r\n  NoFlags,\r\n  PerformedWork,\r\n  Placement,\r\n  Hydrating,\r\n  ContentReset,\r\n  DidCapture,\r\n  Update,\r\n  Ref,\r\n  RefStatic,\r\n  ChildDeletion,\r\n  ForceUpdateForLegacySuspense,\r\n  StaticMask,\r\n  ShouldCapture,\r\n  ForceClientRender,\r\n  Passive,\r\n} from './ReactFiberFlags';\r\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\r\nimport {\r\n  debugRenderPhaseSideEffectsForStrictMode,\r\n  disableLegacyContext,\r\n  disableModulePatternComponents,\r\n  enableProfilerCommitHooks,\r\n  enableProfilerTimer,\r\n  warnAboutDefaultPropsOnFunctionComponents,\r\n  enableScopeAPI,\r\n  enableCache,\r\n  enableLazyContextPropagation,\r\n  enableSchedulingProfiler,\r\n  enableTransitionTracing,\r\n  enableLegacyHidden,\r\n} from 'shared/ReactFeatureFlags';\r\nimport isArray from 'shared/isArray';\r\nimport shallowEqual from 'shared/shallowEqual';\r\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\r\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\r\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\r\nimport {REACT_LAZY_TYPE, getIteratorFn} from 'shared/ReactSymbols';\r\nimport {\r\n  getCurrentFiberOwnerNameInDevOrNull,\r\n  setIsRendering,\r\n} from './ReactCurrentFiber';\r\nimport {\r\n  resolveFunctionForHotReloading,\r\n  resolveForwardRefForHotReloading,\r\n  resolveClassForHotReloading,\r\n} from './ReactFiberHotReloading.old';\r\n\r\nimport {\r\n  mountChildFibers,\r\n  reconcileChildFibers,\r\n  cloneChildFibers,\r\n} from './ReactChildFiber.old';\r\nimport {\r\n  processUpdateQueue,\r\n  cloneUpdateQueue,\r\n  initializeUpdateQueue,\r\n  enqueueCapturedUpdate,\r\n} from './ReactFiberClassUpdateQueue.old';\r\nimport {\r\n  NoLane,\r\n  NoLanes,\r\n  SyncLane,\r\n  OffscreenLane,\r\n  DefaultHydrationLane,\r\n  SomeRetryLane,\r\n  NoTimestamp,\r\n  includesSomeLane,\r\n  laneToLanes,\r\n  removeLanes,\r\n  mergeLanes,\r\n  getBumpedLaneForHydration,\r\n  pickArbitraryLane,\r\n} from './ReactFiberLane.old';\r\nimport {\r\n  ConcurrentMode,\r\n  NoMode,\r\n  ProfileMode,\r\n  StrictLegacyMode,\r\n} from './ReactTypeOfMode';\r\nimport {\r\n  shouldSetTextContent,\r\n  isSuspenseInstancePending,\r\n  isSuspenseInstanceFallback,\r\n  getSuspenseInstanceFallbackErrorDetails,\r\n  registerSuspenseInstanceRetry,\r\n  supportsHydration,\r\n  isPrimaryRenderer,\r\n} from './ReactFiberHostConfig';\r\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\r\nimport {shouldError, shouldSuspend} from './ReactFiberReconciler';\r\nimport {pushHostContext, pushHostContainer} from './ReactFiberHostContext.old';\r\nimport {\r\n  suspenseStackCursor,\r\n  pushSuspenseListContext,\r\n  ForceSuspenseFallback,\r\n  hasSuspenseListContext,\r\n  setDefaultShallowSuspenseListContext,\r\n  setShallowSuspenseListContext,\r\n  pushPrimaryTreeSuspenseHandler,\r\n  pushFallbackTreeSuspenseHandler,\r\n  pushOffscreenSuspenseHandler,\r\n  reuseSuspenseHandlerOnStack,\r\n  popSuspenseHandler,\r\n} from './ReactFiberSuspenseContext.old';\r\nimport {\r\n  pushHiddenContext,\r\n  reuseHiddenContextOnStack,\r\n} from './ReactFiberHiddenContext.old';\r\nimport {findFirstSuspended} from './ReactFiberSuspenseComponent.old';\r\nimport {\r\n  pushProvider,\r\n  propagateContextChange,\r\n  lazilyPropagateParentContextChanges,\r\n  propagateParentContextChangesToDeferredTree,\r\n  checkIfContextChanged,\r\n  readContext,\r\n  prepareToReadContext,\r\n  scheduleContextWorkOnParentPath,\r\n} from './ReactFiberNewContext.old';\r\nimport {\r\n  renderWithHooks,\r\n  checkDidRenderIdHook,\r\n  bailoutHooks,\r\n} from './ReactFiberHooks.old';\r\nimport {stopProfilerTimerIfRunning} from './ReactProfilerTimer.old';\r\nimport {\r\n  getMaskedContext,\r\n  getUnmaskedContext,\r\n  hasContextChanged as hasLegacyContextChanged,\r\n  pushContextProvider as pushLegacyContextProvider,\r\n  isContextProvider as isLegacyContextProvider,\r\n  pushTopLevelContextObject,\r\n  invalidateContextProvider,\r\n} from './ReactFiberContext.old';\r\nimport {\r\n  getIsHydrating,\r\n  enterHydrationState,\r\n  reenterHydrationStateFromDehydratedSuspenseInstance,\r\n  resetHydrationState,\r\n  tryToClaimNextHydratableInstance,\r\n  warnIfHydrating,\r\n  queueHydrationError,\r\n} from './ReactFiberHydrationContext.old';\r\nimport {\r\n  adoptClassInstance,\r\n  constructClassInstance,\r\n  mountClassInstance,\r\n  resumeMountClassInstance,\r\n  updateClassInstance,\r\n} from './ReactFiberClassComponent.old';\r\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\r\nimport {\r\n  resolveLazyComponentTag,\r\n  createFiberFromTypeAndProps,\r\n  createFiberFromFragment,\r\n  createFiberFromOffscreen,\r\n  createWorkInProgress,\r\n  isSimpleFunctionComponent,\r\n} from './ReactFiber.old';\r\nimport {\r\n  retryDehydratedSuspenseBoundary,\r\n  scheduleUpdateOnFiber,\r\n  renderDidSuspendDelayIfPossible,\r\n  markSkippedUpdateLanes,\r\n  getWorkInProgressRoot,\r\n} from './ReactFiberWorkLoop.old';\r\nimport {enqueueConcurrentRenderForLane} from './ReactFiberConcurrentUpdates.old';\r\nimport {setWorkInProgressVersion} from './ReactMutableSource.old';\r\nimport {pushCacheProvider, CacheContext} from './ReactFiberCacheComponent.old';\r\nimport {\r\n  createCapturedValue,\r\n  createCapturedValueAtFiber,\r\n  type CapturedValue,\r\n} from './ReactCapturedValue';\r\nimport {createClassErrorUpdate} from './ReactFiberThrow.old';\r\nimport is from 'shared/objectIs';\r\nimport {\r\n  getForksAtLevel,\r\n  isForkedChild,\r\n  pushTreeId,\r\n  pushMaterializedTreeId,\r\n} from './ReactFiberTreeContext.old';\r\nimport {\r\n  requestCacheFromPool,\r\n  pushRootTransition,\r\n  getSuspendedCache,\r\n  pushTransition,\r\n  getOffscreenDeferredCache,\r\n  getPendingTransitions,\r\n} from './ReactFiberTransition.old';\r\nimport {\r\n  getMarkerInstances,\r\n  pushMarkerInstance,\r\n  pushRootMarkerInstance,\r\n  TransitionTracingMarker,\r\n} from './ReactFiberTracingMarkerComponent.old';\r\n\r\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\r\n\r\nlet didReceiveUpdate: boolean = false;\r\n\r\nlet didWarnAboutBadClass;\r\nlet didWarnAboutModulePatternComponent;\r\nlet didWarnAboutContextTypeOnFunctionComponent;\r\nlet didWarnAboutGetDerivedStateOnFunctionComponent;\r\nlet didWarnAboutFunctionRefs;\r\nexport let didWarnAboutReassigningProps: boolean;\r\nlet didWarnAboutRevealOrder;\r\nlet didWarnAboutTailOptions;\r\nlet didWarnAboutDefaultPropsOnFunctionComponent;\r\n\r\nif (__DEV__) {\r\n  didWarnAboutBadClass = {};\r\n  didWarnAboutModulePatternComponent = {};\r\n  didWarnAboutContextTypeOnFunctionComponent = {};\r\n  didWarnAboutGetDerivedStateOnFunctionComponent = {};\r\n  didWarnAboutFunctionRefs = {};\r\n  didWarnAboutReassigningProps = false;\r\n  didWarnAboutRevealOrder = {};\r\n  didWarnAboutTailOptions = {};\r\n  didWarnAboutDefaultPropsOnFunctionComponent = {};\r\n}\r\n\r\nexport function reconcileChildren(\r\n  current: Fiber | null,\r\n  workInProgress: Fiber,\r\n  nextChildren: any,\r\n  renderLanes: Lanes,\r\n) {\r\n  if (current === null) {\r\n    // If this is a fresh new component that hasn't been rendered yet, we\r\n    // won't update its child set by applying minimal side-effects. Instead,\r\n    // we will add them all to the child before it gets rendered. That means\r\n    // we can optimize this reconciliation pass by not tracking side-effects.\r\n    workInProgress.child = mountChildFibers(\r\n      workInProgress,\r\n      null,\r\n      nextChildren,\r\n      renderLanes,\r\n    );\r\n  } else {\r\n    // If the current child is the same as the work in progress, it means that\r\n    // we haven't yet started any work on these children. Therefore, we use\r\n    // the clone algorithm to create a copy of all the current children.\r\n\r\n    // If we had any progressed work already, that is invalid at this point so\r\n    // let's throw it out.\r\n    workInProgress.child = reconcileChildFibers(\r\n      workInProgress,\r\n      current.child,\r\n      nextChildren,\r\n      renderLanes,\r\n    );\r\n  }\r\n}\r\n\r\nfunction forceUnmountCurrentAndReconcile(\r\n  current: Fiber,\r\n  workInProgress: Fiber,\r\n  nextChildren: any,\r\n  renderLanes: Lanes,\r\n) {\r\n  // This function is fork of reconcileChildren. It's used in cases where we\r\n  // want to reconcile without matching against the existing set. This has the\r\n  // effect of all current children being unmounted; even if the type and key\r\n  // are the same, the old child is unmounted and a new child is created.\r\n  //\r\n  // To do this, we're going to go through the reconcile algorithm twice. In\r\n  // the first pass, we schedule a deletion for all the current children by\r\n  // passing null.\r\n  workInProgress.child = reconcileChildFibers(\r\n    workInProgress,\r\n    current.child,\r\n    null,\r\n    renderLanes,\r\n  );\r\n  // In the second pass, we mount the new children. The trick here is that we\r\n  // pass null in place of where we usually pass the current child set. This has\r\n  // the effect of remounting all children regardless of whether their\r\n  // identities match.\r\n  workInProgress.child = reconcileChildFibers(\r\n    workInProgress,\r\n    null,\r\n    nextChildren,\r\n    renderLanes,\r\n  );\r\n}\r\n\r\nfunction updateForwardRef(\r\n  current: Fiber | null,\r\n  workInProgress: Fiber,\r\n  Component: any,\r\n  nextProps: any,\r\n  renderLanes: Lanes,\r\n) {\r\n  // TODO: current can be non-null here even if the component\r\n  // hasn't yet mounted. This happens after the first render suspends.\r\n  // We'll need to figure out if this is fine or can cause issues.\r\n\r\n  if (__DEV__) {\r\n    if (workInProgress.type !== workInProgress.elementType) {\r\n      // Lazy component props can't be validated in createElement\r\n      // because they're only guaranteed to be resolved here.\r\n      const innerPropTypes = Component.propTypes;\r\n      if (innerPropTypes) {\r\n        checkPropTypes(\r\n          innerPropTypes,\r\n          nextProps, // Resolved props\r\n          'prop',\r\n          getComponentNameFromType(Component),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  const render = Component.render;\r\n  const ref = workInProgress.ref;\r\n\r\n  // The rest is a fork of updateFunctionComponent\r\n  let nextChildren;\r\n  let hasId;\r\n  prepareToReadContext(workInProgress, renderLanes);\r\n  if (enableSchedulingProfiler) {\r\n    markComponentRenderStarted(workInProgress);\r\n  }\r\n  if (__DEV__) {\r\n    ReactCurrentOwner.current = workInProgress;\r\n    setIsRendering(true);\r\n    nextChildren = renderWithHooks(\r\n      current,\r\n      workInProgress,\r\n      render,\r\n      nextProps,\r\n      ref,\r\n      renderLanes,\r\n    );\r\n    hasId = checkDidRenderIdHook();\r\n    if (\r\n      debugRenderPhaseSideEffectsForStrictMode &&\r\n      workInProgress.mode & StrictLegacyMode\r\n    ) {\r\n      setIsStrictModeForDevtools(true);\r\n      try {\r\n        nextChildren = renderWithHooks(\r\n          current,\r\n          workInProgress,\r\n          render,\r\n          nextProps,\r\n          ref,\r\n          renderLanes,\r\n        );\r\n        hasId = checkDidRenderIdHook();\r\n      } finally {\r\n        setIsStrictModeForDevtools(false);\r\n      }\r\n    }\r\n    setIsRendering(false);\r\n  } else {\r\n    nextChildren = renderWithHooks(\r\n      current,\r\n      workInProgress,\r\n      render,\r\n      nextProps,\r\n      ref,\r\n      renderLanes,\r\n    );\r\n    hasId = checkDidRenderIdHook();\r\n  }\r\n  if (enableSchedulingProfiler) {\r\n    markComponentRenderStopped();\r\n  }\r\n\r\n  if (current !== null && !didReceiveUpdate) {\r\n    bailoutHooks(current, workInProgress, renderLanes);\r\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\r\n  }\r\n\r\n  if (getIsHydrating() && hasId) {\r\n    pushMaterializedTreeId(workInProgress);\r\n  }\r\n\r\n  // React DevTools reads this flag.\r\n  workInProgress.flags |= PerformedWork;\r\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\r\n  return workInProgress.child;\r\n}\r\n\r\nfunction updateMemoComponent(\r\n  current: Fiber | null,\r\n  workInProgress: Fiber,\r\n  Component: any,\r\n  nextProps: any,\r\n  renderLanes: Lanes,\r\n): null | Fiber {\r\n  if (current === null) {\r\n    const type = Component.type;\r\n    if (\r\n      isSimpleFunctionComponent(type) &&\r\n      Component.compare === null &&\r\n      // SimpleMemoComponent codepath doesn't resolve outer props either.\r\n      Component.defaultProps === undefined\r\n    ) {\r\n      let resolvedType = type;\r\n      if (__DEV__) {\r\n        resolvedType = resolveFunctionForHotReloading(type);\r\n      }\r\n      // If this is a plain function component without default props,\r\n      // and with only the default shallow comparison, we upgrade it\r\n      // to a SimpleMemoComponent to allow fast path updates.\r\n      workInProgress.tag = SimpleMemoComponent;\r\n      workInProgress.type = resolvedType;\r\n      if (__DEV__) {\r\n        validateFunctionComponentInDev(workInProgress, type);\r\n      }\r\n      return updateSimpleMemoComponent(\r\n        current,\r\n        workInProgress,\r\n        resolvedType,\r\n        nextProps,\r\n        renderLanes,\r\n      );\r\n    }\r\n    if (__DEV__) {\r\n      const innerPropTypes = type.propTypes;\r\n      if (innerPropTypes) {\r\n        // Inner memo component props aren't currently validated in createElement.\r\n        // We could move it there, but we'd still need this for lazy code path.\r\n        checkPropTypes(\r\n          innerPropTypes,\r\n          nextProps, // Resolved props\r\n          'prop',\r\n          getComponentNameFromType(type),\r\n        );\r\n      }\r\n    }\r\n    const child = createFiberFromTypeAndProps(\r\n      Component.type,\r\n      null,\r\n      nextProps,\r\n      workInProgress,\r\n      workInProgress.mode,\r\n      renderLanes,\r\n    );\r\n    child.ref = workInProgress.ref;\r\n    child.return = workInProgress;\r\n    workInProgress.child = child;\r\n    return child;\r\n  }\r\n  if (__DEV__) {\r\n    const type = Component.type;\r\n    const innerPropTypes = type.propTypes;\r\n    if (innerPropTypes) {\r\n      // Inner memo component props aren't currently validated in createElement.\r\n      // We could move it there, but we'd still need this for lazy code path.\r\n      checkPropTypes(\r\n        innerPropTypes,\r\n        nextProps, // Resolved props\r\n        'prop',\r\n        getComponentNameFromType(type),\r\n      );\r\n    }\r\n  }\r\n  const currentChild = ((current.child: any): Fiber); // This is always exactly one child\r\n  const hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(\r\n    current,\r\n    renderLanes,\r\n  );\r\n  if (!hasScheduledUpdateOrContext) {\r\n    // This will be the props with resolved defaultProps,\r\n    // unlike current.memoizedProps which will be the unresolved ones.\r\n    const prevProps = currentChild.memoizedProps;\r\n    // Default to shallow comparison\r\n    let compare = Component.compare;\r\n    compare = compare !== null ? compare : shallowEqual;\r\n    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\r\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\r\n    }\r\n  }\r\n  // React DevTools reads this flag.\r\n  workInProgress.flags |= PerformedWork;\r\n  const newChild = createWorkInProgress(currentChild, nextProps);\r\n  newChild.ref = workInProgress.ref;\r\n  newChild.return = workInProgress;\r\n  workInProgress.child = newChild;\r\n  return newChild;\r\n}\r\n\r\nfunction updateSimpleMemoComponent(\r\n  current: Fiber | null,\r\n  workInProgress: Fiber,\r\n  Component: any,\r\n  nextProps: any,\r\n  renderLanes: Lanes,\r\n): null | Fiber {\r\n  // TODO: current can be non-null here even if the component\r\n  // hasn't yet mounted. This happens when the inner render suspends.\r\n  // We'll need to figure out if this is fine or can cause issues.\r\n\r\n  if (__DEV__) {\r\n    if (workInProgress.type !== workInProgress.elementType) {\r\n      // Lazy component props can't be validated in createElement\r\n      // because they're only guaranteed to be resolved here.\r\n      let outerMemoType = workInProgress.elementType;\r\n      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {\r\n        // We warn when you define propTypes on lazy()\r\n        // so let's just skip over it to find memo() outer wrapper.\r\n        // Inner props for memo are validated later.\r\n        const lazyComponent: LazyComponentType<any, any> = outerMemoType;\r\n        const payload = lazyComponent._payload;\r\n        const init = lazyComponent._init;\r\n        try {\r\n          outerMemoType = init(payload);\r\n        } catch (x) {\r\n          outerMemoType = null;\r\n        }\r\n        // Inner propTypes will be validated in the function component path.\r\n        const outerPropTypes = outerMemoType && (outerMemoType: any).propTypes;\r\n        if (outerPropTypes) {\r\n          checkPropTypes(\r\n            outerPropTypes,\r\n            nextProps, // Resolved (SimpleMemoComponent has no defaultProps)\r\n            'prop',\r\n            getComponentNameFromType(outerMemoType),\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n  if (current !== null) {\r\n    const prevProps = current.memoizedProps;\r\n    if (\r\n      shallowEqual(prevProps, nextProps) &&\r\n      current.ref === workInProgress.ref &&\r\n      // Prevent bailout if the implementation changed due to hot reload.\r\n      (__DEV__ ? workInProgress.type === current.type : true)\r\n    ) {\r\n      didReceiveUpdate = false;\r\n\r\n      // The props are shallowly equal. Reuse the previous props object, like we\r\n      // would during a normal fiber bailout.\r\n      //\r\n      // We don't have strong guarantees that the props object is referentially\r\n      // equal during updates where we can't bail out anyway — like if the props\r\n      // are shallowly equal, but there's a local state or context update in the\r\n      // same batch.\r\n      //\r\n      // However, as a principle, we should aim to make the behavior consistent\r\n      // across different ways of memoizing a component. For example, React.memo\r\n      // has a different internal Fiber layout if you pass a normal function\r\n      // component (SimpleMemoComponent) versus if you pass a different type\r\n      // like forwardRef (MemoComponent). But this is an implementation detail.\r\n      // Wrapping a component in forwardRef (or React.lazy, etc) shouldn't\r\n      // affect whether the props object is reused during a bailout.\r\n      workInProgress.pendingProps = nextProps = prevProps;\r\n\r\n      if (!checkScheduledUpdateOrContext(current, renderLanes)) {\r\n        // The pending lanes were cleared at the beginning of beginWork. We're\r\n        // about to bail out, but there might be other lanes that weren't\r\n        // included in the current render. Usually, the priority level of the\r\n        // remaining updates is accumulated during the evaluation of the\r\n        // component (i.e. when processing the update queue). But since since\r\n        // we're bailing out early *without* evaluating the component, we need\r\n        // to account for it here, too. Reset to the value of the current fiber.\r\n        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,\r\n        // because a MemoComponent fiber does not have hooks or an update queue;\r\n        // rather, it wraps around an inner component, which may or may not\r\n        // contains hooks.\r\n        // TODO: Move the reset at in beginWork out of the common path so that\r\n        // this is no longer necessary.\r\n        workInProgress.lanes = current.lanes;\r\n        return bailoutOnAlreadyFinishedWork(\r\n          current,\r\n          workInProgress,\r\n          renderLanes,\r\n        );\r\n      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\r\n        // This is a special case that only exists for legacy mode.\r\n        // See https://github.com/facebook/react/pull/19216.\r\n        didReceiveUpdate = true;\r\n      }\r\n    }\r\n  }\r\n  return updateFunctionComponent(\r\n    current,\r\n    workInProgress,\r\n    Component,\r\n    nextProps,\r\n    renderLanes,\r\n  );\r\n}\r\n\r\nfunction updateOffscreenComponent(\r\n  current: Fiber | null,\r\n  workInProgress: Fiber,\r\n  renderLanes: Lanes,\r\n) {\r\n  const nextProps: OffscreenProps = workInProgress.pendingProps;\r\n  const nextChildren = nextProps.children;\r\n\r\n  const prevState: OffscreenState | null =\r\n    current !== null ? current.memoizedState : null;\r\n\r\n  if (\r\n    nextProps.mode === 'hidden' ||\r\n    (enableLegacyHidden && nextProps.mode === 'unstable-defer-without-hiding')\r\n  ) {\r\n    // Rendering a hidden tree.\r\n\r\n    const didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\r\n    if (didSuspend) {\r\n      // Something suspended inside a hidden tree\r\n\r\n      // Include the base lanes from the last render\r\n      const nextBaseLanes =\r\n        prevState !== null\r\n          ? mergeLanes(prevState.baseLanes, renderLanes)\r\n          : renderLanes;\r\n\r\n      if (current !== null) {\r\n        // Reset to the current children\r\n        let currentChild = (workInProgress.child = current.child);\r\n\r\n        // The current render suspended, but there may be other lanes with\r\n        // pending work. We can't read `childLanes` from the current Offscreen\r\n        // fiber because we reset it when it was deferred; however, we can read\r\n        // the pending lanes from the child fibers.\r\n        let currentChildLanes = NoLanes;\r\n        while (currentChild !== null) {\r\n          currentChildLanes = mergeLanes(\r\n            mergeLanes(currentChildLanes, currentChild.lanes),\r\n            currentChild.childLanes,\r\n          );\r\n          currentChild = currentChild.sibling;\r\n        }\r\n        const lanesWeJustAttempted = nextBaseLanes;\r\n        const remainingChildLanes = removeLanes(\r\n          currentChildLanes,\r\n          lanesWeJustAttempted,\r\n        );\r\n        workInProgress.childLanes = remainingChildLanes;\r\n      } else {\r\n        workInProgress.childLanes = NoLanes;\r\n        workInProgress.child = null;\r\n      }\r\n\r\n      return deferHiddenOffscreenComponent(\r\n        current,\r\n        workInProgress,\r\n        nextBaseLanes,\r\n        renderLanes,\r\n      );\r\n    }\r\n\r\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\r\n      // In legacy sync mode, don't defer the subtree. Render it now.\r\n      // TODO: Consider how Offscreen should work with transitions in the future\r\n      const nextState: OffscreenState = {\r\n        baseLanes: NoLanes,\r\n        cachePool: null,\r\n      };\r\n      workInProgress.memoizedState = nextState;\r\n      if (enableCache) {\r\n        // push the cache pool even though we're going to bail out\r\n        // because otherwise there'd be a context mismatch\r\n        if (current !== null) {\r\n          pushTransition(workInProgress, null, null);\r\n        }\r\n      }\r\n      reuseHiddenContextOnStack(workInProgress);\r\n      pushOffscreenSuspenseHandler(workInProgress);\r\n    } else if (!includesSomeLane(renderLanes, (OffscreenLane: Lane))) {\r\n      // We're hidden, and we're not rendering at Offscreen. We will bail out\r\n      // and resume this tree later.\r\n\r\n      // Schedule this fiber to re-render at Offscreen priority\r\n      workInProgress.lanes = workInProgress.childLanes = laneToLanes(\r\n        OffscreenLane,\r\n      );\r\n\r\n      // Include the base lanes from the last render\r\n      const nextBaseLanes =\r\n        prevState !== null\r\n          ? mergeLanes(prevState.baseLanes, renderLanes)\r\n          : renderLanes;\r\n\r\n      return deferHiddenOffscreenComponent(\r\n        current,\r\n        workInProgress,\r\n        nextBaseLanes,\r\n        renderLanes,\r\n      );\r\n    } else {\r\n      // This is the second render. The surrounding visible content has already\r\n      // committed. Now we resume rendering the hidden tree.\r\n\r\n      // Rendering at offscreen, so we can clear the base lanes.\r\n      const nextState: OffscreenState = {\r\n        baseLanes: NoLanes,\r\n        cachePool: null,\r\n      };\r\n      workInProgress.memoizedState = nextState;\r\n      if (enableCache && current !== null) {\r\n        // If the render that spawned this one accessed the cache pool, resume\r\n        // using the same cache. Unless the parent changed, since that means\r\n        // there was a refresh.\r\n        const prevCachePool = prevState !== null ? prevState.cachePool : null;\r\n        // TODO: Consider if and how Offscreen pre-rendering should\r\n        // be attributed to the transition that spawned it\r\n        pushTransition(workInProgress, prevCachePool, null);\r\n      }\r\n\r\n      // Push the lanes that were skipped when we bailed out.\r\n      if (prevState !== null) {\r\n        pushHiddenContext(workInProgress, prevState);\r\n      } else {\r\n        reuseHiddenContextOnStack(workInProgress);\r\n      }\r\n      pushOffscreenSuspenseHandler(workInProgress);\r\n    }\r\n  } else {\r\n    // Rendering a visible tree.\r\n    if (prevState !== null) {\r\n      // We're going from hidden -> visible.\r\n      let prevCachePool = null;\r\n      if (enableCache) {\r\n        // If the render that spawned this one accessed the cache pool, resume\r\n        // using the same cache. Unless the parent changed, since that means\r\n        // there was a refresh.\r\n        prevCachePool = prevState.cachePool;\r\n      }\r\n\r\n      let transitions = null;\r\n      if (enableTransitionTracing) {\r\n        // We have now gone from hidden to visible, so any transitions should\r\n        // be added to the stack to get added to any Offscreen/suspense children\r\n        const instance: OffscreenInstance | null = workInProgress.stateNode;\r\n        if (instance !== null && instance.transitions != null) {\r\n          transitions = Array.from(instance.transitions);\r\n        }\r\n      }\r\n\r\n      pushTransition(workInProgress, prevCachePool, transitions);\r\n\r\n      // Push the lanes that were skipped when we bailed out.\r\n      pushHiddenContext(workInProgress, prevState);\r\n      reuseSuspenseHandlerOnStack(workInProgress);\r\n\r\n      // Since we're not hidden anymore, reset the state\r\n      workInProgress.memoizedState = null;\r\n    } else {\r\n      // We weren't previously hidden, and we still aren't, so there's nothing\r\n      // special to do. Need to push to the stack regardless, though, to avoid\r\n      // a push/pop misalignment.\r\n\r\n      if (enableCache) {\r\n        // If the render that spawned this one accessed the cache pool, resume\r\n        // using the same cache. Unless the parent changed, since that means\r\n        // there was a refresh.\r\n        if (current !== null) {\r\n          pushTransition(workInProgress, null, null);\r\n        }\r\n      }\r\n\r\n      // We're about to bail out, but we need to push this to the stack anyway\r\n      // to avoid a push/pop misalignment.\r\n      reuseHiddenContextOnStack(workInProgress);\r\n      reuseSuspenseHandlerOnStack(workInProgress);\r\n    }\r\n  }\r\n\r\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\r\n  return workInProgress.child;\r\n}\r\n\r\nfunction deferHiddenOffscreenComponent(\r\n  current: Fiber | null,\r\n  workInProgress: Fiber,\r\n  nextBaseLanes: Lanes,\r\n  renderLanes: Lanes,\r\n) {\r\n  const nextState: OffscreenState = {\r\n    baseLanes: nextBaseLanes,\r\n    // Save the cache pool so we can resume later.\r\n    cachePool: enableCache ? getOffscreenDeferredCache() : null,\r\n  };\r\n  workInProgress.memoizedState = nextState;\r\n  if (enableCache) {\r\n    // push the cache pool even though we're going to bail out\r\n    // because otherwise there'd be a context mismatch\r\n    if (current !== null) {\r\n      pushTransition(workInProgress, null, null);\r\n    }\r\n  }\r\n\r\n  // We're about to bail out, but we need to push this to the stack anyway\r\n  // to avoid a push/pop misalignment.\r\n  reuseHiddenContextOnStack(workInProgress);\r\n\r\n  pushOffscreenSuspenseHandler(workInProgress);\r\n\r\n  if (enableLazyContextPropagation && current !== null) {\r\n    // Since this tree will resume rendering in a separate render, we need\r\n    // to propagate parent contexts now so we don't lose track of which\r\n    // ones changed.\r\n    propagateParentContextChangesToDeferredTree(\r\n      current,\r\n      workInProgress,\r\n      renderLanes,\r\n    );\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n// Note: These happen to have identical begin phases, for now. We shouldn't hold\r\n// ourselves to this constraint, though. If the behavior diverges, we should\r\n// fork the function.\r\nconst updateLegacyHiddenComponent = updateOffscreenComponent;\r\n\r\nfunction updateCacheComponent(\r\n  current: Fiber | null,\r\n  workInProgress: Fiber,\r\n  renderLanes: Lanes,\r\n) {\r\n  if (!enableCache) {\r\n    return null;\r\n  }\r\n\r\n  prepareToReadContext(workInProgress, renderLanes);\r\n  const parentCache = readContext(CacheContext);\r\n\r\n  if (current === null) {\r\n    // Initial mount. Request a fresh cache from the pool.\r\n    const freshCache = requestCacheFromPool(renderLanes);\r\n    const initialState: CacheComponentState = {\r\n      parent: parentCache,\r\n      cache: freshCache,\r\n    };\r\n    workInProgress.memoizedState = initialState;\r\n    initializeUpdateQueue(workInProgress);\r\n    pushCacheProvider(workInProgress, freshCache);\r\n  } else {\r\n    // Check for updates\r\n    if (includesSomeLane(current.lanes, renderLanes)) {\r\n      cloneUpdateQueue(current, workInProgress);\r\n      processUpdateQueue(workInProgress, null, null, renderLanes);\r\n    }\r\n    const prevState: CacheComponentState = current.memoizedState;\r\n    const nextState: CacheComponentState = workInProgress.memoizedState;\r\n\r\n    // Compare the new parent cache to the previous to see detect there was\r\n    // a refresh.\r\n    if (prevState.parent !== parentCache) {\r\n      // Refresh in parent. Update the parent.\r\n      const derivedState: CacheComponentState = {\r\n        parent: parentCache,\r\n        cache: parentCache,\r\n      };\r\n\r\n      // Copied from getDerivedStateFromProps implementation. Once the update\r\n      // queue is empty, persist the derived state onto the base state.\r\n      workInProgress.memoizedState = derivedState;\r\n      if (workInProgress.lanes === NoLanes) {\r\n        const updateQueue: UpdateQueue<any> = (workInProgress.updateQueue: any);\r\n        workInProgress.memoizedState = updateQueue.baseState = derivedState;\r\n      }\r\n\r\n      pushCacheProvider(workInProgress, parentCache);\r\n      // No need to propagate a context change because the refreshed parent\r\n      // already did.\r\n    } else {\r\n      // The parent didn't refresh. Now check if this cache did.\r\n      const nextCache = nextState.cache;\r\n      pushCacheProvider(workInProgress, nextCache);\r\n      if (nextCache !== prevState.cache) {\r\n        // This cache refreshed. Propagate a context change.\r\n        propagateContextChange(workInProgress, CacheContext, renderLanes);\r\n      }\r\n    }\r\n  }\r\n\r\n  const nextChildren = workInProgress.pendingProps.children;\r\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\r\n  return workInProgress.child;\r\n}\r\n\r\n// This should only be called if the name changes\r\nfunction updateTracingMarkerComponent(\r\n  current: Fiber | null,\r\n  workInProgress: Fiber,\r\n  renderLanes: Lanes,\r\n) {\r\n  if (!enableTransitionTracing) {\r\n    return null;\r\n  }\r\n\r\n  // TODO: (luna) Only update the tracing marker if it's newly rendered or it's name changed.\r\n  // A tracing marker is only associated with the transitions that rendered\r\n  // or updated it, so we can create a new set of transitions each time\r\n  if (current === null) {\r\n    const currentTransitions = getPendingTransitions();\r\n    if (currentTransitions !== null) {\r\n      const markerInstance: TracingMarkerInstance = {\r\n        tag: TransitionTracingMarker,\r\n        transitions: new Set(currentTransitions),\r\n        pendingBoundaries: null,\r\n        name: workInProgress.pendingProps.name,\r\n        aborts: null,\r\n      };\r\n      workInProgress.stateNode = markerInstance;\r\n\r\n      // We call the marker complete callback when all child suspense boundaries resolve.\r\n      // We do this in the commit phase on Offscreen. If the marker has no child suspense\r\n      // boundaries, we need to schedule a passive effect to make sure we call the marker\r\n      // complete callback.\r\n      workInProgress.flags |= Passive;\r\n    }\r\n  } else {\r\n    if (__DEV__) {\r\n      if (current.memoizedProps.name !== workInProgress.pendingProps.name) {\r\n        console.error(\r\n          'Changing the name of a tracing marker after mount is not supported. ' +\r\n            'To remount the tracing marker, pass it a new key.',\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  const instance: TracingMarkerInstance | null = workInProgress.stateNode;\r\n  if (instance !== null) {\r\n    pushMarkerInstance(workInProgress, instance);\r\n  }\r\n  const nextChildren = workInProgress.pendingProps.children;\r\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\r\n  return workInProgress.child;\r\n}\r\n\r\nfunction updateFragment(\r\n  current: Fiber | null,\r\n  workInProgress: Fiber,\r\n  renderLanes: Lanes,\r\n) {\r\n  const nextChildren = workInProgress.pendingProps;\r\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\r\n  return workInProgress.child;\r\n}\r\n\r\nfunction updateMode(\r\n  current: Fiber | null,\r\n  workInProgress: Fiber,\r\n  renderLanes: Lanes,\r\n) {\r\n  const nextChildren = workInProgress.pendingProps.children;\r\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\r\n  return workInProgress.child;\r\n}\r\n\r\nfunction updateProfiler(\r\n  current: Fiber | null,\r\n  workInProgress: Fiber,\r\n  renderLanes: Lanes,\r\n) {\r\n  if (enableProfilerTimer) {\r\n    workInProgress.flags |= Update;\r\n\r\n    if (enableProfilerCommitHooks) {\r\n      // Reset effect durations for the next eventual effect phase.\r\n      // These are reset during render to allow the DevTools commit hook a chance to read them,\r\n      const stateNode = workInProgress.stateNode;\r\n      stateNode.effectDuration = 0;\r\n      stateNode.passiveEffectDuration = 0;\r\n    }\r\n  }\r\n  const nextProps = workInProgress.pendingProps;\r\n  const nextChildren = nextProps.children;\r\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\r\n  return workInProgress.child;\r\n}\r\n\r\nfunction markRef(current: Fiber | null, workInProgress: Fiber) {\r\n  const ref = workInProgress.ref;\r\n  if (\r\n    (current === null && ref !== null) ||\r\n    (current !== null && current.ref !== ref)\r\n  ) {\r\n    // Schedule a Ref effect\r\n    workInProgress.flags |= Ref;\r\n    workInProgress.flags |= RefStatic;\r\n  }\r\n}\r\n\r\nfunction updateFunctionComponent(\r\n  current,\r\n  workInProgress,\r\n  Component,\r\n  nextProps: any,\r\n  renderLanes,\r\n) {\r\n  if (__DEV__) {\r\n    if (workInProgress.type !== workInProgress.elementType) {\r\n      // Lazy component props can't be validated in createElement\r\n      // because they're only guaranteed to be resolved here.\r\n      const innerPropTypes = Component.propTypes;\r\n      if (innerPropTypes) {\r\n        checkPropTypes(\r\n          innerPropTypes,\r\n          nextProps, // Resolved props\r\n          'prop',\r\n          getComponentNameFromType(Component),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  let context;\r\n  if (!disableLegacyContext) {\r\n    const unmaskedContext = getUnmaskedContext(workInProgress, Component, true);\r\n    context = getMaskedContext(workInProgress, unmaskedContext);\r\n  }\r\n\r\n  let nextChildren;\r\n  let hasId;\r\n  prepareToReadContext(workInProgress, renderLanes);\r\n  if (enableSchedulingProfiler) {\r\n    markComponentRenderStarted(workInProgress);\r\n  }\r\n  if (__DEV__) {\r\n    ReactCurrentOwner.current = workInProgress;\r\n    setIsRendering(true);\r\n    nextChildren = renderWithHooks(\r\n      current,\r\n      workInProgress,\r\n      Component,\r\n      nextProps,\r\n      context,\r\n      renderLanes,\r\n    );\r\n    hasId = checkDidRenderIdHook();\r\n    if (\r\n      debugRenderPhaseSideEffectsForStrictMode &&\r\n      workInProgress.mode & StrictLegacyMode\r\n    ) {\r\n      setIsStrictModeForDevtools(true);\r\n      try {\r\n        nextChildren = renderWithHooks(\r\n          current,\r\n          workInProgress,\r\n          Component,\r\n          nextProps,\r\n          context,\r\n          renderLanes,\r\n        );\r\n        hasId = checkDidRenderIdHook();\r\n      } finally {\r\n        setIsStrictModeForDevtools(false);\r\n      }\r\n    }\r\n    setIsRendering(false);\r\n  } else {\r\n    nextChildren = renderWithHooks(\r\n      current,\r\n      workInProgress,\r\n      Component,\r\n      nextProps,\r\n      context,\r\n      renderLanes,\r\n    );\r\n    hasId = checkDidRenderIdHook();\r\n  }\r\n  if (enableSchedulingProfiler) {\r\n    markComponentRenderStopped();\r\n  }\r\n\r\n  if (current !== null && !didReceiveUpdate) {\r\n    bailoutHooks(current, workInProgress, renderLanes);\r\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\r\n  }\r\n\r\n  if (getIsHydrating() && hasId) {\r\n    pushMaterializedTreeId(workInProgress);\r\n  }\r\n\r\n  // React DevTools reads this flag.\r\n  workInProgress.flags |= PerformedWork;\r\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\r\n  return workInProgress.child;\r\n}\r\n\r\nfunction updateClassComponent(\r\n  current: Fiber | null,\r\n  workInProgress: Fiber,\r\n  Component: any,\r\n  nextProps: any,\r\n  renderLanes: Lanes,\r\n) {\r\n  if (__DEV__) {\r\n    // This is used by DevTools to force a boundary to error.\r\n    switch (shouldError(workInProgress)) {\r\n      case false: {\r\n        const instance = workInProgress.stateNode;\r\n        const ctor = workInProgress.type;\r\n        // TODO This way of resetting the error boundary state is a hack.\r\n        // Is there a better way to do this?\r\n        const tempInstance = new ctor(\r\n          workInProgress.memoizedProps,\r\n          instance.context,\r\n        );\r\n        const state = tempInstance.state;\r\n        instance.updater.enqueueSetState(instance, state, null);\r\n        break;\r\n      }\r\n      case true: {\r\n        workInProgress.flags |= DidCapture;\r\n        workInProgress.flags |= ShouldCapture;\r\n        // eslint-disable-next-line react-internal/prod-error-codes\r\n        const error = new Error('Simulated error coming from DevTools');\r\n        const lane = pickArbitraryLane(renderLanes);\r\n        workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\r\n        // Schedule the error boundary to re-render using updated state\r\n        const update = createClassErrorUpdate(\r\n          workInProgress,\r\n          createCapturedValueAtFiber(error, workInProgress),\r\n          lane,\r\n        );\r\n        enqueueCapturedUpdate(workInProgress, update);\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (workInProgress.type !== workInProgress.elementType) {\r\n      // Lazy component props can't be validated in createElement\r\n      // because they're only guaranteed to be resolved here.\r\n      const innerPropTypes = Component.propTypes;\r\n      if (innerPropTypes) {\r\n        checkPropTypes(\r\n          innerPropTypes,\r\n          nextProps, // Resolved props\r\n          'prop',\r\n          getComponentNameFromType(Component),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  // Push context providers early to prevent context stack mismatches.\r\n  // During mounting we don't know the child context yet as the instance doesn't exist.\r\n  // We will invalidate the child context in finishClassComponent() right after rendering.\r\n  let hasContext;\r\n  if (isLegacyContextProvider(Component)) {\r\n    hasContext = true;\r\n    pushLegacyContextProvider(workInProgress);\r\n  } else {\r\n    hasContext = false;\r\n  }\r\n  prepareToReadContext(workInProgress, renderLanes);\r\n\r\n  const instance = workInProgress.stateNode;\r\n  let shouldUpdate;\r\n  if (instance === null) {\r\n    resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress);\r\n\r\n    // In the initial pass we might need to construct the instance.\r\n    constructClassInstance(workInProgress, Component, nextProps);\r\n    mountClassInstance(workInProgress, Component, nextProps, renderLanes);\r\n    shouldUpdate = true;\r\n  } else if (current === null) {\r\n    // In a resume, we'll already have an instance we can reuse.\r\n    shouldUpdate = resumeMountClassInstance(\r\n      workInProgress,\r\n      Component,\r\n      nextProps,\r\n      renderLanes,\r\n    );\r\n  } else {\r\n    shouldUpdate = updateClassInstance(\r\n      current,\r\n      workInProgress,\r\n      Component,\r\n      nextProps,\r\n      renderLanes,\r\n    );\r\n  }\r\n  const nextUnitOfWork = finishClassComponent(\r\n    current,\r\n    workInProgress,\r\n    Component,\r\n    shouldUpdate,\r\n    hasContext,\r\n    renderLanes,\r\n  );\r\n  if (__DEV__) {\r\n    const inst = workInProgress.stateNode;\r\n    if (shouldUpdate && inst.props !== nextProps) {\r\n      if (!didWarnAboutReassigningProps) {\r\n        console.error(\r\n          'It looks like %s is reassigning its own `this.props` while rendering. ' +\r\n            'This is not supported and can lead to confusing bugs.',\r\n          getComponentNameFromFiber(workInProgress) || 'a component',\r\n        );\r\n      }\r\n      didWarnAboutReassigningProps = true;\r\n    }\r\n  }\r\n  return nextUnitOfWork;\r\n}\r\n\r\nfunction finishClassComponent(\r\n  current: Fiber | null,\r\n  workInProgress: Fiber,\r\n  Component: any,\r\n  shouldUpdate: boolean,\r\n  hasContext: boolean,\r\n  renderLanes: Lanes,\r\n) {\r\n  // Refs should update even if shouldComponentUpdate returns false\r\n  markRef(current, workInProgress);\r\n\r\n  const didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;\r\n\r\n  if (!shouldUpdate && !didCaptureError) {\r\n    // Context providers should defer to sCU for rendering\r\n    if (hasContext) {\r\n      invalidateContextProvider(workInProgress, Component, false);\r\n    }\r\n\r\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\r\n  }\r\n\r\n  const instance = workInProgress.stateNode;\r\n\r\n  // Rerender\r\n  ReactCurrentOwner.current = workInProgress;\r\n  let nextChildren;\r\n  if (\r\n    didCaptureError &&\r\n    typeof Component.getDerivedStateFromError !== 'function'\r\n  ) {\r\n    // If we captured an error, but getDerivedStateFromError is not defined,\r\n    // unmount all the children. componentDidCatch will schedule an update to\r\n    // re-render a fallback. This is temporary until we migrate everyone to\r\n    // the new API.\r\n    // TODO: Warn in a future release.\r\n    nextChildren = null;\r\n\r\n    if (enableProfilerTimer) {\r\n      stopProfilerTimerIfRunning(workInProgress);\r\n    }\r\n  } else {\r\n    if (enableSchedulingProfiler) {\r\n      markComponentRenderStarted(workInProgress);\r\n    }\r\n    if (__DEV__) {\r\n      setIsRendering(true);\r\n      nextChildren = instance.render();\r\n      if (\r\n        debugRenderPhaseSideEffectsForStrictMode &&\r\n        workInProgress.mode & StrictLegacyMode\r\n      ) {\r\n        setIsStrictModeForDevtools(true);\r\n        try {\r\n          instance.render();\r\n        } finally {\r\n          setIsStrictModeForDevtools(false);\r\n        }\r\n      }\r\n      setIsRendering(false);\r\n    } else {\r\n      nextChildren = instance.render();\r\n    }\r\n    if (enableSchedulingProfiler) {\r\n      markComponentRenderStopped();\r\n    }\r\n  }\r\n\r\n  // React DevTools reads this flag.\r\n  workInProgress.flags |= PerformedWork;\r\n  if (current !== null && didCaptureError) {\r\n    // If we're recovering from an error, reconcile without reusing any of\r\n    // the existing children. Conceptually, the normal children and the children\r\n    // that are shown on error are two different sets, so we shouldn't reuse\r\n    // normal children even if their identities match.\r\n    forceUnmountCurrentAndReconcile(\r\n      current,\r\n      workInProgress,\r\n      nextChildren,\r\n      renderLanes,\r\n    );\r\n  } else {\r\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\r\n  }\r\n\r\n  // Memoize state using the values we just used to render.\r\n  // TODO: Restructure so we never read values from the instance.\r\n  workInProgress.memoizedState = instance.state;\r\n\r\n  // The context might have changed so we need to recalculate it.\r\n  if (hasContext) {\r\n    invalidateContextProvider(workInProgress, Component, true);\r\n  }\r\n\r\n  return workInProgress.child;\r\n}\r\n\r\nfunction pushHostRootContext(workInProgress) {\r\n  const root = (workInProgress.stateNode: FiberRoot);\r\n  if (root.pendingContext) {\r\n    pushTopLevelContextObject(\r\n      workInProgress,\r\n      root.pendingContext,\r\n      root.pendingContext !== root.context,\r\n    );\r\n  } else if (root.context) {\r\n    // Should always be set\r\n    pushTopLevelContextObject(workInProgress, root.context, false);\r\n  }\r\n  pushHostContainer(workInProgress, root.containerInfo);\r\n}\r\n\r\nfunction updateHostRoot(current, workInProgress, renderLanes) {\r\n  pushHostRootContext(workInProgress);\r\n\r\n  if (current === null) {\r\n    throw new Error('Should have a current fiber. This is a bug in React.');\r\n  }\r\n\r\n  const nextProps = workInProgress.pendingProps;\r\n  const prevState = workInProgress.memoizedState;\r\n  const prevChildren = prevState.element;\r\n  cloneUpdateQueue(current, workInProgress);\r\n  processUpdateQueue(workInProgress, nextProps, null, renderLanes);\r\n\r\n  const nextState: RootState = workInProgress.memoizedState;\r\n  const root: FiberRoot = workInProgress.stateNode;\r\n  pushRootTransition(workInProgress, root, renderLanes);\r\n\r\n  if (enableTransitionTracing) {\r\n    pushRootMarkerInstance(workInProgress);\r\n  }\r\n\r\n  if (enableCache) {\r\n    const nextCache: Cache = nextState.cache;\r\n    pushCacheProvider(workInProgress, nextCache);\r\n    if (nextCache !== prevState.cache) {\r\n      // The root cache refreshed.\r\n      propagateContextChange(workInProgress, CacheContext, renderLanes);\r\n    }\r\n  }\r\n\r\n  // Caution: React DevTools currently depends on this property\r\n  // being called \"element\".\r\n  const nextChildren = nextState.element;\r\n  if (supportsHydration && prevState.isDehydrated) {\r\n    // This is a hydration root whose shell has not yet hydrated. We should\r\n    // attempt to hydrate.\r\n\r\n    // Flip isDehydrated to false to indicate that when this render\r\n    // finishes, the root will no longer be dehydrated.\r\n    const overrideState: RootState = {\r\n      element: nextChildren,\r\n      isDehydrated: false,\r\n      cache: nextState.cache,\r\n    };\r\n    const updateQueue: UpdateQueue<RootState> = (workInProgress.updateQueue: any);\r\n    // `baseState` can always be the last state because the root doesn't\r\n    // have reducer functions so it doesn't need rebasing.\r\n    updateQueue.baseState = overrideState;\r\n    workInProgress.memoizedState = overrideState;\r\n\r\n    if (workInProgress.flags & ForceClientRender) {\r\n      // Something errored during a previous attempt to hydrate the shell, so we\r\n      // forced a client render.\r\n      const recoverableError = createCapturedValueAtFiber(\r\n        new Error(\r\n          'There was an error while hydrating. Because the error happened outside ' +\r\n            'of a Suspense boundary, the entire root will switch to ' +\r\n            'client rendering.',\r\n        ),\r\n        workInProgress,\r\n      );\r\n      return mountHostRootWithoutHydrating(\r\n        current,\r\n        workInProgress,\r\n        nextChildren,\r\n        renderLanes,\r\n        recoverableError,\r\n      );\r\n    } else if (nextChildren !== prevChildren) {\r\n      const recoverableError = createCapturedValueAtFiber(\r\n        new Error(\r\n          'This root received an early update, before anything was able ' +\r\n            'hydrate. Switched the entire root to client rendering.',\r\n        ),\r\n        workInProgress,\r\n      );\r\n      return mountHostRootWithoutHydrating(\r\n        current,\r\n        workInProgress,\r\n        nextChildren,\r\n        renderLanes,\r\n        recoverableError,\r\n      );\r\n    } else {\r\n      // The outermost shell has not hydrated yet. Start hydrating.\r\n      enterHydrationState(workInProgress);\r\n      if (enableUseMutableSource) {\r\n        const mutableSourceEagerHydrationData =\r\n          root.mutableSourceEagerHydrationData;\r\n        if (mutableSourceEagerHydrationData != null) {\r\n          for (let i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {\r\n            const mutableSource = ((mutableSourceEagerHydrationData[\r\n              i\r\n            ]: any): MutableSource<any>);\r\n            const version = mutableSourceEagerHydrationData[i + 1];\r\n            setWorkInProgressVersion(mutableSource, version);\r\n          }\r\n        }\r\n      }\r\n\r\n      const child = mountChildFibers(\r\n        workInProgress,\r\n        null,\r\n        nextChildren,\r\n        renderLanes,\r\n      );\r\n      workInProgress.child = child;\r\n\r\n      let node = child;\r\n      while (node) {\r\n        // Mark each child as hydrating. This is a fast path to know whether this\r\n        // tree is part of a hydrating tree. This is used to determine if a child\r\n        // node has fully mounted yet, and for scheduling event replaying.\r\n        // Conceptually this is similar to Placement in that a new subtree is\r\n        // inserted into the React tree here. It just happens to not need DOM\r\n        // mutations because it already exists.\r\n        node.flags = (node.flags & ~Placement) | Hydrating;\r\n        node = node.sibling;\r\n      }\r\n    }\r\n  } else {\r\n    // Root is not dehydrated. Either this is a client-only root, or it\r\n    // already hydrated.\r\n    resetHydrationState();\r\n    if (nextChildren === prevChildren) {\r\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\r\n    }\r\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\r\n  }\r\n  return workInProgress.child;\r\n}\r\n\r\nfunction mountHostRootWithoutHydrating(\r\n  current: Fiber,\r\n  workInProgress: Fiber,\r\n  nextChildren: ReactNodeList,\r\n  renderLanes: Lanes,\r\n  recoverableError: CapturedValue<mixed>,\r\n) {\r\n  // Revert to client rendering.\r\n  resetHydrationState();\r\n\r\n  queueHydrationError(recoverableError);\r\n\r\n  workInProgress.flags |= ForceClientRender;\r\n\r\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\r\n  return workInProgress.child;\r\n}\r\n\r\nfunction updateHostComponent(\r\n  current: Fiber | null,\r\n  workInProgress: Fiber,\r\n  renderLanes: Lanes,\r\n) {\r\n  pushHostContext(workInProgress);\r\n\r\n  if (current === null) {\r\n    tryToClaimNextHydratableInstance(workInProgress);\r\n  }\r\n\r\n  const type = workInProgress.type;\r\n  const nextProps = workInProgress.pendingProps;\r\n  const prevProps = current !== null ? current.memoizedProps : null;\r\n\r\n  let nextChildren = nextProps.children;\r\n  const isDirectTextChild = shouldSetTextContent(type, nextProps);\r\n\r\n  if (isDirectTextChild) {\r\n    // We special case a direct text child of a host node. This is a common\r\n    // case. We won't handle it as a reified child. We will instead handle\r\n    // this in the host environment that also has access to this prop. That\r\n    // avoids allocating another HostText fiber and traversing it.\r\n    nextChildren = null;\r\n  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {\r\n    // If we're switching from a direct text child to a normal child, or to\r\n    // empty, we need to schedule the text content to be reset.\r\n    workInProgress.flags |= ContentReset;\r\n  }\r\n\r\n  markRef(current, workInProgress);\r\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\r\n  return workInProgress.child;\r\n}\r\n\r\nfunction updateHostText(current, workInProgress) {\r\n  if (current === null) {\r\n    tryToClaimNextHydratableInstance(workInProgress);\r\n  }\r\n  // Nothing to do here. This is terminal. We'll do the completion step\r\n  // immediately after.\r\n  return null;\r\n}\r\n\r\nfunction mountLazyComponent(\r\n  _current,\r\n  workInProgress,\r\n  elementType,\r\n  renderLanes,\r\n) {\r\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\r\n\r\n  const props = workInProgress.pendingProps;\r\n  const lazyComponent: LazyComponentType<any, any> = elementType;\r\n  const payload = lazyComponent._payload;\r\n  const init = lazyComponent._init;\r\n  let Component = init(payload);\r\n  // Store the unwrapped component in the type.\r\n  workInProgress.type = Component;\r\n  const resolvedTag = (workInProgress.tag = resolveLazyComponentTag(Component));\r\n  const resolvedProps = resolveDefaultProps(Component, props);\r\n  let child;\r\n  switch (resolvedTag) {\r\n    case FunctionComponent: {\r\n      if (__DEV__) {\r\n        validateFunctionComponentInDev(workInProgress, Component);\r\n        workInProgress.type = Component = resolveFunctionForHotReloading(\r\n          Component,\r\n        );\r\n      }\r\n      child = updateFunctionComponent(\r\n        null,\r\n        workInProgress,\r\n        Component,\r\n        resolvedProps,\r\n        renderLanes,\r\n      );\r\n      return child;\r\n    }\r\n    case ClassComponent: {\r\n      if (__DEV__) {\r\n        workInProgress.type = Component = resolveClassForHotReloading(\r\n          Component,\r\n        );\r\n      }\r\n      child = updateClassComponent(\r\n        null,\r\n        workInProgress,\r\n        Component,\r\n        resolvedProps,\r\n        renderLanes,\r\n      );\r\n      return child;\r\n    }\r\n    case ForwardRef: {\r\n      if (__DEV__) {\r\n        workInProgress.type = Component = resolveForwardRefForHotReloading(\r\n          Component,\r\n        );\r\n      }\r\n      child = updateForwardRef(\r\n        null,\r\n        workInProgress,\r\n        Component,\r\n        resolvedProps,\r\n        renderLanes,\r\n      );\r\n      return child;\r\n    }\r\n    case MemoComponent: {\r\n      if (__DEV__) {\r\n        if (workInProgress.type !== workInProgress.elementType) {\r\n          const outerPropTypes = Component.propTypes;\r\n          if (outerPropTypes) {\r\n            checkPropTypes(\r\n              outerPropTypes,\r\n              resolvedProps, // Resolved for outer only\r\n              'prop',\r\n              getComponentNameFromType(Component),\r\n            );\r\n          }\r\n        }\r\n      }\r\n      child = updateMemoComponent(\r\n        null,\r\n        workInProgress,\r\n        Component,\r\n        resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too\r\n        renderLanes,\r\n      );\r\n      return child;\r\n    }\r\n  }\r\n  let hint = '';\r\n  if (__DEV__) {\r\n    if (\r\n      Component !== null &&\r\n      typeof Component === 'object' &&\r\n      Component.$$typeof === REACT_LAZY_TYPE\r\n    ) {\r\n      hint = ' Did you wrap a component in React.lazy() more than once?';\r\n    }\r\n  }\r\n\r\n  // This message intentionally doesn't mention ForwardRef or MemoComponent\r\n  // because the fact that it's a separate type of work is an\r\n  // implementation detail.\r\n  throw new Error(\r\n    `Element type is invalid. Received a promise that resolves to: ${Component}. ` +\r\n      `Lazy element type must resolve to a class or function.${hint}`,\r\n  );\r\n}\r\n\r\nfunction mountIncompleteClassComponent(\r\n  _current,\r\n  workInProgress,\r\n  Component,\r\n  nextProps,\r\n  renderLanes,\r\n) {\r\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\r\n\r\n  // Promote the fiber to a class and try rendering again.\r\n  workInProgress.tag = ClassComponent;\r\n\r\n  // The rest of this function is a fork of `updateClassComponent`\r\n\r\n  // Push context providers early to prevent context stack mismatches.\r\n  // During mounting we don't know the child context yet as the instance doesn't exist.\r\n  // We will invalidate the child context in finishClassComponent() right after rendering.\r\n  let hasContext;\r\n  if (isLegacyContextProvider(Component)) {\r\n    hasContext = true;\r\n    pushLegacyContextProvider(workInProgress);\r\n  } else {\r\n    hasContext = false;\r\n  }\r\n  prepareToReadContext(workInProgress, renderLanes);\r\n\r\n  constructClassInstance(workInProgress, Component, nextProps);\r\n  mountClassInstance(workInProgress, Component, nextProps, renderLanes);\r\n\r\n  return finishClassComponent(\r\n    null,\r\n    workInProgress,\r\n    Component,\r\n    true,\r\n    hasContext,\r\n    renderLanes,\r\n  );\r\n}\r\n\r\nfunction mountIndeterminateComponent(\r\n  _current,\r\n  workInProgress,\r\n  Component,\r\n  renderLanes,\r\n) {\r\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\r\n\r\n  const props = workInProgress.pendingProps;\r\n  let context;\r\n  if (!disableLegacyContext) {\r\n    const unmaskedContext = getUnmaskedContext(\r\n      workInProgress,\r\n      Component,\r\n      false,\r\n    );\r\n    context = getMaskedContext(workInProgress, unmaskedContext);\r\n  }\r\n\r\n  prepareToReadContext(workInProgress, renderLanes);\r\n  let value;\r\n  let hasId;\r\n\r\n  if (enableSchedulingProfiler) {\r\n    markComponentRenderStarted(workInProgress);\r\n  }\r\n  if (__DEV__) {\r\n    if (\r\n      Component.prototype &&\r\n      typeof Component.prototype.render === 'function'\r\n    ) {\r\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\r\n\r\n      if (!didWarnAboutBadClass[componentName]) {\r\n        console.error(\r\n          \"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" +\r\n            'This is likely to cause errors. Change %s to extend React.Component instead.',\r\n          componentName,\r\n          componentName,\r\n        );\r\n        didWarnAboutBadClass[componentName] = true;\r\n      }\r\n    }\r\n\r\n    if (workInProgress.mode & StrictLegacyMode) {\r\n      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);\r\n    }\r\n\r\n    setIsRendering(true);\r\n    ReactCurrentOwner.current = workInProgress;\r\n    value = renderWithHooks(\r\n      null,\r\n      workInProgress,\r\n      Component,\r\n      props,\r\n      context,\r\n      renderLanes,\r\n    );\r\n    hasId = checkDidRenderIdHook();\r\n    setIsRendering(false);\r\n  } else {\r\n    value = renderWithHooks(\r\n      null,\r\n      workInProgress,\r\n      Component,\r\n      props,\r\n      context,\r\n      renderLanes,\r\n    );\r\n    hasId = checkDidRenderIdHook();\r\n  }\r\n  if (enableSchedulingProfiler) {\r\n    markComponentRenderStopped();\r\n  }\r\n\r\n  // React DevTools reads this flag.\r\n  workInProgress.flags |= PerformedWork;\r\n\r\n  if (__DEV__) {\r\n    // Support for module components is deprecated and is removed behind a flag.\r\n    // Whether or not it would crash later, we want to show a good message in DEV first.\r\n    if (\r\n      typeof value === 'object' &&\r\n      value !== null &&\r\n      typeof value.render === 'function' &&\r\n      value.$$typeof === undefined\r\n    ) {\r\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\r\n      if (!didWarnAboutModulePatternComponent[componentName]) {\r\n        console.error(\r\n          'The <%s /> component appears to be a function component that returns a class instance. ' +\r\n            'Change %s to a class that extends React.Component instead. ' +\r\n            \"If you can't use a class try assigning the prototype on the function as a workaround. \" +\r\n            \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" +\r\n            'cannot be called with `new` by React.',\r\n          componentName,\r\n          componentName,\r\n          componentName,\r\n        );\r\n        didWarnAboutModulePatternComponent[componentName] = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (\r\n    // Run these checks in production only if the flag is off.\r\n    // Eventually we'll delete this branch altogether.\r\n    !disableModulePatternComponents &&\r\n    typeof value === 'object' &&\r\n    value !== null &&\r\n    typeof value.render === 'function' &&\r\n    value.$$typeof === undefined\r\n  ) {\r\n    if (__DEV__) {\r\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\r\n      if (!didWarnAboutModulePatternComponent[componentName]) {\r\n        console.error(\r\n          'The <%s /> component appears to be a function component that returns a class instance. ' +\r\n            'Change %s to a class that extends React.Component instead. ' +\r\n            \"If you can't use a class try assigning the prototype on the function as a workaround. \" +\r\n            \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" +\r\n            'cannot be called with `new` by React.',\r\n          componentName,\r\n          componentName,\r\n          componentName,\r\n        );\r\n        didWarnAboutModulePatternComponent[componentName] = true;\r\n      }\r\n    }\r\n\r\n    // Proceed under the assumption that this is a class instance\r\n    workInProgress.tag = ClassComponent;\r\n\r\n    // Throw out any hooks that were used.\r\n    workInProgress.memoizedState = null;\r\n    workInProgress.updateQueue = null;\r\n\r\n    // Push context providers early to prevent context stack mismatches.\r\n    // During mounting we don't know the child context yet as the instance doesn't exist.\r\n    // We will invalidate the child context in finishClassComponent() right after rendering.\r\n    let hasContext = false;\r\n    if (isLegacyContextProvider(Component)) {\r\n      hasContext = true;\r\n      pushLegacyContextProvider(workInProgress);\r\n    } else {\r\n      hasContext = false;\r\n    }\r\n\r\n    workInProgress.memoizedState =\r\n      value.state !== null && value.state !== undefined ? value.state : null;\r\n\r\n    initializeUpdateQueue(workInProgress);\r\n\r\n    adoptClassInstance(workInProgress, value);\r\n    mountClassInstance(workInProgress, Component, props, renderLanes);\r\n    return finishClassComponent(\r\n      null,\r\n      workInProgress,\r\n      Component,\r\n      true,\r\n      hasContext,\r\n      renderLanes,\r\n    );\r\n  } else {\r\n    // Proceed under the assumption that this is a function component\r\n    workInProgress.tag = FunctionComponent;\r\n    if (__DEV__) {\r\n      if (disableLegacyContext && Component.contextTypes) {\r\n        console.error(\r\n          '%s uses the legacy contextTypes API which is no longer supported. ' +\r\n            'Use React.createContext() with React.useContext() instead.',\r\n          getComponentNameFromType(Component) || 'Unknown',\r\n        );\r\n      }\r\n\r\n      if (\r\n        debugRenderPhaseSideEffectsForStrictMode &&\r\n        workInProgress.mode & StrictLegacyMode\r\n      ) {\r\n        setIsStrictModeForDevtools(true);\r\n        try {\r\n          value = renderWithHooks(\r\n            null,\r\n            workInProgress,\r\n            Component,\r\n            props,\r\n            context,\r\n            renderLanes,\r\n          );\r\n          hasId = checkDidRenderIdHook();\r\n        } finally {\r\n          setIsStrictModeForDevtools(false);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (getIsHydrating() && hasId) {\r\n      pushMaterializedTreeId(workInProgress);\r\n    }\r\n\r\n    reconcileChildren(null, workInProgress, value, renderLanes);\r\n    if (__DEV__) {\r\n      validateFunctionComponentInDev(workInProgress, Component);\r\n    }\r\n    return workInProgress.child;\r\n  }\r\n}\r\n\r\nfunction validateFunctionComponentInDev(workInProgress: Fiber, Component: any) {\r\n  if (__DEV__) {\r\n    if (Component) {\r\n      if (Component.childContextTypes) {\r\n        console.error(\r\n          '%s(...): childContextTypes cannot be defined on a function component.',\r\n          Component.displayName || Component.name || 'Component',\r\n        );\r\n      }\r\n    }\r\n    if (workInProgress.ref !== null) {\r\n      let info = '';\r\n      const ownerName = getCurrentFiberOwnerNameInDevOrNull();\r\n      if (ownerName) {\r\n        info += '\\n\\nCheck the render method of `' + ownerName + '`.';\r\n      }\r\n\r\n      let warningKey = ownerName || '';\r\n      const debugSource = workInProgress._debugSource;\r\n      if (debugSource) {\r\n        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;\r\n      }\r\n      if (!didWarnAboutFunctionRefs[warningKey]) {\r\n        didWarnAboutFunctionRefs[warningKey] = true;\r\n        console.error(\r\n          'Function components cannot be given refs. ' +\r\n            'Attempts to access this ref will fail. ' +\r\n            'Did you mean to use React.forwardRef()?%s',\r\n          info,\r\n        );\r\n      }\r\n    }\r\n\r\n    if (\r\n      warnAboutDefaultPropsOnFunctionComponents &&\r\n      Component.defaultProps !== undefined\r\n    ) {\r\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\r\n\r\n      if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {\r\n        console.error(\r\n          '%s: Support for defaultProps will be removed from function components ' +\r\n            'in a future major release. Use JavaScript default parameters instead.',\r\n          componentName,\r\n        );\r\n        didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;\r\n      }\r\n    }\r\n\r\n    if (typeof Component.getDerivedStateFromProps === 'function') {\r\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\r\n\r\n      if (!didWarnAboutGetDerivedStateOnFunctionComponent[componentName]) {\r\n        console.error(\r\n          '%s: Function components do not support getDerivedStateFromProps.',\r\n          componentName,\r\n        );\r\n        didWarnAboutGetDerivedStateOnFunctionComponent[componentName] = true;\r\n      }\r\n    }\r\n\r\n    if (\r\n      typeof Component.contextType === 'object' &&\r\n      Component.contextType !== null\r\n    ) {\r\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\r\n\r\n      if (!didWarnAboutContextTypeOnFunctionComponent[componentName]) {\r\n        console.error(\r\n          '%s: Function components do not support contextType.',\r\n          componentName,\r\n        );\r\n        didWarnAboutContextTypeOnFunctionComponent[componentName] = true;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst SUSPENDED_MARKER: SuspenseState = {\r\n  dehydrated: null,\r\n  treeContext: null,\r\n  retryLane: NoLane,\r\n};\r\n\r\nfunction mountSuspenseOffscreenState(renderLanes: Lanes): OffscreenState {\r\n  return {\r\n    baseLanes: renderLanes,\r\n    cachePool: getSuspendedCache(),\r\n  };\r\n}\r\n\r\nfunction updateSuspenseOffscreenState(\r\n  prevOffscreenState: OffscreenState,\r\n  renderLanes: Lanes,\r\n): OffscreenState {\r\n  let cachePool: SpawnedCachePool | null = null;\r\n  if (enableCache) {\r\n    const prevCachePool: SpawnedCachePool | null = prevOffscreenState.cachePool;\r\n    if (prevCachePool !== null) {\r\n      const parentCache = isPrimaryRenderer\r\n        ? CacheContext._currentValue\r\n        : CacheContext._currentValue2;\r\n      if (prevCachePool.parent !== parentCache) {\r\n        // Detected a refresh in the parent. This overrides any previously\r\n        // suspended cache.\r\n        cachePool = {\r\n          parent: parentCache,\r\n          pool: parentCache,\r\n        };\r\n      } else {\r\n        // We can reuse the cache from last time. The only thing that would have\r\n        // overridden it is a parent refresh, which we checked for above.\r\n        cachePool = prevCachePool;\r\n      }\r\n    } else {\r\n      // If there's no previous cache pool, grab the current one.\r\n      cachePool = getSuspendedCache();\r\n    }\r\n  }\r\n  return {\r\n    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\r\n    cachePool,\r\n  };\r\n}\r\n\r\n// TODO: Probably should inline this back\r\nfunction shouldRemainOnFallback(\r\n  current: null | Fiber,\r\n  workInProgress: Fiber,\r\n  renderLanes: Lanes,\r\n) {\r\n  // If we're already showing a fallback, there are cases where we need to\r\n  // remain on that fallback regardless of whether the content has resolved.\r\n  // For example, SuspenseList coordinates when nested content appears.\r\n  if (current !== null) {\r\n    const suspenseState: SuspenseState = current.memoizedState;\r\n    if (suspenseState === null) {\r\n      // Currently showing content. Don't hide it, even if ForceSuspenseFallback\r\n      // is true. More precise name might be \"ForceRemainSuspenseFallback\".\r\n      // Note: This is a factoring smell. Can't remain on a fallback if there's\r\n      // no fallback to remain on.\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Not currently showing content. Consult the Suspense context.\r\n  const suspenseContext: SuspenseContext = suspenseStackCursor.current;\r\n  return hasSuspenseListContext(\r\n    suspenseContext,\r\n    (ForceSuspenseFallback: SuspenseContext),\r\n  );\r\n}\r\n\r\nfunction getRemainingWorkInPrimaryTree(current: Fiber, renderLanes) {\r\n  // TODO: Should not remove render lanes that were pinged during this render\r\n  return removeLanes(current.childLanes, renderLanes);\r\n}\r\n\r\nfunction updateSuspenseComponent(current, workInProgress, renderLanes) {\r\n  const nextProps = workInProgress.pendingProps;\r\n\r\n  // This is used by DevTools to force a boundary to suspend.\r\n  if (__DEV__) {\r\n    if (shouldSuspend(workInProgress)) {\r\n      workInProgress.flags |= DidCapture;\r\n    }\r\n  }\r\n\r\n  let showFallback = false;\r\n  const didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\r\n  if (\r\n    didSuspend ||\r\n    shouldRemainOnFallback(current, workInProgress, renderLanes)\r\n  ) {\r\n    // Something in this boundary's subtree already suspended. Switch to\r\n    // rendering the fallback children.\r\n    showFallback = true;\r\n    workInProgress.flags &= ~DidCapture;\r\n  }\r\n\r\n  // OK, the next part is confusing. We're about to reconcile the Suspense\r\n  // boundary's children. This involves some custom reconciliation logic. Two\r\n  // main reasons this is so complicated.\r\n  //\r\n  // First, Legacy Mode has different semantics for backwards compatibility. The\r\n  // primary tree will commit in an inconsistent state, so when we do the\r\n  // second pass to render the fallback, we do some exceedingly, uh, clever\r\n  // hacks to make that not totally break. Like transferring effects and\r\n  // deletions from hidden tree. In Concurrent Mode, it's much simpler,\r\n  // because we bailout on the primary tree completely and leave it in its old\r\n  // state, no effects. Same as what we do for Offscreen (except that\r\n  // Offscreen doesn't have the first render pass).\r\n  //\r\n  // Second is hydration. During hydration, the Suspense fiber has a slightly\r\n  // different layout, where the child points to a dehydrated fragment, which\r\n  // contains the DOM rendered by the server.\r\n  //\r\n  // Third, even if you set all that aside, Suspense is like error boundaries in\r\n  // that we first we try to render one tree, and if that fails, we render again\r\n  // and switch to a different tree. Like a try/catch block. So we have to track\r\n  // which branch we're currently rendering. Ideally we would model this using\r\n  // a stack.\r\n  if (current === null) {\r\n    // Initial mount\r\n\r\n    // Special path for hydration\r\n    // If we're currently hydrating, try to hydrate this boundary.\r\n    if (getIsHydrating()) {\r\n      // We must push the suspense handler context *before* attempting to\r\n      // hydrate, to avoid a mismatch in case it errors.\r\n      if (showFallback) {\r\n        pushPrimaryTreeSuspenseHandler(workInProgress);\r\n      } else {\r\n        pushFallbackTreeSuspenseHandler(workInProgress);\r\n      }\r\n      tryToClaimNextHydratableInstance(workInProgress);\r\n      // This could've been a dehydrated suspense component.\r\n      const suspenseState: null | SuspenseState = workInProgress.memoizedState;\r\n      if (suspenseState !== null) {\r\n        const dehydrated = suspenseState.dehydrated;\r\n        if (dehydrated !== null) {\r\n          return mountDehydratedSuspenseComponent(\r\n            workInProgress,\r\n            dehydrated,\r\n            renderLanes,\r\n          );\r\n        }\r\n      }\r\n      // If hydration didn't succeed, fall through to the normal Suspense path.\r\n      // To avoid a stack mismatch we need to pop the Suspense handler that we\r\n      // pushed above. This will become less awkward when move the hydration\r\n      // logic to its own fiber.\r\n      popSuspenseHandler(workInProgress);\r\n    }\r\n\r\n    const nextPrimaryChildren = nextProps.children;\r\n    const nextFallbackChildren = nextProps.fallback;\r\n\r\n    if (showFallback) {\r\n      pushFallbackTreeSuspenseHandler(workInProgress);\r\n\r\n      const fallbackFragment = mountSuspenseFallbackChildren(\r\n        workInProgress,\r\n        nextPrimaryChildren,\r\n        nextFallbackChildren,\r\n        renderLanes,\r\n      );\r\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\r\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\r\n        renderLanes,\r\n      );\r\n      workInProgress.memoizedState = SUSPENDED_MARKER;\r\n      if (enableTransitionTracing) {\r\n        const currentTransitions = getPendingTransitions();\r\n        if (currentTransitions !== null) {\r\n          const parentMarkerInstances = getMarkerInstances();\r\n          const offscreenQueue: OffscreenQueue | null = (primaryChildFragment.updateQueue: any);\r\n          if (offscreenQueue === null) {\r\n            const newOffscreenQueue: OffscreenQueue = {\r\n              transitions: currentTransitions,\r\n              markerInstances: parentMarkerInstances,\r\n              wakeables: null,\r\n            };\r\n            primaryChildFragment.updateQueue = newOffscreenQueue;\r\n          } else {\r\n            offscreenQueue.transitions = currentTransitions;\r\n            offscreenQueue.markerInstances = parentMarkerInstances;\r\n          }\r\n        }\r\n      }\r\n\r\n      return fallbackFragment;\r\n    } else if (\r\n      enableCPUSuspense &&\r\n      typeof nextProps.unstable_expectedLoadTime === 'number'\r\n    ) {\r\n      // This is a CPU-bound tree. Skip this tree and show a placeholder to\r\n      // unblock the surrounding content. Then immediately retry after the\r\n      // initial commit.\r\n      pushFallbackTreeSuspenseHandler(workInProgress);\r\n      const fallbackFragment = mountSuspenseFallbackChildren(\r\n        workInProgress,\r\n        nextPrimaryChildren,\r\n        nextFallbackChildren,\r\n        renderLanes,\r\n      );\r\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\r\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\r\n        renderLanes,\r\n      );\r\n      workInProgress.memoizedState = SUSPENDED_MARKER;\r\n\r\n      // TODO: Transition Tracing is not yet implemented for CPU Suspense.\r\n\r\n      // Since nothing actually suspended, there will nothing to ping this to\r\n      // get it started back up to attempt the next item. While in terms of\r\n      // priority this work has the same priority as this current render, it's\r\n      // not part of the same transition once the transition has committed. If\r\n      // it's sync, we still want to yield so that it can be painted.\r\n      // Conceptually, this is really the same as pinging. We can use any\r\n      // RetryLane even if it's the one currently rendering since we're leaving\r\n      // it behind on this node.\r\n      workInProgress.lanes = SomeRetryLane;\r\n      return fallbackFragment;\r\n    } else {\r\n      pushPrimaryTreeSuspenseHandler(workInProgress);\r\n      return mountSuspensePrimaryChildren(\r\n        workInProgress,\r\n        nextPrimaryChildren,\r\n        renderLanes,\r\n      );\r\n    }\r\n  } else {\r\n    // This is an update.\r\n\r\n    // Special path for hydration\r\n    const prevState: null | SuspenseState = current.memoizedState;\r\n    if (prevState !== null) {\r\n      const dehydrated = prevState.dehydrated;\r\n      if (dehydrated !== null) {\r\n        return updateDehydratedSuspenseComponent(\r\n          current,\r\n          workInProgress,\r\n          didSuspend,\r\n          nextProps,\r\n          dehydrated,\r\n          prevState,\r\n          renderLanes,\r\n        );\r\n      }\r\n    }\r\n\r\n    if (showFallback) {\r\n      pushFallbackTreeSuspenseHandler(workInProgress);\r\n\r\n      const nextFallbackChildren = nextProps.fallback;\r\n      const nextPrimaryChildren = nextProps.children;\r\n      const fallbackChildFragment = updateSuspenseFallbackChildren(\r\n        current,\r\n        workInProgress,\r\n        nextPrimaryChildren,\r\n        nextFallbackChildren,\r\n        renderLanes,\r\n      );\r\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\r\n      const prevOffscreenState: OffscreenState | null = (current.child: any)\r\n        .memoizedState;\r\n      primaryChildFragment.memoizedState =\r\n        prevOffscreenState === null\r\n          ? mountSuspenseOffscreenState(renderLanes)\r\n          : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\r\n      if (enableTransitionTracing) {\r\n        const currentTransitions = getPendingTransitions();\r\n        if (currentTransitions !== null) {\r\n          const parentMarkerInstances = getMarkerInstances();\r\n          const offscreenQueue: OffscreenQueue | null = (primaryChildFragment.updateQueue: any);\r\n          const currentOffscreenQueue: OffscreenQueue | null = (current.updateQueue: any);\r\n          if (offscreenQueue === null) {\r\n            const newOffscreenQueue: OffscreenQueue = {\r\n              transitions: currentTransitions,\r\n              markerInstances: parentMarkerInstances,\r\n              wakeables: null,\r\n            };\r\n            primaryChildFragment.updateQueue = newOffscreenQueue;\r\n          } else if (offscreenQueue === currentOffscreenQueue) {\r\n            // If the work-in-progress queue is the same object as current, we\r\n            // can't modify it without cloning it first.\r\n            const newOffscreenQueue: OffscreenQueue = {\r\n              transitions: currentTransitions,\r\n              markerInstances: parentMarkerInstances,\r\n              wakeables:\r\n                currentOffscreenQueue !== null\r\n                  ? currentOffscreenQueue.wakeables\r\n                  : null,\r\n            };\r\n            primaryChildFragment.updateQueue = newOffscreenQueue;\r\n          } else {\r\n            offscreenQueue.transitions = currentTransitions;\r\n            offscreenQueue.markerInstances = parentMarkerInstances;\r\n          }\r\n        }\r\n      }\r\n      primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(\r\n        current,\r\n        renderLanes,\r\n      );\r\n      workInProgress.memoizedState = SUSPENDED_MARKER;\r\n      return fallbackChildFragment;\r\n    } else {\r\n      pushPrimaryTreeSuspenseHandler(workInProgress);\r\n\r\n      const nextPrimaryChildren = nextProps.children;\r\n      const primaryChildFragment = updateSuspensePrimaryChildren(\r\n        current,\r\n        workInProgress,\r\n        nextPrimaryChildren,\r\n        renderLanes,\r\n      );\r\n      workInProgress.memoizedState = null;\r\n      return primaryChildFragment;\r\n    }\r\n  }\r\n}\r\n\r\nfunction mountSuspensePrimaryChildren(\r\n  workInProgress,\r\n  primaryChildren,\r\n  renderLanes,\r\n) {\r\n  const mode = workInProgress.mode;\r\n  const primaryChildProps: OffscreenProps = {\r\n    mode: 'visible',\r\n    children: primaryChildren,\r\n  };\r\n  const primaryChildFragment = mountWorkInProgressOffscreenFiber(\r\n    primaryChildProps,\r\n    mode,\r\n    renderLanes,\r\n  );\r\n  primaryChildFragment.return = workInProgress;\r\n  workInProgress.child = primaryChildFragment;\r\n  return primaryChildFragment;\r\n}\r\n\r\nfunction mountSuspenseFallbackChildren(\r\n  workInProgress,\r\n  primaryChildren,\r\n  fallbackChildren,\r\n  renderLanes,\r\n) {\r\n  const mode = workInProgress.mode;\r\n  const progressedPrimaryFragment: Fiber | null = workInProgress.child;\r\n\r\n  const primaryChildProps: OffscreenProps = {\r\n    mode: 'hidden',\r\n    children: primaryChildren,\r\n  };\r\n\r\n  let primaryChildFragment;\r\n  let fallbackChildFragment;\r\n  if (\r\n    (mode & ConcurrentMode) === NoMode &&\r\n    progressedPrimaryFragment !== null\r\n  ) {\r\n    // In legacy mode, we commit the primary tree as if it successfully\r\n    // completed, even though it's in an inconsistent state.\r\n    primaryChildFragment = progressedPrimaryFragment;\r\n    primaryChildFragment.childLanes = NoLanes;\r\n    primaryChildFragment.pendingProps = primaryChildProps;\r\n\r\n    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {\r\n      // Reset the durations from the first pass so they aren't included in the\r\n      // final amounts. This seems counterintuitive, since we're intentionally\r\n      // not measuring part of the render phase, but this makes it match what we\r\n      // do in Concurrent Mode.\r\n      primaryChildFragment.actualDuration = 0;\r\n      primaryChildFragment.actualStartTime = -1;\r\n      primaryChildFragment.selfBaseDuration = 0;\r\n      primaryChildFragment.treeBaseDuration = 0;\r\n    }\r\n\r\n    fallbackChildFragment = createFiberFromFragment(\r\n      fallbackChildren,\r\n      mode,\r\n      renderLanes,\r\n      null,\r\n    );\r\n  } else {\r\n    primaryChildFragment = mountWorkInProgressOffscreenFiber(\r\n      primaryChildProps,\r\n      mode,\r\n      NoLanes,\r\n    );\r\n    fallbackChildFragment = createFiberFromFragment(\r\n      fallbackChildren,\r\n      mode,\r\n      renderLanes,\r\n      null,\r\n    );\r\n  }\r\n\r\n  primaryChildFragment.return = workInProgress;\r\n  fallbackChildFragment.return = workInProgress;\r\n  primaryChildFragment.sibling = fallbackChildFragment;\r\n  workInProgress.child = primaryChildFragment;\r\n  return fallbackChildFragment;\r\n}\r\n\r\nfunction mountWorkInProgressOffscreenFiber(\r\n  offscreenProps: OffscreenProps,\r\n  mode: TypeOfMode,\r\n  renderLanes: Lanes,\r\n) {\r\n  // The props argument to `createFiberFromOffscreen` is `any` typed, so we use\r\n  // this wrapper function to constrain it.\r\n  return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);\r\n}\r\n\r\nfunction updateWorkInProgressOffscreenFiber(\r\n  current: Fiber,\r\n  offscreenProps: OffscreenProps,\r\n) {\r\n  // The props argument to `createWorkInProgress` is `any` typed, so we use this\r\n  // wrapper function to constrain it.\r\n  return createWorkInProgress(current, offscreenProps);\r\n}\r\n\r\nfunction updateSuspensePrimaryChildren(\r\n  current,\r\n  workInProgress,\r\n  primaryChildren,\r\n  renderLanes,\r\n) {\r\n  const currentPrimaryChildFragment: Fiber = (current.child: any);\r\n  const currentFallbackChildFragment: Fiber | null =\r\n    currentPrimaryChildFragment.sibling;\r\n\r\n  const primaryChildFragment = updateWorkInProgressOffscreenFiber(\r\n    currentPrimaryChildFragment,\r\n    {\r\n      mode: 'visible',\r\n      children: primaryChildren,\r\n    },\r\n  );\r\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\r\n    primaryChildFragment.lanes = renderLanes;\r\n  }\r\n  primaryChildFragment.return = workInProgress;\r\n  primaryChildFragment.sibling = null;\r\n  if (currentFallbackChildFragment !== null) {\r\n    // Delete the fallback child fragment\r\n    const deletions = workInProgress.deletions;\r\n    if (deletions === null) {\r\n      workInProgress.deletions = [currentFallbackChildFragment];\r\n      workInProgress.flags |= ChildDeletion;\r\n    } else {\r\n      deletions.push(currentFallbackChildFragment);\r\n    }\r\n  }\r\n\r\n  workInProgress.child = primaryChildFragment;\r\n  return primaryChildFragment;\r\n}\r\n\r\nfunction updateSuspenseFallbackChildren(\r\n  current,\r\n  workInProgress,\r\n  primaryChildren,\r\n  fallbackChildren,\r\n  renderLanes,\r\n) {\r\n  const mode = workInProgress.mode;\r\n  const currentPrimaryChildFragment: Fiber = (current.child: any);\r\n  const currentFallbackChildFragment: Fiber | null =\r\n    currentPrimaryChildFragment.sibling;\r\n\r\n  const primaryChildProps: OffscreenProps = {\r\n    mode: 'hidden',\r\n    children: primaryChildren,\r\n  };\r\n\r\n  let primaryChildFragment;\r\n  if (\r\n    // In legacy mode, we commit the primary tree as if it successfully\r\n    // completed, even though it's in an inconsistent state.\r\n    (mode & ConcurrentMode) === NoMode &&\r\n    // Make sure we're on the second pass, i.e. the primary child fragment was\r\n    // already cloned. In legacy mode, the only case where this isn't true is\r\n    // when DevTools forces us to display a fallback; we skip the first render\r\n    // pass entirely and go straight to rendering the fallback. (In Concurrent\r\n    // Mode, SuspenseList can also trigger this scenario, but this is a legacy-\r\n    // only codepath.)\r\n    workInProgress.child !== currentPrimaryChildFragment\r\n  ) {\r\n    const progressedPrimaryFragment: Fiber = (workInProgress.child: any);\r\n    primaryChildFragment = progressedPrimaryFragment;\r\n    primaryChildFragment.childLanes = NoLanes;\r\n    primaryChildFragment.pendingProps = primaryChildProps;\r\n\r\n    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {\r\n      // Reset the durations from the first pass so they aren't included in the\r\n      // final amounts. This seems counterintuitive, since we're intentionally\r\n      // not measuring part of the render phase, but this makes it match what we\r\n      // do in Concurrent Mode.\r\n      primaryChildFragment.actualDuration = 0;\r\n      primaryChildFragment.actualStartTime = -1;\r\n      primaryChildFragment.selfBaseDuration =\r\n        currentPrimaryChildFragment.selfBaseDuration;\r\n      primaryChildFragment.treeBaseDuration =\r\n        currentPrimaryChildFragment.treeBaseDuration;\r\n    }\r\n\r\n    // The fallback fiber was added as a deletion during the first pass.\r\n    // However, since we're going to remain on the fallback, we no longer want\r\n    // to delete it.\r\n    workInProgress.deletions = null;\r\n  } else {\r\n    primaryChildFragment = updateWorkInProgressOffscreenFiber(\r\n      currentPrimaryChildFragment,\r\n      primaryChildProps,\r\n    );\r\n    // Since we're reusing a current tree, we need to reuse the flags, too.\r\n    // (We don't do this in legacy mode, because in legacy mode we don't re-use\r\n    // the current tree; see previous branch.)\r\n    primaryChildFragment.subtreeFlags =\r\n      currentPrimaryChildFragment.subtreeFlags & StaticMask;\r\n  }\r\n  let fallbackChildFragment;\r\n  if (currentFallbackChildFragment !== null) {\r\n    fallbackChildFragment = createWorkInProgress(\r\n      currentFallbackChildFragment,\r\n      fallbackChildren,\r\n    );\r\n  } else {\r\n    fallbackChildFragment = createFiberFromFragment(\r\n      fallbackChildren,\r\n      mode,\r\n      renderLanes,\r\n      null,\r\n    );\r\n    // Needs a placement effect because the parent (the Suspense boundary) already\r\n    // mounted but this is a new fiber.\r\n    fallbackChildFragment.flags |= Placement;\r\n  }\r\n\r\n  fallbackChildFragment.return = workInProgress;\r\n  primaryChildFragment.return = workInProgress;\r\n  primaryChildFragment.sibling = fallbackChildFragment;\r\n  workInProgress.child = primaryChildFragment;\r\n\r\n  return fallbackChildFragment;\r\n}\r\n\r\nfunction retrySuspenseComponentWithoutHydrating(\r\n  current: Fiber,\r\n  workInProgress: Fiber,\r\n  renderLanes: Lanes,\r\n  recoverableError: CapturedValue<mixed> | null,\r\n) {\r\n  // Falling back to client rendering. Because this has performance\r\n  // implications, it's considered a recoverable error, even though the user\r\n  // likely won't observe anything wrong with the UI.\r\n  //\r\n  // The error is passed in as an argument to enforce that every caller provide\r\n  // a custom message, or explicitly opt out (currently the only path that opts\r\n  // out is legacy mode; every concurrent path provides an error).\r\n  if (recoverableError !== null) {\r\n    queueHydrationError(recoverableError);\r\n  }\r\n\r\n  // This will add the old fiber to the deletion list\r\n  reconcileChildFibers(workInProgress, current.child, null, renderLanes);\r\n\r\n  // We're now not suspended nor dehydrated.\r\n  const nextProps = workInProgress.pendingProps;\r\n  const primaryChildren = nextProps.children;\r\n  const primaryChildFragment = mountSuspensePrimaryChildren(\r\n    workInProgress,\r\n    primaryChildren,\r\n    renderLanes,\r\n  );\r\n  // Needs a placement effect because the parent (the Suspense boundary) already\r\n  // mounted but this is a new fiber.\r\n  primaryChildFragment.flags |= Placement;\r\n  workInProgress.memoizedState = null;\r\n\r\n  return primaryChildFragment;\r\n}\r\n\r\nfunction mountSuspenseFallbackAfterRetryWithoutHydrating(\r\n  current,\r\n  workInProgress,\r\n  primaryChildren,\r\n  fallbackChildren,\r\n  renderLanes,\r\n) {\r\n  const fiberMode = workInProgress.mode;\r\n  const primaryChildProps: OffscreenProps = {\r\n    mode: 'visible',\r\n    children: primaryChildren,\r\n  };\r\n  const primaryChildFragment = mountWorkInProgressOffscreenFiber(\r\n    primaryChildProps,\r\n    fiberMode,\r\n    NoLanes,\r\n  );\r\n  const fallbackChildFragment = createFiberFromFragment(\r\n    fallbackChildren,\r\n    fiberMode,\r\n    renderLanes,\r\n    null,\r\n  );\r\n  // Needs a placement effect because the parent (the Suspense\r\n  // boundary) already mounted but this is a new fiber.\r\n  fallbackChildFragment.flags |= Placement;\r\n\r\n  primaryChildFragment.return = workInProgress;\r\n  fallbackChildFragment.return = workInProgress;\r\n  primaryChildFragment.sibling = fallbackChildFragment;\r\n  workInProgress.child = primaryChildFragment;\r\n\r\n  if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\r\n    // We will have dropped the effect list which contains the\r\n    // deletion. We need to reconcile to delete the current child.\r\n    reconcileChildFibers(workInProgress, current.child, null, renderLanes);\r\n  }\r\n\r\n  return fallbackChildFragment;\r\n}\r\n\r\nfunction mountDehydratedSuspenseComponent(\r\n  workInProgress: Fiber,\r\n  suspenseInstance: SuspenseInstance,\r\n  renderLanes: Lanes,\r\n): null | Fiber {\r\n  // During the first pass, we'll bail out and not drill into the children.\r\n  // Instead, we'll leave the content in place and try to hydrate it later.\r\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\r\n    if (__DEV__) {\r\n      console.error(\r\n        'Cannot hydrate Suspense in legacy mode. Switch from ' +\r\n          'ReactDOM.hydrate(element, container) to ' +\r\n          'ReactDOMClient.hydrateRoot(container, <App />)' +\r\n          '.render(element) or remove the Suspense components from ' +\r\n          'the server rendered components.',\r\n      );\r\n    }\r\n    workInProgress.lanes = laneToLanes(SyncLane);\r\n  } else if (isSuspenseInstanceFallback(suspenseInstance)) {\r\n    // This is a client-only boundary. Since we won't get any content from the server\r\n    // for this, we need to schedule that at a higher priority based on when it would\r\n    // have timed out. In theory we could render it in this pass but it would have the\r\n    // wrong priority associated with it and will prevent hydration of parent path.\r\n    // Instead, we'll leave work left on it to render it in a separate commit.\r\n\r\n    // TODO This time should be the time at which the server rendered response that is\r\n    // a parent to this boundary was displayed. However, since we currently don't have\r\n    // a protocol to transfer that time, we'll just estimate it by using the current\r\n    // time. This will mean that Suspense timeouts are slightly shifted to later than\r\n    // they should be.\r\n    // Schedule a normal pri update to render this content.\r\n    workInProgress.lanes = laneToLanes(DefaultHydrationLane);\r\n  } else {\r\n    // We'll continue hydrating the rest at offscreen priority since we'll already\r\n    // be showing the right content coming from the server, it is no rush.\r\n    workInProgress.lanes = laneToLanes(OffscreenLane);\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction updateDehydratedSuspenseComponent(\r\n  current: Fiber,\r\n  workInProgress: Fiber,\r\n  didSuspend: boolean,\r\n  nextProps: any,\r\n  suspenseInstance: SuspenseInstance,\r\n  suspenseState: SuspenseState,\r\n  renderLanes: Lanes,\r\n): null | Fiber {\r\n  if (!didSuspend) {\r\n    // This is the first render pass. Attempt to hydrate.\r\n    pushPrimaryTreeSuspenseHandler(workInProgress);\r\n\r\n    // We should never be hydrating at this point because it is the first pass,\r\n    // but after we've already committed once.\r\n    warnIfHydrating();\r\n\r\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\r\n      return retrySuspenseComponentWithoutHydrating(\r\n        current,\r\n        workInProgress,\r\n        renderLanes,\r\n        // TODO: When we delete legacy mode, we should make this error argument\r\n        // required — every concurrent mode path that causes hydration to\r\n        // de-opt to client rendering should have an error message.\r\n        null,\r\n      );\r\n    }\r\n\r\n    if (isSuspenseInstanceFallback(suspenseInstance)) {\r\n      // This boundary is in a permanent fallback state. In this case, we'll never\r\n      // get an update and we'll never be able to hydrate the final content. Let's just try the\r\n      // client side render instead.\r\n      let digest, message, stack;\r\n      if (__DEV__) {\r\n        ({digest, message, stack} = getSuspenseInstanceFallbackErrorDetails(\r\n          suspenseInstance,\r\n        ));\r\n      } else {\r\n        ({digest} = getSuspenseInstanceFallbackErrorDetails(suspenseInstance));\r\n      }\r\n\r\n      let error;\r\n      if (message) {\r\n        // eslint-disable-next-line react-internal/prod-error-codes\r\n        error = new Error(message);\r\n      } else {\r\n        error = new Error(\r\n          'The server could not finish this Suspense boundary, likely ' +\r\n            'due to an error during server rendering. Switched to ' +\r\n            'client rendering.',\r\n        );\r\n      }\r\n      const capturedValue = createCapturedValue(error, digest, stack);\r\n      return retrySuspenseComponentWithoutHydrating(\r\n        current,\r\n        workInProgress,\r\n        renderLanes,\r\n        capturedValue,\r\n      );\r\n    }\r\n\r\n    if (\r\n      enableLazyContextPropagation &&\r\n      // TODO: Factoring is a little weird, since we check this right below, too.\r\n      // But don't want to re-arrange the if-else chain until/unless this\r\n      // feature lands.\r\n      !didReceiveUpdate\r\n    ) {\r\n      // We need to check if any children have context before we decide to bail\r\n      // out, so propagate the changes now.\r\n      lazilyPropagateParentContextChanges(current, workInProgress, renderLanes);\r\n    }\r\n\r\n    // We use lanes to indicate that a child might depend on context, so if\r\n    // any context has changed, we need to treat is as if the input might have changed.\r\n    const hasContextChanged = includesSomeLane(renderLanes, current.childLanes);\r\n    if (didReceiveUpdate || hasContextChanged) {\r\n      // This boundary has changed since the first render. This means that we are now unable to\r\n      // hydrate it. We might still be able to hydrate it using a higher priority lane.\r\n      const root = getWorkInProgressRoot();\r\n      if (root !== null) {\r\n        const attemptHydrationAtLane = getBumpedLaneForHydration(\r\n          root,\r\n          renderLanes,\r\n        );\r\n        if (\r\n          attemptHydrationAtLane !== NoLane &&\r\n          attemptHydrationAtLane !== suspenseState.retryLane\r\n        ) {\r\n          // Intentionally mutating since this render will get interrupted. This\r\n          // is one of the very rare times where we mutate the current tree\r\n          // during the render phase.\r\n          suspenseState.retryLane = attemptHydrationAtLane;\r\n          // TODO: Ideally this would inherit the event time of the current render\r\n          const eventTime = NoTimestamp;\r\n          enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);\r\n          scheduleUpdateOnFiber(\r\n            root,\r\n            current,\r\n            attemptHydrationAtLane,\r\n            eventTime,\r\n          );\r\n        } else {\r\n          // We have already tried to ping at a higher priority than we're rendering with\r\n          // so if we got here, we must have failed to hydrate at those levels. We must\r\n          // now give up. Instead, we're going to delete the whole subtree and instead inject\r\n          // a new real Suspense boundary to take its place, which may render content\r\n          // or fallback. This might suspend for a while and if it does we might still have\r\n          // an opportunity to hydrate before this pass commits.\r\n        }\r\n      }\r\n\r\n      // If we have scheduled higher pri work above, this will probably just abort the render\r\n      // since we now have higher priority work, but in case it doesn't, we need to prepare to\r\n      // render something, if we time out. Even if that requires us to delete everything and\r\n      // skip hydration.\r\n      // Delay having to do this as long as the suspense timeout allows us.\r\n      renderDidSuspendDelayIfPossible();\r\n      const capturedValue = createCapturedValue(\r\n        new Error(\r\n          'This Suspense boundary received an update before it finished ' +\r\n            'hydrating. This caused the boundary to switch to client rendering. ' +\r\n            'The usual way to fix this is to wrap the original update ' +\r\n            'in startTransition.',\r\n        ),\r\n      );\r\n      return retrySuspenseComponentWithoutHydrating(\r\n        current,\r\n        workInProgress,\r\n        renderLanes,\r\n        capturedValue,\r\n      );\r\n    } else if (isSuspenseInstancePending(suspenseInstance)) {\r\n      // This component is still pending more data from the server, so we can't hydrate its\r\n      // content. We treat it as if this component suspended itself. It might seem as if\r\n      // we could just try to render it client-side instead. However, this will perform a\r\n      // lot of unnecessary work and is unlikely to complete since it often will suspend\r\n      // on missing data anyway. Additionally, the server might be able to render more\r\n      // than we can on the client yet. In that case we'd end up with more fallback states\r\n      // on the client than if we just leave it alone. If the server times out or errors\r\n      // these should update this boundary to the permanent Fallback state instead.\r\n      // Mark it as having captured (i.e. suspended).\r\n      workInProgress.flags |= DidCapture;\r\n      // Leave the child in place. I.e. the dehydrated fragment.\r\n      workInProgress.child = current.child;\r\n      // Register a callback to retry this boundary once the server has sent the result.\r\n      const retry = retryDehydratedSuspenseBoundary.bind(null, current);\r\n      registerSuspenseInstanceRetry(suspenseInstance, retry);\r\n      return null;\r\n    } else {\r\n      // This is the first attempt.\r\n      reenterHydrationStateFromDehydratedSuspenseInstance(\r\n        workInProgress,\r\n        suspenseInstance,\r\n        suspenseState.treeContext,\r\n      );\r\n      const primaryChildren = nextProps.children;\r\n      const primaryChildFragment = mountSuspensePrimaryChildren(\r\n        workInProgress,\r\n        primaryChildren,\r\n        renderLanes,\r\n      );\r\n      // Mark the children as hydrating. This is a fast path to know whether this\r\n      // tree is part of a hydrating tree. This is used to determine if a child\r\n      // node has fully mounted yet, and for scheduling event replaying.\r\n      // Conceptually this is similar to Placement in that a new subtree is\r\n      // inserted into the React tree here. It just happens to not need DOM\r\n      // mutations because it already exists.\r\n      primaryChildFragment.flags |= Hydrating;\r\n      return primaryChildFragment;\r\n    }\r\n  } else {\r\n    // This is the second render pass. We already attempted to hydrated, but\r\n    // something either suspended or errored.\r\n\r\n    if (workInProgress.flags & ForceClientRender) {\r\n      // Something errored during hydration. Try again without hydrating.\r\n      pushPrimaryTreeSuspenseHandler(workInProgress);\r\n\r\n      workInProgress.flags &= ~ForceClientRender;\r\n      const capturedValue = createCapturedValue(\r\n        new Error(\r\n          'There was an error while hydrating this Suspense boundary. ' +\r\n            'Switched to client rendering.',\r\n        ),\r\n      );\r\n      return retrySuspenseComponentWithoutHydrating(\r\n        current,\r\n        workInProgress,\r\n        renderLanes,\r\n        capturedValue,\r\n      );\r\n    } else if ((workInProgress.memoizedState: null | SuspenseState) !== null) {\r\n      // Something suspended and we should still be in dehydrated mode.\r\n      // Leave the existing child in place.\r\n\r\n      // Push to avoid a mismatch\r\n      pushFallbackTreeSuspenseHandler(workInProgress);\r\n\r\n      workInProgress.child = current.child;\r\n      // The dehydrated completion pass expects this flag to be there\r\n      // but the normal suspense pass doesn't.\r\n      workInProgress.flags |= DidCapture;\r\n      return null;\r\n    } else {\r\n      // Suspended but we should no longer be in dehydrated mode.\r\n      // Therefore we now have to render the fallback.\r\n      pushFallbackTreeSuspenseHandler(workInProgress);\r\n\r\n      const nextPrimaryChildren = nextProps.children;\r\n      const nextFallbackChildren = nextProps.fallback;\r\n      const fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(\r\n        current,\r\n        workInProgress,\r\n        nextPrimaryChildren,\r\n        nextFallbackChildren,\r\n        renderLanes,\r\n      );\r\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\r\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\r\n        renderLanes,\r\n      );\r\n      workInProgress.memoizedState = SUSPENDED_MARKER;\r\n      return fallbackChildFragment;\r\n    }\r\n  }\r\n}\r\n\r\nfunction scheduleSuspenseWorkOnFiber(\r\n  fiber: Fiber,\r\n  renderLanes: Lanes,\r\n  propagationRoot: Fiber,\r\n) {\r\n  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\r\n  const alternate = fiber.alternate;\r\n  if (alternate !== null) {\r\n    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\r\n  }\r\n  scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);\r\n}\r\n\r\nfunction propagateSuspenseContextChange(\r\n  workInProgress: Fiber,\r\n  firstChild: null | Fiber,\r\n  renderLanes: Lanes,\r\n): void {\r\n  // Mark any Suspense boundaries with fallbacks as having work to do.\r\n  // If they were previously forced into fallbacks, they may now be able\r\n  // to unblock.\r\n  let node = firstChild;\r\n  while (node !== null) {\r\n    if (node.tag === SuspenseComponent) {\r\n      const state: SuspenseState | null = node.memoizedState;\r\n      if (state !== null) {\r\n        scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\r\n      }\r\n    } else if (node.tag === SuspenseListComponent) {\r\n      // If the tail is hidden there might not be an Suspense boundaries\r\n      // to schedule work on. In this case we have to schedule it on the\r\n      // list itself.\r\n      // We don't have to traverse to the children of the list since\r\n      // the list will propagate the change when it rerenders.\r\n      scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\r\n    } else if (node.child !== null) {\r\n      node.child.return = node;\r\n      node = node.child;\r\n      continue;\r\n    }\r\n    if (node === workInProgress) {\r\n      return;\r\n    }\r\n    while (node.sibling === null) {\r\n      if (node.return === null || node.return === workInProgress) {\r\n        return;\r\n      }\r\n      node = node.return;\r\n    }\r\n    node.sibling.return = node.return;\r\n    node = node.sibling;\r\n  }\r\n}\r\n\r\nfunction findLastContentRow(firstChild: null | Fiber): null | Fiber {\r\n  // This is going to find the last row among these children that is already\r\n  // showing content on the screen, as opposed to being in fallback state or\r\n  // new. If a row has multiple Suspense boundaries, any of them being in the\r\n  // fallback state, counts as the whole row being in a fallback state.\r\n  // Note that the \"rows\" will be workInProgress, but any nested children\r\n  // will still be current since we haven't rendered them yet. The mounted\r\n  // order may not be the same as the new order. We use the new order.\r\n  let row = firstChild;\r\n  let lastContentRow: null | Fiber = null;\r\n  while (row !== null) {\r\n    const currentRow = row.alternate;\r\n    // New rows can't be content rows.\r\n    if (currentRow !== null && findFirstSuspended(currentRow) === null) {\r\n      lastContentRow = row;\r\n    }\r\n    row = row.sibling;\r\n  }\r\n  return lastContentRow;\r\n}\r\n\r\ntype SuspenseListRevealOrder = 'forwards' | 'backwards' | 'together' | void;\r\n\r\nfunction validateRevealOrder(revealOrder: SuspenseListRevealOrder) {\r\n  if (__DEV__) {\r\n    if (\r\n      revealOrder !== undefined &&\r\n      revealOrder !== 'forwards' &&\r\n      revealOrder !== 'backwards' &&\r\n      revealOrder !== 'together' &&\r\n      !didWarnAboutRevealOrder[revealOrder]\r\n    ) {\r\n      didWarnAboutRevealOrder[revealOrder] = true;\r\n      if (typeof revealOrder === 'string') {\r\n        switch (revealOrder.toLowerCase()) {\r\n          case 'together':\r\n          case 'forwards':\r\n          case 'backwards': {\r\n            console.error(\r\n              '\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' +\r\n                'Use lowercase \"%s\" instead.',\r\n              revealOrder,\r\n              revealOrder.toLowerCase(),\r\n            );\r\n            break;\r\n          }\r\n          case 'forward':\r\n          case 'backward': {\r\n            console.error(\r\n              '\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' +\r\n                'React uses the -s suffix in the spelling. Use \"%ss\" instead.',\r\n              revealOrder,\r\n              revealOrder.toLowerCase(),\r\n            );\r\n            break;\r\n          }\r\n          default:\r\n            console.error(\r\n              '\"%s\" is not a supported revealOrder on <SuspenseList />. ' +\r\n                'Did you mean \"together\", \"forwards\" or \"backwards\"?',\r\n              revealOrder,\r\n            );\r\n            break;\r\n        }\r\n      } else {\r\n        console.error(\r\n          '%s is not a supported value for revealOrder on <SuspenseList />. ' +\r\n            'Did you mean \"together\", \"forwards\" or \"backwards\"?',\r\n          revealOrder,\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction validateTailOptions(\r\n  tailMode: SuspenseListTailMode,\r\n  revealOrder: SuspenseListRevealOrder,\r\n) {\r\n  if (__DEV__) {\r\n    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\r\n      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {\r\n        didWarnAboutTailOptions[tailMode] = true;\r\n        console.error(\r\n          '\"%s\" is not a supported value for tail on <SuspenseList />. ' +\r\n            'Did you mean \"collapsed\" or \"hidden\"?',\r\n          tailMode,\r\n        );\r\n      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {\r\n        didWarnAboutTailOptions[tailMode] = true;\r\n        console.error(\r\n          '<SuspenseList tail=\"%s\" /> is only valid if revealOrder is ' +\r\n            '\"forwards\" or \"backwards\". ' +\r\n            'Did you mean to specify revealOrder=\"forwards\"?',\r\n          tailMode,\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction validateSuspenseListNestedChild(childSlot: mixed, index: number) {\r\n  if (__DEV__) {\r\n    const isAnArray = isArray(childSlot);\r\n    const isIterable =\r\n      !isAnArray && typeof getIteratorFn(childSlot) === 'function';\r\n    if (isAnArray || isIterable) {\r\n      const type = isAnArray ? 'array' : 'iterable';\r\n      console.error(\r\n        'A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' +\r\n          'an additional SuspenseList to configure its revealOrder: ' +\r\n          '<SuspenseList revealOrder=...> ... ' +\r\n          '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' +\r\n          '</SuspenseList>',\r\n        type,\r\n        index,\r\n        type,\r\n      );\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction validateSuspenseListChildren(\r\n  children: mixed,\r\n  revealOrder: SuspenseListRevealOrder,\r\n) {\r\n  if (__DEV__) {\r\n    if (\r\n      (revealOrder === 'forwards' || revealOrder === 'backwards') &&\r\n      children !== undefined &&\r\n      children !== null &&\r\n      children !== false\r\n    ) {\r\n      if (isArray(children)) {\r\n        for (let i = 0; i < children.length; i++) {\r\n          if (!validateSuspenseListNestedChild(children[i], i)) {\r\n            return;\r\n          }\r\n        }\r\n      } else {\r\n        const iteratorFn = getIteratorFn(children);\r\n        if (typeof iteratorFn === 'function') {\r\n          const childrenIterator = iteratorFn.call(children);\r\n          if (childrenIterator) {\r\n            let step = childrenIterator.next();\r\n            let i = 0;\r\n            for (; !step.done; step = childrenIterator.next()) {\r\n              if (!validateSuspenseListNestedChild(step.value, i)) {\r\n                return;\r\n              }\r\n              i++;\r\n            }\r\n          }\r\n        } else {\r\n          console.error(\r\n            'A single row was passed to a <SuspenseList revealOrder=\"%s\" />. ' +\r\n              'This is not useful since it needs multiple rows. ' +\r\n              'Did you mean to pass multiple children or an array?',\r\n            revealOrder,\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction initSuspenseListRenderState(\r\n  workInProgress: Fiber,\r\n  isBackwards: boolean,\r\n  tail: null | Fiber,\r\n  lastContentRow: null | Fiber,\r\n  tailMode: SuspenseListTailMode,\r\n): void {\r\n  const renderState: null | SuspenseListRenderState =\r\n    workInProgress.memoizedState;\r\n  if (renderState === null) {\r\n    workInProgress.memoizedState = ({\r\n      isBackwards: isBackwards,\r\n      rendering: null,\r\n      renderingStartTime: 0,\r\n      last: lastContentRow,\r\n      tail: tail,\r\n      tailMode: tailMode,\r\n    }: SuspenseListRenderState);\r\n  } else {\r\n    // We can reuse the existing object from previous renders.\r\n    renderState.isBackwards = isBackwards;\r\n    renderState.rendering = null;\r\n    renderState.renderingStartTime = 0;\r\n    renderState.last = lastContentRow;\r\n    renderState.tail = tail;\r\n    renderState.tailMode = tailMode;\r\n  }\r\n}\r\n\r\n// This can end up rendering this component multiple passes.\r\n// The first pass splits the children fibers into two sets. A head and tail.\r\n// We first render the head. If anything is in fallback state, we do another\r\n// pass through beginWork to rerender all children (including the tail) with\r\n// the force suspend context. If the first render didn't have anything in\r\n// in fallback state. Then we render each row in the tail one-by-one.\r\n// That happens in the completeWork phase without going back to beginWork.\r\nfunction updateSuspenseListComponent(\r\n  current: Fiber | null,\r\n  workInProgress: Fiber,\r\n  renderLanes: Lanes,\r\n) {\r\n  const nextProps = workInProgress.pendingProps;\r\n  const revealOrder: SuspenseListRevealOrder = nextProps.revealOrder;\r\n  const tailMode: SuspenseListTailMode = nextProps.tail;\r\n  const newChildren = nextProps.children;\r\n\r\n  validateRevealOrder(revealOrder);\r\n  validateTailOptions(tailMode, revealOrder);\r\n  validateSuspenseListChildren(newChildren, revealOrder);\r\n\r\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\r\n\r\n  let suspenseContext: SuspenseContext = suspenseStackCursor.current;\r\n\r\n  const shouldForceFallback = hasSuspenseListContext(\r\n    suspenseContext,\r\n    (ForceSuspenseFallback: SuspenseContext),\r\n  );\r\n  if (shouldForceFallback) {\r\n    suspenseContext = setShallowSuspenseListContext(\r\n      suspenseContext,\r\n      ForceSuspenseFallback,\r\n    );\r\n    workInProgress.flags |= DidCapture;\r\n  } else {\r\n    const didSuspendBefore =\r\n      current !== null && (current.flags & DidCapture) !== NoFlags;\r\n    if (didSuspendBefore) {\r\n      // If we previously forced a fallback, we need to schedule work\r\n      // on any nested boundaries to let them know to try to render\r\n      // again. This is the same as context updating.\r\n      propagateSuspenseContextChange(\r\n        workInProgress,\r\n        workInProgress.child,\r\n        renderLanes,\r\n      );\r\n    }\r\n    suspenseContext = setDefaultShallowSuspenseListContext(suspenseContext);\r\n  }\r\n  pushSuspenseListContext(workInProgress, suspenseContext);\r\n\r\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\r\n    // In legacy mode, SuspenseList doesn't work so we just\r\n    // use make it a noop by treating it as the default revealOrder.\r\n    workInProgress.memoizedState = null;\r\n  } else {\r\n    switch (revealOrder) {\r\n      case 'forwards': {\r\n        const lastContentRow = findLastContentRow(workInProgress.child);\r\n        let tail;\r\n        if (lastContentRow === null) {\r\n          // The whole list is part of the tail.\r\n          // TODO: We could fast path by just rendering the tail now.\r\n          tail = workInProgress.child;\r\n          workInProgress.child = null;\r\n        } else {\r\n          // Disconnect the tail rows after the content row.\r\n          // We're going to render them separately later.\r\n          tail = lastContentRow.sibling;\r\n          lastContentRow.sibling = null;\r\n        }\r\n        initSuspenseListRenderState(\r\n          workInProgress,\r\n          false, // isBackwards\r\n          tail,\r\n          lastContentRow,\r\n          tailMode,\r\n        );\r\n        break;\r\n      }\r\n      case 'backwards': {\r\n        // We're going to find the first row that has existing content.\r\n        // At the same time we're going to reverse the list of everything\r\n        // we pass in the meantime. That's going to be our tail in reverse\r\n        // order.\r\n        let tail = null;\r\n        let row = workInProgress.child;\r\n        workInProgress.child = null;\r\n        while (row !== null) {\r\n          const currentRow = row.alternate;\r\n          // New rows can't be content rows.\r\n          if (currentRow !== null && findFirstSuspended(currentRow) === null) {\r\n            // This is the beginning of the main content.\r\n            workInProgress.child = row;\r\n            break;\r\n          }\r\n          const nextRow = row.sibling;\r\n          row.sibling = tail;\r\n          tail = row;\r\n          row = nextRow;\r\n        }\r\n        // TODO: If workInProgress.child is null, we can continue on the tail immediately.\r\n        initSuspenseListRenderState(\r\n          workInProgress,\r\n          true, // isBackwards\r\n          tail,\r\n          null, // last\r\n          tailMode,\r\n        );\r\n        break;\r\n      }\r\n      case 'together': {\r\n        initSuspenseListRenderState(\r\n          workInProgress,\r\n          false, // isBackwards\r\n          null, // tail\r\n          null, // last\r\n          undefined,\r\n        );\r\n        break;\r\n      }\r\n      default: {\r\n        // The default reveal order is the same as not having\r\n        // a boundary.\r\n        workInProgress.memoizedState = null;\r\n      }\r\n    }\r\n  }\r\n  return workInProgress.child;\r\n}\r\n\r\nfunction updatePortalComponent(\r\n  current: Fiber | null,\r\n  workInProgress: Fiber,\r\n  renderLanes: Lanes,\r\n) {\r\n  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\r\n  const nextChildren = workInProgress.pendingProps;\r\n  if (current === null) {\r\n    // Portals are special because we don't append the children during mount\r\n    // but at commit. Therefore we need to track insertions which the normal\r\n    // flow doesn't do during mount. This doesn't happen at the root because\r\n    // the root always starts with a \"current\" with a null child.\r\n    // TODO: Consider unifying this with how the root works.\r\n    workInProgress.child = reconcileChildFibers(\r\n      workInProgress,\r\n      null,\r\n      nextChildren,\r\n      renderLanes,\r\n    );\r\n  } else {\r\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\r\n  }\r\n  return workInProgress.child;\r\n}\r\n\r\nlet hasWarnedAboutUsingNoValuePropOnContextProvider = false;\r\n\r\nfunction updateContextProvider(\r\n  current: Fiber | null,\r\n  workInProgress: Fiber,\r\n  renderLanes: Lanes,\r\n) {\r\n  const providerType: ReactProviderType<any> = workInProgress.type;\r\n  const context: ReactContext<any> = providerType._context;\r\n\r\n  const newProps = workInProgress.pendingProps;\r\n  const oldProps = workInProgress.memoizedProps;\r\n\r\n  const newValue = newProps.value;\r\n\r\n  if (__DEV__) {\r\n    if (!('value' in newProps)) {\r\n      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\r\n        hasWarnedAboutUsingNoValuePropOnContextProvider = true;\r\n        console.error(\r\n          'The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?',\r\n        );\r\n      }\r\n    }\r\n    const providerPropTypes = workInProgress.type.propTypes;\r\n\r\n    if (providerPropTypes) {\r\n      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');\r\n    }\r\n  }\r\n\r\n  pushProvider(workInProgress, context, newValue);\r\n\r\n  if (enableLazyContextPropagation) {\r\n    // In the lazy propagation implementation, we don't scan for matching\r\n    // consumers until something bails out, because until something bails out\r\n    // we're going to visit those nodes, anyway. The trade-off is that it shifts\r\n    // responsibility to the consumer to track whether something has changed.\r\n  } else {\r\n    if (oldProps !== null) {\r\n      const oldValue = oldProps.value;\r\n      if (is(oldValue, newValue)) {\r\n        // No change. Bailout early if children are the same.\r\n        if (\r\n          oldProps.children === newProps.children &&\r\n          !hasLegacyContextChanged()\r\n        ) {\r\n          return bailoutOnAlreadyFinishedWork(\r\n            current,\r\n            workInProgress,\r\n            renderLanes,\r\n          );\r\n        }\r\n      } else {\r\n        // The context value changed. Search for matching consumers and schedule\r\n        // them to update.\r\n        propagateContextChange(workInProgress, context, renderLanes);\r\n      }\r\n    }\r\n  }\r\n\r\n  const newChildren = newProps.children;\r\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\r\n  return workInProgress.child;\r\n}\r\n\r\nlet hasWarnedAboutUsingContextAsConsumer = false;\r\n\r\nfunction updateContextConsumer(\r\n  current: Fiber | null,\r\n  workInProgress: Fiber,\r\n  renderLanes: Lanes,\r\n) {\r\n  let context: ReactContext<any> = workInProgress.type;\r\n  // The logic below for Context differs depending on PROD or DEV mode. In\r\n  // DEV mode, we create a separate object for Context.Consumer that acts\r\n  // like a proxy to Context. This proxy object adds unnecessary code in PROD\r\n  // so we use the old behaviour (Context.Consumer references Context) to\r\n  // reduce size and overhead. The separate object references context via\r\n  // a property called \"_context\", which also gives us the ability to check\r\n  // in DEV mode if this property exists or not and warn if it does not.\r\n  if (__DEV__) {\r\n    if ((context: any)._context === undefined) {\r\n      // This may be because it's a Context (rather than a Consumer).\r\n      // Or it may be because it's older React where they're the same thing.\r\n      // We only want to warn if we're sure it's a new React.\r\n      if (context !== context.Consumer) {\r\n        if (!hasWarnedAboutUsingContextAsConsumer) {\r\n          hasWarnedAboutUsingContextAsConsumer = true;\r\n          console.error(\r\n            'Rendering <Context> directly is not supported and will be removed in ' +\r\n              'a future major release. Did you mean to render <Context.Consumer> instead?',\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      context = (context: any)._context;\r\n    }\r\n  }\r\n  const newProps = workInProgress.pendingProps;\r\n  const render = newProps.children;\r\n\r\n  if (__DEV__) {\r\n    if (typeof render !== 'function') {\r\n      console.error(\r\n        'A context consumer was rendered with multiple children, or a child ' +\r\n          \"that isn't a function. A context consumer expects a single child \" +\r\n          'that is a function. If you did pass a function, make sure there ' +\r\n          'is no trailing or leading whitespace around it.',\r\n      );\r\n    }\r\n  }\r\n\r\n  prepareToReadContext(workInProgress, renderLanes);\r\n  const newValue = readContext(context);\r\n  if (enableSchedulingProfiler) {\r\n    markComponentRenderStarted(workInProgress);\r\n  }\r\n  let newChildren;\r\n  if (__DEV__) {\r\n    ReactCurrentOwner.current = workInProgress;\r\n    setIsRendering(true);\r\n    newChildren = render(newValue);\r\n    setIsRendering(false);\r\n  } else {\r\n    newChildren = render(newValue);\r\n  }\r\n  if (enableSchedulingProfiler) {\r\n    markComponentRenderStopped();\r\n  }\r\n\r\n  // React DevTools reads this flag.\r\n  workInProgress.flags |= PerformedWork;\r\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\r\n  return workInProgress.child;\r\n}\r\n\r\nfunction updateScopeComponent(current, workInProgress, renderLanes) {\r\n  const nextProps = workInProgress.pendingProps;\r\n  const nextChildren = nextProps.children;\r\n\r\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\r\n  return workInProgress.child;\r\n}\r\n\r\nexport function markWorkInProgressReceivedUpdate() {\r\n  didReceiveUpdate = true;\r\n}\r\n\r\nexport function checkIfWorkInProgressReceivedUpdate(): boolean {\r\n  return didReceiveUpdate;\r\n}\r\n\r\nfunction resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {\r\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\r\n    if (current !== null) {\r\n      // A lazy component only mounts if it suspended inside a non-\r\n      // concurrent tree, in an inconsistent state. We want to treat it like\r\n      // a new mount, even though an empty version of it already committed.\r\n      // Disconnect the alternate pointers.\r\n      current.alternate = null;\r\n      workInProgress.alternate = null;\r\n      // Since this is conceptually a new fiber, schedule a Placement effect\r\n      workInProgress.flags |= Placement;\r\n    }\r\n  }\r\n}\r\n\r\nfunction bailoutOnAlreadyFinishedWork(\r\n  current: Fiber | null,\r\n  workInProgress: Fiber,\r\n  renderLanes: Lanes,\r\n): Fiber | null {\r\n  if (current !== null) {\r\n    // Reuse previous dependencies\r\n    workInProgress.dependencies = current.dependencies;\r\n  }\r\n\r\n  if (enableProfilerTimer) {\r\n    // Don't update \"base\" render times for bailouts.\r\n    stopProfilerTimerIfRunning(workInProgress);\r\n  }\r\n\r\n  markSkippedUpdateLanes(workInProgress.lanes);\r\n\r\n  // Check if the children have any pending work.\r\n  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\r\n    // The children don't have any work either. We can skip them.\r\n    // TODO: Once we add back resuming, we should check if the children are\r\n    // a work-in-progress set. If so, we need to transfer their effects.\r\n\r\n    if (enableLazyContextPropagation && current !== null) {\r\n      // Before bailing out, check if there are any context changes in\r\n      // the children.\r\n      lazilyPropagateParentContextChanges(current, workInProgress, renderLanes);\r\n      if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\r\n        return null;\r\n      }\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // This fiber doesn't have work, but its subtree does. Clone the child\r\n  // fibers and continue.\r\n  cloneChildFibers(current, workInProgress);\r\n  return workInProgress.child;\r\n}\r\n\r\nfunction remountFiber(\r\n  current: Fiber,\r\n  oldWorkInProgress: Fiber,\r\n  newWorkInProgress: Fiber,\r\n): Fiber | null {\r\n  if (__DEV__) {\r\n    const returnFiber = oldWorkInProgress.return;\r\n    if (returnFiber === null) {\r\n      // eslint-disable-next-line react-internal/prod-error-codes\r\n      throw new Error('Cannot swap the root fiber.');\r\n    }\r\n\r\n    // Disconnect from the old current.\r\n    // It will get deleted.\r\n    current.alternate = null;\r\n    oldWorkInProgress.alternate = null;\r\n\r\n    // Connect to the new tree.\r\n    newWorkInProgress.index = oldWorkInProgress.index;\r\n    newWorkInProgress.sibling = oldWorkInProgress.sibling;\r\n    newWorkInProgress.return = oldWorkInProgress.return;\r\n    newWorkInProgress.ref = oldWorkInProgress.ref;\r\n\r\n    // Replace the child/sibling pointers above it.\r\n    if (oldWorkInProgress === returnFiber.child) {\r\n      returnFiber.child = newWorkInProgress;\r\n    } else {\r\n      let prevSibling = returnFiber.child;\r\n      if (prevSibling === null) {\r\n        // eslint-disable-next-line react-internal/prod-error-codes\r\n        throw new Error('Expected parent to have a child.');\r\n      }\r\n      while (prevSibling.sibling !== oldWorkInProgress) {\r\n        prevSibling = prevSibling.sibling;\r\n        if (prevSibling === null) {\r\n          // eslint-disable-next-line react-internal/prod-error-codes\r\n          throw new Error('Expected to find the previous sibling.');\r\n        }\r\n      }\r\n      prevSibling.sibling = newWorkInProgress;\r\n    }\r\n\r\n    // Delete the old fiber and place the new one.\r\n    // Since the old fiber is disconnected, we have to schedule it manually.\r\n    const deletions = returnFiber.deletions;\r\n    if (deletions === null) {\r\n      returnFiber.deletions = [current];\r\n      returnFiber.flags |= ChildDeletion;\r\n    } else {\r\n      deletions.push(current);\r\n    }\r\n\r\n    newWorkInProgress.flags |= Placement;\r\n\r\n    // Restart work from the new fiber.\r\n    return newWorkInProgress;\r\n  } else {\r\n    throw new Error(\r\n      'Did not expect this call in production. ' +\r\n        'This is a bug in React. Please file an issue.',\r\n    );\r\n  }\r\n}\r\n\r\nfunction checkScheduledUpdateOrContext(\r\n  current: Fiber,\r\n  renderLanes: Lanes,\r\n): boolean {\r\n  // Before performing an early bailout, we must check if there are pending\r\n  // updates or context.\r\n  const updateLanes = current.lanes;\r\n  if (includesSomeLane(updateLanes, renderLanes)) {\r\n    return true;\r\n  }\r\n  // No pending update, but because context is propagated lazily, we need\r\n  // to check for a context change before we bail out.\r\n  if (enableLazyContextPropagation) {\r\n    const dependencies = current.dependencies;\r\n    if (dependencies !== null && checkIfContextChanged(dependencies)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction attemptEarlyBailoutIfNoScheduledUpdate(\r\n  current: Fiber,\r\n  workInProgress: Fiber,\r\n  renderLanes: Lanes,\r\n) {\r\n  // This fiber does not have any pending work. Bailout without entering\r\n  // the begin phase. There's still some bookkeeping we that needs to be done\r\n  // in this optimized path, mostly pushing stuff onto the stack.\r\n  switch (workInProgress.tag) {\r\n    case HostRoot:\r\n      pushHostRootContext(workInProgress);\r\n      const root: FiberRoot = workInProgress.stateNode;\r\n      pushRootTransition(workInProgress, root, renderLanes);\r\n\r\n      if (enableTransitionTracing) {\r\n        pushRootMarkerInstance(workInProgress);\r\n      }\r\n\r\n      if (enableCache) {\r\n        const cache: Cache = current.memoizedState.cache;\r\n        pushCacheProvider(workInProgress, cache);\r\n      }\r\n      resetHydrationState();\r\n      break;\r\n    case HostComponent:\r\n      pushHostContext(workInProgress);\r\n      break;\r\n    case ClassComponent: {\r\n      const Component = workInProgress.type;\r\n      if (isLegacyContextProvider(Component)) {\r\n        pushLegacyContextProvider(workInProgress);\r\n      }\r\n      break;\r\n    }\r\n    case HostPortal:\r\n      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\r\n      break;\r\n    case ContextProvider: {\r\n      const newValue = workInProgress.memoizedProps.value;\r\n      const context: ReactContext<any> = workInProgress.type._context;\r\n      pushProvider(workInProgress, context, newValue);\r\n      break;\r\n    }\r\n    case Profiler:\r\n      if (enableProfilerTimer) {\r\n        // Profiler should only call onRender when one of its descendants actually rendered.\r\n        const hasChildWork = includesSomeLane(\r\n          renderLanes,\r\n          workInProgress.childLanes,\r\n        );\r\n        if (hasChildWork) {\r\n          workInProgress.flags |= Update;\r\n        }\r\n\r\n        if (enableProfilerCommitHooks) {\r\n          // Reset effect durations for the next eventual effect phase.\r\n          // These are reset during render to allow the DevTools commit hook a chance to read them,\r\n          const stateNode = workInProgress.stateNode;\r\n          stateNode.effectDuration = 0;\r\n          stateNode.passiveEffectDuration = 0;\r\n        }\r\n      }\r\n      break;\r\n    case SuspenseComponent: {\r\n      const state: SuspenseState | null = workInProgress.memoizedState;\r\n      if (state !== null) {\r\n        if (state.dehydrated !== null) {\r\n          // We're not going to render the children, so this is just to maintain\r\n          // push/pop symmetry\r\n          pushPrimaryTreeSuspenseHandler(workInProgress);\r\n          // We know that this component will suspend again because if it has\r\n          // been unsuspended it has committed as a resolved Suspense component.\r\n          // If it needs to be retried, it should have work scheduled on it.\r\n          workInProgress.flags |= DidCapture;\r\n          // We should never render the children of a dehydrated boundary until we\r\n          // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.\r\n          return null;\r\n        }\r\n\r\n        // If this boundary is currently timed out, we need to decide\r\n        // whether to retry the primary children, or to skip over it and\r\n        // go straight to the fallback. Check the priority of the primary\r\n        // child fragment.\r\n        const primaryChildFragment: Fiber = (workInProgress.child: any);\r\n        const primaryChildLanes = primaryChildFragment.childLanes;\r\n        if (includesSomeLane(renderLanes, primaryChildLanes)) {\r\n          // The primary children have pending work. Use the normal path\r\n          // to attempt to render the primary children again.\r\n          return updateSuspenseComponent(current, workInProgress, renderLanes);\r\n        } else {\r\n          // The primary child fragment does not have pending work marked\r\n          // on it\r\n          pushPrimaryTreeSuspenseHandler(workInProgress);\r\n          // The primary children do not have pending work with sufficient\r\n          // priority. Bailout.\r\n          const child = bailoutOnAlreadyFinishedWork(\r\n            current,\r\n            workInProgress,\r\n            renderLanes,\r\n          );\r\n          if (child !== null) {\r\n            // The fallback children have pending work. Skip over the\r\n            // primary children and work on the fallback.\r\n            return child.sibling;\r\n          } else {\r\n            // Note: We can return `null` here because we already checked\r\n            // whether there were nested context consumers, via the call to\r\n            // `bailoutOnAlreadyFinishedWork` above.\r\n            return null;\r\n          }\r\n        }\r\n      } else {\r\n        pushPrimaryTreeSuspenseHandler(workInProgress);\r\n      }\r\n      break;\r\n    }\r\n    case SuspenseListComponent: {\r\n      const didSuspendBefore = (current.flags & DidCapture) !== NoFlags;\r\n\r\n      let hasChildWork = includesSomeLane(\r\n        renderLanes,\r\n        workInProgress.childLanes,\r\n      );\r\n\r\n      if (enableLazyContextPropagation && !hasChildWork) {\r\n        // Context changes may not have been propagated yet. We need to do\r\n        // that now, before we can decide whether to bail out.\r\n        // TODO: We use `childLanes` as a heuristic for whether there is\r\n        // remaining work in a few places, including\r\n        // `bailoutOnAlreadyFinishedWork` and\r\n        // `updateDehydratedSuspenseComponent`. We should maybe extract this\r\n        // into a dedicated function.\r\n        lazilyPropagateParentContextChanges(\r\n          current,\r\n          workInProgress,\r\n          renderLanes,\r\n        );\r\n        hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\r\n      }\r\n\r\n      if (didSuspendBefore) {\r\n        if (hasChildWork) {\r\n          // If something was in fallback state last time, and we have all the\r\n          // same children then we're still in progressive loading state.\r\n          // Something might get unblocked by state updates or retries in the\r\n          // tree which will affect the tail. So we need to use the normal\r\n          // path to compute the correct tail.\r\n          return updateSuspenseListComponent(\r\n            current,\r\n            workInProgress,\r\n            renderLanes,\r\n          );\r\n        }\r\n        // If none of the children had any work, that means that none of\r\n        // them got retried so they'll still be blocked in the same way\r\n        // as before. We can fast bail out.\r\n        workInProgress.flags |= DidCapture;\r\n      }\r\n\r\n      // If nothing suspended before and we're rendering the same children,\r\n      // then the tail doesn't matter. Anything new that suspends will work\r\n      // in the \"together\" mode, so we can continue from the state we had.\r\n      const renderState = workInProgress.memoizedState;\r\n      if (renderState !== null) {\r\n        // Reset to the \"together\" mode in case we've started a different\r\n        // update in the past but didn't complete it.\r\n        renderState.rendering = null;\r\n        renderState.tail = null;\r\n        renderState.lastEffect = null;\r\n      }\r\n      pushSuspenseListContext(workInProgress, suspenseStackCursor.current);\r\n\r\n      if (hasChildWork) {\r\n        break;\r\n      } else {\r\n        // If none of the children had any work, that means that none of\r\n        // them got retried so they'll still be blocked in the same way\r\n        // as before. We can fast bail out.\r\n        return null;\r\n      }\r\n    }\r\n    case OffscreenComponent:\r\n    case LegacyHiddenComponent: {\r\n      // Need to check if the tree still needs to be deferred. This is\r\n      // almost identical to the logic used in the normal update path,\r\n      // so we'll just enter that. The only difference is we'll bail out\r\n      // at the next level instead of this one, because the child props\r\n      // have not changed. Which is fine.\r\n      // TODO: Probably should refactor `beginWork` to split the bailout\r\n      // path from the normal path. I'm tempted to do a labeled break here\r\n      // but I won't :)\r\n      workInProgress.lanes = NoLanes;\r\n      return updateOffscreenComponent(current, workInProgress, renderLanes);\r\n    }\r\n    case CacheComponent: {\r\n      if (enableCache) {\r\n        const cache: Cache = current.memoizedState.cache;\r\n        pushCacheProvider(workInProgress, cache);\r\n      }\r\n      break;\r\n    }\r\n    case TracingMarkerComponent: {\r\n      if (enableTransitionTracing) {\r\n        const instance: TracingMarkerInstance | null = workInProgress.stateNode;\r\n        if (instance !== null) {\r\n          pushMarkerInstance(workInProgress, instance);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\r\n}\r\n\r\nfunction beginWork(\r\n  current: Fiber | null,\r\n  workInProgress: Fiber,\r\n  renderLanes: Lanes,\r\n): Fiber | null {\r\n  if (__DEV__) {\r\n    if (workInProgress._debugNeedsRemount && current !== null) {\r\n      // This will restart the begin phase with a new fiber.\r\n      return remountFiber(\r\n        current,\r\n        workInProgress,\r\n        createFiberFromTypeAndProps(\r\n          workInProgress.type,\r\n          workInProgress.key,\r\n          workInProgress.pendingProps,\r\n          workInProgress._debugOwner || null,\r\n          workInProgress.mode,\r\n          workInProgress.lanes,\r\n        ),\r\n      );\r\n    }\r\n  }\r\n\r\n  if (current !== null) {\r\n    const oldProps = current.memoizedProps;\r\n    const newProps = workInProgress.pendingProps;\r\n\r\n    if (\r\n      oldProps !== newProps ||\r\n      hasLegacyContextChanged() ||\r\n      // Force a re-render if the implementation changed due to hot reload:\r\n      (__DEV__ ? workInProgress.type !== current.type : false)\r\n    ) {\r\n      // If props or context changed, mark the fiber as having performed work.\r\n      // This may be unset if the props are determined to be equal later (memo).\r\n      didReceiveUpdate = true;\r\n    } else {\r\n      // Neither props nor legacy context changes. Check if there's a pending\r\n      // update or context change.\r\n      const hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(\r\n        current,\r\n        renderLanes,\r\n      );\r\n      if (\r\n        !hasScheduledUpdateOrContext &&\r\n        // If this is the second pass of an error or suspense boundary, there\r\n        // may not be work scheduled on `current`, so we check for this flag.\r\n        (workInProgress.flags & DidCapture) === NoFlags\r\n      ) {\r\n        // No pending updates or context. Bail out now.\r\n        didReceiveUpdate = false;\r\n        return attemptEarlyBailoutIfNoScheduledUpdate(\r\n          current,\r\n          workInProgress,\r\n          renderLanes,\r\n        );\r\n      }\r\n      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\r\n        // This is a special case that only exists for legacy mode.\r\n        // See https://github.com/facebook/react/pull/19216.\r\n        didReceiveUpdate = true;\r\n      } else {\r\n        // An update was scheduled on this fiber, but there are no new props\r\n        // nor legacy context. Set this to false. If an update queue or context\r\n        // consumer produces a changed value, it will set this to true. Otherwise,\r\n        // the component will assume the children have not changed and bail out.\r\n        didReceiveUpdate = false;\r\n      }\r\n    }\r\n  } else {\r\n    didReceiveUpdate = false;\r\n\r\n    if (getIsHydrating() && isForkedChild(workInProgress)) {\r\n      // Check if this child belongs to a list of muliple children in\r\n      // its parent.\r\n      //\r\n      // In a true multi-threaded implementation, we would render children on\r\n      // parallel threads. This would represent the beginning of a new render\r\n      // thread for this subtree.\r\n      //\r\n      // We only use this for id generation during hydration, which is why the\r\n      // logic is located in this special branch.\r\n      const slotIndex = workInProgress.index;\r\n      const numberOfForks = getForksAtLevel(workInProgress);\r\n      pushTreeId(workInProgress, numberOfForks, slotIndex);\r\n    }\r\n  }\r\n\r\n  // Before entering the begin phase, clear pending update priority.\r\n  // TODO: This assumes that we're about to evaluate the component and process\r\n  // the update queue. However, there's an exception: SimpleMemoComponent\r\n  // sometimes bails out later in the begin phase. This indicates that we should\r\n  // move this assignment out of the common path and into each branch.\r\n  workInProgress.lanes = NoLanes;\r\n\r\n  switch (workInProgress.tag) {\r\n    case IndeterminateComponent: {\r\n      return mountIndeterminateComponent(\r\n        current,\r\n        workInProgress,\r\n        workInProgress.type,\r\n        renderLanes,\r\n      );\r\n    }\r\n    case LazyComponent: {\r\n      const elementType = workInProgress.elementType;\r\n      return mountLazyComponent(\r\n        current,\r\n        workInProgress,\r\n        elementType,\r\n        renderLanes,\r\n      );\r\n    }\r\n    case FunctionComponent: {\r\n      const Component = workInProgress.type;\r\n      const unresolvedProps = workInProgress.pendingProps;\r\n      const resolvedProps =\r\n        workInProgress.elementType === Component\r\n          ? unresolvedProps\r\n          : resolveDefaultProps(Component, unresolvedProps);\r\n      return updateFunctionComponent(\r\n        current,\r\n        workInProgress,\r\n        Component,\r\n        resolvedProps,\r\n        renderLanes,\r\n      );\r\n    }\r\n    case ClassComponent: {\r\n      const Component = workInProgress.type;\r\n      const unresolvedProps = workInProgress.pendingProps;\r\n      const resolvedProps =\r\n        workInProgress.elementType === Component\r\n          ? unresolvedProps\r\n          : resolveDefaultProps(Component, unresolvedProps);\r\n      return updateClassComponent(\r\n        current,\r\n        workInProgress,\r\n        Component,\r\n        resolvedProps,\r\n        renderLanes,\r\n      );\r\n    }\r\n    case HostRoot:\r\n      return updateHostRoot(current, workInProgress, renderLanes);\r\n    case HostComponent:\r\n      return updateHostComponent(current, workInProgress, renderLanes);\r\n    case HostText:\r\n      return updateHostText(current, workInProgress);\r\n    case SuspenseComponent:\r\n      return updateSuspenseComponent(current, workInProgress, renderLanes);\r\n    case HostPortal:\r\n      return updatePortalComponent(current, workInProgress, renderLanes);\r\n    case ForwardRef: {\r\n      const type = workInProgress.type;\r\n      const unresolvedProps = workInProgress.pendingProps;\r\n      const resolvedProps =\r\n        workInProgress.elementType === type\r\n          ? unresolvedProps\r\n          : resolveDefaultProps(type, unresolvedProps);\r\n      return updateForwardRef(\r\n        current,\r\n        workInProgress,\r\n        type,\r\n        resolvedProps,\r\n        renderLanes,\r\n      );\r\n    }\r\n    case Fragment:\r\n      return updateFragment(current, workInProgress, renderLanes);\r\n    case Mode:\r\n      return updateMode(current, workInProgress, renderLanes);\r\n    case Profiler:\r\n      return updateProfiler(current, workInProgress, renderLanes);\r\n    case ContextProvider:\r\n      return updateContextProvider(current, workInProgress, renderLanes);\r\n    case ContextConsumer:\r\n      return updateContextConsumer(current, workInProgress, renderLanes);\r\n    case MemoComponent: {\r\n      const type = workInProgress.type;\r\n      const unresolvedProps = workInProgress.pendingProps;\r\n      // Resolve outer props first, then resolve inner props.\r\n      let resolvedProps = resolveDefaultProps(type, unresolvedProps);\r\n      if (__DEV__) {\r\n        if (workInProgress.type !== workInProgress.elementType) {\r\n          const outerPropTypes = type.propTypes;\r\n          if (outerPropTypes) {\r\n            checkPropTypes(\r\n              outerPropTypes,\r\n              resolvedProps, // Resolved for outer only\r\n              'prop',\r\n              getComponentNameFromType(type),\r\n            );\r\n          }\r\n        }\r\n      }\r\n      resolvedProps = resolveDefaultProps(type.type, resolvedProps);\r\n      return updateMemoComponent(\r\n        current,\r\n        workInProgress,\r\n        type,\r\n        resolvedProps,\r\n        renderLanes,\r\n      );\r\n    }\r\n    case SimpleMemoComponent: {\r\n      return updateSimpleMemoComponent(\r\n        current,\r\n        workInProgress,\r\n        workInProgress.type,\r\n        workInProgress.pendingProps,\r\n        renderLanes,\r\n      );\r\n    }\r\n    case IncompleteClassComponent: {\r\n      const Component = workInProgress.type;\r\n      const unresolvedProps = workInProgress.pendingProps;\r\n      const resolvedProps =\r\n        workInProgress.elementType === Component\r\n          ? unresolvedProps\r\n          : resolveDefaultProps(Component, unresolvedProps);\r\n      return mountIncompleteClassComponent(\r\n        current,\r\n        workInProgress,\r\n        Component,\r\n        resolvedProps,\r\n        renderLanes,\r\n      );\r\n    }\r\n    case SuspenseListComponent: {\r\n      return updateSuspenseListComponent(current, workInProgress, renderLanes);\r\n    }\r\n    case ScopeComponent: {\r\n      if (enableScopeAPI) {\r\n        return updateScopeComponent(current, workInProgress, renderLanes);\r\n      }\r\n      break;\r\n    }\r\n    case OffscreenComponent: {\r\n      return updateOffscreenComponent(current, workInProgress, renderLanes);\r\n    }\r\n    case LegacyHiddenComponent: {\r\n      if (enableLegacyHidden) {\r\n        return updateLegacyHiddenComponent(\r\n          current,\r\n          workInProgress,\r\n          renderLanes,\r\n        );\r\n      }\r\n      break;\r\n    }\r\n    case CacheComponent: {\r\n      if (enableCache) {\r\n        return updateCacheComponent(current, workInProgress, renderLanes);\r\n      }\r\n      break;\r\n    }\r\n    case TracingMarkerComponent: {\r\n      if (enableTransitionTracing) {\r\n        return updateTracingMarkerComponent(\r\n          current,\r\n          workInProgress,\r\n          renderLanes,\r\n        );\r\n      }\r\n      break;\r\n    }\r\n  }\r\n\r\n  throw new Error(\r\n    `Unknown unit of work tag (${workInProgress.tag}). This error is likely caused by a bug in ` +\r\n      'React. Please file an issue.',\r\n  );\r\n}\r\n\r\nexport {beginWork};\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {Fiber} from './ReactInternalTypes';\r\nimport type {RootState} from './ReactFiberRoot.old';\r\nimport type {Lanes, Lane} from './ReactFiberLane.old';\r\nimport type {\r\n  ReactScopeInstance,\r\n  ReactContext,\r\n  Wakeable,\r\n} from 'shared/ReactTypes';\r\nimport type {FiberRoot} from './ReactInternalTypes';\r\nimport type {\r\n  Instance,\r\n  Type,\r\n  Props,\r\n  Container,\r\n  ChildSet,\r\n} from './ReactFiberHostConfig';\r\nimport type {\r\n  SuspenseState,\r\n  SuspenseListRenderState,\r\n} from './ReactFiberSuspenseComponent.old';\r\nimport type {OffscreenState} from './ReactFiberOffscreenComponent';\r\nimport type {TracingMarkerInstance} from './ReactFiberTracingMarkerComponent.old';\r\nimport type {Cache} from './ReactFiberCacheComponent.old';\r\nimport {\r\n  enableSuspenseAvoidThisFallback,\r\n  enableLegacyHidden,\r\n} from 'shared/ReactFeatureFlags';\r\n\r\nimport {resetWorkInProgressVersions as resetMutableSourceWorkInProgressVersions} from './ReactMutableSource.old';\r\n\r\nimport {now} from './Scheduler';\r\n\r\nimport {\r\n  IndeterminateComponent,\r\n  FunctionComponent,\r\n  ClassComponent,\r\n  HostRoot,\r\n  HostComponent,\r\n  HostText,\r\n  HostPortal,\r\n  ContextProvider,\r\n  ContextConsumer,\r\n  ForwardRef,\r\n  Fragment,\r\n  Mode,\r\n  Profiler,\r\n  SuspenseComponent,\r\n  SuspenseListComponent,\r\n  MemoComponent,\r\n  SimpleMemoComponent,\r\n  LazyComponent,\r\n  IncompleteClassComponent,\r\n  ScopeComponent,\r\n  OffscreenComponent,\r\n  LegacyHiddenComponent,\r\n  CacheComponent,\r\n  TracingMarkerComponent,\r\n} from './ReactWorkTags';\r\nimport {NoMode, ConcurrentMode, ProfileMode} from './ReactTypeOfMode';\r\nimport {\r\n  Ref,\r\n  RefStatic,\r\n  Placement,\r\n  Update,\r\n  Visibility,\r\n  NoFlags,\r\n  DidCapture,\r\n  Snapshot,\r\n  ChildDeletion,\r\n  StaticMask,\r\n  MutationMask,\r\n  Passive,\r\n  Incomplete,\r\n  ShouldCapture,\r\n  ForceClientRender,\r\n} from './ReactFiberFlags';\r\n\r\nimport {\r\n  createInstance,\r\n  createTextInstance,\r\n  appendInitialChild,\r\n  finalizeInitialChildren,\r\n  prepareUpdate,\r\n  supportsMutation,\r\n  supportsPersistence,\r\n  cloneInstance,\r\n  cloneHiddenInstance,\r\n  cloneHiddenTextInstance,\r\n  createContainerChildSet,\r\n  appendChildToContainerChildSet,\r\n  finalizeContainerChildren,\r\n  preparePortalMount,\r\n  prepareScopeUpdate,\r\n} from './ReactFiberHostConfig';\r\nimport {\r\n  getRootHostContainer,\r\n  popHostContext,\r\n  getHostContext,\r\n  popHostContainer,\r\n} from './ReactFiberHostContext.old';\r\nimport {\r\n  suspenseStackCursor,\r\n  popSuspenseListContext,\r\n  popSuspenseHandler,\r\n  pushSuspenseListContext,\r\n  setShallowSuspenseListContext,\r\n  ForceSuspenseFallback,\r\n  setDefaultShallowSuspenseListContext,\r\n} from './ReactFiberSuspenseContext.old';\r\nimport {\r\n  popHiddenContext,\r\n  isCurrentTreeHidden,\r\n} from './ReactFiberHiddenContext.old';\r\nimport {findFirstSuspended} from './ReactFiberSuspenseComponent.old';\r\nimport {\r\n  isContextProvider as isLegacyContextProvider,\r\n  popContext as popLegacyContext,\r\n  popTopLevelContextObject as popTopLevelLegacyContextObject,\r\n} from './ReactFiberContext.old';\r\nimport {popProvider} from './ReactFiberNewContext.old';\r\nimport {\r\n  prepareToHydrateHostInstance,\r\n  prepareToHydrateHostTextInstance,\r\n  prepareToHydrateHostSuspenseInstance,\r\n  warnIfUnhydratedTailNodes,\r\n  popHydrationState,\r\n  resetHydrationState,\r\n  getIsHydrating,\r\n  hasUnhydratedTailNodes,\r\n  upgradeHydrationErrorsToRecoverable,\r\n} from './ReactFiberHydrationContext.old';\r\nimport {\r\n  enableSuspenseCallback,\r\n  enableScopeAPI,\r\n  enableProfilerTimer,\r\n  enableCache,\r\n  enableTransitionTracing,\r\n} from 'shared/ReactFeatureFlags';\r\nimport {\r\n  renderDidSuspend,\r\n  renderDidSuspendDelayIfPossible,\r\n  renderHasNotSuspendedYet,\r\n  getRenderTargetTime,\r\n  getWorkInProgressTransitions,\r\n} from './ReactFiberWorkLoop.old';\r\nimport {\r\n  OffscreenLane,\r\n  SomeRetryLane,\r\n  NoLanes,\r\n  includesSomeLane,\r\n  mergeLanes,\r\n} from './ReactFiberLane.old';\r\nimport {resetChildFibers} from './ReactChildFiber.old';\r\nimport {createScopeInstance} from './ReactFiberScope.old';\r\nimport {transferActualDuration} from './ReactProfilerTimer.old';\r\nimport {popCacheProvider} from './ReactFiberCacheComponent.old';\r\nimport {popTreeContext} from './ReactFiberTreeContext.old';\r\nimport {popRootTransition, popTransition} from './ReactFiberTransition.old';\r\nimport {\r\n  popMarkerInstance,\r\n  popRootMarkerInstance,\r\n} from './ReactFiberTracingMarkerComponent.old';\r\n\r\nfunction markUpdate(workInProgress: Fiber) {\r\n  // Tag the fiber with an update effect. This turns a Placement into\r\n  // a PlacementAndUpdate.\r\n  workInProgress.flags |= Update;\r\n}\r\n\r\nfunction markRef(workInProgress: Fiber) {\r\n  workInProgress.flags |= Ref | RefStatic;\r\n}\r\n\r\nfunction hadNoMutationsEffects(current: null | Fiber, completedWork: Fiber) {\r\n  const didBailout = current !== null && current.child === completedWork.child;\r\n  if (didBailout) {\r\n    return true;\r\n  }\r\n\r\n  if ((completedWork.flags & ChildDeletion) !== NoFlags) {\r\n    return false;\r\n  }\r\n\r\n  // TODO: If we move the `hadNoMutationsEffects` call after `bubbleProperties`\r\n  // then we only have to check the `completedWork.subtreeFlags`.\r\n  let child = completedWork.child;\r\n  while (child !== null) {\r\n    if (\r\n      (child.flags & MutationMask) !== NoFlags ||\r\n      (child.subtreeFlags & MutationMask) !== NoFlags\r\n    ) {\r\n      return false;\r\n    }\r\n    child = child.sibling;\r\n  }\r\n  return true;\r\n}\r\n\r\nlet appendAllChildren;\r\nlet updateHostContainer;\r\nlet updateHostComponent;\r\nlet updateHostText;\r\nif (supportsMutation) {\r\n  // Mutation mode\r\n\r\n  appendAllChildren = function(\r\n    parent: Instance,\r\n    workInProgress: Fiber,\r\n    needsVisibilityToggle: boolean,\r\n    isHidden: boolean,\r\n  ) {\r\n    // We only have the top Fiber that was created but we need recurse down its\r\n    // children to find all the terminal nodes.\r\n    let node = workInProgress.child;\r\n    while (node !== null) {\r\n      if (node.tag === HostComponent || node.tag === HostText) {\r\n        appendInitialChild(parent, node.stateNode);\r\n      } else if (node.tag === HostPortal) {\r\n        // If we have a portal child, then we don't want to traverse\r\n        // down its children. Instead, we'll get insertions from each child in\r\n        // the portal directly.\r\n      } else if (node.child !== null) {\r\n        node.child.return = node;\r\n        node = node.child;\r\n        continue;\r\n      }\r\n      if (node === workInProgress) {\r\n        return;\r\n      }\r\n      while (node.sibling === null) {\r\n        if (node.return === null || node.return === workInProgress) {\r\n          return;\r\n        }\r\n        node = node.return;\r\n      }\r\n      node.sibling.return = node.return;\r\n      node = node.sibling;\r\n    }\r\n  };\r\n\r\n  updateHostContainer = function(current: null | Fiber, workInProgress: Fiber) {\r\n    // Noop\r\n  };\r\n  updateHostComponent = function(\r\n    current: Fiber,\r\n    workInProgress: Fiber,\r\n    type: Type,\r\n    newProps: Props,\r\n  ) {\r\n    // If we have an alternate, that means this is an update and we need to\r\n    // schedule a side-effect to do the updates.\r\n    const oldProps = current.memoizedProps;\r\n    if (oldProps === newProps) {\r\n      // In mutation mode, this is sufficient for a bailout because\r\n      // we won't touch this node even if children changed.\r\n      return;\r\n    }\r\n\r\n    // If we get updated because one of our children updated, we don't\r\n    // have newProps so we'll have to reuse them.\r\n    // TODO: Split the update API as separate for the props vs. children.\r\n    // Even better would be if children weren't special cased at all tho.\r\n    const instance: Instance = workInProgress.stateNode;\r\n    const currentHostContext = getHostContext();\r\n    // TODO: Experiencing an error where oldProps is null. Suggests a host\r\n    // component is hitting the resume path. Figure out why. Possibly\r\n    // related to `hidden`.\r\n    const updatePayload = prepareUpdate(\r\n      instance,\r\n      type,\r\n      oldProps,\r\n      newProps,\r\n      currentHostContext,\r\n    );\r\n    // TODO: Type this specific to this type of component.\r\n    workInProgress.updateQueue = (updatePayload: any);\r\n    // If the update payload indicates that there is a change or if there\r\n    // is a new ref we mark this as an update. All the work is done in commitWork.\r\n    if (updatePayload) {\r\n      markUpdate(workInProgress);\r\n    }\r\n  };\r\n  updateHostText = function(\r\n    current: Fiber,\r\n    workInProgress: Fiber,\r\n    oldText: string,\r\n    newText: string,\r\n  ) {\r\n    // If the text differs, mark it as an update. All the work in done in commitWork.\r\n    if (oldText !== newText) {\r\n      markUpdate(workInProgress);\r\n    }\r\n  };\r\n} else if (supportsPersistence) {\r\n  // Persistent host tree mode\r\n\r\n  appendAllChildren = function(\r\n    parent: Instance,\r\n    workInProgress: Fiber,\r\n    needsVisibilityToggle: boolean,\r\n    isHidden: boolean,\r\n  ) {\r\n    // We only have the top Fiber that was created but we need recurse down its\r\n    // children to find all the terminal nodes.\r\n    let node = workInProgress.child;\r\n    while (node !== null) {\r\n      // eslint-disable-next-line no-labels\r\n      branches: if (node.tag === HostComponent) {\r\n        let instance = node.stateNode;\r\n        if (needsVisibilityToggle && isHidden) {\r\n          // This child is inside a timed out tree. Hide it.\r\n          const props = node.memoizedProps;\r\n          const type = node.type;\r\n          instance = cloneHiddenInstance(instance, type, props, node);\r\n        }\r\n        appendInitialChild(parent, instance);\r\n      } else if (node.tag === HostText) {\r\n        let instance = node.stateNode;\r\n        if (needsVisibilityToggle && isHidden) {\r\n          // This child is inside a timed out tree. Hide it.\r\n          const text = node.memoizedProps;\r\n          instance = cloneHiddenTextInstance(instance, text, node);\r\n        }\r\n        appendInitialChild(parent, instance);\r\n      } else if (node.tag === HostPortal) {\r\n        // If we have a portal child, then we don't want to traverse\r\n        // down its children. Instead, we'll get insertions from each child in\r\n        // the portal directly.\r\n      } else if (\r\n        node.tag === OffscreenComponent &&\r\n        node.memoizedState !== null\r\n      ) {\r\n        // The children in this boundary are hidden. Toggle their visibility\r\n        // before appending.\r\n        const child = node.child;\r\n        if (child !== null) {\r\n          child.return = node;\r\n        }\r\n        appendAllChildren(parent, node, true, true);\r\n      } else if (node.child !== null) {\r\n        node.child.return = node;\r\n        node = node.child;\r\n        continue;\r\n      }\r\n      // $FlowFixMe This is correct but Flow is confused by the labeled break.\r\n      node = (node: Fiber);\r\n      if (node === workInProgress) {\r\n        return;\r\n      }\r\n      while (node.sibling === null) {\r\n        if (node.return === null || node.return === workInProgress) {\r\n          return;\r\n        }\r\n        node = node.return;\r\n      }\r\n      node.sibling.return = node.return;\r\n      node = node.sibling;\r\n    }\r\n  };\r\n\r\n  // An unfortunate fork of appendAllChildren because we have two different parent types.\r\n  const appendAllChildrenToContainer = function(\r\n    containerChildSet: ChildSet,\r\n    workInProgress: Fiber,\r\n    needsVisibilityToggle: boolean,\r\n    isHidden: boolean,\r\n  ) {\r\n    // We only have the top Fiber that was created but we need recurse down its\r\n    // children to find all the terminal nodes.\r\n    let node = workInProgress.child;\r\n    while (node !== null) {\r\n      // eslint-disable-next-line no-labels\r\n      branches: if (node.tag === HostComponent) {\r\n        let instance = node.stateNode;\r\n        if (needsVisibilityToggle && isHidden) {\r\n          // This child is inside a timed out tree. Hide it.\r\n          const props = node.memoizedProps;\r\n          const type = node.type;\r\n          instance = cloneHiddenInstance(instance, type, props, node);\r\n        }\r\n        appendChildToContainerChildSet(containerChildSet, instance);\r\n      } else if (node.tag === HostText) {\r\n        let instance = node.stateNode;\r\n        if (needsVisibilityToggle && isHidden) {\r\n          // This child is inside a timed out tree. Hide it.\r\n          const text = node.memoizedProps;\r\n          instance = cloneHiddenTextInstance(instance, text, node);\r\n        }\r\n        appendChildToContainerChildSet(containerChildSet, instance);\r\n      } else if (node.tag === HostPortal) {\r\n        // If we have a portal child, then we don't want to traverse\r\n        // down its children. Instead, we'll get insertions from each child in\r\n        // the portal directly.\r\n      } else if (\r\n        node.tag === OffscreenComponent &&\r\n        node.memoizedState !== null\r\n      ) {\r\n        // The children in this boundary are hidden. Toggle their visibility\r\n        // before appending.\r\n        const child = node.child;\r\n        if (child !== null) {\r\n          child.return = node;\r\n        }\r\n        appendAllChildrenToContainer(containerChildSet, node, true, true);\r\n      } else if (node.child !== null) {\r\n        node.child.return = node;\r\n        node = node.child;\r\n        continue;\r\n      }\r\n      // $FlowFixMe This is correct but Flow is confused by the labeled break.\r\n      node = (node: Fiber);\r\n      if (node === workInProgress) {\r\n        return;\r\n      }\r\n      while (node.sibling === null) {\r\n        if (node.return === null || node.return === workInProgress) {\r\n          return;\r\n        }\r\n        node = node.return;\r\n      }\r\n      node.sibling.return = node.return;\r\n      node = node.sibling;\r\n    }\r\n  };\r\n  updateHostContainer = function(current: null | Fiber, workInProgress: Fiber) {\r\n    const portalOrRoot: {\r\n      containerInfo: Container,\r\n      pendingChildren: ChildSet,\r\n      ...\r\n    } = workInProgress.stateNode;\r\n    const childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\r\n    if (childrenUnchanged) {\r\n      // No changes, just reuse the existing instance.\r\n    } else {\r\n      const container = portalOrRoot.containerInfo;\r\n      const newChildSet = createContainerChildSet(container);\r\n      // If children might have changed, we have to add them all to the set.\r\n      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);\r\n      portalOrRoot.pendingChildren = newChildSet;\r\n      // Schedule an update on the container to swap out the container.\r\n      markUpdate(workInProgress);\r\n      finalizeContainerChildren(container, newChildSet);\r\n    }\r\n  };\r\n  updateHostComponent = function(\r\n    current: Fiber,\r\n    workInProgress: Fiber,\r\n    type: Type,\r\n    newProps: Props,\r\n  ) {\r\n    const currentInstance = current.stateNode;\r\n    const oldProps = current.memoizedProps;\r\n    // If there are no effects associated with this node, then none of our children had any updates.\r\n    // This guarantees that we can reuse all of them.\r\n    const childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\r\n    if (childrenUnchanged && oldProps === newProps) {\r\n      // No changes, just reuse the existing instance.\r\n      // Note that this might release a previous clone.\r\n      workInProgress.stateNode = currentInstance;\r\n      return;\r\n    }\r\n    const recyclableInstance: Instance = workInProgress.stateNode;\r\n    const currentHostContext = getHostContext();\r\n    let updatePayload = null;\r\n    if (oldProps !== newProps) {\r\n      updatePayload = prepareUpdate(\r\n        recyclableInstance,\r\n        type,\r\n        oldProps,\r\n        newProps,\r\n        currentHostContext,\r\n      );\r\n    }\r\n    if (childrenUnchanged && updatePayload === null) {\r\n      // No changes, just reuse the existing instance.\r\n      // Note that this might release a previous clone.\r\n      workInProgress.stateNode = currentInstance;\r\n      return;\r\n    }\r\n    const newInstance = cloneInstance(\r\n      currentInstance,\r\n      updatePayload,\r\n      type,\r\n      oldProps,\r\n      newProps,\r\n      workInProgress,\r\n      childrenUnchanged,\r\n      recyclableInstance,\r\n    );\r\n    if (\r\n      finalizeInitialChildren(newInstance, type, newProps, currentHostContext)\r\n    ) {\r\n      markUpdate(workInProgress);\r\n    }\r\n    workInProgress.stateNode = newInstance;\r\n    if (childrenUnchanged) {\r\n      // If there are no other effects in this tree, we need to flag this node as having one.\r\n      // Even though we're not going to use it for anything.\r\n      // Otherwise parents won't know that there are new children to propagate upwards.\r\n      markUpdate(workInProgress);\r\n    } else {\r\n      // If children might have changed, we have to add them all to the set.\r\n      appendAllChildren(newInstance, workInProgress, false, false);\r\n    }\r\n  };\r\n  updateHostText = function(\r\n    current: Fiber,\r\n    workInProgress: Fiber,\r\n    oldText: string,\r\n    newText: string,\r\n  ) {\r\n    if (oldText !== newText) {\r\n      // If the text content differs, we'll create a new text instance for it.\r\n      const rootContainerInstance = getRootHostContainer();\r\n      const currentHostContext = getHostContext();\r\n      workInProgress.stateNode = createTextInstance(\r\n        newText,\r\n        rootContainerInstance,\r\n        currentHostContext,\r\n        workInProgress,\r\n      );\r\n      // We'll have to mark it as having an effect, even though we won't use the effect for anything.\r\n      // This lets the parents know that at least one of their children has changed.\r\n      markUpdate(workInProgress);\r\n    } else {\r\n      workInProgress.stateNode = current.stateNode;\r\n    }\r\n  };\r\n} else {\r\n  // No host operations\r\n  updateHostContainer = function(current: null | Fiber, workInProgress: Fiber) {\r\n    // Noop\r\n  };\r\n  updateHostComponent = function(\r\n    current: Fiber,\r\n    workInProgress: Fiber,\r\n    type: Type,\r\n    newProps: Props,\r\n  ) {\r\n    // Noop\r\n  };\r\n  updateHostText = function(\r\n    current: Fiber,\r\n    workInProgress: Fiber,\r\n    oldText: string,\r\n    newText: string,\r\n  ) {\r\n    // Noop\r\n  };\r\n}\r\n\r\nfunction cutOffTailIfNeeded(\r\n  renderState: SuspenseListRenderState,\r\n  hasRenderedATailFallback: boolean,\r\n) {\r\n  if (getIsHydrating()) {\r\n    // If we're hydrating, we should consume as many items as we can\r\n    // so we don't leave any behind.\r\n    return;\r\n  }\r\n  switch (renderState.tailMode) {\r\n    case 'hidden': {\r\n      // Any insertions at the end of the tail list after this point\r\n      // should be invisible. If there are already mounted boundaries\r\n      // anything before them are not considered for collapsing.\r\n      // Therefore we need to go through the whole tail to find if\r\n      // there are any.\r\n      let tailNode = renderState.tail;\r\n      let lastTailNode = null;\r\n      while (tailNode !== null) {\r\n        if (tailNode.alternate !== null) {\r\n          lastTailNode = tailNode;\r\n        }\r\n        tailNode = tailNode.sibling;\r\n      }\r\n      // Next we're simply going to delete all insertions after the\r\n      // last rendered item.\r\n      if (lastTailNode === null) {\r\n        // All remaining items in the tail are insertions.\r\n        renderState.tail = null;\r\n      } else {\r\n        // Detach the insertion after the last node that was already\r\n        // inserted.\r\n        lastTailNode.sibling = null;\r\n      }\r\n      break;\r\n    }\r\n    case 'collapsed': {\r\n      // Any insertions at the end of the tail list after this point\r\n      // should be invisible. If there are already mounted boundaries\r\n      // anything before them are not considered for collapsing.\r\n      // Therefore we need to go through the whole tail to find if\r\n      // there are any.\r\n      let tailNode = renderState.tail;\r\n      let lastTailNode = null;\r\n      while (tailNode !== null) {\r\n        if (tailNode.alternate !== null) {\r\n          lastTailNode = tailNode;\r\n        }\r\n        tailNode = tailNode.sibling;\r\n      }\r\n      // Next we're simply going to delete all insertions after the\r\n      // last rendered item.\r\n      if (lastTailNode === null) {\r\n        // All remaining items in the tail are insertions.\r\n        if (!hasRenderedATailFallback && renderState.tail !== null) {\r\n          // We suspended during the head. We want to show at least one\r\n          // row at the tail. So we'll keep on and cut off the rest.\r\n          renderState.tail.sibling = null;\r\n        } else {\r\n          renderState.tail = null;\r\n        }\r\n      } else {\r\n        // Detach the insertion after the last node that was already\r\n        // inserted.\r\n        lastTailNode.sibling = null;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nfunction bubbleProperties(completedWork: Fiber) {\r\n  const didBailout =\r\n    completedWork.alternate !== null &&\r\n    completedWork.alternate.child === completedWork.child;\r\n\r\n  let newChildLanes = NoLanes;\r\n  let subtreeFlags = NoFlags;\r\n\r\n  if (!didBailout) {\r\n    // Bubble up the earliest expiration time.\r\n    if (enableProfilerTimer && (completedWork.mode & ProfileMode) !== NoMode) {\r\n      // In profiling mode, resetChildExpirationTime is also used to reset\r\n      // profiler durations.\r\n      let actualDuration = completedWork.actualDuration;\r\n      let treeBaseDuration = ((completedWork.selfBaseDuration: any): number);\r\n\r\n      let child = completedWork.child;\r\n      while (child !== null) {\r\n        newChildLanes = mergeLanes(\r\n          newChildLanes,\r\n          mergeLanes(child.lanes, child.childLanes),\r\n        );\r\n\r\n        subtreeFlags |= child.subtreeFlags;\r\n        subtreeFlags |= child.flags;\r\n\r\n        // When a fiber is cloned, its actualDuration is reset to 0. This value will\r\n        // only be updated if work is done on the fiber (i.e. it doesn't bailout).\r\n        // When work is done, it should bubble to the parent's actualDuration. If\r\n        // the fiber has not been cloned though, (meaning no work was done), then\r\n        // this value will reflect the amount of time spent working on a previous\r\n        // render. In that case it should not bubble. We determine whether it was\r\n        // cloned by comparing the child pointer.\r\n        // $FlowFixMe[unsafe-addition] addition with possible null/undefined value\r\n        actualDuration += child.actualDuration;\r\n\r\n        // $FlowFixMe[unsafe-addition] addition with possible null/undefined value\r\n        treeBaseDuration += child.treeBaseDuration;\r\n        child = child.sibling;\r\n      }\r\n\r\n      completedWork.actualDuration = actualDuration;\r\n      completedWork.treeBaseDuration = treeBaseDuration;\r\n    } else {\r\n      let child = completedWork.child;\r\n      while (child !== null) {\r\n        newChildLanes = mergeLanes(\r\n          newChildLanes,\r\n          mergeLanes(child.lanes, child.childLanes),\r\n        );\r\n\r\n        subtreeFlags |= child.subtreeFlags;\r\n        subtreeFlags |= child.flags;\r\n\r\n        // Update the return pointer so the tree is consistent. This is a code\r\n        // smell because it assumes the commit phase is never concurrent with\r\n        // the render phase. Will address during refactor to alternate model.\r\n        child.return = completedWork;\r\n\r\n        child = child.sibling;\r\n      }\r\n    }\r\n\r\n    completedWork.subtreeFlags |= subtreeFlags;\r\n  } else {\r\n    // Bubble up the earliest expiration time.\r\n    if (enableProfilerTimer && (completedWork.mode & ProfileMode) !== NoMode) {\r\n      // In profiling mode, resetChildExpirationTime is also used to reset\r\n      // profiler durations.\r\n      let treeBaseDuration = ((completedWork.selfBaseDuration: any): number);\r\n\r\n      let child = completedWork.child;\r\n      while (child !== null) {\r\n        newChildLanes = mergeLanes(\r\n          newChildLanes,\r\n          mergeLanes(child.lanes, child.childLanes),\r\n        );\r\n\r\n        // \"Static\" flags share the lifetime of the fiber/hook they belong to,\r\n        // so we should bubble those up even during a bailout. All the other\r\n        // flags have a lifetime only of a single render + commit, so we should\r\n        // ignore them.\r\n        subtreeFlags |= child.subtreeFlags & StaticMask;\r\n        subtreeFlags |= child.flags & StaticMask;\r\n\r\n        // $FlowFixMe[unsafe-addition] addition with possible null/undefined value\r\n        treeBaseDuration += child.treeBaseDuration;\r\n        child = child.sibling;\r\n      }\r\n\r\n      completedWork.treeBaseDuration = treeBaseDuration;\r\n    } else {\r\n      let child = completedWork.child;\r\n      while (child !== null) {\r\n        newChildLanes = mergeLanes(\r\n          newChildLanes,\r\n          mergeLanes(child.lanes, child.childLanes),\r\n        );\r\n\r\n        // \"Static\" flags share the lifetime of the fiber/hook they belong to,\r\n        // so we should bubble those up even during a bailout. All the other\r\n        // flags have a lifetime only of a single render + commit, so we should\r\n        // ignore them.\r\n        subtreeFlags |= child.subtreeFlags & StaticMask;\r\n        subtreeFlags |= child.flags & StaticMask;\r\n\r\n        // Update the return pointer so the tree is consistent. This is a code\r\n        // smell because it assumes the commit phase is never concurrent with\r\n        // the render phase. Will address during refactor to alternate model.\r\n        child.return = completedWork;\r\n\r\n        child = child.sibling;\r\n      }\r\n    }\r\n\r\n    completedWork.subtreeFlags |= subtreeFlags;\r\n  }\r\n\r\n  completedWork.childLanes = newChildLanes;\r\n\r\n  return didBailout;\r\n}\r\n\r\nfunction completeDehydratedSuspenseBoundary(\r\n  current: Fiber | null,\r\n  workInProgress: Fiber,\r\n  nextState: SuspenseState | null,\r\n): boolean {\r\n  if (\r\n    hasUnhydratedTailNodes() &&\r\n    (workInProgress.mode & ConcurrentMode) !== NoMode &&\r\n    (workInProgress.flags & DidCapture) === NoFlags\r\n  ) {\r\n    warnIfUnhydratedTailNodes(workInProgress);\r\n    resetHydrationState();\r\n    workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;\r\n\r\n    return false;\r\n  }\r\n\r\n  const wasHydrated = popHydrationState(workInProgress);\r\n\r\n  if (nextState !== null && nextState.dehydrated !== null) {\r\n    // We might be inside a hydration state the first time we're picking up this\r\n    // Suspense boundary, and also after we've reentered it for further hydration.\r\n    if (current === null) {\r\n      if (!wasHydrated) {\r\n        throw new Error(\r\n          'A dehydrated suspense component was completed without a hydrated node. ' +\r\n            'This is probably a bug in React.',\r\n        );\r\n      }\r\n      prepareToHydrateHostSuspenseInstance(workInProgress);\r\n      bubbleProperties(workInProgress);\r\n      if (enableProfilerTimer) {\r\n        if ((workInProgress.mode & ProfileMode) !== NoMode) {\r\n          const isTimedOutSuspense = nextState !== null;\r\n          if (isTimedOutSuspense) {\r\n            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\r\n            const primaryChildFragment = workInProgress.child;\r\n            if (primaryChildFragment !== null) {\r\n              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\r\n              workInProgress.treeBaseDuration -= ((primaryChildFragment.treeBaseDuration: any): number);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return false;\r\n    } else {\r\n      // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration\r\n      // state since we're now exiting out of it. popHydrationState doesn't do that for us.\r\n      resetHydrationState();\r\n      if ((workInProgress.flags & DidCapture) === NoFlags) {\r\n        // This boundary did not suspend so it's now hydrated and unsuspended.\r\n        workInProgress.memoizedState = null;\r\n      }\r\n      // If nothing suspended, we need to schedule an effect to mark this boundary\r\n      // as having hydrated so events know that they're free to be invoked.\r\n      // It's also a signal to replay events and the suspense callback.\r\n      // If something suspended, schedule an effect to attach retry listeners.\r\n      // So we might as well always mark this.\r\n      workInProgress.flags |= Update;\r\n      bubbleProperties(workInProgress);\r\n      if (enableProfilerTimer) {\r\n        if ((workInProgress.mode & ProfileMode) !== NoMode) {\r\n          const isTimedOutSuspense = nextState !== null;\r\n          if (isTimedOutSuspense) {\r\n            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\r\n            const primaryChildFragment = workInProgress.child;\r\n            if (primaryChildFragment !== null) {\r\n              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\r\n              workInProgress.treeBaseDuration -= ((primaryChildFragment.treeBaseDuration: any): number);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n  } else {\r\n    // Successfully completed this tree. If this was a forced client render,\r\n    // there may have been recoverable errors during first hydration\r\n    // attempt. If so, add them to a queue so we can log them in the\r\n    // commit phase.\r\n    upgradeHydrationErrorsToRecoverable();\r\n\r\n    // Fall through to normal Suspense path\r\n    return true;\r\n  }\r\n}\r\n\r\nfunction completeWork(\r\n  current: Fiber | null,\r\n  workInProgress: Fiber,\r\n  renderLanes: Lanes,\r\n): Fiber | null {\r\n  const newProps = workInProgress.pendingProps;\r\n  // Note: This intentionally doesn't check if we're hydrating because comparing\r\n  // to the current tree provider fiber is just as fast and less error-prone.\r\n  // Ideally we would have a special version of the work loop only\r\n  // for hydration.\r\n  popTreeContext(workInProgress);\r\n  switch (workInProgress.tag) {\r\n    case IndeterminateComponent:\r\n    case LazyComponent:\r\n    case SimpleMemoComponent:\r\n    case FunctionComponent:\r\n    case ForwardRef:\r\n    case Fragment:\r\n    case Mode:\r\n    case Profiler:\r\n    case ContextConsumer:\r\n    case MemoComponent:\r\n      bubbleProperties(workInProgress);\r\n      return null;\r\n    case ClassComponent: {\r\n      const Component = workInProgress.type;\r\n      if (isLegacyContextProvider(Component)) {\r\n        popLegacyContext(workInProgress);\r\n      }\r\n      bubbleProperties(workInProgress);\r\n      return null;\r\n    }\r\n    case HostRoot: {\r\n      const fiberRoot = (workInProgress.stateNode: FiberRoot);\r\n\r\n      if (enableTransitionTracing) {\r\n        const transitions = getWorkInProgressTransitions();\r\n        // We set the Passive flag here because if there are new transitions,\r\n        // we will need to schedule callbacks and process the transitions,\r\n        // which we do in the passive phase\r\n        if (transitions !== null) {\r\n          workInProgress.flags |= Passive;\r\n        }\r\n      }\r\n\r\n      if (enableCache) {\r\n        let previousCache: Cache | null = null;\r\n        if (current !== null) {\r\n          previousCache = current.memoizedState.cache;\r\n        }\r\n        const cache: Cache = workInProgress.memoizedState.cache;\r\n        if (cache !== previousCache) {\r\n          // Run passive effects to retain/release the cache.\r\n          workInProgress.flags |= Passive;\r\n        }\r\n        popCacheProvider(workInProgress, cache);\r\n      }\r\n\r\n      if (enableTransitionTracing) {\r\n        popRootMarkerInstance(workInProgress);\r\n      }\r\n\r\n      popRootTransition(workInProgress, fiberRoot, renderLanes);\r\n      popHostContainer(workInProgress);\r\n      popTopLevelLegacyContextObject(workInProgress);\r\n      resetMutableSourceWorkInProgressVersions();\r\n      if (fiberRoot.pendingContext) {\r\n        fiberRoot.context = fiberRoot.pendingContext;\r\n        fiberRoot.pendingContext = null;\r\n      }\r\n      if (current === null || current.child === null) {\r\n        // If we hydrated, pop so that we can delete any remaining children\r\n        // that weren't hydrated.\r\n        const wasHydrated = popHydrationState(workInProgress);\r\n        if (wasHydrated) {\r\n          // If we hydrated, then we'll need to schedule an update for\r\n          // the commit side-effects on the root.\r\n          markUpdate(workInProgress);\r\n        } else {\r\n          if (current !== null) {\r\n            const prevState: RootState = current.memoizedState;\r\n            if (\r\n              // Check if this is a client root\r\n              !prevState.isDehydrated ||\r\n              // Check if we reverted to client rendering (e.g. due to an error)\r\n              (workInProgress.flags & ForceClientRender) !== NoFlags\r\n            ) {\r\n              // Schedule an effect to clear this container at the start of the\r\n              // next commit. This handles the case of React rendering into a\r\n              // container with previous children. It's also safe to do for\r\n              // updates too, because current.child would only be null if the\r\n              // previous render was null (so the container would already\r\n              // be empty).\r\n              workInProgress.flags |= Snapshot;\r\n\r\n              // If this was a forced client render, there may have been\r\n              // recoverable errors during first hydration attempt. If so, add\r\n              // them to a queue so we can log them in the commit phase.\r\n              upgradeHydrationErrorsToRecoverable();\r\n            }\r\n          }\r\n        }\r\n      }\r\n      updateHostContainer(current, workInProgress);\r\n      bubbleProperties(workInProgress);\r\n      if (enableTransitionTracing) {\r\n        if ((workInProgress.subtreeFlags & Visibility) !== NoFlags) {\r\n          // If any of our suspense children toggle visibility, this means that\r\n          // the pending boundaries array needs to be updated, which we only\r\n          // do in the passive phase.\r\n          workInProgress.flags |= Passive;\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n    case HostComponent: {\r\n      popHostContext(workInProgress);\r\n      const type = workInProgress.type;\r\n      if (current !== null && workInProgress.stateNode != null) {\r\n        updateHostComponent(current, workInProgress, type, newProps);\r\n\r\n        if (current.ref !== workInProgress.ref) {\r\n          markRef(workInProgress);\r\n        }\r\n      } else {\r\n        if (!newProps) {\r\n          if (workInProgress.stateNode === null) {\r\n            throw new Error(\r\n              'We must have new props for new mounts. This error is likely ' +\r\n                'caused by a bug in React. Please file an issue.',\r\n            );\r\n          }\r\n\r\n          // This can happen when we abort work.\r\n          bubbleProperties(workInProgress);\r\n          return null;\r\n        }\r\n\r\n        const currentHostContext = getHostContext();\r\n        // TODO: Move createInstance to beginWork and keep it on a context\r\n        // \"stack\" as the parent. Then append children as we go in beginWork\r\n        // or completeWork depending on whether we want to add them top->down or\r\n        // bottom->up. Top->down is faster in IE11.\r\n        const wasHydrated = popHydrationState(workInProgress);\r\n        if (wasHydrated) {\r\n          // TODO: Move this and createInstance step into the beginPhase\r\n          // to consolidate.\r\n          if (\r\n            prepareToHydrateHostInstance(workInProgress, currentHostContext)\r\n          ) {\r\n            // If changes to the hydrated node need to be applied at the\r\n            // commit-phase we mark this as such.\r\n            markUpdate(workInProgress);\r\n          }\r\n        } else {\r\n          const rootContainerInstance = getRootHostContainer();\r\n          const instance = createInstance(\r\n            type,\r\n            newProps,\r\n            rootContainerInstance,\r\n            currentHostContext,\r\n            workInProgress,\r\n          );\r\n\r\n          appendAllChildren(instance, workInProgress, false, false);\r\n\r\n          workInProgress.stateNode = instance;\r\n\r\n          // Certain renderers require commit-time effects for initial mount.\r\n          // (eg DOM renderer supports auto-focus for certain elements).\r\n          // Make sure such renderers get scheduled for later work.\r\n          if (\r\n            finalizeInitialChildren(\r\n              instance,\r\n              type,\r\n              newProps,\r\n              currentHostContext,\r\n            )\r\n          ) {\r\n            markUpdate(workInProgress);\r\n          }\r\n        }\r\n\r\n        if (workInProgress.ref !== null) {\r\n          // If there is a ref on a host node we need to schedule a callback\r\n          markRef(workInProgress);\r\n        }\r\n      }\r\n      bubbleProperties(workInProgress);\r\n      return null;\r\n    }\r\n    case HostText: {\r\n      const newText = newProps;\r\n      if (current && workInProgress.stateNode != null) {\r\n        const oldText = current.memoizedProps;\r\n        // If we have an alternate, that means this is an update and we need\r\n        // to schedule a side-effect to do the updates.\r\n        updateHostText(current, workInProgress, oldText, newText);\r\n      } else {\r\n        if (typeof newText !== 'string') {\r\n          if (workInProgress.stateNode === null) {\r\n            throw new Error(\r\n              'We must have new props for new mounts. This error is likely ' +\r\n                'caused by a bug in React. Please file an issue.',\r\n            );\r\n          }\r\n          // This can happen when we abort work.\r\n        }\r\n        const rootContainerInstance = getRootHostContainer();\r\n        const currentHostContext = getHostContext();\r\n        const wasHydrated = popHydrationState(workInProgress);\r\n        if (wasHydrated) {\r\n          if (prepareToHydrateHostTextInstance(workInProgress)) {\r\n            markUpdate(workInProgress);\r\n          }\r\n        } else {\r\n          workInProgress.stateNode = createTextInstance(\r\n            newText,\r\n            rootContainerInstance,\r\n            currentHostContext,\r\n            workInProgress,\r\n          );\r\n        }\r\n      }\r\n      bubbleProperties(workInProgress);\r\n      return null;\r\n    }\r\n    case SuspenseComponent: {\r\n      popSuspenseHandler(workInProgress);\r\n      const nextState: null | SuspenseState = workInProgress.memoizedState;\r\n\r\n      // Special path for dehydrated boundaries. We may eventually move this\r\n      // to its own fiber type so that we can add other kinds of hydration\r\n      // boundaries that aren't associated with a Suspense tree. In anticipation\r\n      // of such a refactor, all the hydration logic is contained in\r\n      // this branch.\r\n      if (\r\n        current === null ||\r\n        (current.memoizedState !== null &&\r\n          current.memoizedState.dehydrated !== null)\r\n      ) {\r\n        const fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(\r\n          current,\r\n          workInProgress,\r\n          nextState,\r\n        );\r\n        if (!fallthroughToNormalSuspensePath) {\r\n          if (workInProgress.flags & ShouldCapture) {\r\n            // Special case. There were remaining unhydrated nodes. We treat\r\n            // this as a mismatch. Revert to client rendering.\r\n            return workInProgress;\r\n          } else {\r\n            // Did not finish hydrating, either because this is the initial\r\n            // render or because something suspended.\r\n            return null;\r\n          }\r\n        }\r\n\r\n        // Continue with the normal Suspense path.\r\n      }\r\n\r\n      if ((workInProgress.flags & DidCapture) !== NoFlags) {\r\n        // Something suspended. Re-render with the fallback children.\r\n        workInProgress.lanes = renderLanes;\r\n        // Do not reset the effect list.\r\n        if (\r\n          enableProfilerTimer &&\r\n          (workInProgress.mode & ProfileMode) !== NoMode\r\n        ) {\r\n          transferActualDuration(workInProgress);\r\n        }\r\n        // Don't bubble properties in this case.\r\n        return workInProgress;\r\n      }\r\n\r\n      const nextDidTimeout = nextState !== null;\r\n      const prevDidTimeout =\r\n        current !== null &&\r\n        (current.memoizedState: null | SuspenseState) !== null;\r\n\r\n      if (enableCache && nextDidTimeout) {\r\n        const offscreenFiber: Fiber = (workInProgress.child: any);\r\n        let previousCache: Cache | null = null;\r\n        if (\r\n          offscreenFiber.alternate !== null &&\r\n          offscreenFiber.alternate.memoizedState !== null &&\r\n          offscreenFiber.alternate.memoizedState.cachePool !== null\r\n        ) {\r\n          previousCache = offscreenFiber.alternate.memoizedState.cachePool.pool;\r\n        }\r\n        let cache: Cache | null = null;\r\n        if (\r\n          offscreenFiber.memoizedState !== null &&\r\n          offscreenFiber.memoizedState.cachePool !== null\r\n        ) {\r\n          cache = offscreenFiber.memoizedState.cachePool.pool;\r\n        }\r\n        if (cache !== previousCache) {\r\n          // Run passive effects to retain/release the cache.\r\n          offscreenFiber.flags |= Passive;\r\n        }\r\n      }\r\n\r\n      // If the suspended state of the boundary changes, we need to schedule\r\n      // a passive effect, which is when we process the transitions\r\n      if (nextDidTimeout !== prevDidTimeout) {\r\n        if (enableTransitionTracing) {\r\n          const offscreenFiber: Fiber = (workInProgress.child: any);\r\n          offscreenFiber.flags |= Passive;\r\n        }\r\n\r\n        // If the suspended state of the boundary changes, we need to schedule\r\n        // an effect to toggle the subtree's visibility. When we switch from\r\n        // fallback -> primary, the inner Offscreen fiber schedules this effect\r\n        // as part of its normal complete phase. But when we switch from\r\n        // primary -> fallback, the inner Offscreen fiber does not have a complete\r\n        // phase. So we need to schedule its effect here.\r\n        //\r\n        // We also use this flag to connect/disconnect the effects, but the same\r\n        // logic applies: when re-connecting, the Offscreen fiber's complete\r\n        // phase will handle scheduling the effect. It's only when the fallback\r\n        // is active that we have to do anything special.\r\n        if (nextDidTimeout) {\r\n          const offscreenFiber: Fiber = (workInProgress.child: any);\r\n          offscreenFiber.flags |= Visibility;\r\n\r\n          // TODO: This will still suspend a synchronous tree if anything\r\n          // in the concurrent tree already suspended during this render.\r\n          // This is a known bug.\r\n          if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\r\n            // TODO: Move this back to throwException because this is too late\r\n            // if this is a large tree which is common for initial loads. We\r\n            // don't know if we should restart a render or not until we get\r\n            // this marker, and this is too late.\r\n            // If this render already had a ping or lower pri updates,\r\n            // and this is the first time we know we're going to suspend we\r\n            // should be able to immediately restart from within throwException.\r\n\r\n            // Check if this is a \"bad\" fallback state or a good one. A bad\r\n            // fallback state is one that we only show as a last resort; if this\r\n            // is a transition, we'll block it from displaying, and wait for\r\n            // more data to arrive.\r\n            const isBadFallback =\r\n              // It's bad to switch to a fallback if content is already visible\r\n              (current !== null && !prevDidTimeout && !isCurrentTreeHidden()) ||\r\n              // Experimental: Some fallbacks are always bad\r\n              (enableSuspenseAvoidThisFallback &&\r\n                workInProgress.memoizedProps.unstable_avoidThisFallback ===\r\n                  true);\r\n\r\n            if (isBadFallback) {\r\n              renderDidSuspendDelayIfPossible();\r\n            } else {\r\n              renderDidSuspend();\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      const wakeables: Set<Wakeable> | null = (workInProgress.updateQueue: any);\r\n      if (wakeables !== null) {\r\n        // Schedule an effect to attach a retry listener to the promise.\r\n        // TODO: Move to passive phase\r\n        workInProgress.flags |= Update;\r\n      }\r\n\r\n      if (\r\n        enableSuspenseCallback &&\r\n        workInProgress.updateQueue !== null &&\r\n        workInProgress.memoizedProps.suspenseCallback != null\r\n      ) {\r\n        // Always notify the callback\r\n        // TODO: Move to passive phase\r\n        workInProgress.flags |= Update;\r\n      }\r\n      bubbleProperties(workInProgress);\r\n      if (enableProfilerTimer) {\r\n        if ((workInProgress.mode & ProfileMode) !== NoMode) {\r\n          if (nextDidTimeout) {\r\n            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\r\n            const primaryChildFragment = workInProgress.child;\r\n            if (primaryChildFragment !== null) {\r\n              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\r\n              workInProgress.treeBaseDuration -= ((primaryChildFragment.treeBaseDuration: any): number);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n    case HostPortal:\r\n      popHostContainer(workInProgress);\r\n      updateHostContainer(current, workInProgress);\r\n      if (current === null) {\r\n        preparePortalMount(workInProgress.stateNode.containerInfo);\r\n      }\r\n      bubbleProperties(workInProgress);\r\n      return null;\r\n    case ContextProvider:\r\n      // Pop provider fiber\r\n      const context: ReactContext<any> = workInProgress.type._context;\r\n      popProvider(context, workInProgress);\r\n      bubbleProperties(workInProgress);\r\n      return null;\r\n    case IncompleteClassComponent: {\r\n      // Same as class component case. I put it down here so that the tags are\r\n      // sequential to ensure this switch is compiled to a jump table.\r\n      const Component = workInProgress.type;\r\n      if (isLegacyContextProvider(Component)) {\r\n        popLegacyContext(workInProgress);\r\n      }\r\n      bubbleProperties(workInProgress);\r\n      return null;\r\n    }\r\n    case SuspenseListComponent: {\r\n      popSuspenseListContext(workInProgress);\r\n\r\n      const renderState: null | SuspenseListRenderState =\r\n        workInProgress.memoizedState;\r\n\r\n      if (renderState === null) {\r\n        // We're running in the default, \"independent\" mode.\r\n        // We don't do anything in this mode.\r\n        bubbleProperties(workInProgress);\r\n        return null;\r\n      }\r\n\r\n      let didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;\r\n\r\n      const renderedTail = renderState.rendering;\r\n      if (renderedTail === null) {\r\n        // We just rendered the head.\r\n        if (!didSuspendAlready) {\r\n          // This is the first pass. We need to figure out if anything is still\r\n          // suspended in the rendered set.\r\n\r\n          // If new content unsuspended, but there's still some content that\r\n          // didn't. Then we need to do a second pass that forces everything\r\n          // to keep showing their fallbacks.\r\n\r\n          // We might be suspended if something in this render pass suspended, or\r\n          // something in the previous committed pass suspended. Otherwise,\r\n          // there's no chance so we can skip the expensive call to\r\n          // findFirstSuspended.\r\n          const cannotBeSuspended =\r\n            renderHasNotSuspendedYet() &&\r\n            (current === null || (current.flags & DidCapture) === NoFlags);\r\n          if (!cannotBeSuspended) {\r\n            let row = workInProgress.child;\r\n            while (row !== null) {\r\n              const suspended = findFirstSuspended(row);\r\n              if (suspended !== null) {\r\n                didSuspendAlready = true;\r\n                workInProgress.flags |= DidCapture;\r\n                cutOffTailIfNeeded(renderState, false);\r\n\r\n                // If this is a newly suspended tree, it might not get committed as\r\n                // part of the second pass. In that case nothing will subscribe to\r\n                // its thenables. Instead, we'll transfer its thenables to the\r\n                // SuspenseList so that it can retry if they resolve.\r\n                // There might be multiple of these in the list but since we're\r\n                // going to wait for all of them anyway, it doesn't really matter\r\n                // which ones gets to ping. In theory we could get clever and keep\r\n                // track of how many dependencies remain but it gets tricky because\r\n                // in the meantime, we can add/remove/change items and dependencies.\r\n                // We might bail out of the loop before finding any but that\r\n                // doesn't matter since that means that the other boundaries that\r\n                // we did find already has their listeners attached.\r\n                const newThenables = suspended.updateQueue;\r\n                if (newThenables !== null) {\r\n                  workInProgress.updateQueue = newThenables;\r\n                  workInProgress.flags |= Update;\r\n                }\r\n\r\n                // Rerender the whole list, but this time, we'll force fallbacks\r\n                // to stay in place.\r\n                // Reset the effect flags before doing the second pass since that's now invalid.\r\n                // Reset the child fibers to their original state.\r\n                workInProgress.subtreeFlags = NoFlags;\r\n                resetChildFibers(workInProgress, renderLanes);\r\n\r\n                // Set up the Suspense List Context to force suspense and\r\n                // immediately rerender the children.\r\n                pushSuspenseListContext(\r\n                  workInProgress,\r\n                  setShallowSuspenseListContext(\r\n                    suspenseStackCursor.current,\r\n                    ForceSuspenseFallback,\r\n                  ),\r\n                );\r\n                // Don't bubble properties in this case.\r\n                return workInProgress.child;\r\n              }\r\n              row = row.sibling;\r\n            }\r\n          }\r\n\r\n          if (renderState.tail !== null && now() > getRenderTargetTime()) {\r\n            // We have already passed our CPU deadline but we still have rows\r\n            // left in the tail. We'll just give up further attempts to render\r\n            // the main content and only render fallbacks.\r\n            workInProgress.flags |= DidCapture;\r\n            didSuspendAlready = true;\r\n\r\n            cutOffTailIfNeeded(renderState, false);\r\n\r\n            // Since nothing actually suspended, there will nothing to ping this\r\n            // to get it started back up to attempt the next item. While in terms\r\n            // of priority this work has the same priority as this current render,\r\n            // it's not part of the same transition once the transition has\r\n            // committed. If it's sync, we still want to yield so that it can be\r\n            // painted. Conceptually, this is really the same as pinging.\r\n            // We can use any RetryLane even if it's the one currently rendering\r\n            // since we're leaving it behind on this node.\r\n            workInProgress.lanes = SomeRetryLane;\r\n          }\r\n        } else {\r\n          cutOffTailIfNeeded(renderState, false);\r\n        }\r\n        // Next we're going to render the tail.\r\n      } else {\r\n        // Append the rendered row to the child list.\r\n        if (!didSuspendAlready) {\r\n          const suspended = findFirstSuspended(renderedTail);\r\n          if (suspended !== null) {\r\n            workInProgress.flags |= DidCapture;\r\n            didSuspendAlready = true;\r\n\r\n            // Ensure we transfer the update queue to the parent so that it doesn't\r\n            // get lost if this row ends up dropped during a second pass.\r\n            const newThenables = suspended.updateQueue;\r\n            if (newThenables !== null) {\r\n              workInProgress.updateQueue = newThenables;\r\n              workInProgress.flags |= Update;\r\n            }\r\n\r\n            cutOffTailIfNeeded(renderState, true);\r\n            // This might have been modified.\r\n            if (\r\n              renderState.tail === null &&\r\n              renderState.tailMode === 'hidden' &&\r\n              !renderedTail.alternate &&\r\n              !getIsHydrating() // We don't cut it if we're hydrating.\r\n            ) {\r\n              // We're done.\r\n              bubbleProperties(workInProgress);\r\n              return null;\r\n            }\r\n          } else if (\r\n            // The time it took to render last row is greater than the remaining\r\n            // time we have to render. So rendering one more row would likely\r\n            // exceed it.\r\n            now() * 2 - renderState.renderingStartTime >\r\n              getRenderTargetTime() &&\r\n            renderLanes !== OffscreenLane\r\n          ) {\r\n            // We have now passed our CPU deadline and we'll just give up further\r\n            // attempts to render the main content and only render fallbacks.\r\n            // The assumption is that this is usually faster.\r\n            workInProgress.flags |= DidCapture;\r\n            didSuspendAlready = true;\r\n\r\n            cutOffTailIfNeeded(renderState, false);\r\n\r\n            // Since nothing actually suspended, there will nothing to ping this\r\n            // to get it started back up to attempt the next item. While in terms\r\n            // of priority this work has the same priority as this current render,\r\n            // it's not part of the same transition once the transition has\r\n            // committed. If it's sync, we still want to yield so that it can be\r\n            // painted. Conceptually, this is really the same as pinging.\r\n            // We can use any RetryLane even if it's the one currently rendering\r\n            // since we're leaving it behind on this node.\r\n            workInProgress.lanes = SomeRetryLane;\r\n          }\r\n        }\r\n        if (renderState.isBackwards) {\r\n          // The effect list of the backwards tail will have been added\r\n          // to the end. This breaks the guarantee that life-cycles fire in\r\n          // sibling order but that isn't a strong guarantee promised by React.\r\n          // Especially since these might also just pop in during future commits.\r\n          // Append to the beginning of the list.\r\n          renderedTail.sibling = workInProgress.child;\r\n          workInProgress.child = renderedTail;\r\n        } else {\r\n          const previousSibling = renderState.last;\r\n          if (previousSibling !== null) {\r\n            previousSibling.sibling = renderedTail;\r\n          } else {\r\n            workInProgress.child = renderedTail;\r\n          }\r\n          renderState.last = renderedTail;\r\n        }\r\n      }\r\n\r\n      if (renderState.tail !== null) {\r\n        // We still have tail rows to render.\r\n        // Pop a row.\r\n        const next = renderState.tail;\r\n        renderState.rendering = next;\r\n        renderState.tail = next.sibling;\r\n        renderState.renderingStartTime = now();\r\n        next.sibling = null;\r\n\r\n        // Restore the context.\r\n        // TODO: We can probably just avoid popping it instead and only\r\n        // setting it the first time we go from not suspended to suspended.\r\n        let suspenseContext = suspenseStackCursor.current;\r\n        if (didSuspendAlready) {\r\n          suspenseContext = setShallowSuspenseListContext(\r\n            suspenseContext,\r\n            ForceSuspenseFallback,\r\n          );\r\n        } else {\r\n          suspenseContext = setDefaultShallowSuspenseListContext(\r\n            suspenseContext,\r\n          );\r\n        }\r\n        pushSuspenseListContext(workInProgress, suspenseContext);\r\n        // Do a pass over the next row.\r\n        // Don't bubble properties in this case.\r\n        return next;\r\n      }\r\n      bubbleProperties(workInProgress);\r\n      return null;\r\n    }\r\n    case ScopeComponent: {\r\n      if (enableScopeAPI) {\r\n        if (current === null) {\r\n          const scopeInstance: ReactScopeInstance = createScopeInstance();\r\n          workInProgress.stateNode = scopeInstance;\r\n          prepareScopeUpdate(scopeInstance, workInProgress);\r\n          if (workInProgress.ref !== null) {\r\n            markRef(workInProgress);\r\n            markUpdate(workInProgress);\r\n          }\r\n        } else {\r\n          if (workInProgress.ref !== null) {\r\n            markUpdate(workInProgress);\r\n          }\r\n          if (current.ref !== workInProgress.ref) {\r\n            markRef(workInProgress);\r\n          }\r\n        }\r\n        bubbleProperties(workInProgress);\r\n        return null;\r\n      }\r\n      break;\r\n    }\r\n    case OffscreenComponent:\r\n    case LegacyHiddenComponent: {\r\n      popSuspenseHandler(workInProgress);\r\n      popHiddenContext(workInProgress);\r\n      const nextState: OffscreenState | null = workInProgress.memoizedState;\r\n      const nextIsHidden = nextState !== null;\r\n\r\n      // Schedule a Visibility effect if the visibility has changed\r\n      if (enableLegacyHidden && workInProgress.tag === LegacyHiddenComponent) {\r\n        // LegacyHidden doesn't do any hiding — it only pre-renders.\r\n      } else {\r\n        if (current !== null) {\r\n          const prevState: OffscreenState | null = current.memoizedState;\r\n          const prevIsHidden = prevState !== null;\r\n          if (prevIsHidden !== nextIsHidden) {\r\n            workInProgress.flags |= Visibility;\r\n          }\r\n        } else {\r\n          // On initial mount, we only need a Visibility effect if the tree\r\n          // is hidden.\r\n          if (nextIsHidden) {\r\n            workInProgress.flags |= Visibility;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {\r\n        bubbleProperties(workInProgress);\r\n      } else {\r\n        // Don't bubble properties for hidden children unless we're rendering\r\n        // at offscreen priority.\r\n        if (\r\n          includesSomeLane(renderLanes, (OffscreenLane: Lane)) &&\r\n          // Also don't bubble if the tree suspended\r\n          (workInProgress.flags & DidCapture) === NoLanes\r\n        ) {\r\n          bubbleProperties(workInProgress);\r\n          // Check if there was an insertion or update in the hidden subtree.\r\n          // If so, we need to hide those nodes in the commit phase, so\r\n          // schedule a visibility effect.\r\n          if (\r\n            (!enableLegacyHidden ||\r\n              workInProgress.tag !== LegacyHiddenComponent) &&\r\n            workInProgress.subtreeFlags & (Placement | Update)\r\n          ) {\r\n            workInProgress.flags |= Visibility;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (workInProgress.updateQueue !== null) {\r\n        // Schedule an effect to attach Suspense retry listeners\r\n        // TODO: Move to passive phase\r\n        workInProgress.flags |= Update;\r\n      }\r\n\r\n      if (enableCache) {\r\n        let previousCache: Cache | null = null;\r\n        if (\r\n          current !== null &&\r\n          current.memoizedState !== null &&\r\n          current.memoizedState.cachePool !== null\r\n        ) {\r\n          previousCache = current.memoizedState.cachePool.pool;\r\n        }\r\n        let cache: Cache | null = null;\r\n        if (\r\n          workInProgress.memoizedState !== null &&\r\n          workInProgress.memoizedState.cachePool !== null\r\n        ) {\r\n          cache = workInProgress.memoizedState.cachePool.pool;\r\n        }\r\n        if (cache !== previousCache) {\r\n          // Run passive effects to retain/release the cache.\r\n          workInProgress.flags |= Passive;\r\n        }\r\n      }\r\n\r\n      popTransition(workInProgress, current);\r\n\r\n      return null;\r\n    }\r\n    case CacheComponent: {\r\n      if (enableCache) {\r\n        let previousCache: Cache | null = null;\r\n        if (current !== null) {\r\n          previousCache = current.memoizedState.cache;\r\n        }\r\n        const cache: Cache = workInProgress.memoizedState.cache;\r\n        if (cache !== previousCache) {\r\n          // Run passive effects to retain/release the cache.\r\n          workInProgress.flags |= Passive;\r\n        }\r\n        popCacheProvider(workInProgress, cache);\r\n        bubbleProperties(workInProgress);\r\n      }\r\n      return null;\r\n    }\r\n    case TracingMarkerComponent: {\r\n      if (enableTransitionTracing) {\r\n        const instance: TracingMarkerInstance | null = workInProgress.stateNode;\r\n        if (instance !== null) {\r\n          popMarkerInstance(workInProgress);\r\n        }\r\n        bubbleProperties(workInProgress);\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  throw new Error(\r\n    `Unknown unit of work tag (${workInProgress.tag}). This error is likely caused by a bug in ` +\r\n      'React. Please file an issue.',\r\n  );\r\n}\r\n\r\nexport {completeWork};\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {ReactContext} from 'shared/ReactTypes';\r\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\r\nimport type {Lanes} from './ReactFiberLane.old';\r\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\r\nimport type {Cache} from './ReactFiberCacheComponent.old';\r\nimport type {TracingMarkerInstance} from './ReactFiberTracingMarkerComponent.old';\r\n\r\nimport {resetWorkInProgressVersions as resetMutableSourceWorkInProgressVersions} from './ReactMutableSource.old';\r\nimport {\r\n  ClassComponent,\r\n  HostRoot,\r\n  HostComponent,\r\n  HostPortal,\r\n  ContextProvider,\r\n  SuspenseComponent,\r\n  SuspenseListComponent,\r\n  OffscreenComponent,\r\n  LegacyHiddenComponent,\r\n  CacheComponent,\r\n  TracingMarkerComponent,\r\n} from './ReactWorkTags';\r\nimport {DidCapture, NoFlags, ShouldCapture} from './ReactFiberFlags';\r\nimport {NoMode, ProfileMode} from './ReactTypeOfMode';\r\nimport {\r\n  enableProfilerTimer,\r\n  enableCache,\r\n  enableTransitionTracing,\r\n} from 'shared/ReactFeatureFlags';\r\n\r\nimport {popHostContainer, popHostContext} from './ReactFiberHostContext.old';\r\nimport {\r\n  popSuspenseListContext,\r\n  popSuspenseHandler,\r\n} from './ReactFiberSuspenseContext.old';\r\nimport {popHiddenContext} from './ReactFiberHiddenContext.old';\r\nimport {resetHydrationState} from './ReactFiberHydrationContext.old';\r\nimport {\r\n  isContextProvider as isLegacyContextProvider,\r\n  popContext as popLegacyContext,\r\n  popTopLevelContextObject as popTopLevelLegacyContextObject,\r\n} from './ReactFiberContext.old';\r\nimport {popProvider} from './ReactFiberNewContext.old';\r\nimport {popCacheProvider} from './ReactFiberCacheComponent.old';\r\nimport {transferActualDuration} from './ReactProfilerTimer.old';\r\nimport {popTreeContext} from './ReactFiberTreeContext.old';\r\nimport {popRootTransition, popTransition} from './ReactFiberTransition.old';\r\nimport {\r\n  popMarkerInstance,\r\n  popRootMarkerInstance,\r\n} from './ReactFiberTracingMarkerComponent.old';\r\n\r\nfunction unwindWork(\r\n  current: Fiber | null,\r\n  workInProgress: Fiber,\r\n  renderLanes: Lanes,\r\n) {\r\n  // Note: This intentionally doesn't check if we're hydrating because comparing\r\n  // to the current tree provider fiber is just as fast and less error-prone.\r\n  // Ideally we would have a special version of the work loop only\r\n  // for hydration.\r\n  popTreeContext(workInProgress);\r\n  switch (workInProgress.tag) {\r\n    case ClassComponent: {\r\n      const Component = workInProgress.type;\r\n      if (isLegacyContextProvider(Component)) {\r\n        popLegacyContext(workInProgress);\r\n      }\r\n      const flags = workInProgress.flags;\r\n      if (flags & ShouldCapture) {\r\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\r\n        if (\r\n          enableProfilerTimer &&\r\n          (workInProgress.mode & ProfileMode) !== NoMode\r\n        ) {\r\n          transferActualDuration(workInProgress);\r\n        }\r\n        return workInProgress;\r\n      }\r\n      return null;\r\n    }\r\n    case HostRoot: {\r\n      const root: FiberRoot = workInProgress.stateNode;\r\n      if (enableCache) {\r\n        const cache: Cache = workInProgress.memoizedState.cache;\r\n        popCacheProvider(workInProgress, cache);\r\n      }\r\n\r\n      if (enableTransitionTracing) {\r\n        popRootMarkerInstance(workInProgress);\r\n      }\r\n\r\n      popRootTransition(workInProgress, root, renderLanes);\r\n      popHostContainer(workInProgress);\r\n      popTopLevelLegacyContextObject(workInProgress);\r\n      resetMutableSourceWorkInProgressVersions();\r\n      const flags = workInProgress.flags;\r\n      if (\r\n        (flags & ShouldCapture) !== NoFlags &&\r\n        (flags & DidCapture) === NoFlags\r\n      ) {\r\n        // There was an error during render that wasn't captured by a suspense\r\n        // boundary. Do a second pass on the root to unmount the children.\r\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\r\n        return workInProgress;\r\n      }\r\n      // We unwound to the root without completing it. Exit.\r\n      return null;\r\n    }\r\n    case HostComponent: {\r\n      // TODO: popHydrationState\r\n      popHostContext(workInProgress);\r\n      return null;\r\n    }\r\n    case SuspenseComponent: {\r\n      popSuspenseHandler(workInProgress);\r\n      const suspenseState: null | SuspenseState = workInProgress.memoizedState;\r\n      if (suspenseState !== null && suspenseState.dehydrated !== null) {\r\n        if (workInProgress.alternate === null) {\r\n          throw new Error(\r\n            'Threw in newly mounted dehydrated component. This is likely a bug in ' +\r\n              'React. Please file an issue.',\r\n          );\r\n        }\r\n\r\n        resetHydrationState();\r\n      }\r\n\r\n      const flags = workInProgress.flags;\r\n      if (flags & ShouldCapture) {\r\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\r\n        // Captured a suspense effect. Re-render the boundary.\r\n        if (\r\n          enableProfilerTimer &&\r\n          (workInProgress.mode & ProfileMode) !== NoMode\r\n        ) {\r\n          transferActualDuration(workInProgress);\r\n        }\r\n        return workInProgress;\r\n      }\r\n      return null;\r\n    }\r\n    case SuspenseListComponent: {\r\n      popSuspenseListContext(workInProgress);\r\n      // SuspenseList doesn't actually catch anything. It should've been\r\n      // caught by a nested boundary. If not, it should bubble through.\r\n      return null;\r\n    }\r\n    case HostPortal:\r\n      popHostContainer(workInProgress);\r\n      return null;\r\n    case ContextProvider:\r\n      const context: ReactContext<any> = workInProgress.type._context;\r\n      popProvider(context, workInProgress);\r\n      return null;\r\n    case OffscreenComponent:\r\n    case LegacyHiddenComponent: {\r\n      popSuspenseHandler(workInProgress);\r\n      popHiddenContext(workInProgress);\r\n      popTransition(workInProgress, current);\r\n      const flags = workInProgress.flags;\r\n      if (flags & ShouldCapture) {\r\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\r\n        // Captured a suspense effect. Re-render the boundary.\r\n        if (\r\n          enableProfilerTimer &&\r\n          (workInProgress.mode & ProfileMode) !== NoMode\r\n        ) {\r\n          transferActualDuration(workInProgress);\r\n        }\r\n        return workInProgress;\r\n      }\r\n      return null;\r\n    }\r\n    case CacheComponent:\r\n      if (enableCache) {\r\n        const cache: Cache = workInProgress.memoizedState.cache;\r\n        popCacheProvider(workInProgress, cache);\r\n      }\r\n      return null;\r\n    case TracingMarkerComponent:\r\n      if (enableTransitionTracing) {\r\n        if (workInProgress.stateNode !== null) {\r\n          popMarkerInstance(workInProgress);\r\n        }\r\n      }\r\n      return null;\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\nfunction unwindInterruptedWork(\r\n  current: Fiber | null,\r\n  interruptedWork: Fiber,\r\n  renderLanes: Lanes,\r\n) {\r\n  // Note: This intentionally doesn't check if we're hydrating because comparing\r\n  // to the current tree provider fiber is just as fast and less error-prone.\r\n  // Ideally we would have a special version of the work loop only\r\n  // for hydration.\r\n  popTreeContext(interruptedWork);\r\n  switch (interruptedWork.tag) {\r\n    case ClassComponent: {\r\n      const childContextTypes = interruptedWork.type.childContextTypes;\r\n      if (childContextTypes !== null && childContextTypes !== undefined) {\r\n        popLegacyContext(interruptedWork);\r\n      }\r\n      break;\r\n    }\r\n    case HostRoot: {\r\n      const root: FiberRoot = interruptedWork.stateNode;\r\n      if (enableCache) {\r\n        const cache: Cache = interruptedWork.memoizedState.cache;\r\n        popCacheProvider(interruptedWork, cache);\r\n      }\r\n\r\n      if (enableTransitionTracing) {\r\n        popRootMarkerInstance(interruptedWork);\r\n      }\r\n\r\n      popRootTransition(interruptedWork, root, renderLanes);\r\n      popHostContainer(interruptedWork);\r\n      popTopLevelLegacyContextObject(interruptedWork);\r\n      resetMutableSourceWorkInProgressVersions();\r\n      break;\r\n    }\r\n    case HostComponent: {\r\n      popHostContext(interruptedWork);\r\n      break;\r\n    }\r\n    case HostPortal:\r\n      popHostContainer(interruptedWork);\r\n      break;\r\n    case SuspenseComponent:\r\n      popSuspenseHandler(interruptedWork);\r\n      break;\r\n    case SuspenseListComponent:\r\n      popSuspenseListContext(interruptedWork);\r\n      break;\r\n    case ContextProvider:\r\n      const context: ReactContext<any> = interruptedWork.type._context;\r\n      popProvider(context, interruptedWork);\r\n      break;\r\n    case OffscreenComponent:\r\n    case LegacyHiddenComponent:\r\n      popSuspenseHandler(interruptedWork);\r\n      popHiddenContext(interruptedWork);\r\n      popTransition(interruptedWork, current);\r\n      break;\r\n    case CacheComponent:\r\n      if (enableCache) {\r\n        const cache: Cache = interruptedWork.memoizedState.cache;\r\n        popCacheProvider(interruptedWork, cache);\r\n      }\r\n      break;\r\n    case TracingMarkerComponent:\r\n      if (enableTransitionTracing) {\r\n        const instance: TracingMarkerInstance | null =\r\n          interruptedWork.stateNode;\r\n        if (instance !== null) {\r\n          popMarkerInstance(interruptedWork);\r\n        }\r\n      }\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n}\r\n\r\nexport {unwindWork, unwindInterruptedWork};\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {\r\n  Instance,\r\n  TextInstance,\r\n  SuspenseInstance,\r\n  Container,\r\n  ChildSet,\r\n  UpdatePayload,\r\n} from './ReactFiberHostConfig';\r\nimport type {Fiber} from './ReactInternalTypes';\r\nimport type {FiberRoot} from './ReactInternalTypes';\r\nimport type {Lanes} from './ReactFiberLane.old';\r\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\r\nimport type {UpdateQueue} from './ReactFiberClassUpdateQueue.old';\r\nimport type {FunctionComponentUpdateQueue} from './ReactFiberHooks.old';\r\nimport type {Wakeable} from 'shared/ReactTypes';\r\nimport type {\r\n  OffscreenState,\r\n  OffscreenInstance,\r\n  OffscreenQueue,\r\n} from './ReactFiberOffscreenComponent';\r\nimport type {HookFlags} from './ReactHookEffectTags';\r\nimport type {Cache} from './ReactFiberCacheComponent.old';\r\nimport type {RootState} from './ReactFiberRoot.old';\r\nimport type {\r\n  Transition,\r\n  TracingMarkerInstance,\r\n  TransitionAbort,\r\n} from './ReactFiberTracingMarkerComponent.old';\r\n\r\nimport {\r\n  enableCreateEventHandleAPI,\r\n  enableProfilerTimer,\r\n  enableProfilerCommitHooks,\r\n  enableProfilerNestedUpdatePhase,\r\n  enableSchedulingProfiler,\r\n  enableSuspenseCallback,\r\n  enableScopeAPI,\r\n  deletedTreeCleanUpLevel,\r\n  enableUpdaterTracking,\r\n  enableCache,\r\n  enableTransitionTracing,\r\n  enableUseEventHook,\r\n} from 'shared/ReactFeatureFlags';\r\nimport {\r\n  FunctionComponent,\r\n  ForwardRef,\r\n  ClassComponent,\r\n  HostRoot,\r\n  HostComponent,\r\n  HostText,\r\n  HostPortal,\r\n  Profiler,\r\n  SuspenseComponent,\r\n  DehydratedFragment,\r\n  IncompleteClassComponent,\r\n  MemoComponent,\r\n  SimpleMemoComponent,\r\n  SuspenseListComponent,\r\n  ScopeComponent,\r\n  OffscreenComponent,\r\n  LegacyHiddenComponent,\r\n  CacheComponent,\r\n  TracingMarkerComponent,\r\n} from './ReactWorkTags';\r\nimport {detachDeletedInstance} from './ReactFiberHostConfig';\r\nimport {\r\n  NoFlags,\r\n  ContentReset,\r\n  Placement,\r\n  ChildDeletion,\r\n  Snapshot,\r\n  Update,\r\n  Callback,\r\n  Ref,\r\n  Hydrating,\r\n  Passive,\r\n  BeforeMutationMask,\r\n  MutationMask,\r\n  LayoutMask,\r\n  PassiveMask,\r\n  Visibility,\r\n} from './ReactFiberFlags';\r\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\r\nimport {\r\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\r\n  setCurrentFiber as setCurrentDebugFiberInDEV,\r\n  getCurrentFiber as getCurrentDebugFiberInDEV,\r\n} from './ReactCurrentFiber';\r\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\r\nimport {\r\n  isCurrentUpdateNested,\r\n  getCommitTime,\r\n  recordLayoutEffectDuration,\r\n  startLayoutEffectTimer,\r\n  recordPassiveEffectDuration,\r\n  startPassiveEffectTimer,\r\n} from './ReactProfilerTimer.old';\r\nimport {ConcurrentMode, NoMode, ProfileMode} from './ReactTypeOfMode';\r\nimport {\r\n  deferHiddenCallbacks,\r\n  commitHiddenCallbacks,\r\n  commitCallbacks,\r\n} from './ReactFiberClassUpdateQueue.old';\r\nimport {\r\n  getPublicInstance,\r\n  supportsMutation,\r\n  supportsPersistence,\r\n  supportsHydration,\r\n  commitMount,\r\n  commitUpdate,\r\n  resetTextContent,\r\n  commitTextUpdate,\r\n  appendChild,\r\n  appendChildToContainer,\r\n  insertBefore,\r\n  insertInContainerBefore,\r\n  removeChild,\r\n  removeChildFromContainer,\r\n  clearSuspenseBoundary,\r\n  clearSuspenseBoundaryFromContainer,\r\n  replaceContainerChildren,\r\n  createContainerChildSet,\r\n  hideInstance,\r\n  hideTextInstance,\r\n  unhideInstance,\r\n  unhideTextInstance,\r\n  commitHydratedContainer,\r\n  commitHydratedSuspenseInstance,\r\n  clearContainer,\r\n  prepareScopeUpdate,\r\n  prepareForCommit,\r\n  beforeActiveInstanceBlur,\r\n} from './ReactFiberHostConfig';\r\nimport {\r\n  captureCommitPhaseError,\r\n  resolveRetryWakeable,\r\n  markCommitTimeOfFallback,\r\n  enqueuePendingPassiveProfilerEffect,\r\n  restorePendingUpdaters,\r\n  addTransitionStartCallbackToPendingTransition,\r\n  addTransitionProgressCallbackToPendingTransition,\r\n  addTransitionCompleteCallbackToPendingTransition,\r\n  addMarkerProgressCallbackToPendingTransition,\r\n  addMarkerIncompleteCallbackToPendingTransition,\r\n  addMarkerCompleteCallbackToPendingTransition,\r\n  setIsRunningInsertionEffect,\r\n  getExecutionContext,\r\n  CommitContext,\r\n  NoContext,\r\n} from './ReactFiberWorkLoop.old';\r\nimport {\r\n  NoFlags as NoHookEffect,\r\n  HasEffect as HookHasEffect,\r\n  Layout as HookLayout,\r\n  Insertion as HookInsertion,\r\n  Passive as HookPassive,\r\n  Snapshot as HookSnapshot,\r\n} from './ReactHookEffectTags';\r\nimport {didWarnAboutReassigningProps} from './ReactFiberBeginWork.old';\r\nimport {doesFiberContain} from './ReactFiberTreeReflection';\r\nimport {invokeGuardedCallback, clearCaughtError} from 'shared/ReactErrorUtils';\r\nimport {\r\n  isDevToolsPresent,\r\n  markComponentPassiveEffectMountStarted,\r\n  markComponentPassiveEffectMountStopped,\r\n  markComponentPassiveEffectUnmountStarted,\r\n  markComponentPassiveEffectUnmountStopped,\r\n  markComponentLayoutEffectMountStarted,\r\n  markComponentLayoutEffectMountStopped,\r\n  markComponentLayoutEffectUnmountStarted,\r\n  markComponentLayoutEffectUnmountStopped,\r\n  onCommitUnmount,\r\n} from './ReactFiberDevToolsHook.old';\r\nimport {releaseCache, retainCache} from './ReactFiberCacheComponent.old';\r\nimport {clearTransitionsForLanes} from './ReactFiberLane.old';\r\nimport {\r\n  OffscreenVisible,\r\n  OffscreenPassiveEffectsConnected,\r\n} from './ReactFiberOffscreenComponent';\r\nimport {\r\n  TransitionRoot,\r\n  TransitionTracingMarker,\r\n} from './ReactFiberTracingMarkerComponent.old';\r\n\r\nlet didWarnAboutUndefinedSnapshotBeforeUpdate: Set<mixed> | null = null;\r\nif (__DEV__) {\r\n  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\r\n}\r\n\r\n// Used during the commit phase to track the state of the Offscreen component stack.\r\n// Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.\r\nlet offscreenSubtreeIsHidden: boolean = false;\r\nlet offscreenSubtreeWasHidden: boolean = false;\r\n\r\nconst PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;\r\n\r\nlet nextEffect: Fiber | null = null;\r\n\r\n// Used for Profiling builds to track updaters.\r\nlet inProgressLanes: Lanes | null = null;\r\nlet inProgressRoot: FiberRoot | null = null;\r\n\r\nfunction shouldProfile(current: Fiber): boolean {\r\n  return (\r\n    enableProfilerTimer &&\r\n    enableProfilerCommitHooks &&\r\n    (current.mode & ProfileMode) !== NoMode &&\r\n    (getExecutionContext() & CommitContext) !== NoContext\r\n  );\r\n}\r\n\r\nexport function reportUncaughtErrorInDEV(error: mixed) {\r\n  // Wrapping each small part of the commit phase into a guarded\r\n  // callback is a bit too slow (https://github.com/facebook/react/pull/21666).\r\n  // But we rely on it to surface errors to DEV tools like overlays\r\n  // (https://github.com/facebook/react/issues/21712).\r\n  // As a compromise, rethrow only caught errors in a guard.\r\n  if (__DEV__) {\r\n    invokeGuardedCallback(null, () => {\r\n      throw error;\r\n    });\r\n    clearCaughtError();\r\n  }\r\n}\r\n\r\nconst callComponentWillUnmountWithTimer = function(current, instance) {\r\n  instance.props = current.memoizedProps;\r\n  instance.state = current.memoizedState;\r\n  if (shouldProfile(current)) {\r\n    try {\r\n      startLayoutEffectTimer();\r\n      instance.componentWillUnmount();\r\n    } finally {\r\n      recordLayoutEffectDuration(current);\r\n    }\r\n  } else {\r\n    instance.componentWillUnmount();\r\n  }\r\n};\r\n\r\n// Capture errors so they don't interrupt unmounting.\r\nfunction safelyCallComponentWillUnmount(\r\n  current: Fiber,\r\n  nearestMountedAncestor: Fiber | null,\r\n  instance: any,\r\n) {\r\n  try {\r\n    callComponentWillUnmountWithTimer(current, instance);\r\n  } catch (error) {\r\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\r\n  }\r\n}\r\n\r\n// Capture errors so they don't interrupt mounting.\r\nfunction safelyAttachRef(current: Fiber, nearestMountedAncestor: Fiber | null) {\r\n  try {\r\n    commitAttachRef(current);\r\n  } catch (error) {\r\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\r\n  }\r\n}\r\n\r\nfunction safelyDetachRef(current: Fiber, nearestMountedAncestor: Fiber | null) {\r\n  const ref = current.ref;\r\n  if (ref !== null) {\r\n    if (typeof ref === 'function') {\r\n      let retVal;\r\n      try {\r\n        if (shouldProfile(current)) {\r\n          try {\r\n            startLayoutEffectTimer();\r\n            retVal = ref(null);\r\n          } finally {\r\n            recordLayoutEffectDuration(current);\r\n          }\r\n        } else {\r\n          retVal = ref(null);\r\n        }\r\n      } catch (error) {\r\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\r\n      }\r\n      if (__DEV__) {\r\n        if (typeof retVal === 'function') {\r\n          console.error(\r\n            'Unexpected return value from a callback ref in %s. ' +\r\n              'A callback ref should not return a function.',\r\n            getComponentNameFromFiber(current),\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      // $FlowFixMe unable to narrow type to RefObject\r\n      ref.current = null;\r\n    }\r\n  }\r\n}\r\n\r\nfunction safelyCallDestroy(\r\n  current: Fiber,\r\n  nearestMountedAncestor: Fiber | null,\r\n  destroy: () => void,\r\n) {\r\n  try {\r\n    destroy();\r\n  } catch (error) {\r\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\r\n  }\r\n}\r\n\r\nlet focusedInstanceHandle: null | Fiber = null;\r\nlet shouldFireAfterActiveInstanceBlur: boolean = false;\r\n\r\nexport function commitBeforeMutationEffects(\r\n  root: FiberRoot,\r\n  firstChild: Fiber,\r\n): boolean {\r\n  focusedInstanceHandle = prepareForCommit(root.containerInfo);\r\n\r\n  nextEffect = firstChild;\r\n  commitBeforeMutationEffects_begin();\r\n\r\n  // We no longer need to track the active instance fiber\r\n  const shouldFire = shouldFireAfterActiveInstanceBlur;\r\n  shouldFireAfterActiveInstanceBlur = false;\r\n  focusedInstanceHandle = null;\r\n\r\n  return shouldFire;\r\n}\r\n\r\nfunction commitBeforeMutationEffects_begin() {\r\n  while (nextEffect !== null) {\r\n    const fiber = nextEffect;\r\n\r\n    // This phase is only used for beforeActiveInstanceBlur.\r\n    // Let's skip the whole loop if it's off.\r\n    if (enableCreateEventHandleAPI) {\r\n      // TODO: Should wrap this in flags check, too, as optimization\r\n      const deletions = fiber.deletions;\r\n      if (deletions !== null) {\r\n        for (let i = 0; i < deletions.length; i++) {\r\n          const deletion = deletions[i];\r\n          commitBeforeMutationEffectsDeletion(deletion);\r\n        }\r\n      }\r\n    }\r\n\r\n    const child = fiber.child;\r\n    if (\r\n      (fiber.subtreeFlags & BeforeMutationMask) !== NoFlags &&\r\n      child !== null\r\n    ) {\r\n      child.return = fiber;\r\n      nextEffect = child;\r\n    } else {\r\n      commitBeforeMutationEffects_complete();\r\n    }\r\n  }\r\n}\r\n\r\nfunction commitBeforeMutationEffects_complete() {\r\n  while (nextEffect !== null) {\r\n    const fiber = nextEffect;\r\n    setCurrentDebugFiberInDEV(fiber);\r\n    try {\r\n      commitBeforeMutationEffectsOnFiber(fiber);\r\n    } catch (error) {\r\n      captureCommitPhaseError(fiber, fiber.return, error);\r\n    }\r\n    resetCurrentDebugFiberInDEV();\r\n\r\n    const sibling = fiber.sibling;\r\n    if (sibling !== null) {\r\n      sibling.return = fiber.return;\r\n      nextEffect = sibling;\r\n      return;\r\n    }\r\n\r\n    nextEffect = fiber.return;\r\n  }\r\n}\r\n\r\nfunction commitBeforeMutationEffectsOnFiber(finishedWork: Fiber) {\r\n  const current = finishedWork.alternate;\r\n  const flags = finishedWork.flags;\r\n\r\n  if (enableCreateEventHandleAPI) {\r\n    if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {\r\n      // Check to see if the focused element was inside of a hidden (Suspense) subtree.\r\n      // TODO: Move this out of the hot path using a dedicated effect tag.\r\n      if (\r\n        finishedWork.tag === SuspenseComponent &&\r\n        isSuspenseBoundaryBeingHidden(current, finishedWork) &&\r\n        doesFiberContain(finishedWork, focusedInstanceHandle)\r\n      ) {\r\n        shouldFireAfterActiveInstanceBlur = true;\r\n        beforeActiveInstanceBlur(finishedWork);\r\n      }\r\n    }\r\n  }\r\n\r\n  if ((flags & Snapshot) !== NoFlags) {\r\n    setCurrentDebugFiberInDEV(finishedWork);\r\n  }\r\n\r\n  switch (finishedWork.tag) {\r\n    case FunctionComponent: {\r\n      if (enableUseEventHook) {\r\n        if ((flags & Update) !== NoFlags) {\r\n          // useEvent doesn't need to be cleaned up\r\n          commitHookEffectListMount(HookSnapshot | HookHasEffect, finishedWork);\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ForwardRef:\r\n    case SimpleMemoComponent: {\r\n      break;\r\n    }\r\n    case ClassComponent: {\r\n      if ((flags & Snapshot) !== NoFlags) {\r\n        if (current !== null) {\r\n          const prevProps = current.memoizedProps;\r\n          const prevState = current.memoizedState;\r\n          const instance = finishedWork.stateNode;\r\n          // We could update instance props and state here,\r\n          // but instead we rely on them being set during last render.\r\n          // TODO: revisit this when we implement resuming.\r\n          if (__DEV__) {\r\n            if (\r\n              finishedWork.type === finishedWork.elementType &&\r\n              !didWarnAboutReassigningProps\r\n            ) {\r\n              if (instance.props !== finishedWork.memoizedProps) {\r\n                console.error(\r\n                  'Expected %s props to match memoized props before ' +\r\n                    'getSnapshotBeforeUpdate. ' +\r\n                    'This might either be because of a bug in React, or because ' +\r\n                    'a component reassigns its own `this.props`. ' +\r\n                    'Please file an issue.',\r\n                  getComponentNameFromFiber(finishedWork) || 'instance',\r\n                );\r\n              }\r\n              if (instance.state !== finishedWork.memoizedState) {\r\n                console.error(\r\n                  'Expected %s state to match memoized state before ' +\r\n                    'getSnapshotBeforeUpdate. ' +\r\n                    'This might either be because of a bug in React, or because ' +\r\n                    'a component reassigns its own `this.state`. ' +\r\n                    'Please file an issue.',\r\n                  getComponentNameFromFiber(finishedWork) || 'instance',\r\n                );\r\n              }\r\n            }\r\n          }\r\n          const snapshot = instance.getSnapshotBeforeUpdate(\r\n            finishedWork.elementType === finishedWork.type\r\n              ? prevProps\r\n              : resolveDefaultProps(finishedWork.type, prevProps),\r\n            prevState,\r\n          );\r\n          if (__DEV__) {\r\n            const didWarnSet = ((didWarnAboutUndefinedSnapshotBeforeUpdate: any): Set<mixed>);\r\n            if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\r\n              didWarnSet.add(finishedWork.type);\r\n              console.error(\r\n                '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' +\r\n                  'must be returned. You have returned undefined.',\r\n                getComponentNameFromFiber(finishedWork),\r\n              );\r\n            }\r\n          }\r\n          instance.__reactInternalSnapshotBeforeUpdate = snapshot;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case HostRoot: {\r\n      if ((flags & Snapshot) !== NoFlags) {\r\n        if (supportsMutation) {\r\n          const root = finishedWork.stateNode;\r\n          clearContainer(root.containerInfo);\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case HostComponent:\r\n    case HostText:\r\n    case HostPortal:\r\n    case IncompleteClassComponent:\r\n      // Nothing to do for these component types\r\n      break;\r\n    default: {\r\n      if ((flags & Snapshot) !== NoFlags) {\r\n        throw new Error(\r\n          'This unit of work tag should not have side-effects. This error is ' +\r\n            'likely caused by a bug in React. Please file an issue.',\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  if ((flags & Snapshot) !== NoFlags) {\r\n    resetCurrentDebugFiberInDEV();\r\n  }\r\n}\r\n\r\nfunction commitBeforeMutationEffectsDeletion(deletion: Fiber) {\r\n  if (enableCreateEventHandleAPI) {\r\n    // TODO (effects) It would be nice to avoid calling doesFiberContain()\r\n    // Maybe we can repurpose one of the subtreeFlags positions for this instead?\r\n    // Use it to store which part of the tree the focused instance is in?\r\n    // This assumes we can safely determine that instance during the \"render\" phase.\r\n    if (doesFiberContain(deletion, ((focusedInstanceHandle: any): Fiber))) {\r\n      shouldFireAfterActiveInstanceBlur = true;\r\n      beforeActiveInstanceBlur(deletion);\r\n    }\r\n  }\r\n}\r\n\r\nfunction commitHookEffectListUnmount(\r\n  flags: HookFlags,\r\n  finishedWork: Fiber,\r\n  nearestMountedAncestor: Fiber | null,\r\n) {\r\n  const updateQueue: FunctionComponentUpdateQueue | null = (finishedWork.updateQueue: any);\r\n  const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\r\n  if (lastEffect !== null) {\r\n    const firstEffect = lastEffect.next;\r\n    let effect = firstEffect;\r\n    do {\r\n      if ((effect.tag & flags) === flags) {\r\n        // Unmount\r\n        const destroy = effect.destroy;\r\n        effect.destroy = undefined;\r\n        if (destroy !== undefined) {\r\n          if (enableSchedulingProfiler) {\r\n            if ((flags & HookPassive) !== NoHookEffect) {\r\n              markComponentPassiveEffectUnmountStarted(finishedWork);\r\n            } else if ((flags & HookLayout) !== NoHookEffect) {\r\n              markComponentLayoutEffectUnmountStarted(finishedWork);\r\n            }\r\n          }\r\n\r\n          if (__DEV__) {\r\n            if ((flags & HookInsertion) !== NoHookEffect) {\r\n              setIsRunningInsertionEffect(true);\r\n            }\r\n          }\r\n          safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);\r\n          if (__DEV__) {\r\n            if ((flags & HookInsertion) !== NoHookEffect) {\r\n              setIsRunningInsertionEffect(false);\r\n            }\r\n          }\r\n\r\n          if (enableSchedulingProfiler) {\r\n            if ((flags & HookPassive) !== NoHookEffect) {\r\n              markComponentPassiveEffectUnmountStopped();\r\n            } else if ((flags & HookLayout) !== NoHookEffect) {\r\n              markComponentLayoutEffectUnmountStopped();\r\n            }\r\n          }\r\n        }\r\n      }\r\n      effect = effect.next;\r\n    } while (effect !== firstEffect);\r\n  }\r\n}\r\n\r\nfunction commitHookEffectListMount(flags: HookFlags, finishedWork: Fiber) {\r\n  const updateQueue: FunctionComponentUpdateQueue | null = (finishedWork.updateQueue: any);\r\n  const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\r\n  if (lastEffect !== null) {\r\n    const firstEffect = lastEffect.next;\r\n    let effect = firstEffect;\r\n    do {\r\n      if ((effect.tag & flags) === flags) {\r\n        if (enableSchedulingProfiler) {\r\n          if ((flags & HookPassive) !== NoHookEffect) {\r\n            markComponentPassiveEffectMountStarted(finishedWork);\r\n          } else if ((flags & HookLayout) !== NoHookEffect) {\r\n            markComponentLayoutEffectMountStarted(finishedWork);\r\n          }\r\n        }\r\n\r\n        // Mount\r\n        const create = effect.create;\r\n        if (__DEV__) {\r\n          if ((flags & HookInsertion) !== NoHookEffect) {\r\n            setIsRunningInsertionEffect(true);\r\n          }\r\n        }\r\n        effect.destroy = create();\r\n        if (__DEV__) {\r\n          if ((flags & HookInsertion) !== NoHookEffect) {\r\n            setIsRunningInsertionEffect(false);\r\n          }\r\n        }\r\n\r\n        if (enableSchedulingProfiler) {\r\n          if ((flags & HookPassive) !== NoHookEffect) {\r\n            markComponentPassiveEffectMountStopped();\r\n          } else if ((flags & HookLayout) !== NoHookEffect) {\r\n            markComponentLayoutEffectMountStopped();\r\n          }\r\n        }\r\n\r\n        if (__DEV__) {\r\n          const destroy = effect.destroy;\r\n          if (destroy !== undefined && typeof destroy !== 'function') {\r\n            let hookName;\r\n            if ((effect.tag & HookLayout) !== NoFlags) {\r\n              hookName = 'useLayoutEffect';\r\n            } else if ((effect.tag & HookInsertion) !== NoFlags) {\r\n              hookName = 'useInsertionEffect';\r\n            } else {\r\n              hookName = 'useEffect';\r\n            }\r\n            let addendum;\r\n            if (destroy === null) {\r\n              addendum =\r\n                ' You returned null. If your effect does not require clean ' +\r\n                'up, return undefined (or nothing).';\r\n            } else if (typeof destroy.then === 'function') {\r\n              addendum =\r\n                '\\n\\nIt looks like you wrote ' +\r\n                hookName +\r\n                '(async () => ...) or returned a Promise. ' +\r\n                'Instead, write the async function inside your effect ' +\r\n                'and call it immediately:\\n\\n' +\r\n                hookName +\r\n                '(() => {\\n' +\r\n                '  async function fetchData() {\\n' +\r\n                '    // You can await here\\n' +\r\n                '    const response = await MyAPI.getData(someId);\\n' +\r\n                '    // ...\\n' +\r\n                '  }\\n' +\r\n                '  fetchData();\\n' +\r\n                `}, [someId]); // Or [] if effect doesn't need props or state\\n\\n` +\r\n                'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';\r\n            } else {\r\n              addendum = ' You returned: ' + destroy;\r\n            }\r\n            console.error(\r\n              '%s must not return anything besides a function, ' +\r\n                'which is used for clean-up.%s',\r\n              hookName,\r\n              addendum,\r\n            );\r\n          }\r\n        }\r\n      }\r\n      effect = effect.next;\r\n    } while (effect !== firstEffect);\r\n  }\r\n}\r\n\r\nexport function commitPassiveEffectDurations(\r\n  finishedRoot: FiberRoot,\r\n  finishedWork: Fiber,\r\n): void {\r\n  if (\r\n    enableProfilerTimer &&\r\n    enableProfilerCommitHooks &&\r\n    getExecutionContext() & CommitContext\r\n  ) {\r\n    // Only Profilers with work in their subtree will have an Update effect scheduled.\r\n    if ((finishedWork.flags & Update) !== NoFlags) {\r\n      switch (finishedWork.tag) {\r\n        case Profiler: {\r\n          const {passiveEffectDuration} = finishedWork.stateNode;\r\n          const {id, onPostCommit} = finishedWork.memoizedProps;\r\n\r\n          // This value will still reflect the previous commit phase.\r\n          // It does not get reset until the start of the next commit phase.\r\n          const commitTime = getCommitTime();\r\n\r\n          let phase = finishedWork.alternate === null ? 'mount' : 'update';\r\n          if (enableProfilerNestedUpdatePhase) {\r\n            if (isCurrentUpdateNested()) {\r\n              phase = 'nested-update';\r\n            }\r\n          }\r\n\r\n          if (typeof onPostCommit === 'function') {\r\n            onPostCommit(id, phase, passiveEffectDuration, commitTime);\r\n          }\r\n\r\n          // Bubble times to the next nearest ancestor Profiler.\r\n          // After we process that Profiler, we'll bubble further up.\r\n          let parentFiber = finishedWork.return;\r\n          outer: while (parentFiber !== null) {\r\n            switch (parentFiber.tag) {\r\n              case HostRoot:\r\n                const root = parentFiber.stateNode;\r\n                root.passiveEffectDuration += passiveEffectDuration;\r\n                break outer;\r\n              case Profiler:\r\n                const parentStateNode = parentFiber.stateNode;\r\n                parentStateNode.passiveEffectDuration += passiveEffectDuration;\r\n                break outer;\r\n            }\r\n            parentFiber = parentFiber.return;\r\n          }\r\n          break;\r\n        }\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction commitHookLayoutEffects(finishedWork: Fiber, hookFlags: HookFlags) {\r\n  // At this point layout effects have already been destroyed (during mutation phase).\r\n  // This is done to prevent sibling component effects from interfering with each other,\r\n  // e.g. a destroy function in one component should never override a ref set\r\n  // by a create function in another component during the same commit.\r\n  if (shouldProfile(finishedWork)) {\r\n    try {\r\n      startLayoutEffectTimer();\r\n      commitHookEffectListMount(hookFlags, finishedWork);\r\n    } catch (error) {\r\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\r\n    }\r\n    recordLayoutEffectDuration(finishedWork);\r\n  } else {\r\n    try {\r\n      commitHookEffectListMount(hookFlags, finishedWork);\r\n    } catch (error) {\r\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\r\n    }\r\n  }\r\n}\r\n\r\nfunction commitClassLayoutLifecycles(\r\n  finishedWork: Fiber,\r\n  current: Fiber | null,\r\n) {\r\n  const instance = finishedWork.stateNode;\r\n  if (current === null) {\r\n    // We could update instance props and state here,\r\n    // but instead we rely on them being set during last render.\r\n    // TODO: revisit this when we implement resuming.\r\n    if (__DEV__) {\r\n      if (\r\n        finishedWork.type === finishedWork.elementType &&\r\n        !didWarnAboutReassigningProps\r\n      ) {\r\n        if (instance.props !== finishedWork.memoizedProps) {\r\n          console.error(\r\n            'Expected %s props to match memoized props before ' +\r\n              'componentDidMount. ' +\r\n              'This might either be because of a bug in React, or because ' +\r\n              'a component reassigns its own `this.props`. ' +\r\n              'Please file an issue.',\r\n            getComponentNameFromFiber(finishedWork) || 'instance',\r\n          );\r\n        }\r\n        if (instance.state !== finishedWork.memoizedState) {\r\n          console.error(\r\n            'Expected %s state to match memoized state before ' +\r\n              'componentDidMount. ' +\r\n              'This might either be because of a bug in React, or because ' +\r\n              'a component reassigns its own `this.state`. ' +\r\n              'Please file an issue.',\r\n            getComponentNameFromFiber(finishedWork) || 'instance',\r\n          );\r\n        }\r\n      }\r\n    }\r\n    if (shouldProfile(finishedWork)) {\r\n      try {\r\n        startLayoutEffectTimer();\r\n        instance.componentDidMount();\r\n      } catch (error) {\r\n        captureCommitPhaseError(finishedWork, finishedWork.return, error);\r\n      }\r\n      recordLayoutEffectDuration(finishedWork);\r\n    } else {\r\n      try {\r\n        instance.componentDidMount();\r\n      } catch (error) {\r\n        captureCommitPhaseError(finishedWork, finishedWork.return, error);\r\n      }\r\n    }\r\n  } else {\r\n    const prevProps =\r\n      finishedWork.elementType === finishedWork.type\r\n        ? current.memoizedProps\r\n        : resolveDefaultProps(finishedWork.type, current.memoizedProps);\r\n    const prevState = current.memoizedState;\r\n    // We could update instance props and state here,\r\n    // but instead we rely on them being set during last render.\r\n    // TODO: revisit this when we implement resuming.\r\n    if (__DEV__) {\r\n      if (\r\n        finishedWork.type === finishedWork.elementType &&\r\n        !didWarnAboutReassigningProps\r\n      ) {\r\n        if (instance.props !== finishedWork.memoizedProps) {\r\n          console.error(\r\n            'Expected %s props to match memoized props before ' +\r\n              'componentDidUpdate. ' +\r\n              'This might either be because of a bug in React, or because ' +\r\n              'a component reassigns its own `this.props`. ' +\r\n              'Please file an issue.',\r\n            getComponentNameFromFiber(finishedWork) || 'instance',\r\n          );\r\n        }\r\n        if (instance.state !== finishedWork.memoizedState) {\r\n          console.error(\r\n            'Expected %s state to match memoized state before ' +\r\n              'componentDidUpdate. ' +\r\n              'This might either be because of a bug in React, or because ' +\r\n              'a component reassigns its own `this.state`. ' +\r\n              'Please file an issue.',\r\n            getComponentNameFromFiber(finishedWork) || 'instance',\r\n          );\r\n        }\r\n      }\r\n    }\r\n    if (shouldProfile(finishedWork)) {\r\n      try {\r\n        startLayoutEffectTimer();\r\n        instance.componentDidUpdate(\r\n          prevProps,\r\n          prevState,\r\n          instance.__reactInternalSnapshotBeforeUpdate,\r\n        );\r\n      } catch (error) {\r\n        captureCommitPhaseError(finishedWork, finishedWork.return, error);\r\n      }\r\n      recordLayoutEffectDuration(finishedWork);\r\n    } else {\r\n      try {\r\n        instance.componentDidUpdate(\r\n          prevProps,\r\n          prevState,\r\n          instance.__reactInternalSnapshotBeforeUpdate,\r\n        );\r\n      } catch (error) {\r\n        captureCommitPhaseError(finishedWork, finishedWork.return, error);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction commitClassCallbacks(finishedWork: Fiber) {\r\n  // TODO: I think this is now always non-null by the time it reaches the\r\n  // commit phase. Consider removing the type check.\r\n  const updateQueue: UpdateQueue<*> | null = (finishedWork.updateQueue: any);\r\n  if (updateQueue !== null) {\r\n    const instance = finishedWork.stateNode;\r\n    if (__DEV__) {\r\n      if (\r\n        finishedWork.type === finishedWork.elementType &&\r\n        !didWarnAboutReassigningProps\r\n      ) {\r\n        if (instance.props !== finishedWork.memoizedProps) {\r\n          console.error(\r\n            'Expected %s props to match memoized props before ' +\r\n              'processing the update queue. ' +\r\n              'This might either be because of a bug in React, or because ' +\r\n              'a component reassigns its own `this.props`. ' +\r\n              'Please file an issue.',\r\n            getComponentNameFromFiber(finishedWork) || 'instance',\r\n          );\r\n        }\r\n        if (instance.state !== finishedWork.memoizedState) {\r\n          console.error(\r\n            'Expected %s state to match memoized state before ' +\r\n              'processing the update queue. ' +\r\n              'This might either be because of a bug in React, or because ' +\r\n              'a component reassigns its own `this.state`. ' +\r\n              'Please file an issue.',\r\n            getComponentNameFromFiber(finishedWork) || 'instance',\r\n          );\r\n        }\r\n      }\r\n    }\r\n    // We could update instance props and state here,\r\n    // but instead we rely on them being set during last render.\r\n    // TODO: revisit this when we implement resuming.\r\n    try {\r\n      commitCallbacks(updateQueue, instance);\r\n    } catch (error) {\r\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\r\n    }\r\n  }\r\n}\r\n\r\nfunction commitHostComponentMount(finishedWork: Fiber) {\r\n  const type = finishedWork.type;\r\n  const props = finishedWork.memoizedProps;\r\n  const instance: Instance = finishedWork.stateNode;\r\n  try {\r\n    commitMount(instance, type, props, finishedWork);\r\n  } catch (error) {\r\n    captureCommitPhaseError(finishedWork, finishedWork.return, error);\r\n  }\r\n}\r\n\r\nfunction commitProfilerUpdate(finishedWork: Fiber, current: Fiber | null) {\r\n  if (enableProfilerTimer && getExecutionContext() & CommitContext) {\r\n    try {\r\n      const {onCommit, onRender} = finishedWork.memoizedProps;\r\n      const {effectDuration} = finishedWork.stateNode;\r\n\r\n      const commitTime = getCommitTime();\r\n\r\n      let phase = current === null ? 'mount' : 'update';\r\n      if (enableProfilerNestedUpdatePhase) {\r\n        if (isCurrentUpdateNested()) {\r\n          phase = 'nested-update';\r\n        }\r\n      }\r\n\r\n      if (typeof onRender === 'function') {\r\n        onRender(\r\n          finishedWork.memoizedProps.id,\r\n          phase,\r\n          finishedWork.actualDuration,\r\n          finishedWork.treeBaseDuration,\r\n          finishedWork.actualStartTime,\r\n          commitTime,\r\n        );\r\n      }\r\n\r\n      if (enableProfilerCommitHooks) {\r\n        if (typeof onCommit === 'function') {\r\n          onCommit(\r\n            finishedWork.memoizedProps.id,\r\n            phase,\r\n            effectDuration,\r\n            commitTime,\r\n          );\r\n        }\r\n\r\n        // Schedule a passive effect for this Profiler to call onPostCommit hooks.\r\n        // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,\r\n        // because the effect is also where times bubble to parent Profilers.\r\n        enqueuePendingPassiveProfilerEffect(finishedWork);\r\n\r\n        // Propagate layout effect durations to the next nearest Profiler ancestor.\r\n        // Do not reset these values until the next render so DevTools has a chance to read them first.\r\n        let parentFiber = finishedWork.return;\r\n        outer: while (parentFiber !== null) {\r\n          switch (parentFiber.tag) {\r\n            case HostRoot:\r\n              const root = parentFiber.stateNode;\r\n              root.effectDuration += effectDuration;\r\n              break outer;\r\n            case Profiler:\r\n              const parentStateNode = parentFiber.stateNode;\r\n              parentStateNode.effectDuration += effectDuration;\r\n              break outer;\r\n          }\r\n          parentFiber = parentFiber.return;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\r\n    }\r\n  }\r\n}\r\n\r\nfunction commitLayoutEffectOnFiber(\r\n  finishedRoot: FiberRoot,\r\n  current: Fiber | null,\r\n  finishedWork: Fiber,\r\n  committedLanes: Lanes,\r\n): void {\r\n  // When updating this function, also update reappearLayoutEffects, which does\r\n  // most of the same things when an offscreen tree goes from hidden -> visible.\r\n  const flags = finishedWork.flags;\r\n  switch (finishedWork.tag) {\r\n    case FunctionComponent:\r\n    case ForwardRef:\r\n    case SimpleMemoComponent: {\r\n      recursivelyTraverseLayoutEffects(\r\n        finishedRoot,\r\n        finishedWork,\r\n        committedLanes,\r\n      );\r\n      if (flags & Update) {\r\n        commitHookLayoutEffects(finishedWork, HookLayout | HookHasEffect);\r\n      }\r\n      break;\r\n    }\r\n    case ClassComponent: {\r\n      recursivelyTraverseLayoutEffects(\r\n        finishedRoot,\r\n        finishedWork,\r\n        committedLanes,\r\n      );\r\n      if (flags & Update) {\r\n        commitClassLayoutLifecycles(finishedWork, current);\r\n      }\r\n\r\n      if (flags & Callback) {\r\n        commitClassCallbacks(finishedWork);\r\n      }\r\n\r\n      if (flags & Ref) {\r\n        safelyAttachRef(finishedWork, finishedWork.return);\r\n      }\r\n      break;\r\n    }\r\n    case HostRoot: {\r\n      recursivelyTraverseLayoutEffects(\r\n        finishedRoot,\r\n        finishedWork,\r\n        committedLanes,\r\n      );\r\n      if (flags & Callback) {\r\n        // TODO: I think this is now always non-null by the time it reaches the\r\n        // commit phase. Consider removing the type check.\r\n        const updateQueue: UpdateQueue<\r\n          *,\r\n        > | null = (finishedWork.updateQueue: any);\r\n        if (updateQueue !== null) {\r\n          let instance = null;\r\n          if (finishedWork.child !== null) {\r\n            switch (finishedWork.child.tag) {\r\n              case HostComponent:\r\n                instance = getPublicInstance(finishedWork.child.stateNode);\r\n                break;\r\n              case ClassComponent:\r\n                instance = finishedWork.child.stateNode;\r\n                break;\r\n            }\r\n          }\r\n          try {\r\n            commitCallbacks(updateQueue, instance);\r\n          } catch (error) {\r\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\r\n          }\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case HostComponent: {\r\n      recursivelyTraverseLayoutEffects(\r\n        finishedRoot,\r\n        finishedWork,\r\n        committedLanes,\r\n      );\r\n\r\n      // Renderers may schedule work to be done after host components are mounted\r\n      // (eg DOM renderer may schedule auto-focus for inputs and form controls).\r\n      // These effects should only be committed when components are first mounted,\r\n      // aka when there is no current/alternate.\r\n      if (current === null && flags & Update) {\r\n        commitHostComponentMount(finishedWork);\r\n      }\r\n\r\n      if (flags & Ref) {\r\n        safelyAttachRef(finishedWork, finishedWork.return);\r\n      }\r\n      break;\r\n    }\r\n    case Profiler: {\r\n      recursivelyTraverseLayoutEffects(\r\n        finishedRoot,\r\n        finishedWork,\r\n        committedLanes,\r\n      );\r\n      // TODO: Should this fire inside an offscreen tree? Or should it wait to\r\n      // fire when the tree becomes visible again.\r\n      if (flags & Update) {\r\n        commitProfilerUpdate(finishedWork, current);\r\n      }\r\n      break;\r\n    }\r\n    case SuspenseComponent: {\r\n      recursivelyTraverseLayoutEffects(\r\n        finishedRoot,\r\n        finishedWork,\r\n        committedLanes,\r\n      );\r\n      if (flags & Update) {\r\n        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\r\n      }\r\n      break;\r\n    }\r\n    case OffscreenComponent: {\r\n      const isModernRoot = (finishedWork.mode & ConcurrentMode) !== NoMode;\r\n      if (isModernRoot) {\r\n        const isHidden = finishedWork.memoizedState !== null;\r\n        const newOffscreenSubtreeIsHidden =\r\n          isHidden || offscreenSubtreeIsHidden;\r\n        if (newOffscreenSubtreeIsHidden) {\r\n          // The Offscreen tree is hidden. Skip over its layout effects.\r\n        } else {\r\n          // The Offscreen tree is visible.\r\n\r\n          const wasHidden = current !== null && current.memoizedState !== null;\r\n          const newOffscreenSubtreeWasHidden =\r\n            wasHidden || offscreenSubtreeWasHidden;\r\n          const prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\r\n          const prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\r\n          offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;\r\n          offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;\r\n\r\n          if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {\r\n            // This is the root of a reappearing boundary. As we continue\r\n            // traversing the layout effects, we must also re-mount layout\r\n            // effects that were unmounted when the Offscreen subtree was\r\n            // hidden. So this is a superset of the normal commitLayoutEffects.\r\n            const includeWorkInProgressEffects =\r\n              (finishedWork.subtreeFlags & LayoutMask) !== NoFlags;\r\n            recursivelyTraverseReappearLayoutEffects(\r\n              finishedRoot,\r\n              finishedWork,\r\n              includeWorkInProgressEffects,\r\n            );\r\n          } else {\r\n            recursivelyTraverseLayoutEffects(\r\n              finishedRoot,\r\n              finishedWork,\r\n              committedLanes,\r\n            );\r\n          }\r\n          offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\r\n          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\r\n        }\r\n      } else {\r\n        recursivelyTraverseLayoutEffects(\r\n          finishedRoot,\r\n          finishedWork,\r\n          committedLanes,\r\n        );\r\n      }\r\n      break;\r\n    }\r\n    default: {\r\n      recursivelyTraverseLayoutEffects(\r\n        finishedRoot,\r\n        finishedWork,\r\n        committedLanes,\r\n      );\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nfunction abortRootTransitions(\r\n  root: FiberRoot,\r\n  abort: TransitionAbort,\r\n  deletedTransitions: Set<Transition>,\r\n  deletedOffscreenInstance: OffscreenInstance | null,\r\n  isInDeletedTree: boolean,\r\n) {\r\n  if (enableTransitionTracing) {\r\n    const rootTransitions = root.incompleteTransitions;\r\n    deletedTransitions.forEach(transition => {\r\n      if (rootTransitions.has(transition)) {\r\n        const transitionInstance: TracingMarkerInstance = (rootTransitions.get(\r\n          transition,\r\n        ): any);\r\n        if (transitionInstance.aborts === null) {\r\n          transitionInstance.aborts = [];\r\n        }\r\n        transitionInstance.aborts.push(abort);\r\n\r\n        if (deletedOffscreenInstance !== null) {\r\n          if (\r\n            transitionInstance.pendingBoundaries !== null &&\r\n            transitionInstance.pendingBoundaries.has(deletedOffscreenInstance)\r\n          ) {\r\n            transitionInstance.pendingBoundaries.delete(\r\n              deletedOffscreenInstance,\r\n            );\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction abortTracingMarkerTransitions(\r\n  abortedFiber: Fiber,\r\n  abort: TransitionAbort,\r\n  deletedTransitions: Set<Transition>,\r\n  deletedOffscreenInstance: OffscreenInstance | null,\r\n  isInDeletedTree: boolean,\r\n) {\r\n  if (enableTransitionTracing) {\r\n    const markerInstance: TracingMarkerInstance = abortedFiber.stateNode;\r\n    const markerTransitions = markerInstance.transitions;\r\n    const pendingBoundaries = markerInstance.pendingBoundaries;\r\n    if (markerTransitions !== null) {\r\n      // TODO: Refactor this code. Is there a way to move this code to\r\n      // the deletions phase instead of calculating it here while making sure\r\n      // complete is called appropriately?\r\n      deletedTransitions.forEach(transition => {\r\n        // If one of the transitions on the tracing marker is a transition\r\n        // that was in an aborted subtree, we will abort that tracing marker\r\n        if (\r\n          abortedFiber !== null &&\r\n          markerTransitions.has(transition) &&\r\n          (markerInstance.aborts === null ||\r\n            !markerInstance.aborts.includes(abort))\r\n        ) {\r\n          if (markerInstance.transitions !== null) {\r\n            if (markerInstance.aborts === null) {\r\n              markerInstance.aborts = [abort];\r\n              addMarkerIncompleteCallbackToPendingTransition(\r\n                abortedFiber.memoizedProps.name,\r\n                markerInstance.transitions,\r\n                markerInstance.aborts,\r\n              );\r\n            } else {\r\n              markerInstance.aborts.push(abort);\r\n            }\r\n\r\n            // We only want to call onTransitionProgress when the marker hasn't been\r\n            // deleted\r\n            if (\r\n              deletedOffscreenInstance !== null &&\r\n              !isInDeletedTree &&\r\n              pendingBoundaries !== null &&\r\n              pendingBoundaries.has(deletedOffscreenInstance)\r\n            ) {\r\n              pendingBoundaries.delete(deletedOffscreenInstance);\r\n\r\n              addMarkerProgressCallbackToPendingTransition(\r\n                abortedFiber.memoizedProps.name,\r\n                deletedTransitions,\r\n                pendingBoundaries,\r\n              );\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nfunction abortParentMarkerTransitionsForDeletedFiber(\r\n  abortedFiber: Fiber,\r\n  abort: TransitionAbort,\r\n  deletedTransitions: Set<Transition>,\r\n  deletedOffscreenInstance: OffscreenInstance | null,\r\n  isInDeletedTree: boolean,\r\n) {\r\n  if (enableTransitionTracing) {\r\n    // Find all pending markers that are waiting on child suspense boundaries in the\r\n    // aborted subtree and cancels them\r\n    let fiber = abortedFiber;\r\n    while (fiber !== null) {\r\n      switch (fiber.tag) {\r\n        case TracingMarkerComponent:\r\n          abortTracingMarkerTransitions(\r\n            fiber,\r\n            abort,\r\n            deletedTransitions,\r\n            deletedOffscreenInstance,\r\n            isInDeletedTree,\r\n          );\r\n          break;\r\n        case HostRoot:\r\n          const root = fiber.stateNode;\r\n          abortRootTransitions(\r\n            root,\r\n            abort,\r\n            deletedTransitions,\r\n            deletedOffscreenInstance,\r\n            isInDeletedTree,\r\n          );\r\n\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      fiber = fiber.return;\r\n    }\r\n  }\r\n}\r\n\r\nfunction commitTransitionProgress(offscreenFiber: Fiber) {\r\n  if (enableTransitionTracing) {\r\n    // This function adds suspense boundaries to the root\r\n    // or tracing marker's pendingBoundaries map.\r\n    // When a suspense boundary goes from a resolved to a fallback\r\n    // state we add the boundary to the map, and when it goes from\r\n    // a fallback to a resolved state, we remove the boundary from\r\n    // the map.\r\n\r\n    // We use stateNode on the Offscreen component as a stable object\r\n    // that doesnt change from render to render. This way we can\r\n    // distinguish between different Offscreen instances (vs. the same\r\n    // Offscreen instance with different fibers)\r\n    const offscreenInstance: OffscreenInstance = offscreenFiber.stateNode;\r\n\r\n    let prevState: SuspenseState | null = null;\r\n    const previousFiber = offscreenFiber.alternate;\r\n    if (previousFiber !== null && previousFiber.memoizedState !== null) {\r\n      prevState = previousFiber.memoizedState;\r\n    }\r\n    const nextState: SuspenseState | null = offscreenFiber.memoizedState;\r\n\r\n    const wasHidden = prevState !== null;\r\n    const isHidden = nextState !== null;\r\n\r\n    const pendingMarkers = offscreenInstance.pendingMarkers;\r\n    // If there is a name on the suspense boundary, store that in\r\n    // the pending boundaries.\r\n    let name = null;\r\n    const parent = offscreenFiber.return;\r\n    if (\r\n      parent !== null &&\r\n      parent.tag === SuspenseComponent &&\r\n      parent.memoizedProps.unstable_name\r\n    ) {\r\n      name = parent.memoizedProps.unstable_name;\r\n    }\r\n\r\n    if (!wasHidden && isHidden) {\r\n      // The suspense boundaries was just hidden. Add the boundary\r\n      // to the pending boundary set if it's there\r\n      if (pendingMarkers !== null) {\r\n        pendingMarkers.forEach(markerInstance => {\r\n          const pendingBoundaries = markerInstance.pendingBoundaries;\r\n          const transitions = markerInstance.transitions;\r\n          const markerName = markerInstance.name;\r\n          if (\r\n            pendingBoundaries !== null &&\r\n            !pendingBoundaries.has(offscreenInstance)\r\n          ) {\r\n            pendingBoundaries.set(offscreenInstance, {\r\n              name,\r\n            });\r\n            if (transitions !== null) {\r\n              if (\r\n                markerInstance.tag === TransitionTracingMarker &&\r\n                markerName !== null\r\n              ) {\r\n                addMarkerProgressCallbackToPendingTransition(\r\n                  markerName,\r\n                  transitions,\r\n                  pendingBoundaries,\r\n                );\r\n              } else if (markerInstance.tag === TransitionRoot) {\r\n                transitions.forEach(transition => {\r\n                  addTransitionProgressCallbackToPendingTransition(\r\n                    transition,\r\n                    pendingBoundaries,\r\n                  );\r\n                });\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n    } else if (wasHidden && !isHidden) {\r\n      // The suspense boundary went from hidden to visible. Remove\r\n      // the boundary from the pending suspense boundaries set\r\n      // if it's there\r\n      if (pendingMarkers !== null) {\r\n        pendingMarkers.forEach(markerInstance => {\r\n          const pendingBoundaries = markerInstance.pendingBoundaries;\r\n          const transitions = markerInstance.transitions;\r\n          const markerName = markerInstance.name;\r\n          if (\r\n            pendingBoundaries !== null &&\r\n            pendingBoundaries.has(offscreenInstance)\r\n          ) {\r\n            pendingBoundaries.delete(offscreenInstance);\r\n            if (transitions !== null) {\r\n              if (\r\n                markerInstance.tag === TransitionTracingMarker &&\r\n                markerName !== null\r\n              ) {\r\n                addMarkerProgressCallbackToPendingTransition(\r\n                  markerName,\r\n                  transitions,\r\n                  pendingBoundaries,\r\n                );\r\n\r\n                // If there are no more unresolved suspense boundaries, the interaction\r\n                // is considered finished\r\n                if (pendingBoundaries.size === 0) {\r\n                  if (markerInstance.aborts === null) {\r\n                    addMarkerCompleteCallbackToPendingTransition(\r\n                      markerName,\r\n                      transitions,\r\n                    );\r\n                  }\r\n                  markerInstance.transitions = null;\r\n                  markerInstance.pendingBoundaries = null;\r\n                  markerInstance.aborts = null;\r\n                }\r\n              } else if (markerInstance.tag === TransitionRoot) {\r\n                transitions.forEach(transition => {\r\n                  addTransitionProgressCallbackToPendingTransition(\r\n                    transition,\r\n                    pendingBoundaries,\r\n                  );\r\n                });\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction hideOrUnhideAllChildren(finishedWork, isHidden) {\r\n  // Only hide or unhide the top-most host nodes.\r\n  let hostSubtreeRoot = null;\r\n\r\n  if (supportsMutation) {\r\n    // We only have the top Fiber that was inserted but we need to recurse down its\r\n    // children to find all the terminal nodes.\r\n    let node: Fiber = finishedWork;\r\n    while (true) {\r\n      if (node.tag === HostComponent) {\r\n        if (hostSubtreeRoot === null) {\r\n          hostSubtreeRoot = node;\r\n          try {\r\n            const instance = node.stateNode;\r\n            if (isHidden) {\r\n              hideInstance(instance);\r\n            } else {\r\n              unhideInstance(node.stateNode, node.memoizedProps);\r\n            }\r\n          } catch (error) {\r\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\r\n          }\r\n        }\r\n      } else if (node.tag === HostText) {\r\n        if (hostSubtreeRoot === null) {\r\n          try {\r\n            const instance = node.stateNode;\r\n            if (isHidden) {\r\n              hideTextInstance(instance);\r\n            } else {\r\n              unhideTextInstance(instance, node.memoizedProps);\r\n            }\r\n          } catch (error) {\r\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\r\n          }\r\n        }\r\n      } else if (\r\n        (node.tag === OffscreenComponent ||\r\n          node.tag === LegacyHiddenComponent) &&\r\n        (node.memoizedState: OffscreenState) !== null &&\r\n        node !== finishedWork\r\n      ) {\r\n        // Found a nested Offscreen component that is hidden.\r\n        // Don't search any deeper. This tree should remain hidden.\r\n      } else if (node.child !== null) {\r\n        node.child.return = node;\r\n        node = node.child;\r\n        continue;\r\n      }\r\n\r\n      if (node === finishedWork) {\r\n        return;\r\n      }\r\n      while (node.sibling === null) {\r\n        if (node.return === null || node.return === finishedWork) {\r\n          return;\r\n        }\r\n\r\n        if (hostSubtreeRoot === node) {\r\n          hostSubtreeRoot = null;\r\n        }\r\n\r\n        node = node.return;\r\n      }\r\n\r\n      if (hostSubtreeRoot === node) {\r\n        hostSubtreeRoot = null;\r\n      }\r\n\r\n      node.sibling.return = node.return;\r\n      node = node.sibling;\r\n    }\r\n  }\r\n}\r\n\r\nfunction commitAttachRef(finishedWork: Fiber) {\r\n  const ref = finishedWork.ref;\r\n  if (ref !== null) {\r\n    const instance = finishedWork.stateNode;\r\n    let instanceToUse;\r\n    switch (finishedWork.tag) {\r\n      case HostComponent:\r\n        instanceToUse = getPublicInstance(instance);\r\n        break;\r\n      default:\r\n        instanceToUse = instance;\r\n    }\r\n    // Moved outside to ensure DCE works with this flag\r\n    if (enableScopeAPI && finishedWork.tag === ScopeComponent) {\r\n      instanceToUse = instance;\r\n    }\r\n    if (typeof ref === 'function') {\r\n      let retVal;\r\n      if (shouldProfile(finishedWork)) {\r\n        try {\r\n          startLayoutEffectTimer();\r\n          retVal = ref(instanceToUse);\r\n        } finally {\r\n          recordLayoutEffectDuration(finishedWork);\r\n        }\r\n      } else {\r\n        retVal = ref(instanceToUse);\r\n      }\r\n      if (__DEV__) {\r\n        if (typeof retVal === 'function') {\r\n          console.error(\r\n            'Unexpected return value from a callback ref in %s. ' +\r\n              'A callback ref should not return a function.',\r\n            getComponentNameFromFiber(finishedWork),\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      if (__DEV__) {\r\n        if (!ref.hasOwnProperty('current')) {\r\n          console.error(\r\n            'Unexpected ref object provided for %s. ' +\r\n              'Use either a ref-setter function or React.createRef().',\r\n            getComponentNameFromFiber(finishedWork),\r\n          );\r\n        }\r\n      }\r\n\r\n      // $FlowFixMe unable to narrow type to the non-function case\r\n      ref.current = instanceToUse;\r\n    }\r\n  }\r\n}\r\n\r\nfunction commitDetachRef(current: Fiber) {\r\n  const currentRef = current.ref;\r\n  if (currentRef !== null) {\r\n    if (typeof currentRef === 'function') {\r\n      if (shouldProfile(current)) {\r\n        try {\r\n          startLayoutEffectTimer();\r\n          currentRef(null);\r\n        } finally {\r\n          recordLayoutEffectDuration(current);\r\n        }\r\n      } else {\r\n        currentRef(null);\r\n      }\r\n    } else {\r\n      // $FlowFixMe unable to narrow type to the non-function case\r\n      currentRef.current = null;\r\n    }\r\n  }\r\n}\r\n\r\nfunction detachFiberMutation(fiber: Fiber) {\r\n  // Cut off the return pointer to disconnect it from the tree.\r\n  // This enables us to detect and warn against state updates on an unmounted component.\r\n  // It also prevents events from bubbling from within disconnected components.\r\n  //\r\n  // Ideally, we should also clear the child pointer of the parent alternate to let this\r\n  // get GC:ed but we don't know which for sure which parent is the current\r\n  // one so we'll settle for GC:ing the subtree of this child.\r\n  // This child itself will be GC:ed when the parent updates the next time.\r\n  //\r\n  // Note that we can't clear child or sibling pointers yet.\r\n  // They're needed for passive effects and for findDOMNode.\r\n  // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).\r\n  //\r\n  // Don't reset the alternate yet, either. We need that so we can detach the\r\n  // alternate's fields in the passive phase. Clearing the return pointer is\r\n  // sufficient for findDOMNode semantics.\r\n  const alternate = fiber.alternate;\r\n  if (alternate !== null) {\r\n    alternate.return = null;\r\n  }\r\n  fiber.return = null;\r\n}\r\n\r\nfunction detachFiberAfterEffects(fiber: Fiber) {\r\n  const alternate = fiber.alternate;\r\n  if (alternate !== null) {\r\n    fiber.alternate = null;\r\n    detachFiberAfterEffects(alternate);\r\n  }\r\n\r\n  // Note: Defensively using negation instead of < in case\r\n  // `deletedTreeCleanUpLevel` is undefined.\r\n  if (!(deletedTreeCleanUpLevel >= 2)) {\r\n    // This is the default branch (level 0).\r\n    fiber.child = null;\r\n    fiber.deletions = null;\r\n    fiber.dependencies = null;\r\n    fiber.memoizedProps = null;\r\n    fiber.memoizedState = null;\r\n    fiber.pendingProps = null;\r\n    fiber.sibling = null;\r\n    fiber.stateNode = null;\r\n    fiber.updateQueue = null;\r\n\r\n    if (__DEV__) {\r\n      fiber._debugOwner = null;\r\n    }\r\n  } else {\r\n    // Clear cyclical Fiber fields. This level alone is designed to roughly\r\n    // approximate the planned Fiber refactor. In that world, `setState` will be\r\n    // bound to a special \"instance\" object instead of a Fiber. The Instance\r\n    // object will not have any of these fields. It will only be connected to\r\n    // the fiber tree via a single link at the root. So if this level alone is\r\n    // sufficient to fix memory issues, that bodes well for our plans.\r\n    fiber.child = null;\r\n    fiber.deletions = null;\r\n    fiber.sibling = null;\r\n\r\n    // The `stateNode` is cyclical because on host nodes it points to the host\r\n    // tree, which has its own pointers to children, parents, and siblings.\r\n    // The other host nodes also point back to fibers, so we should detach that\r\n    // one, too.\r\n    if (fiber.tag === HostComponent) {\r\n      const hostInstance: Instance = fiber.stateNode;\r\n      if (hostInstance !== null) {\r\n        detachDeletedInstance(hostInstance);\r\n      }\r\n    }\r\n    fiber.stateNode = null;\r\n\r\n    // I'm intentionally not clearing the `return` field in this level. We\r\n    // already disconnect the `return` pointer at the root of the deleted\r\n    // subtree (in `detachFiberMutation`). Besides, `return` by itself is not\r\n    // cyclical — it's only cyclical when combined with `child`, `sibling`, and\r\n    // `alternate`. But we'll clear it in the next level anyway, just in case.\r\n\r\n    if (__DEV__) {\r\n      fiber._debugOwner = null;\r\n    }\r\n\r\n    if (deletedTreeCleanUpLevel >= 3) {\r\n      // Theoretically, nothing in here should be necessary, because we already\r\n      // disconnected the fiber from the tree. So even if something leaks this\r\n      // particular fiber, it won't leak anything else\r\n      //\r\n      // The purpose of this branch is to be super aggressive so we can measure\r\n      // if there's any difference in memory impact. If there is, that could\r\n      // indicate a React leak we don't know about.\r\n      fiber.return = null;\r\n      fiber.dependencies = null;\r\n      fiber.memoizedProps = null;\r\n      fiber.memoizedState = null;\r\n      fiber.pendingProps = null;\r\n      fiber.stateNode = null;\r\n      // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.\r\n      fiber.updateQueue = null;\r\n    }\r\n  }\r\n}\r\n\r\nfunction emptyPortalContainer(current: Fiber) {\r\n  if (!supportsPersistence) {\r\n    return;\r\n  }\r\n\r\n  const portal: {\r\n    containerInfo: Container,\r\n    pendingChildren: ChildSet,\r\n    ...\r\n  } = current.stateNode;\r\n  const {containerInfo} = portal;\r\n  const emptyChildSet = createContainerChildSet(containerInfo);\r\n  replaceContainerChildren(containerInfo, emptyChildSet);\r\n}\r\n\r\nfunction getHostParentFiber(fiber: Fiber): Fiber {\r\n  let parent = fiber.return;\r\n  while (parent !== null) {\r\n    if (isHostParent(parent)) {\r\n      return parent;\r\n    }\r\n    parent = parent.return;\r\n  }\r\n\r\n  throw new Error(\r\n    'Expected to find a host parent. This error is likely caused by a bug ' +\r\n      'in React. Please file an issue.',\r\n  );\r\n}\r\n\r\nfunction isHostParent(fiber: Fiber): boolean {\r\n  return (\r\n    fiber.tag === HostComponent ||\r\n    fiber.tag === HostRoot ||\r\n    fiber.tag === HostPortal\r\n  );\r\n}\r\n\r\nfunction getHostSibling(fiber: Fiber): ?Instance {\r\n  // We're going to search forward into the tree until we find a sibling host\r\n  // node. Unfortunately, if multiple insertions are done in a row we have to\r\n  // search past them. This leads to exponential search for the next sibling.\r\n  // TODO: Find a more efficient way to do this.\r\n  let node: Fiber = fiber;\r\n  siblings: while (true) {\r\n    // If we didn't find anything, let's try the next sibling.\r\n    while (node.sibling === null) {\r\n      if (node.return === null || isHostParent(node.return)) {\r\n        // If we pop out of the root or hit the parent the fiber we are the\r\n        // last sibling.\r\n        return null;\r\n      }\r\n      node = node.return;\r\n    }\r\n    node.sibling.return = node.return;\r\n    node = node.sibling;\r\n    while (\r\n      node.tag !== HostComponent &&\r\n      node.tag !== HostText &&\r\n      node.tag !== DehydratedFragment\r\n    ) {\r\n      // If it is not host node and, we might have a host node inside it.\r\n      // Try to search down until we find one.\r\n      if (node.flags & Placement) {\r\n        // If we don't have a child, try the siblings instead.\r\n        continue siblings;\r\n      }\r\n      // If we don't have a child, try the siblings instead.\r\n      // We also skip portals because they are not part of this host tree.\r\n      if (node.child === null || node.tag === HostPortal) {\r\n        continue siblings;\r\n      } else {\r\n        node.child.return = node;\r\n        node = node.child;\r\n      }\r\n    }\r\n    // Check if this host node is stable or about to be placed.\r\n    if (!(node.flags & Placement)) {\r\n      // Found it!\r\n      return node.stateNode;\r\n    }\r\n  }\r\n}\r\n\r\nfunction commitPlacement(finishedWork: Fiber): void {\r\n  if (!supportsMutation) {\r\n    return;\r\n  }\r\n\r\n  // Recursively insert all host nodes into the parent.\r\n  const parentFiber = getHostParentFiber(finishedWork);\r\n\r\n  // Note: these two variables *must* always be updated together.\r\n  switch (parentFiber.tag) {\r\n    case HostComponent: {\r\n      const parent: Instance = parentFiber.stateNode;\r\n      if (parentFiber.flags & ContentReset) {\r\n        // Reset the text content of the parent before doing any insertions\r\n        resetTextContent(parent);\r\n        // Clear ContentReset from the effect tag\r\n        parentFiber.flags &= ~ContentReset;\r\n      }\r\n\r\n      const before = getHostSibling(finishedWork);\r\n      // We only have the top Fiber that was inserted but we need to recurse down its\r\n      // children to find all the terminal nodes.\r\n      insertOrAppendPlacementNode(finishedWork, before, parent);\r\n      break;\r\n    }\r\n    case HostRoot:\r\n    case HostPortal: {\r\n      const parent: Container = parentFiber.stateNode.containerInfo;\r\n      const before = getHostSibling(finishedWork);\r\n      insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);\r\n      break;\r\n    }\r\n    // eslint-disable-next-line-no-fallthrough\r\n    default:\r\n      throw new Error(\r\n        'Invalid host parent fiber. This error is likely caused by a bug ' +\r\n          'in React. Please file an issue.',\r\n      );\r\n  }\r\n}\r\n\r\nfunction insertOrAppendPlacementNodeIntoContainer(\r\n  node: Fiber,\r\n  before: ?Instance,\r\n  parent: Container,\r\n): void {\r\n  const {tag} = node;\r\n  const isHost = tag === HostComponent || tag === HostText;\r\n  if (isHost) {\r\n    const stateNode = node.stateNode;\r\n    if (before) {\r\n      insertInContainerBefore(parent, stateNode, before);\r\n    } else {\r\n      appendChildToContainer(parent, stateNode);\r\n    }\r\n  } else if (tag === HostPortal) {\r\n    // If the insertion itself is a portal, then we don't want to traverse\r\n    // down its children. Instead, we'll get insertions from each child in\r\n    // the portal directly.\r\n  } else {\r\n    const child = node.child;\r\n    if (child !== null) {\r\n      insertOrAppendPlacementNodeIntoContainer(child, before, parent);\r\n      let sibling = child.sibling;\r\n      while (sibling !== null) {\r\n        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);\r\n        sibling = sibling.sibling;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction insertOrAppendPlacementNode(\r\n  node: Fiber,\r\n  before: ?Instance,\r\n  parent: Instance,\r\n): void {\r\n  const {tag} = node;\r\n  const isHost = tag === HostComponent || tag === HostText;\r\n  if (isHost) {\r\n    const stateNode = node.stateNode;\r\n    if (before) {\r\n      insertBefore(parent, stateNode, before);\r\n    } else {\r\n      appendChild(parent, stateNode);\r\n    }\r\n  } else if (tag === HostPortal) {\r\n    // If the insertion itself is a portal, then we don't want to traverse\r\n    // down its children. Instead, we'll get insertions from each child in\r\n    // the portal directly.\r\n  } else {\r\n    const child = node.child;\r\n    if (child !== null) {\r\n      insertOrAppendPlacementNode(child, before, parent);\r\n      let sibling = child.sibling;\r\n      while (sibling !== null) {\r\n        insertOrAppendPlacementNode(sibling, before, parent);\r\n        sibling = sibling.sibling;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// These are tracked on the stack as we recursively traverse a\r\n// deleted subtree.\r\n// TODO: Update these during the whole mutation phase, not just during\r\n// a deletion.\r\nlet hostParent: Instance | Container | null = null;\r\nlet hostParentIsContainer: boolean = false;\r\n\r\nfunction commitDeletionEffects(\r\n  root: FiberRoot,\r\n  returnFiber: Fiber,\r\n  deletedFiber: Fiber,\r\n) {\r\n  if (supportsMutation) {\r\n    // We only have the top Fiber that was deleted but we need to recurse down its\r\n    // children to find all the terminal nodes.\r\n\r\n    // Recursively delete all host nodes from the parent, detach refs, clean\r\n    // up mounted layout effects, and call componentWillUnmount.\r\n\r\n    // We only need to remove the topmost host child in each branch. But then we\r\n    // still need to keep traversing to unmount effects, refs, and cWU. TODO: We\r\n    // could split this into two separate traversals functions, where the second\r\n    // one doesn't include any removeChild logic. This is maybe the same\r\n    // function as \"disappearLayoutEffects\" (or whatever that turns into after\r\n    // the layout phase is refactored to use recursion).\r\n\r\n    // Before starting, find the nearest host parent on the stack so we know\r\n    // which instance/container to remove the children from.\r\n    // TODO: Instead of searching up the fiber return path on every deletion, we\r\n    // can track the nearest host component on the JS stack as we traverse the\r\n    // tree during the commit phase. This would make insertions faster, too.\r\n    let parent = returnFiber;\r\n    findParent: while (parent !== null) {\r\n      switch (parent.tag) {\r\n        case HostComponent: {\r\n          hostParent = parent.stateNode;\r\n          hostParentIsContainer = false;\r\n          break findParent;\r\n        }\r\n        case HostRoot: {\r\n          hostParent = parent.stateNode.containerInfo;\r\n          hostParentIsContainer = true;\r\n          break findParent;\r\n        }\r\n        case HostPortal: {\r\n          hostParent = parent.stateNode.containerInfo;\r\n          hostParentIsContainer = true;\r\n          break findParent;\r\n        }\r\n      }\r\n      parent = parent.return;\r\n    }\r\n    if (hostParent === null) {\r\n      throw new Error(\r\n        'Expected to find a host parent. This error is likely caused by ' +\r\n          'a bug in React. Please file an issue.',\r\n      );\r\n    }\r\n\r\n    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\r\n    hostParent = null;\r\n    hostParentIsContainer = false;\r\n  } else {\r\n    // Detach refs and call componentWillUnmount() on the whole subtree.\r\n    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\r\n  }\r\n\r\n  detachFiberMutation(deletedFiber);\r\n}\r\n\r\nfunction recursivelyTraverseDeletionEffects(\r\n  finishedRoot,\r\n  nearestMountedAncestor,\r\n  parent,\r\n) {\r\n  // TODO: Use a static flag to skip trees that don't have unmount effects\r\n  let child = parent.child;\r\n  while (child !== null) {\r\n    commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);\r\n    child = child.sibling;\r\n  }\r\n}\r\n\r\nfunction commitDeletionEffectsOnFiber(\r\n  finishedRoot: FiberRoot,\r\n  nearestMountedAncestor: Fiber,\r\n  deletedFiber: Fiber,\r\n) {\r\n  onCommitUnmount(deletedFiber);\r\n\r\n  // The cases in this outer switch modify the stack before they traverse\r\n  // into their subtree. There are simpler cases in the inner switch\r\n  // that don't modify the stack.\r\n  switch (deletedFiber.tag) {\r\n    case HostComponent: {\r\n      if (!offscreenSubtreeWasHidden) {\r\n        safelyDetachRef(deletedFiber, nearestMountedAncestor);\r\n      }\r\n      // Intentional fallthrough to next branch\r\n    }\r\n    // eslint-disable-next-line-no-fallthrough\r\n    case HostText: {\r\n      // We only need to remove the nearest host child. Set the host parent\r\n      // to `null` on the stack to indicate that nested children don't\r\n      // need to be removed.\r\n      if (supportsMutation) {\r\n        const prevHostParent = hostParent;\r\n        const prevHostParentIsContainer = hostParentIsContainer;\r\n        hostParent = null;\r\n        recursivelyTraverseDeletionEffects(\r\n          finishedRoot,\r\n          nearestMountedAncestor,\r\n          deletedFiber,\r\n        );\r\n        hostParent = prevHostParent;\r\n        hostParentIsContainer = prevHostParentIsContainer;\r\n\r\n        if (hostParent !== null) {\r\n          // Now that all the child effects have unmounted, we can remove the\r\n          // node from the tree.\r\n          if (hostParentIsContainer) {\r\n            removeChildFromContainer(\r\n              ((hostParent: any): Container),\r\n              (deletedFiber.stateNode: Instance | TextInstance),\r\n            );\r\n          } else {\r\n            removeChild(\r\n              ((hostParent: any): Instance),\r\n              (deletedFiber.stateNode: Instance | TextInstance),\r\n            );\r\n          }\r\n        }\r\n      } else {\r\n        recursivelyTraverseDeletionEffects(\r\n          finishedRoot,\r\n          nearestMountedAncestor,\r\n          deletedFiber,\r\n        );\r\n      }\r\n      return;\r\n    }\r\n    case DehydratedFragment: {\r\n      if (enableSuspenseCallback) {\r\n        const hydrationCallbacks = finishedRoot.hydrationCallbacks;\r\n        if (hydrationCallbacks !== null) {\r\n          const onDeleted = hydrationCallbacks.onDeleted;\r\n          if (onDeleted) {\r\n            onDeleted((deletedFiber.stateNode: SuspenseInstance));\r\n          }\r\n        }\r\n      }\r\n\r\n      // Dehydrated fragments don't have any children\r\n\r\n      // Delete the dehydrated suspense boundary and all of its content.\r\n      if (supportsMutation) {\r\n        if (hostParent !== null) {\r\n          if (hostParentIsContainer) {\r\n            clearSuspenseBoundaryFromContainer(\r\n              ((hostParent: any): Container),\r\n              (deletedFiber.stateNode: SuspenseInstance),\r\n            );\r\n          } else {\r\n            clearSuspenseBoundary(\r\n              ((hostParent: any): Instance),\r\n              (deletedFiber.stateNode: SuspenseInstance),\r\n            );\r\n          }\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case HostPortal: {\r\n      if (supportsMutation) {\r\n        // When we go into a portal, it becomes the parent to remove from.\r\n        const prevHostParent = hostParent;\r\n        const prevHostParentIsContainer = hostParentIsContainer;\r\n        hostParent = deletedFiber.stateNode.containerInfo;\r\n        hostParentIsContainer = true;\r\n        recursivelyTraverseDeletionEffects(\r\n          finishedRoot,\r\n          nearestMountedAncestor,\r\n          deletedFiber,\r\n        );\r\n        hostParent = prevHostParent;\r\n        hostParentIsContainer = prevHostParentIsContainer;\r\n      } else {\r\n        emptyPortalContainer(deletedFiber);\r\n\r\n        recursivelyTraverseDeletionEffects(\r\n          finishedRoot,\r\n          nearestMountedAncestor,\r\n          deletedFiber,\r\n        );\r\n      }\r\n      return;\r\n    }\r\n    case FunctionComponent:\r\n    case ForwardRef:\r\n    case MemoComponent:\r\n    case SimpleMemoComponent: {\r\n      if (!offscreenSubtreeWasHidden) {\r\n        const updateQueue: FunctionComponentUpdateQueue | null = (deletedFiber.updateQueue: any);\r\n        if (updateQueue !== null) {\r\n          const lastEffect = updateQueue.lastEffect;\r\n          if (lastEffect !== null) {\r\n            const firstEffect = lastEffect.next;\r\n\r\n            let effect = firstEffect;\r\n            do {\r\n              const {destroy, tag} = effect;\r\n              if (destroy !== undefined) {\r\n                if ((tag & HookInsertion) !== NoHookEffect) {\r\n                  safelyCallDestroy(\r\n                    deletedFiber,\r\n                    nearestMountedAncestor,\r\n                    destroy,\r\n                  );\r\n                } else if ((tag & HookLayout) !== NoHookEffect) {\r\n                  if (enableSchedulingProfiler) {\r\n                    markComponentLayoutEffectUnmountStarted(deletedFiber);\r\n                  }\r\n\r\n                  if (shouldProfile(deletedFiber)) {\r\n                    startLayoutEffectTimer();\r\n                    safelyCallDestroy(\r\n                      deletedFiber,\r\n                      nearestMountedAncestor,\r\n                      destroy,\r\n                    );\r\n                    recordLayoutEffectDuration(deletedFiber);\r\n                  } else {\r\n                    safelyCallDestroy(\r\n                      deletedFiber,\r\n                      nearestMountedAncestor,\r\n                      destroy,\r\n                    );\r\n                  }\r\n\r\n                  if (enableSchedulingProfiler) {\r\n                    markComponentLayoutEffectUnmountStopped();\r\n                  }\r\n                }\r\n              }\r\n              effect = effect.next;\r\n            } while (effect !== firstEffect);\r\n          }\r\n        }\r\n      }\r\n\r\n      recursivelyTraverseDeletionEffects(\r\n        finishedRoot,\r\n        nearestMountedAncestor,\r\n        deletedFiber,\r\n      );\r\n      return;\r\n    }\r\n    case ClassComponent: {\r\n      if (!offscreenSubtreeWasHidden) {\r\n        safelyDetachRef(deletedFiber, nearestMountedAncestor);\r\n        const instance = deletedFiber.stateNode;\r\n        if (typeof instance.componentWillUnmount === 'function') {\r\n          safelyCallComponentWillUnmount(\r\n            deletedFiber,\r\n            nearestMountedAncestor,\r\n            instance,\r\n          );\r\n        }\r\n      }\r\n      recursivelyTraverseDeletionEffects(\r\n        finishedRoot,\r\n        nearestMountedAncestor,\r\n        deletedFiber,\r\n      );\r\n      return;\r\n    }\r\n    case ScopeComponent: {\r\n      if (enableScopeAPI) {\r\n        safelyDetachRef(deletedFiber, nearestMountedAncestor);\r\n      }\r\n      recursivelyTraverseDeletionEffects(\r\n        finishedRoot,\r\n        nearestMountedAncestor,\r\n        deletedFiber,\r\n      );\r\n      return;\r\n    }\r\n    case OffscreenComponent: {\r\n      if (deletedFiber.mode & ConcurrentMode) {\r\n        // If this offscreen component is hidden, we already unmounted it. Before\r\n        // deleting the children, track that it's already unmounted so that we\r\n        // don't attempt to unmount the effects again.\r\n        // TODO: If the tree is hidden, in most cases we should be able to skip\r\n        // over the nested children entirely. An exception is we haven't yet found\r\n        // the topmost host node to delete, which we already track on the stack.\r\n        // But the other case is portals, which need to be detached no matter how\r\n        // deeply they are nested. We should use a subtree flag to track whether a\r\n        // subtree includes a nested portal.\r\n        const prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\r\n        offscreenSubtreeWasHidden =\r\n          prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;\r\n\r\n        recursivelyTraverseDeletionEffects(\r\n          finishedRoot,\r\n          nearestMountedAncestor,\r\n          deletedFiber,\r\n        );\r\n        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\r\n      } else {\r\n        recursivelyTraverseDeletionEffects(\r\n          finishedRoot,\r\n          nearestMountedAncestor,\r\n          deletedFiber,\r\n        );\r\n      }\r\n      break;\r\n    }\r\n    default: {\r\n      recursivelyTraverseDeletionEffects(\r\n        finishedRoot,\r\n        nearestMountedAncestor,\r\n        deletedFiber,\r\n      );\r\n      return;\r\n    }\r\n  }\r\n}\r\nfunction commitSuspenseCallback(finishedWork: Fiber) {\r\n  // TODO: Move this to passive phase\r\n  const newState: SuspenseState | null = finishedWork.memoizedState;\r\n  if (enableSuspenseCallback && newState !== null) {\r\n    const suspenseCallback = finishedWork.memoizedProps.suspenseCallback;\r\n    if (typeof suspenseCallback === 'function') {\r\n      const wakeables: Set<Wakeable> | null = (finishedWork.updateQueue: any);\r\n      if (wakeables !== null) {\r\n        suspenseCallback(new Set(wakeables));\r\n      }\r\n    } else if (__DEV__) {\r\n      if (suspenseCallback !== undefined) {\r\n        console.error('Unexpected type for suspenseCallback.');\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction commitSuspenseHydrationCallbacks(\r\n  finishedRoot: FiberRoot,\r\n  finishedWork: Fiber,\r\n) {\r\n  if (!supportsHydration) {\r\n    return;\r\n  }\r\n  const newState: SuspenseState | null = finishedWork.memoizedState;\r\n  if (newState === null) {\r\n    const current = finishedWork.alternate;\r\n    if (current !== null) {\r\n      const prevState: SuspenseState | null = current.memoizedState;\r\n      if (prevState !== null) {\r\n        const suspenseInstance = prevState.dehydrated;\r\n        if (suspenseInstance !== null) {\r\n          try {\r\n            commitHydratedSuspenseInstance(suspenseInstance);\r\n            if (enableSuspenseCallback) {\r\n              const hydrationCallbacks = finishedRoot.hydrationCallbacks;\r\n              if (hydrationCallbacks !== null) {\r\n                const onHydrated = hydrationCallbacks.onHydrated;\r\n                if (onHydrated) {\r\n                  onHydrated(suspenseInstance);\r\n                }\r\n              }\r\n            }\r\n          } catch (error) {\r\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction getRetryCache(finishedWork) {\r\n  // TODO: Unify the interface for the retry cache so we don't have to switch\r\n  // on the tag like this.\r\n  switch (finishedWork.tag) {\r\n    case SuspenseComponent:\r\n    case SuspenseListComponent: {\r\n      let retryCache = finishedWork.stateNode;\r\n      if (retryCache === null) {\r\n        retryCache = finishedWork.stateNode = new PossiblyWeakSet();\r\n      }\r\n      return retryCache;\r\n    }\r\n    case OffscreenComponent: {\r\n      const instance: OffscreenInstance = finishedWork.stateNode;\r\n      let retryCache = instance.retryCache;\r\n      if (retryCache === null) {\r\n        retryCache = instance.retryCache = new PossiblyWeakSet();\r\n      }\r\n      return retryCache;\r\n    }\r\n    default: {\r\n      throw new Error(\r\n        `Unexpected Suspense handler tag (${finishedWork.tag}). This is a ` +\r\n          'bug in React.',\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction attachSuspenseRetryListeners(\r\n  finishedWork: Fiber,\r\n  wakeables: Set<Wakeable>,\r\n) {\r\n  // If this boundary just timed out, then it will have a set of wakeables.\r\n  // For each wakeable, attach a listener so that when it resolves, React\r\n  // attempts to re-render the boundary in the primary (pre-timeout) state.\r\n  const retryCache = getRetryCache(finishedWork);\r\n  wakeables.forEach(wakeable => {\r\n    // Memoize using the boundary fiber to prevent redundant listeners.\r\n    const retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\r\n    if (!retryCache.has(wakeable)) {\r\n      retryCache.add(wakeable);\r\n\r\n      if (enableUpdaterTracking) {\r\n        if (isDevToolsPresent) {\r\n          if (inProgressLanes !== null && inProgressRoot !== null) {\r\n            // If we have pending work still, associate the original updaters with it.\r\n            restorePendingUpdaters(inProgressRoot, inProgressLanes);\r\n          } else {\r\n            throw Error(\r\n              'Expected finished root and lanes to be set. This is a bug in React.',\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      wakeable.then(retry, retry);\r\n    }\r\n  });\r\n}\r\n\r\n// This function detects when a Suspense boundary goes from visible to hidden.\r\n// It returns false if the boundary is already hidden.\r\n// TODO: Use an effect tag.\r\nexport function isSuspenseBoundaryBeingHidden(\r\n  current: Fiber | null,\r\n  finishedWork: Fiber,\r\n): boolean {\r\n  if (current !== null) {\r\n    const oldState: SuspenseState | null = current.memoizedState;\r\n    if (oldState === null || oldState.dehydrated !== null) {\r\n      const newState: SuspenseState | null = finishedWork.memoizedState;\r\n      return newState !== null && newState.dehydrated === null;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function commitMutationEffects(\r\n  root: FiberRoot,\r\n  finishedWork: Fiber,\r\n  committedLanes: Lanes,\r\n) {\r\n  inProgressLanes = committedLanes;\r\n  inProgressRoot = root;\r\n\r\n  setCurrentDebugFiberInDEV(finishedWork);\r\n  commitMutationEffectsOnFiber(finishedWork, root, committedLanes);\r\n  setCurrentDebugFiberInDEV(finishedWork);\r\n\r\n  inProgressLanes = null;\r\n  inProgressRoot = null;\r\n}\r\n\r\nfunction recursivelyTraverseMutationEffects(\r\n  root: FiberRoot,\r\n  parentFiber: Fiber,\r\n  lanes: Lanes,\r\n) {\r\n  // Deletions effects can be scheduled on any fiber type. They need to happen\r\n  // before the children effects hae fired.\r\n  const deletions = parentFiber.deletions;\r\n  if (deletions !== null) {\r\n    for (let i = 0; i < deletions.length; i++) {\r\n      const childToDelete = deletions[i];\r\n      try {\r\n        commitDeletionEffects(root, parentFiber, childToDelete);\r\n      } catch (error) {\r\n        captureCommitPhaseError(childToDelete, parentFiber, error);\r\n      }\r\n    }\r\n  }\r\n\r\n  const prevDebugFiber = getCurrentDebugFiberInDEV();\r\n  if (parentFiber.subtreeFlags & MutationMask) {\r\n    let child = parentFiber.child;\r\n    while (child !== null) {\r\n      setCurrentDebugFiberInDEV(child);\r\n      commitMutationEffectsOnFiber(child, root, lanes);\r\n      child = child.sibling;\r\n    }\r\n  }\r\n  setCurrentDebugFiberInDEV(prevDebugFiber);\r\n}\r\n\r\nfunction commitMutationEffectsOnFiber(\r\n  finishedWork: Fiber,\r\n  root: FiberRoot,\r\n  lanes: Lanes,\r\n) {\r\n  const current = finishedWork.alternate;\r\n  const flags = finishedWork.flags;\r\n\r\n  // The effect flag should be checked *after* we refine the type of fiber,\r\n  // because the fiber tag is more specific. An exception is any flag related\r\n  // to reconcilation, because those can be set on all fiber types.\r\n  switch (finishedWork.tag) {\r\n    case FunctionComponent:\r\n    case ForwardRef:\r\n    case MemoComponent:\r\n    case SimpleMemoComponent: {\r\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\r\n      commitReconciliationEffects(finishedWork);\r\n\r\n      if (flags & Update) {\r\n        try {\r\n          commitHookEffectListUnmount(\r\n            HookInsertion | HookHasEffect,\r\n            finishedWork,\r\n            finishedWork.return,\r\n          );\r\n          commitHookEffectListMount(\r\n            HookInsertion | HookHasEffect,\r\n            finishedWork,\r\n          );\r\n        } catch (error) {\r\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\r\n        }\r\n        // Layout effects are destroyed during the mutation phase so that all\r\n        // destroy functions for all fibers are called before any create functions.\r\n        // This prevents sibling component effects from interfering with each other,\r\n        // e.g. a destroy function in one component should never override a ref set\r\n        // by a create function in another component during the same commit.\r\n        if (shouldProfile(finishedWork)) {\r\n          try {\r\n            startLayoutEffectTimer();\r\n            commitHookEffectListUnmount(\r\n              HookLayout | HookHasEffect,\r\n              finishedWork,\r\n              finishedWork.return,\r\n            );\r\n          } catch (error) {\r\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\r\n          }\r\n          recordLayoutEffectDuration(finishedWork);\r\n        } else {\r\n          try {\r\n            commitHookEffectListUnmount(\r\n              HookLayout | HookHasEffect,\r\n              finishedWork,\r\n              finishedWork.return,\r\n            );\r\n          } catch (error) {\r\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\r\n          }\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case ClassComponent: {\r\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\r\n      commitReconciliationEffects(finishedWork);\r\n\r\n      if (flags & Ref) {\r\n        if (current !== null) {\r\n          safelyDetachRef(current, current.return);\r\n        }\r\n      }\r\n\r\n      if (flags & Callback && offscreenSubtreeIsHidden) {\r\n        const updateQueue: UpdateQueue<\r\n          *,\r\n        > | null = (finishedWork.updateQueue: any);\r\n        if (updateQueue !== null) {\r\n          deferHiddenCallbacks(updateQueue);\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case HostComponent: {\r\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\r\n      commitReconciliationEffects(finishedWork);\r\n\r\n      if (flags & Ref) {\r\n        if (current !== null) {\r\n          safelyDetachRef(current, current.return);\r\n        }\r\n      }\r\n      if (supportsMutation) {\r\n        // TODO: ContentReset gets cleared by the children during the commit\r\n        // phase. This is a refactor hazard because it means we must read\r\n        // flags the flags after `commitReconciliationEffects` has already run;\r\n        // the order matters. We should refactor so that ContentReset does not\r\n        // rely on mutating the flag during commit. Like by setting a flag\r\n        // during the render phase instead.\r\n        if (finishedWork.flags & ContentReset) {\r\n          const instance: Instance = finishedWork.stateNode;\r\n          try {\r\n            resetTextContent(instance);\r\n          } catch (error) {\r\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\r\n          }\r\n        }\r\n\r\n        if (flags & Update) {\r\n          const instance: Instance = finishedWork.stateNode;\r\n          if (instance != null) {\r\n            // Commit the work prepared earlier.\r\n            const newProps = finishedWork.memoizedProps;\r\n            // For hydration we reuse the update path but we treat the oldProps\r\n            // as the newProps. The updatePayload will contain the real change in\r\n            // this case.\r\n            const oldProps =\r\n              current !== null ? current.memoizedProps : newProps;\r\n            const type = finishedWork.type;\r\n            // TODO: Type the updateQueue to be specific to host components.\r\n            const updatePayload: null | UpdatePayload = (finishedWork.updateQueue: any);\r\n            finishedWork.updateQueue = null;\r\n            if (updatePayload !== null) {\r\n              try {\r\n                commitUpdate(\r\n                  instance,\r\n                  updatePayload,\r\n                  type,\r\n                  oldProps,\r\n                  newProps,\r\n                  finishedWork,\r\n                );\r\n              } catch (error) {\r\n                captureCommitPhaseError(\r\n                  finishedWork,\r\n                  finishedWork.return,\r\n                  error,\r\n                );\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case HostText: {\r\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\r\n      commitReconciliationEffects(finishedWork);\r\n\r\n      if (flags & Update) {\r\n        if (supportsMutation) {\r\n          if (finishedWork.stateNode === null) {\r\n            throw new Error(\r\n              'This should have a text node initialized. This error is likely ' +\r\n                'caused by a bug in React. Please file an issue.',\r\n            );\r\n          }\r\n\r\n          const textInstance: TextInstance = finishedWork.stateNode;\r\n          const newText: string = finishedWork.memoizedProps;\r\n          // For hydration we reuse the update path but we treat the oldProps\r\n          // as the newProps. The updatePayload will contain the real change in\r\n          // this case.\r\n          const oldText: string =\r\n            current !== null ? current.memoizedProps : newText;\r\n\r\n          try {\r\n            commitTextUpdate(textInstance, oldText, newText);\r\n          } catch (error) {\r\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\r\n          }\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case HostRoot: {\r\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\r\n      commitReconciliationEffects(finishedWork);\r\n\r\n      if (flags & Update) {\r\n        if (supportsMutation && supportsHydration) {\r\n          if (current !== null) {\r\n            const prevRootState: RootState = current.memoizedState;\r\n            if (prevRootState.isDehydrated) {\r\n              try {\r\n                commitHydratedContainer(root.containerInfo);\r\n              } catch (error) {\r\n                captureCommitPhaseError(\r\n                  finishedWork,\r\n                  finishedWork.return,\r\n                  error,\r\n                );\r\n              }\r\n            }\r\n          }\r\n        }\r\n        if (supportsPersistence) {\r\n          const containerInfo = root.containerInfo;\r\n          const pendingChildren = root.pendingChildren;\r\n          try {\r\n            replaceContainerChildren(containerInfo, pendingChildren);\r\n          } catch (error) {\r\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\r\n          }\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case HostPortal: {\r\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\r\n      commitReconciliationEffects(finishedWork);\r\n\r\n      if (flags & Update) {\r\n        if (supportsPersistence) {\r\n          const portal = finishedWork.stateNode;\r\n          const containerInfo = portal.containerInfo;\r\n          const pendingChildren = portal.pendingChildren;\r\n          try {\r\n            replaceContainerChildren(containerInfo, pendingChildren);\r\n          } catch (error) {\r\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\r\n          }\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case SuspenseComponent: {\r\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\r\n      commitReconciliationEffects(finishedWork);\r\n\r\n      const offscreenFiber: Fiber = (finishedWork.child: any);\r\n\r\n      if (offscreenFiber.flags & Visibility) {\r\n        const newState: OffscreenState | null = offscreenFiber.memoizedState;\r\n        const isHidden = newState !== null;\r\n        if (isHidden) {\r\n          const wasHidden =\r\n            offscreenFiber.alternate !== null &&\r\n            offscreenFiber.alternate.memoizedState !== null;\r\n          if (!wasHidden) {\r\n            // TODO: Move to passive phase\r\n            markCommitTimeOfFallback();\r\n          }\r\n        }\r\n      }\r\n\r\n      if (flags & Update) {\r\n        try {\r\n          commitSuspenseCallback(finishedWork);\r\n        } catch (error) {\r\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\r\n        }\r\n        const wakeables: Set<Wakeable> | null = (finishedWork.updateQueue: any);\r\n        if (wakeables !== null) {\r\n          finishedWork.updateQueue = null;\r\n          attachSuspenseRetryListeners(finishedWork, wakeables);\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case OffscreenComponent: {\r\n      const newState: OffscreenState | null = finishedWork.memoizedState;\r\n      const isHidden = newState !== null;\r\n      const wasHidden = current !== null && current.memoizedState !== null;\r\n\r\n      if (finishedWork.mode & ConcurrentMode) {\r\n        // Before committing the children, track on the stack whether this\r\n        // offscreen subtree was already hidden, so that we don't unmount the\r\n        // effects again.\r\n        const prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\r\n        const prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\r\n        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden || isHidden;\r\n        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || wasHidden;\r\n        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\r\n        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\r\n        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\r\n      } else {\r\n        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\r\n      }\r\n\r\n      commitReconciliationEffects(finishedWork);\r\n\r\n      if (flags & Visibility) {\r\n        const offscreenInstance: OffscreenInstance = finishedWork.stateNode;\r\n        const offscreenBoundary: Fiber = finishedWork;\r\n\r\n        // Track the current state on the Offscreen instance so we can\r\n        // read it during an event\r\n        if (isHidden) {\r\n          offscreenInstance.visibility &= ~OffscreenVisible;\r\n        } else {\r\n          offscreenInstance.visibility |= OffscreenVisible;\r\n        }\r\n\r\n        if (isHidden) {\r\n          if (!wasHidden) {\r\n            if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {\r\n              // Disappear the layout effects of all the children\r\n              recursivelyTraverseDisappearLayoutEffects(offscreenBoundary);\r\n            }\r\n          }\r\n        } else {\r\n          if (wasHidden) {\r\n            // TODO: Move re-appear call here for symmetry?\r\n          }\r\n        }\r\n\r\n        if (supportsMutation) {\r\n          // TODO: This needs to run whenever there's an insertion or update\r\n          // inside a hidden Offscreen tree.\r\n          hideOrUnhideAllChildren(offscreenBoundary, isHidden);\r\n        }\r\n      }\r\n\r\n      // TODO: Move to passive phase\r\n      if (flags & Update) {\r\n        const offscreenQueue: OffscreenQueue | null = (finishedWork.updateQueue: any);\r\n        if (offscreenQueue !== null) {\r\n          const wakeables = offscreenQueue.wakeables;\r\n          if (wakeables !== null) {\r\n            offscreenQueue.wakeables = null;\r\n            attachSuspenseRetryListeners(finishedWork, wakeables);\r\n          }\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case SuspenseListComponent: {\r\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\r\n      commitReconciliationEffects(finishedWork);\r\n\r\n      if (flags & Update) {\r\n        const wakeables: Set<Wakeable> | null = (finishedWork.updateQueue: any);\r\n        if (wakeables !== null) {\r\n          finishedWork.updateQueue = null;\r\n          attachSuspenseRetryListeners(finishedWork, wakeables);\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    case ScopeComponent: {\r\n      if (enableScopeAPI) {\r\n        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\r\n        commitReconciliationEffects(finishedWork);\r\n\r\n        // TODO: This is a temporary solution that allowed us to transition away\r\n        // from React Flare on www.\r\n        if (flags & Ref) {\r\n          if (current !== null) {\r\n            safelyDetachRef(finishedWork, finishedWork.return);\r\n          }\r\n          safelyAttachRef(finishedWork, finishedWork.return);\r\n        }\r\n        if (flags & Update) {\r\n          const scopeInstance = finishedWork.stateNode;\r\n          prepareScopeUpdate(scopeInstance, finishedWork);\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    default: {\r\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\r\n      commitReconciliationEffects(finishedWork);\r\n\r\n      return;\r\n    }\r\n  }\r\n}\r\nfunction commitReconciliationEffects(finishedWork: Fiber) {\r\n  // Placement effects (insertions, reorders) can be scheduled on any fiber\r\n  // type. They needs to happen after the children effects have fired, but\r\n  // before the effects on this fiber have fired.\r\n  const flags = finishedWork.flags;\r\n  if (flags & Placement) {\r\n    try {\r\n      commitPlacement(finishedWork);\r\n    } catch (error) {\r\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\r\n    }\r\n    // Clear the \"placement\" from effect tag so that we know that this is\r\n    // inserted, before any life-cycles like componentDidMount gets called.\r\n    // TODO: findDOMNode doesn't rely on this any more but isMounted does\r\n    // and isMounted is deprecated anyway so we should be able to kill this.\r\n    finishedWork.flags &= ~Placement;\r\n  }\r\n  if (flags & Hydrating) {\r\n    finishedWork.flags &= ~Hydrating;\r\n  }\r\n}\r\n\r\nexport function commitLayoutEffects(\r\n  finishedWork: Fiber,\r\n  root: FiberRoot,\r\n  committedLanes: Lanes,\r\n): void {\r\n  inProgressLanes = committedLanes;\r\n  inProgressRoot = root;\r\n\r\n  const current = finishedWork.alternate;\r\n  commitLayoutEffectOnFiber(root, current, finishedWork, committedLanes);\r\n\r\n  inProgressLanes = null;\r\n  inProgressRoot = null;\r\n}\r\n\r\nfunction recursivelyTraverseLayoutEffects(\r\n  root: FiberRoot,\r\n  parentFiber: Fiber,\r\n  lanes: Lanes,\r\n) {\r\n  const prevDebugFiber = getCurrentDebugFiberInDEV();\r\n  if (parentFiber.subtreeFlags & LayoutMask) {\r\n    let child = parentFiber.child;\r\n    while (child !== null) {\r\n      setCurrentDebugFiberInDEV(child);\r\n      const current = child.alternate;\r\n      commitLayoutEffectOnFiber(root, current, child, lanes);\r\n      child = child.sibling;\r\n    }\r\n  }\r\n  setCurrentDebugFiberInDEV(prevDebugFiber);\r\n}\r\n\r\nexport function disappearLayoutEffects(finishedWork: Fiber) {\r\n  switch (finishedWork.tag) {\r\n    case FunctionComponent:\r\n    case ForwardRef:\r\n    case MemoComponent:\r\n    case SimpleMemoComponent: {\r\n      // TODO (Offscreen) Check: flags & LayoutStatic\r\n      if (shouldProfile(finishedWork)) {\r\n        try {\r\n          startLayoutEffectTimer();\r\n          commitHookEffectListUnmount(\r\n            HookLayout,\r\n            finishedWork,\r\n            finishedWork.return,\r\n          );\r\n        } finally {\r\n          recordLayoutEffectDuration(finishedWork);\r\n        }\r\n      } else {\r\n        commitHookEffectListUnmount(\r\n          HookLayout,\r\n          finishedWork,\r\n          finishedWork.return,\r\n        );\r\n      }\r\n\r\n      recursivelyTraverseDisappearLayoutEffects(finishedWork);\r\n      break;\r\n    }\r\n    case ClassComponent: {\r\n      // TODO (Offscreen) Check: flags & RefStatic\r\n      safelyDetachRef(finishedWork, finishedWork.return);\r\n\r\n      const instance = finishedWork.stateNode;\r\n      if (typeof instance.componentWillUnmount === 'function') {\r\n        safelyCallComponentWillUnmount(\r\n          finishedWork,\r\n          finishedWork.return,\r\n          instance,\r\n        );\r\n      }\r\n\r\n      recursivelyTraverseDisappearLayoutEffects(finishedWork);\r\n      break;\r\n    }\r\n    case HostComponent: {\r\n      // TODO (Offscreen) Check: flags & RefStatic\r\n      safelyDetachRef(finishedWork, finishedWork.return);\r\n\r\n      recursivelyTraverseDisappearLayoutEffects(finishedWork);\r\n      break;\r\n    }\r\n    case OffscreenComponent: {\r\n      const isHidden = finishedWork.memoizedState !== null;\r\n      if (isHidden) {\r\n        // Nested Offscreen tree is already hidden. Don't disappear\r\n        // its effects.\r\n      } else {\r\n        recursivelyTraverseDisappearLayoutEffects(finishedWork);\r\n      }\r\n      break;\r\n    }\r\n    default: {\r\n      recursivelyTraverseDisappearLayoutEffects(finishedWork);\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nfunction recursivelyTraverseDisappearLayoutEffects(parentFiber: Fiber) {\r\n  // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\r\n  let child = parentFiber.child;\r\n  while (child !== null) {\r\n    disappearLayoutEffects(child);\r\n    child = child.sibling;\r\n  }\r\n}\r\n\r\nexport function reappearLayoutEffects(\r\n  finishedRoot: FiberRoot,\r\n  current: Fiber | null,\r\n  finishedWork: Fiber,\r\n  // This function visits both newly finished work and nodes that were re-used\r\n  // from a previously committed tree. We cannot check non-static flags if the\r\n  // node was reused.\r\n  includeWorkInProgressEffects: boolean,\r\n) {\r\n  // Turn on layout effects in a tree that previously disappeared.\r\n  const flags = finishedWork.flags;\r\n  switch (finishedWork.tag) {\r\n    case FunctionComponent:\r\n    case ForwardRef:\r\n    case SimpleMemoComponent: {\r\n      recursivelyTraverseReappearLayoutEffects(\r\n        finishedRoot,\r\n        finishedWork,\r\n        includeWorkInProgressEffects,\r\n      );\r\n      // TODO: Check flags & LayoutStatic\r\n      commitHookLayoutEffects(finishedWork, HookLayout);\r\n      break;\r\n    }\r\n    case ClassComponent: {\r\n      recursivelyTraverseReappearLayoutEffects(\r\n        finishedRoot,\r\n        finishedWork,\r\n        includeWorkInProgressEffects,\r\n      );\r\n\r\n      // TODO: Check for LayoutStatic flag\r\n      const instance = finishedWork.stateNode;\r\n      if (typeof instance.componentDidMount === 'function') {\r\n        try {\r\n          instance.componentDidMount();\r\n        } catch (error) {\r\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\r\n        }\r\n      }\r\n\r\n      // Commit any callbacks that would have fired while the component\r\n      // was hidden.\r\n      const updateQueue: UpdateQueue<\r\n        *,\r\n      > | null = (finishedWork.updateQueue: any);\r\n      if (updateQueue !== null) {\r\n        commitHiddenCallbacks(updateQueue, instance);\r\n      }\r\n\r\n      // If this is newly finished work, check for setState callbacks\r\n      if (includeWorkInProgressEffects && flags & Callback) {\r\n        commitClassCallbacks(finishedWork);\r\n      }\r\n\r\n      // TODO: Check flags & RefStatic\r\n      safelyAttachRef(finishedWork, finishedWork.return);\r\n      break;\r\n    }\r\n    // Unlike commitLayoutEffectsOnFiber, we don't need to handle HostRoot\r\n    // because this function only visits nodes that are inside an\r\n    // Offscreen fiber.\r\n    // case HostRoot: {\r\n    //  ...\r\n    // }\r\n    case HostComponent: {\r\n      recursivelyTraverseReappearLayoutEffects(\r\n        finishedRoot,\r\n        finishedWork,\r\n        includeWorkInProgressEffects,\r\n      );\r\n\r\n      // Renderers may schedule work to be done after host components are mounted\r\n      // (eg DOM renderer may schedule auto-focus for inputs and form controls).\r\n      // These effects should only be committed when components are first mounted,\r\n      // aka when there is no current/alternate.\r\n      if (includeWorkInProgressEffects && current === null && flags & Update) {\r\n        commitHostComponentMount(finishedWork);\r\n      }\r\n\r\n      // TODO: Check flags & Ref\r\n      safelyAttachRef(finishedWork, finishedWork.return);\r\n      break;\r\n    }\r\n    case Profiler: {\r\n      recursivelyTraverseReappearLayoutEffects(\r\n        finishedRoot,\r\n        finishedWork,\r\n        includeWorkInProgressEffects,\r\n      );\r\n      // TODO: Figure out how Profiler updates should work with Offscreen\r\n      if (includeWorkInProgressEffects && flags & Update) {\r\n        commitProfilerUpdate(finishedWork, current);\r\n      }\r\n      break;\r\n    }\r\n    case SuspenseComponent: {\r\n      recursivelyTraverseReappearLayoutEffects(\r\n        finishedRoot,\r\n        finishedWork,\r\n        includeWorkInProgressEffects,\r\n      );\r\n\r\n      // TODO: Figure out how Suspense hydration callbacks should work\r\n      // with Offscreen.\r\n      if (includeWorkInProgressEffects && flags & Update) {\r\n        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\r\n      }\r\n      break;\r\n    }\r\n    case OffscreenComponent: {\r\n      const offscreenState: OffscreenState = finishedWork.memoizedState;\r\n      const isHidden = offscreenState !== null;\r\n      if (isHidden) {\r\n        // Nested Offscreen tree is still hidden. Don't re-appear its effects.\r\n      } else {\r\n        recursivelyTraverseReappearLayoutEffects(\r\n          finishedRoot,\r\n          finishedWork,\r\n          includeWorkInProgressEffects,\r\n        );\r\n      }\r\n      break;\r\n    }\r\n    default: {\r\n      recursivelyTraverseReappearLayoutEffects(\r\n        finishedRoot,\r\n        finishedWork,\r\n        includeWorkInProgressEffects,\r\n      );\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nfunction recursivelyTraverseReappearLayoutEffects(\r\n  finishedRoot: FiberRoot,\r\n  parentFiber: Fiber,\r\n  includeWorkInProgressEffects: boolean,\r\n) {\r\n  // This function visits both newly finished work and nodes that were re-used\r\n  // from a previously committed tree. We cannot check non-static flags if the\r\n  // node was reused.\r\n  const childShouldIncludeWorkInProgressEffects =\r\n    includeWorkInProgressEffects &&\r\n    (parentFiber.subtreeFlags & LayoutMask) !== NoFlags;\r\n\r\n  // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\r\n  const prevDebugFiber = getCurrentDebugFiberInDEV();\r\n  let child = parentFiber.child;\r\n  while (child !== null) {\r\n    const current = child.alternate;\r\n    reappearLayoutEffects(\r\n      finishedRoot,\r\n      current,\r\n      child,\r\n      childShouldIncludeWorkInProgressEffects,\r\n    );\r\n    child = child.sibling;\r\n  }\r\n  setCurrentDebugFiberInDEV(prevDebugFiber);\r\n}\r\n\r\nfunction commitHookPassiveMountEffects(\r\n  finishedWork: Fiber,\r\n  hookFlags: HookFlags,\r\n) {\r\n  if (shouldProfile(finishedWork)) {\r\n    startPassiveEffectTimer();\r\n    try {\r\n      commitHookEffectListMount(hookFlags, finishedWork);\r\n    } catch (error) {\r\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\r\n    }\r\n    recordPassiveEffectDuration(finishedWork);\r\n  } else {\r\n    try {\r\n      commitHookEffectListMount(hookFlags, finishedWork);\r\n    } catch (error) {\r\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\r\n    }\r\n  }\r\n}\r\n\r\nfunction commitOffscreenPassiveMountEffects(\r\n  current: Fiber | null,\r\n  finishedWork: Fiber,\r\n  instance: OffscreenInstance,\r\n) {\r\n  if (enableCache) {\r\n    let previousCache: Cache | null = null;\r\n    if (\r\n      current !== null &&\r\n      current.memoizedState !== null &&\r\n      current.memoizedState.cachePool !== null\r\n    ) {\r\n      previousCache = current.memoizedState.cachePool.pool;\r\n    }\r\n    let nextCache: Cache | null = null;\r\n    if (\r\n      finishedWork.memoizedState !== null &&\r\n      finishedWork.memoizedState.cachePool !== null\r\n    ) {\r\n      nextCache = finishedWork.memoizedState.cachePool.pool;\r\n    }\r\n    // Retain/release the cache used for pending (suspended) nodes.\r\n    // Note that this is only reached in the non-suspended/visible case:\r\n    // when the content is suspended/hidden, the retain/release occurs\r\n    // via the parent Suspense component (see case above).\r\n    if (nextCache !== previousCache) {\r\n      if (nextCache != null) {\r\n        retainCache(nextCache);\r\n      }\r\n      if (previousCache != null) {\r\n        releaseCache(previousCache);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (enableTransitionTracing) {\r\n    // TODO: Pre-rendering should not be counted as part of a transition. We\r\n    // may add separate logs for pre-rendering, but it's not part of the\r\n    // primary metrics.\r\n    const offscreenState: OffscreenState = finishedWork.memoizedState;\r\n    const queue: OffscreenQueue | null = (finishedWork.updateQueue: any);\r\n\r\n    const isHidden = offscreenState !== null;\r\n    if (queue !== null) {\r\n      if (isHidden) {\r\n        const transitions = queue.transitions;\r\n        if (transitions !== null) {\r\n          transitions.forEach(transition => {\r\n            // Add all the transitions saved in the update queue during\r\n            // the render phase (ie the transitions associated with this boundary)\r\n            // into the transitions set.\r\n            if (instance.transitions === null) {\r\n              instance.transitions = new Set();\r\n            }\r\n            instance.transitions.add(transition);\r\n          });\r\n        }\r\n\r\n        const markerInstances = queue.markerInstances;\r\n        if (markerInstances !== null) {\r\n          markerInstances.forEach(markerInstance => {\r\n            const markerTransitions = markerInstance.transitions;\r\n            // There should only be a few tracing marker transitions because\r\n            // they should be only associated with the transition that\r\n            // caused them\r\n            if (markerTransitions !== null) {\r\n              markerTransitions.forEach(transition => {\r\n                if (instance.transitions === null) {\r\n                  instance.transitions = new Set();\r\n                } else if (instance.transitions.has(transition)) {\r\n                  if (markerInstance.pendingBoundaries === null) {\r\n                    markerInstance.pendingBoundaries = new Map();\r\n                  }\r\n                  if (instance.pendingMarkers === null) {\r\n                    instance.pendingMarkers = new Set();\r\n                  }\r\n\r\n                  instance.pendingMarkers.add(markerInstance);\r\n                }\r\n              });\r\n            }\r\n          });\r\n        }\r\n      }\r\n\r\n      finishedWork.updateQueue = null;\r\n    }\r\n\r\n    commitTransitionProgress(finishedWork);\r\n\r\n    // TODO: Refactor this into an if/else branch\r\n    if (!isHidden) {\r\n      instance.transitions = null;\r\n      instance.pendingMarkers = null;\r\n    }\r\n  }\r\n}\r\n\r\nfunction commitCachePassiveMountEffect(\r\n  current: Fiber | null,\r\n  finishedWork: Fiber,\r\n) {\r\n  if (enableCache) {\r\n    let previousCache: Cache | null = null;\r\n    if (finishedWork.alternate !== null) {\r\n      previousCache = finishedWork.alternate.memoizedState.cache;\r\n    }\r\n    const nextCache = finishedWork.memoizedState.cache;\r\n    // Retain/release the cache. In theory the cache component\r\n    // could be \"borrowing\" a cache instance owned by some parent,\r\n    // in which case we could avoid retaining/releasing. But it\r\n    // is non-trivial to determine when that is the case, so we\r\n    // always retain/release.\r\n    if (nextCache !== previousCache) {\r\n      retainCache(nextCache);\r\n      if (previousCache != null) {\r\n        releaseCache(previousCache);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction commitTracingMarkerPassiveMountEffect(finishedWork: Fiber) {\r\n  // Get the transitions that were initiatized during the render\r\n  // and add a start transition callback for each of them\r\n  // We will only call this on initial mount of the tracing marker\r\n  // only if there are no suspense children\r\n  const instance = finishedWork.stateNode;\r\n  if (instance.transitions !== null && instance.pendingBoundaries === null) {\r\n    addMarkerCompleteCallbackToPendingTransition(\r\n      finishedWork.memoizedProps.name,\r\n      instance.transitions,\r\n    );\r\n    instance.transitions = null;\r\n    instance.pendingBoundaries = null;\r\n    instance.aborts = null;\r\n    instance.name = null;\r\n  }\r\n}\r\n\r\nexport function commitPassiveMountEffects(\r\n  root: FiberRoot,\r\n  finishedWork: Fiber,\r\n  committedLanes: Lanes,\r\n  committedTransitions: Array<Transition> | null,\r\n): void {\r\n  setCurrentDebugFiberInDEV(finishedWork);\r\n  commitPassiveMountOnFiber(\r\n    root,\r\n    finishedWork,\r\n    committedLanes,\r\n    committedTransitions,\r\n  );\r\n  resetCurrentDebugFiberInDEV();\r\n}\r\n\r\nfunction recursivelyTraversePassiveMountEffects(\r\n  root: FiberRoot,\r\n  parentFiber: Fiber,\r\n  committedLanes: Lanes,\r\n  committedTransitions: Array<Transition> | null,\r\n) {\r\n  const prevDebugFiber = getCurrentDebugFiberInDEV();\r\n  if (parentFiber.subtreeFlags & PassiveMask) {\r\n    let child = parentFiber.child;\r\n    while (child !== null) {\r\n      setCurrentDebugFiberInDEV(child);\r\n      commitPassiveMountOnFiber(\r\n        root,\r\n        child,\r\n        committedLanes,\r\n        committedTransitions,\r\n      );\r\n      child = child.sibling;\r\n    }\r\n  }\r\n  setCurrentDebugFiberInDEV(prevDebugFiber);\r\n}\r\n\r\nfunction commitPassiveMountOnFiber(\r\n  finishedRoot: FiberRoot,\r\n  finishedWork: Fiber,\r\n  committedLanes: Lanes,\r\n  committedTransitions: Array<Transition> | null,\r\n): void {\r\n  // When updating this function, also update reconnectPassiveEffects, which does\r\n  // most of the same things when an offscreen tree goes from hidden -> visible,\r\n  // or when toggling effects inside a hidden tree.\r\n  const flags = finishedWork.flags;\r\n  switch (finishedWork.tag) {\r\n    case FunctionComponent:\r\n    case ForwardRef:\r\n    case SimpleMemoComponent: {\r\n      recursivelyTraversePassiveMountEffects(\r\n        finishedRoot,\r\n        finishedWork,\r\n        committedLanes,\r\n        committedTransitions,\r\n      );\r\n      if (flags & Passive) {\r\n        commitHookPassiveMountEffects(\r\n          finishedWork,\r\n          HookPassive | HookHasEffect,\r\n        );\r\n      }\r\n      break;\r\n    }\r\n    case HostRoot: {\r\n      recursivelyTraversePassiveMountEffects(\r\n        finishedRoot,\r\n        finishedWork,\r\n        committedLanes,\r\n        committedTransitions,\r\n      );\r\n      if (flags & Passive) {\r\n        if (enableCache) {\r\n          let previousCache: Cache | null = null;\r\n          if (finishedWork.alternate !== null) {\r\n            previousCache = finishedWork.alternate.memoizedState.cache;\r\n          }\r\n          const nextCache = finishedWork.memoizedState.cache;\r\n          // Retain/release the root cache.\r\n          // Note that on initial mount, previousCache and nextCache will be the same\r\n          // and this retain won't occur. To counter this, we instead retain the HostRoot's\r\n          // initial cache when creating the root itself (see createFiberRoot() in\r\n          // ReactFiberRoot.js). Subsequent updates that change the cache are reflected\r\n          // here, such that previous/next caches are retained correctly.\r\n          if (nextCache !== previousCache) {\r\n            retainCache(nextCache);\r\n            if (previousCache != null) {\r\n              releaseCache(previousCache);\r\n            }\r\n          }\r\n        }\r\n\r\n        if (enableTransitionTracing) {\r\n          // Get the transitions that were initiatized during the render\r\n          // and add a start transition callback for each of them\r\n          const root: FiberRoot = finishedWork.stateNode;\r\n          const incompleteTransitions = root.incompleteTransitions;\r\n          // Initial render\r\n          if (committedTransitions !== null) {\r\n            committedTransitions.forEach(transition => {\r\n              addTransitionStartCallbackToPendingTransition(transition);\r\n            });\r\n\r\n            clearTransitionsForLanes(finishedRoot, committedLanes);\r\n          }\r\n\r\n          incompleteTransitions.forEach((markerInstance, transition) => {\r\n            const pendingBoundaries = markerInstance.pendingBoundaries;\r\n            if (pendingBoundaries === null || pendingBoundaries.size === 0) {\r\n              if (markerInstance.aborts === null) {\r\n                addTransitionCompleteCallbackToPendingTransition(transition);\r\n              }\r\n              incompleteTransitions.delete(transition);\r\n            }\r\n          });\r\n\r\n          clearTransitionsForLanes(finishedRoot, committedLanes);\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case LegacyHiddenComponent:\r\n    case OffscreenComponent: {\r\n      // TODO: Pass `current` as argument to this function\r\n      const instance: OffscreenInstance = finishedWork.stateNode;\r\n      const nextState: OffscreenState | null = finishedWork.memoizedState;\r\n\r\n      const isHidden = nextState !== null;\r\n\r\n      if (isHidden) {\r\n        if (instance.visibility & OffscreenPassiveEffectsConnected) {\r\n          // The effects are currently connected. Update them.\r\n          recursivelyTraversePassiveMountEffects(\r\n            finishedRoot,\r\n            finishedWork,\r\n            committedLanes,\r\n            committedTransitions,\r\n          );\r\n        } else {\r\n          if (finishedWork.mode & ConcurrentMode) {\r\n            // The effects are currently disconnected. Since the tree is hidden,\r\n            // don't connect them. This also applies to the initial render.\r\n            if (enableCache || enableTransitionTracing) {\r\n              // \"Atomic\" effects are ones that need to fire on every commit,\r\n              // even during pre-rendering. An example is updating the reference\r\n              // count on cache instances.\r\n              recursivelyTraverseAtomicPassiveEffects(\r\n                finishedRoot,\r\n                finishedWork,\r\n                committedLanes,\r\n                committedTransitions,\r\n              );\r\n            }\r\n          } else {\r\n            // Legacy Mode: Fire the effects even if the tree is hidden.\r\n            instance.visibility |= OffscreenPassiveEffectsConnected;\r\n            recursivelyTraversePassiveMountEffects(\r\n              finishedRoot,\r\n              finishedWork,\r\n              committedLanes,\r\n              committedTransitions,\r\n            );\r\n          }\r\n        }\r\n      } else {\r\n        // Tree is visible\r\n        if (instance.visibility & OffscreenPassiveEffectsConnected) {\r\n          // The effects are currently connected. Update them.\r\n          recursivelyTraversePassiveMountEffects(\r\n            finishedRoot,\r\n            finishedWork,\r\n            committedLanes,\r\n            committedTransitions,\r\n          );\r\n        } else {\r\n          // The effects are currently disconnected. Reconnect them, while also\r\n          // firing effects inside newly mounted trees. This also applies to\r\n          // the initial render.\r\n          instance.visibility |= OffscreenPassiveEffectsConnected;\r\n\r\n          const includeWorkInProgressEffects =\r\n            (finishedWork.subtreeFlags & PassiveMask) !== NoFlags;\r\n          recursivelyTraverseReconnectPassiveEffects(\r\n            finishedRoot,\r\n            finishedWork,\r\n            committedLanes,\r\n            committedTransitions,\r\n            includeWorkInProgressEffects,\r\n          );\r\n        }\r\n      }\r\n\r\n      if (flags & Passive) {\r\n        const current = finishedWork.alternate;\r\n        commitOffscreenPassiveMountEffects(current, finishedWork, instance);\r\n      }\r\n      break;\r\n    }\r\n    case CacheComponent: {\r\n      recursivelyTraversePassiveMountEffects(\r\n        finishedRoot,\r\n        finishedWork,\r\n        committedLanes,\r\n        committedTransitions,\r\n      );\r\n      if (flags & Passive) {\r\n        // TODO: Pass `current` as argument to this function\r\n        const current = finishedWork.alternate;\r\n        commitCachePassiveMountEffect(current, finishedWork);\r\n      }\r\n      break;\r\n    }\r\n    case TracingMarkerComponent: {\r\n      if (enableTransitionTracing) {\r\n        recursivelyTraversePassiveMountEffects(\r\n          finishedRoot,\r\n          finishedWork,\r\n          committedLanes,\r\n          committedTransitions,\r\n        );\r\n        if (flags & Passive) {\r\n          commitTracingMarkerPassiveMountEffect(finishedWork);\r\n        }\r\n        break;\r\n      }\r\n      // Intentional fallthrough to next branch\r\n    }\r\n    // eslint-disable-next-line-no-fallthrough\r\n    default: {\r\n      recursivelyTraversePassiveMountEffects(\r\n        finishedRoot,\r\n        finishedWork,\r\n        committedLanes,\r\n        committedTransitions,\r\n      );\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nfunction recursivelyTraverseReconnectPassiveEffects(\r\n  finishedRoot: FiberRoot,\r\n  parentFiber: Fiber,\r\n  committedLanes: Lanes,\r\n  committedTransitions: Array<Transition> | null,\r\n  includeWorkInProgressEffects: boolean,\r\n) {\r\n  // This function visits both newly finished work and nodes that were re-used\r\n  // from a previously committed tree. We cannot check non-static flags if the\r\n  // node was reused.\r\n  const childShouldIncludeWorkInProgressEffects =\r\n    includeWorkInProgressEffects &&\r\n    (parentFiber.subtreeFlags & PassiveMask) !== NoFlags;\r\n\r\n  // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\r\n  const prevDebugFiber = getCurrentDebugFiberInDEV();\r\n  let child = parentFiber.child;\r\n  while (child !== null) {\r\n    reconnectPassiveEffects(\r\n      finishedRoot,\r\n      child,\r\n      committedLanes,\r\n      committedTransitions,\r\n      childShouldIncludeWorkInProgressEffects,\r\n    );\r\n    child = child.sibling;\r\n  }\r\n  setCurrentDebugFiberInDEV(prevDebugFiber);\r\n}\r\n\r\nexport function reconnectPassiveEffects(\r\n  finishedRoot: FiberRoot,\r\n  finishedWork: Fiber,\r\n  committedLanes: Lanes,\r\n  committedTransitions: Array<Transition> | null,\r\n  // This function visits both newly finished work and nodes that were re-used\r\n  // from a previously committed tree. We cannot check non-static flags if the\r\n  // node was reused.\r\n  includeWorkInProgressEffects: boolean,\r\n) {\r\n  const flags = finishedWork.flags;\r\n  switch (finishedWork.tag) {\r\n    case FunctionComponent:\r\n    case ForwardRef:\r\n    case SimpleMemoComponent: {\r\n      recursivelyTraverseReconnectPassiveEffects(\r\n        finishedRoot,\r\n        finishedWork,\r\n        committedLanes,\r\n        committedTransitions,\r\n        includeWorkInProgressEffects,\r\n      );\r\n      // TODO: Check for PassiveStatic flag\r\n      commitHookPassiveMountEffects(finishedWork, HookPassive);\r\n      break;\r\n    }\r\n    // Unlike commitPassiveMountOnFiber, we don't need to handle HostRoot\r\n    // because this function only visits nodes that are inside an\r\n    // Offscreen fiber.\r\n    // case HostRoot: {\r\n    //  ...\r\n    // }\r\n    case LegacyHiddenComponent:\r\n    case OffscreenComponent: {\r\n      const instance: OffscreenInstance = finishedWork.stateNode;\r\n      const nextState: OffscreenState | null = finishedWork.memoizedState;\r\n\r\n      const isHidden = nextState !== null;\r\n\r\n      if (isHidden) {\r\n        if (instance.visibility & OffscreenPassiveEffectsConnected) {\r\n          // The effects are currently connected. Update them.\r\n          recursivelyTraverseReconnectPassiveEffects(\r\n            finishedRoot,\r\n            finishedWork,\r\n            committedLanes,\r\n            committedTransitions,\r\n            includeWorkInProgressEffects,\r\n          );\r\n        } else {\r\n          if (finishedWork.mode & ConcurrentMode) {\r\n            // The effects are currently disconnected. Since the tree is hidden,\r\n            // don't connect them. This also applies to the initial render.\r\n            if (enableCache || enableTransitionTracing) {\r\n              // \"Atomic\" effects are ones that need to fire on every commit,\r\n              // even during pre-rendering. An example is updating the reference\r\n              // count on cache instances.\r\n              recursivelyTraverseAtomicPassiveEffects(\r\n                finishedRoot,\r\n                finishedWork,\r\n                committedLanes,\r\n                committedTransitions,\r\n              );\r\n            }\r\n          } else {\r\n            // Legacy Mode: Fire the effects even if the tree is hidden.\r\n            instance.visibility |= OffscreenPassiveEffectsConnected;\r\n            recursivelyTraverseReconnectPassiveEffects(\r\n              finishedRoot,\r\n              finishedWork,\r\n              committedLanes,\r\n              committedTransitions,\r\n              includeWorkInProgressEffects,\r\n            );\r\n          }\r\n        }\r\n      } else {\r\n        // Tree is visible\r\n\r\n        // Since we're already inside a reconnecting tree, it doesn't matter\r\n        // whether the effects are currently connected. In either case, we'll\r\n        // continue traversing the tree and firing all the effects.\r\n        //\r\n        // We do need to set the \"connected\" flag on the instance, though.\r\n        instance.visibility |= OffscreenPassiveEffectsConnected;\r\n\r\n        recursivelyTraverseReconnectPassiveEffects(\r\n          finishedRoot,\r\n          finishedWork,\r\n          committedLanes,\r\n          committedTransitions,\r\n          includeWorkInProgressEffects,\r\n        );\r\n      }\r\n\r\n      if (includeWorkInProgressEffects && flags & Passive) {\r\n        // TODO: Pass `current` as argument to this function\r\n        const current: Fiber | null = finishedWork.alternate;\r\n        commitOffscreenPassiveMountEffects(current, finishedWork, instance);\r\n      }\r\n      break;\r\n    }\r\n    case CacheComponent: {\r\n      recursivelyTraverseReconnectPassiveEffects(\r\n        finishedRoot,\r\n        finishedWork,\r\n        committedLanes,\r\n        committedTransitions,\r\n        includeWorkInProgressEffects,\r\n      );\r\n      if (includeWorkInProgressEffects && flags & Passive) {\r\n        // TODO: Pass `current` as argument to this function\r\n        const current = finishedWork.alternate;\r\n        commitCachePassiveMountEffect(current, finishedWork);\r\n      }\r\n      break;\r\n    }\r\n    case TracingMarkerComponent: {\r\n      if (enableTransitionTracing) {\r\n        recursivelyTraverseReconnectPassiveEffects(\r\n          finishedRoot,\r\n          finishedWork,\r\n          committedLanes,\r\n          committedTransitions,\r\n          includeWorkInProgressEffects,\r\n        );\r\n        if (includeWorkInProgressEffects && flags & Passive) {\r\n          commitTracingMarkerPassiveMountEffect(finishedWork);\r\n        }\r\n        break;\r\n      }\r\n      // Intentional fallthrough to next branch\r\n    }\r\n    // eslint-disable-next-line-no-fallthrough\r\n    default: {\r\n      recursivelyTraverseReconnectPassiveEffects(\r\n        finishedRoot,\r\n        finishedWork,\r\n        committedLanes,\r\n        committedTransitions,\r\n        includeWorkInProgressEffects,\r\n      );\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nfunction recursivelyTraverseAtomicPassiveEffects(\r\n  finishedRoot: FiberRoot,\r\n  parentFiber: Fiber,\r\n  committedLanes: Lanes,\r\n  committedTransitions: Array<Transition> | null,\r\n) {\r\n  // \"Atomic\" effects are ones that need to fire on every commit, even during\r\n  // pre-rendering. We call this function when traversing a hidden tree whose\r\n  // regular effects are currently disconnected.\r\n  const prevDebugFiber = getCurrentDebugFiberInDEV();\r\n  // TODO: Add special flag for atomic effects\r\n  if (parentFiber.subtreeFlags & PassiveMask) {\r\n    let child = parentFiber.child;\r\n    while (child !== null) {\r\n      setCurrentDebugFiberInDEV(child);\r\n      commitAtomicPassiveEffects(\r\n        finishedRoot,\r\n        child,\r\n        committedLanes,\r\n        committedTransitions,\r\n      );\r\n      child = child.sibling;\r\n    }\r\n  }\r\n  setCurrentDebugFiberInDEV(prevDebugFiber);\r\n}\r\n\r\nfunction commitAtomicPassiveEffects(\r\n  finishedRoot: FiberRoot,\r\n  finishedWork: Fiber,\r\n  committedLanes: Lanes,\r\n  committedTransitions: Array<Transition> | null,\r\n) {\r\n  // \"Atomic\" effects are ones that need to fire on every commit, even during\r\n  // pre-rendering. We call this function when traversing a hidden tree whose\r\n  // regular effects are currently disconnected.\r\n  const flags = finishedWork.flags;\r\n  switch (finishedWork.tag) {\r\n    case OffscreenComponent: {\r\n      recursivelyTraverseAtomicPassiveEffects(\r\n        finishedRoot,\r\n        finishedWork,\r\n        committedLanes,\r\n        committedTransitions,\r\n      );\r\n      if (flags & Passive) {\r\n        // TODO: Pass `current` as argument to this function\r\n        const current = finishedWork.alternate;\r\n        const instance: OffscreenInstance = finishedWork.stateNode;\r\n        commitOffscreenPassiveMountEffects(current, finishedWork, instance);\r\n      }\r\n      break;\r\n    }\r\n    case CacheComponent: {\r\n      recursivelyTraverseAtomicPassiveEffects(\r\n        finishedRoot,\r\n        finishedWork,\r\n        committedLanes,\r\n        committedTransitions,\r\n      );\r\n      if (flags & Passive) {\r\n        // TODO: Pass `current` as argument to this function\r\n        const current = finishedWork.alternate;\r\n        commitCachePassiveMountEffect(current, finishedWork);\r\n      }\r\n      break;\r\n    }\r\n    // eslint-disable-next-line-no-fallthrough\r\n    default: {\r\n      recursivelyTraverseAtomicPassiveEffects(\r\n        finishedRoot,\r\n        finishedWork,\r\n        committedLanes,\r\n        committedTransitions,\r\n      );\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nexport function commitPassiveUnmountEffects(finishedWork: Fiber): void {\r\n  setCurrentDebugFiberInDEV(finishedWork);\r\n  commitPassiveUnmountOnFiber(finishedWork);\r\n  resetCurrentDebugFiberInDEV();\r\n}\r\n\r\nfunction detachAlternateSiblings(parentFiber: Fiber) {\r\n  if (deletedTreeCleanUpLevel >= 1) {\r\n    // A fiber was deleted from this parent fiber, but it's still part of the\r\n    // previous (alternate) parent fiber's list of children. Because children\r\n    // are a linked list, an earlier sibling that's still alive will be\r\n    // connected to the deleted fiber via its `alternate`:\r\n    //\r\n    //   live fiber --alternate--> previous live fiber --sibling--> deleted\r\n    //   fiber\r\n    //\r\n    // We can't disconnect `alternate` on nodes that haven't been deleted yet,\r\n    // but we can disconnect the `sibling` and `child` pointers.\r\n\r\n    const previousFiber = parentFiber.alternate;\r\n    if (previousFiber !== null) {\r\n      let detachedChild = previousFiber.child;\r\n      if (detachedChild !== null) {\r\n        previousFiber.child = null;\r\n        do {\r\n          const detachedSibling = detachedChild.sibling;\r\n          detachedChild.sibling = null;\r\n          detachedChild = detachedSibling;\r\n        } while (detachedChild !== null);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction commitHookPassiveUnmountEffects(\r\n  finishedWork: Fiber,\r\n  nearestMountedAncestor,\r\n  hookFlags: HookFlags,\r\n) {\r\n  if (shouldProfile(finishedWork)) {\r\n    startPassiveEffectTimer();\r\n    commitHookEffectListUnmount(\r\n      hookFlags,\r\n      finishedWork,\r\n      nearestMountedAncestor,\r\n    );\r\n    recordPassiveEffectDuration(finishedWork);\r\n  } else {\r\n    commitHookEffectListUnmount(\r\n      hookFlags,\r\n      finishedWork,\r\n      nearestMountedAncestor,\r\n    );\r\n  }\r\n}\r\n\r\nfunction recursivelyTraversePassiveUnmountEffects(parentFiber: Fiber): void {\r\n  // Deletions effects can be scheduled on any fiber type. They need to happen\r\n  // before the children effects have fired.\r\n  const deletions = parentFiber.deletions;\r\n\r\n  if ((parentFiber.flags & ChildDeletion) !== NoFlags) {\r\n    if (deletions !== null) {\r\n      for (let i = 0; i < deletions.length; i++) {\r\n        const childToDelete = deletions[i];\r\n        // TODO: Convert this to use recursion\r\n        nextEffect = childToDelete;\r\n        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\r\n          childToDelete,\r\n          parentFiber,\r\n        );\r\n      }\r\n    }\r\n    detachAlternateSiblings(parentFiber);\r\n  }\r\n\r\n  const prevDebugFiber = getCurrentDebugFiberInDEV();\r\n  // TODO: Split PassiveMask into separate masks for mount and unmount?\r\n  if (parentFiber.subtreeFlags & PassiveMask) {\r\n    let child = parentFiber.child;\r\n    while (child !== null) {\r\n      setCurrentDebugFiberInDEV(child);\r\n      commitPassiveUnmountOnFiber(child);\r\n      child = child.sibling;\r\n    }\r\n  }\r\n  setCurrentDebugFiberInDEV(prevDebugFiber);\r\n}\r\n\r\nfunction commitPassiveUnmountOnFiber(finishedWork: Fiber): void {\r\n  switch (finishedWork.tag) {\r\n    case FunctionComponent:\r\n    case ForwardRef:\r\n    case SimpleMemoComponent: {\r\n      recursivelyTraversePassiveUnmountEffects(finishedWork);\r\n      if (finishedWork.flags & Passive) {\r\n        commitHookPassiveUnmountEffects(\r\n          finishedWork,\r\n          finishedWork.return,\r\n          HookPassive | HookHasEffect,\r\n        );\r\n      }\r\n      break;\r\n    }\r\n    case OffscreenComponent: {\r\n      const instance: OffscreenInstance = finishedWork.stateNode;\r\n      const nextState: OffscreenState | null = finishedWork.memoizedState;\r\n\r\n      const isHidden = nextState !== null;\r\n\r\n      if (\r\n        isHidden &&\r\n        instance.visibility & OffscreenPassiveEffectsConnected &&\r\n        // For backwards compatibility, don't unmount when a tree suspends. In\r\n        // the future we may change this to unmount after a delay.\r\n        (finishedWork.return === null ||\r\n          finishedWork.return.tag !== SuspenseComponent)\r\n      ) {\r\n        // The effects are currently connected. Disconnect them.\r\n        // TODO: Add option or heuristic to delay before disconnecting the\r\n        // effects. Then if the tree reappears before the delay has elapsed, we\r\n        // can skip toggling the effects entirely.\r\n        instance.visibility &= ~OffscreenPassiveEffectsConnected;\r\n        recursivelyTraverseDisconnectPassiveEffects(finishedWork);\r\n      } else {\r\n        recursivelyTraversePassiveUnmountEffects(finishedWork);\r\n      }\r\n\r\n      break;\r\n    }\r\n    default: {\r\n      recursivelyTraversePassiveUnmountEffects(finishedWork);\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nfunction recursivelyTraverseDisconnectPassiveEffects(parentFiber: Fiber): void {\r\n  // Deletions effects can be scheduled on any fiber type. They need to happen\r\n  // before the children effects have fired.\r\n  const deletions = parentFiber.deletions;\r\n\r\n  if ((parentFiber.flags & ChildDeletion) !== NoFlags) {\r\n    if (deletions !== null) {\r\n      for (let i = 0; i < deletions.length; i++) {\r\n        const childToDelete = deletions[i];\r\n        // TODO: Convert this to use recursion\r\n        nextEffect = childToDelete;\r\n        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\r\n          childToDelete,\r\n          parentFiber,\r\n        );\r\n      }\r\n    }\r\n    detachAlternateSiblings(parentFiber);\r\n  }\r\n\r\n  const prevDebugFiber = getCurrentDebugFiberInDEV();\r\n  // TODO: Check PassiveStatic flag\r\n  let child = parentFiber.child;\r\n  while (child !== null) {\r\n    setCurrentDebugFiberInDEV(child);\r\n    disconnectPassiveEffect(child);\r\n    child = child.sibling;\r\n  }\r\n  setCurrentDebugFiberInDEV(prevDebugFiber);\r\n}\r\n\r\nexport function disconnectPassiveEffect(finishedWork: Fiber): void {\r\n  switch (finishedWork.tag) {\r\n    case FunctionComponent:\r\n    case ForwardRef:\r\n    case SimpleMemoComponent: {\r\n      // TODO: Check PassiveStatic flag\r\n      commitHookPassiveUnmountEffects(\r\n        finishedWork,\r\n        finishedWork.return,\r\n        HookPassive,\r\n      );\r\n      // When disconnecting passive effects, we fire the effects in the same\r\n      // order as during a deletiong: parent before child\r\n      recursivelyTraverseDisconnectPassiveEffects(finishedWork);\r\n      break;\r\n    }\r\n    case OffscreenComponent: {\r\n      const instance: OffscreenInstance = finishedWork.stateNode;\r\n      if (instance.visibility & OffscreenPassiveEffectsConnected) {\r\n        instance.visibility &= ~OffscreenPassiveEffectsConnected;\r\n        recursivelyTraverseDisconnectPassiveEffects(finishedWork);\r\n      } else {\r\n        // The effects are already disconnected.\r\n      }\r\n      break;\r\n    }\r\n    default: {\r\n      recursivelyTraverseDisconnectPassiveEffects(finishedWork);\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\r\n  deletedSubtreeRoot: Fiber,\r\n  nearestMountedAncestor: Fiber | null,\r\n) {\r\n  while (nextEffect !== null) {\r\n    const fiber = nextEffect;\r\n\r\n    // Deletion effects fire in parent -> child order\r\n    // TODO: Check if fiber has a PassiveStatic flag\r\n    setCurrentDebugFiberInDEV(fiber);\r\n    commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);\r\n    resetCurrentDebugFiberInDEV();\r\n\r\n    const child = fiber.child;\r\n    // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we\r\n    // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)\r\n    if (child !== null) {\r\n      child.return = fiber;\r\n      nextEffect = child;\r\n    } else {\r\n      commitPassiveUnmountEffectsInsideOfDeletedTree_complete(\r\n        deletedSubtreeRoot,\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_complete(\r\n  deletedSubtreeRoot: Fiber,\r\n) {\r\n  while (nextEffect !== null) {\r\n    const fiber = nextEffect;\r\n    const sibling = fiber.sibling;\r\n    const returnFiber = fiber.return;\r\n\r\n    if (deletedTreeCleanUpLevel >= 2) {\r\n      // Recursively traverse the entire deleted tree and clean up fiber fields.\r\n      // This is more aggressive than ideal, and the long term goal is to only\r\n      // have to detach the deleted tree at the root.\r\n      detachFiberAfterEffects(fiber);\r\n      if (fiber === deletedSubtreeRoot) {\r\n        nextEffect = null;\r\n        return;\r\n      }\r\n    } else {\r\n      // This is the default branch (level 0). We do not recursively clear all\r\n      // the fiber fields. Only the root of the deleted subtree.\r\n      if (fiber === deletedSubtreeRoot) {\r\n        detachFiberAfterEffects(fiber);\r\n        nextEffect = null;\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (sibling !== null) {\r\n      sibling.return = returnFiber;\r\n      nextEffect = sibling;\r\n      return;\r\n    }\r\n\r\n    nextEffect = returnFiber;\r\n  }\r\n}\r\n\r\nfunction commitPassiveUnmountInsideDeletedTreeOnFiber(\r\n  current: Fiber,\r\n  nearestMountedAncestor: Fiber | null,\r\n): void {\r\n  switch (current.tag) {\r\n    case FunctionComponent:\r\n    case ForwardRef:\r\n    case SimpleMemoComponent: {\r\n      commitHookPassiveUnmountEffects(\r\n        current,\r\n        nearestMountedAncestor,\r\n        HookPassive,\r\n      );\r\n      break;\r\n    }\r\n    // TODO: run passive unmount effects when unmounting a root.\r\n    // Because passive unmount effects are not currently run,\r\n    // the cache instance owned by the root will never be freed.\r\n    // When effects are run, the cache should be freed here:\r\n    // case HostRoot: {\r\n    //   if (enableCache) {\r\n    //     const cache = current.memoizedState.cache;\r\n    //     releaseCache(cache);\r\n    //   }\r\n    //   break;\r\n    // }\r\n    case LegacyHiddenComponent:\r\n    case OffscreenComponent: {\r\n      if (enableCache) {\r\n        if (\r\n          current.memoizedState !== null &&\r\n          current.memoizedState.cachePool !== null\r\n        ) {\r\n          const cache: Cache = current.memoizedState.cachePool.pool;\r\n          // Retain/release the cache used for pending (suspended) nodes.\r\n          // Note that this is only reached in the non-suspended/visible case:\r\n          // when the content is suspended/hidden, the retain/release occurs\r\n          // via the parent Suspense component (see case above).\r\n          if (cache != null) {\r\n            retainCache(cache);\r\n          }\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case SuspenseComponent: {\r\n      if (enableTransitionTracing) {\r\n        // We need to mark this fiber's parents as deleted\r\n        const offscreenFiber: Fiber = (current.child: any);\r\n        const instance: OffscreenInstance = offscreenFiber.stateNode;\r\n        const transitions = instance.transitions;\r\n        if (transitions !== null) {\r\n          const abortReason = {\r\n            reason: 'suspense',\r\n            name: current.memoizedProps.unstable_name || null,\r\n          };\r\n          if (\r\n            current.memoizedState === null ||\r\n            current.memoizedState.dehydrated === null\r\n          ) {\r\n            abortParentMarkerTransitionsForDeletedFiber(\r\n              offscreenFiber,\r\n              abortReason,\r\n              transitions,\r\n              instance,\r\n              true,\r\n            );\r\n\r\n            if (nearestMountedAncestor !== null) {\r\n              abortParentMarkerTransitionsForDeletedFiber(\r\n                nearestMountedAncestor,\r\n                abortReason,\r\n                transitions,\r\n                instance,\r\n                false,\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case CacheComponent: {\r\n      if (enableCache) {\r\n        const cache = current.memoizedState.cache;\r\n        releaseCache(cache);\r\n      }\r\n      break;\r\n    }\r\n    case TracingMarkerComponent: {\r\n      if (enableTransitionTracing) {\r\n        // We need to mark this fiber's parents as deleted\r\n        const instance: TracingMarkerInstance = current.stateNode;\r\n        const transitions = instance.transitions;\r\n        if (transitions !== null) {\r\n          const abortReason = {\r\n            reason: 'marker',\r\n            name: current.memoizedProps.name,\r\n          };\r\n          abortParentMarkerTransitionsForDeletedFiber(\r\n            current,\r\n            abortReason,\r\n            transitions,\r\n            null,\r\n            true,\r\n          );\r\n\r\n          if (nearestMountedAncestor !== null) {\r\n            abortParentMarkerTransitionsForDeletedFiber(\r\n              nearestMountedAncestor,\r\n              abortReason,\r\n              transitions,\r\n              null,\r\n              false,\r\n            );\r\n          }\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nexport {commitPlacement, commitAttachRef, commitDetachRef};\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\r\nimport type {Instance} from './ReactFiberHostConfig';\r\n\r\nimport {HostComponent, HostText} from 'react-reconciler/src/ReactWorkTags';\r\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\r\nimport {\r\n  findFiberRoot,\r\n  getBoundingRect,\r\n  getInstanceFromNode,\r\n  getTextContent,\r\n  isHiddenSubtree,\r\n  matchAccessibilityRole,\r\n  setFocusIfFocusable,\r\n  setupIntersectionObserver,\r\n  supportsTestSelectors,\r\n} from './ReactFiberHostConfig';\r\n\r\nlet COMPONENT_TYPE = 0b000;\r\nlet HAS_PSEUDO_CLASS_TYPE = 0b001;\r\nlet ROLE_TYPE = 0b010;\r\nlet TEST_NAME_TYPE = 0b011;\r\nlet TEXT_TYPE = 0b100;\r\n\r\nif (typeof Symbol === 'function' && Symbol.for) {\r\n  const symbolFor = Symbol.for;\r\n  COMPONENT_TYPE = symbolFor('selector.component');\r\n  HAS_PSEUDO_CLASS_TYPE = symbolFor('selector.has_pseudo_class');\r\n  ROLE_TYPE = symbolFor('selector.role');\r\n  TEST_NAME_TYPE = symbolFor('selector.test_id');\r\n  TEXT_TYPE = symbolFor('selector.text');\r\n}\r\n\r\ntype Type = symbol | number;\r\n\r\ntype ComponentSelector = {\r\n  $$typeof: Type,\r\n  value: React$AbstractComponent<empty, mixed>,\r\n};\r\n\r\ntype HasPseudoClassSelector = {\r\n  $$typeof: Type,\r\n  value: Array<Selector>,\r\n};\r\n\r\ntype RoleSelector = {\r\n  $$typeof: Type,\r\n  value: string,\r\n};\r\n\r\ntype TextSelector = {\r\n  $$typeof: Type,\r\n  value: string,\r\n};\r\n\r\ntype TestNameSelector = {\r\n  $$typeof: Type,\r\n  value: string,\r\n};\r\n\r\ntype Selector =\r\n  | ComponentSelector\r\n  | HasPseudoClassSelector\r\n  | RoleSelector\r\n  | TextSelector\r\n  | TestNameSelector;\r\n\r\nexport function createComponentSelector(\r\n  component: React$AbstractComponent<empty, mixed>,\r\n): ComponentSelector {\r\n  return {\r\n    $$typeof: COMPONENT_TYPE,\r\n    value: component,\r\n  };\r\n}\r\n\r\nexport function createHasPseudoClassSelector(\r\n  selectors: Array<Selector>,\r\n): HasPseudoClassSelector {\r\n  return {\r\n    $$typeof: HAS_PSEUDO_CLASS_TYPE,\r\n    value: selectors,\r\n  };\r\n}\r\n\r\nexport function createRoleSelector(role: string): RoleSelector {\r\n  return {\r\n    $$typeof: ROLE_TYPE,\r\n    value: role,\r\n  };\r\n}\r\n\r\nexport function createTextSelector(text: string): TextSelector {\r\n  return {\r\n    $$typeof: TEXT_TYPE,\r\n    value: text,\r\n  };\r\n}\r\n\r\nexport function createTestNameSelector(id: string): TestNameSelector {\r\n  return {\r\n    $$typeof: TEST_NAME_TYPE,\r\n    value: id,\r\n  };\r\n}\r\n\r\nfunction findFiberRootForHostRoot(hostRoot: Instance): Fiber {\r\n  const maybeFiber = getInstanceFromNode((hostRoot: any));\r\n  if (maybeFiber != null) {\r\n    if (typeof maybeFiber.memoizedProps['data-testname'] !== 'string') {\r\n      throw new Error(\r\n        'Invalid host root specified. Should be either a React container or a node with a testname attribute.',\r\n      );\r\n    }\r\n\r\n    return ((maybeFiber: any): Fiber);\r\n  } else {\r\n    const fiberRoot = findFiberRoot(hostRoot);\r\n\r\n    if (fiberRoot === null) {\r\n      throw new Error(\r\n        'Could not find React container within specified host subtree.',\r\n      );\r\n    }\r\n\r\n    // The Flow type for FiberRoot is a little funky.\r\n    // createFiberRoot() cheats this by treating the root as :any and adding stateNode lazily.\r\n    return ((fiberRoot: any).stateNode.current: Fiber);\r\n  }\r\n}\r\n\r\nfunction matchSelector(fiber: Fiber, selector: Selector): boolean {\r\n  switch (selector.$$typeof) {\r\n    case COMPONENT_TYPE:\r\n      if (fiber.type === selector.value) {\r\n        return true;\r\n      }\r\n      break;\r\n    case HAS_PSEUDO_CLASS_TYPE:\r\n      return hasMatchingPaths(\r\n        fiber,\r\n        ((selector: any): HasPseudoClassSelector).value,\r\n      );\r\n    case ROLE_TYPE:\r\n      if (fiber.tag === HostComponent) {\r\n        const node = fiber.stateNode;\r\n        if (\r\n          matchAccessibilityRole(node, ((selector: any): RoleSelector).value)\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n      break;\r\n    case TEXT_TYPE:\r\n      if (fiber.tag === HostComponent || fiber.tag === HostText) {\r\n        const textContent = getTextContent(fiber);\r\n        if (\r\n          textContent !== null &&\r\n          textContent.indexOf(((selector: any): TextSelector).value) >= 0\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n      break;\r\n    case TEST_NAME_TYPE:\r\n      if (fiber.tag === HostComponent) {\r\n        const dataTestID = fiber.memoizedProps['data-testname'];\r\n        if (\r\n          typeof dataTestID === 'string' &&\r\n          dataTestID.toLowerCase() ===\r\n            ((selector: any): TestNameSelector).value.toLowerCase()\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n      break;\r\n    default:\r\n      throw new Error('Invalid selector type specified.');\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction selectorToString(selector: Selector): string | null {\r\n  switch (selector.$$typeof) {\r\n    case COMPONENT_TYPE:\r\n      const displayName = getComponentNameFromType(selector.value) || 'Unknown';\r\n      return `<${displayName}>`;\r\n    case HAS_PSEUDO_CLASS_TYPE:\r\n      return `:has(${selectorToString(selector) || ''})`;\r\n    case ROLE_TYPE:\r\n      return `[role=\"${((selector: any): RoleSelector).value}\"]`;\r\n    case TEXT_TYPE:\r\n      return `\"${((selector: any): TextSelector).value}\"`;\r\n    case TEST_NAME_TYPE:\r\n      return `[data-testname=\"${((selector: any): TestNameSelector).value}\"]`;\r\n    default:\r\n      throw new Error('Invalid selector type specified.');\r\n  }\r\n}\r\n\r\nfunction findPaths(root: Fiber, selectors: Array<Selector>): Array<Fiber> {\r\n  const matchingFibers: Array<Fiber> = [];\r\n\r\n  const stack = [root, 0];\r\n  let index = 0;\r\n  while (index < stack.length) {\r\n    const fiber = ((stack[index++]: any): Fiber);\r\n    let selectorIndex = ((stack[index++]: any): number);\r\n    let selector = selectors[selectorIndex];\r\n\r\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\r\n      continue;\r\n    } else {\r\n      while (selector != null && matchSelector(fiber, selector)) {\r\n        selectorIndex++;\r\n        selector = selectors[selectorIndex];\r\n      }\r\n    }\r\n\r\n    if (selectorIndex === selectors.length) {\r\n      matchingFibers.push(fiber);\r\n    } else {\r\n      let child = fiber.child;\r\n      while (child !== null) {\r\n        stack.push(child, selectorIndex);\r\n        child = child.sibling;\r\n      }\r\n    }\r\n  }\r\n\r\n  return matchingFibers;\r\n}\r\n\r\n// Same as findPaths but with eager bailout on first match\r\nfunction hasMatchingPaths(root: Fiber, selectors: Array<Selector>): boolean {\r\n  const stack = [root, 0];\r\n  let index = 0;\r\n  while (index < stack.length) {\r\n    const fiber = ((stack[index++]: any): Fiber);\r\n    let selectorIndex = ((stack[index++]: any): number);\r\n    let selector = selectors[selectorIndex];\r\n\r\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\r\n      continue;\r\n    } else {\r\n      while (selector != null && matchSelector(fiber, selector)) {\r\n        selectorIndex++;\r\n        selector = selectors[selectorIndex];\r\n      }\r\n    }\r\n\r\n    if (selectorIndex === selectors.length) {\r\n      return true;\r\n    } else {\r\n      let child = fiber.child;\r\n      while (child !== null) {\r\n        stack.push(child, selectorIndex);\r\n        child = child.sibling;\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport function findAllNodes(\r\n  hostRoot: Instance,\r\n  selectors: Array<Selector>,\r\n): Array<Instance> {\r\n  if (!supportsTestSelectors) {\r\n    throw new Error('Test selector API is not supported by this renderer.');\r\n  }\r\n\r\n  const root = findFiberRootForHostRoot(hostRoot);\r\n  const matchingFibers = findPaths(root, selectors);\r\n\r\n  const instanceRoots: Array<Instance> = [];\r\n\r\n  const stack = Array.from(matchingFibers);\r\n  let index = 0;\r\n  while (index < stack.length) {\r\n    const node = ((stack[index++]: any): Fiber);\r\n    if (node.tag === HostComponent) {\r\n      if (isHiddenSubtree(node)) {\r\n        continue;\r\n      }\r\n      instanceRoots.push(node.stateNode);\r\n    } else {\r\n      let child = node.child;\r\n      while (child !== null) {\r\n        stack.push(child);\r\n        child = child.sibling;\r\n      }\r\n    }\r\n  }\r\n\r\n  return instanceRoots;\r\n}\r\n\r\nexport function getFindAllNodesFailureDescription(\r\n  hostRoot: Instance,\r\n  selectors: Array<Selector>,\r\n): string | null {\r\n  if (!supportsTestSelectors) {\r\n    throw new Error('Test selector API is not supported by this renderer.');\r\n  }\r\n\r\n  const root = findFiberRootForHostRoot(hostRoot);\r\n\r\n  let maxSelectorIndex: number = 0;\r\n  const matchedNames = [];\r\n\r\n  // The logic of this loop should be kept in sync with findPaths()\r\n  const stack = [root, 0];\r\n  let index = 0;\r\n  while (index < stack.length) {\r\n    const fiber = ((stack[index++]: any): Fiber);\r\n    let selectorIndex = ((stack[index++]: any): number);\r\n    const selector = selectors[selectorIndex];\r\n\r\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\r\n      continue;\r\n    } else if (matchSelector(fiber, selector)) {\r\n      matchedNames.push(selectorToString(selector));\r\n      selectorIndex++;\r\n\r\n      if (selectorIndex > maxSelectorIndex) {\r\n        maxSelectorIndex = selectorIndex;\r\n      }\r\n    }\r\n\r\n    if (selectorIndex < selectors.length) {\r\n      let child = fiber.child;\r\n      while (child !== null) {\r\n        stack.push(child, selectorIndex);\r\n        child = child.sibling;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (maxSelectorIndex < selectors.length) {\r\n    const unmatchedNames = [];\r\n    for (let i = maxSelectorIndex; i < selectors.length; i++) {\r\n      unmatchedNames.push(selectorToString(selectors[i]));\r\n    }\r\n\r\n    return (\r\n      'findAllNodes was able to match part of the selector:\\n' +\r\n      `  ${matchedNames.join(' > ')}\\n\\n` +\r\n      'No matching component was found for:\\n' +\r\n      `  ${unmatchedNames.join(' > ')}`\r\n    );\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport type BoundingRect = {\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number,\r\n};\r\n\r\nexport function findBoundingRects(\r\n  hostRoot: Instance,\r\n  selectors: Array<Selector>,\r\n): Array<BoundingRect> {\r\n  if (!supportsTestSelectors) {\r\n    throw new Error('Test selector API is not supported by this renderer.');\r\n  }\r\n\r\n  const instanceRoots = findAllNodes(hostRoot, selectors);\r\n\r\n  const boundingRects: Array<BoundingRect> = [];\r\n  for (let i = 0; i < instanceRoots.length; i++) {\r\n    boundingRects.push(getBoundingRect(instanceRoots[i]));\r\n  }\r\n\r\n  for (let i = boundingRects.length - 1; i > 0; i--) {\r\n    const targetRect = boundingRects[i];\r\n    const targetLeft = targetRect.x;\r\n    const targetRight = targetLeft + targetRect.width;\r\n    const targetTop = targetRect.y;\r\n    const targetBottom = targetTop + targetRect.height;\r\n\r\n    for (let j = i - 1; j >= 0; j--) {\r\n      if (i !== j) {\r\n        const otherRect = boundingRects[j];\r\n        const otherLeft = otherRect.x;\r\n        const otherRight = otherLeft + otherRect.width;\r\n        const otherTop = otherRect.y;\r\n        const otherBottom = otherTop + otherRect.height;\r\n\r\n        // Merging all rects to the minimums set would be complicated,\r\n        // but we can handle the most common cases:\r\n        // 1. completely overlapping rects\r\n        // 2. adjacent rects that are the same width or height (e.g. items in a list)\r\n        //\r\n        // Even given the above constraints,\r\n        // we still won't end up with the fewest possible rects without doing multiple passes,\r\n        // but it's good enough for this purpose.\r\n\r\n        if (\r\n          targetLeft >= otherLeft &&\r\n          targetTop >= otherTop &&\r\n          targetRight <= otherRight &&\r\n          targetBottom <= otherBottom\r\n        ) {\r\n          // Complete overlapping rects; remove the inner one.\r\n          boundingRects.splice(i, 1);\r\n          break;\r\n        } else if (\r\n          targetLeft === otherLeft &&\r\n          targetRect.width === otherRect.width &&\r\n          !(otherBottom < targetTop) &&\r\n          !(otherTop > targetBottom)\r\n        ) {\r\n          // Adjacent vertical rects; merge them.\r\n          if (otherTop > targetTop) {\r\n            otherRect.height += otherTop - targetTop;\r\n            otherRect.y = targetTop;\r\n          }\r\n          if (otherBottom < targetBottom) {\r\n            otherRect.height = targetBottom - otherTop;\r\n          }\r\n\r\n          boundingRects.splice(i, 1);\r\n          break;\r\n        } else if (\r\n          targetTop === otherTop &&\r\n          targetRect.height === otherRect.height &&\r\n          !(otherRight < targetLeft) &&\r\n          !(otherLeft > targetRight)\r\n        ) {\r\n          // Adjacent horizontal rects; merge them.\r\n          if (otherLeft > targetLeft) {\r\n            otherRect.width += otherLeft - targetLeft;\r\n            otherRect.x = targetLeft;\r\n          }\r\n          if (otherRight < targetRight) {\r\n            otherRect.width = targetRight - otherLeft;\r\n          }\r\n\r\n          boundingRects.splice(i, 1);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return boundingRects;\r\n}\r\n\r\nexport function focusWithin(\r\n  hostRoot: Instance,\r\n  selectors: Array<Selector>,\r\n): boolean {\r\n  if (!supportsTestSelectors) {\r\n    throw new Error('Test selector API is not supported by this renderer.');\r\n  }\r\n\r\n  const root = findFiberRootForHostRoot(hostRoot);\r\n  const matchingFibers = findPaths(root, selectors);\r\n\r\n  const stack = Array.from(matchingFibers);\r\n  let index = 0;\r\n  while (index < stack.length) {\r\n    const fiber = ((stack[index++]: any): Fiber);\r\n    if (isHiddenSubtree(fiber)) {\r\n      continue;\r\n    }\r\n    if (fiber.tag === HostComponent) {\r\n      const node = fiber.stateNode;\r\n      if (setFocusIfFocusable(node)) {\r\n        return true;\r\n      }\r\n    }\r\n    let child = fiber.child;\r\n    while (child !== null) {\r\n      stack.push(child);\r\n      child = child.sibling;\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nconst commitHooks: Array<Function> = [];\r\n\r\nexport function onCommitRoot(): void {\r\n  if (supportsTestSelectors) {\r\n    commitHooks.forEach(commitHook => commitHook());\r\n  }\r\n}\r\n\r\nexport type IntersectionObserverOptions = Object;\r\n\r\nexport type ObserveVisibleRectsCallback = (\r\n  intersections: Array<{ratio: number, rect: BoundingRect}>,\r\n) => void;\r\n\r\nexport function observeVisibleRects(\r\n  hostRoot: Instance,\r\n  selectors: Array<Selector>,\r\n  callback: (intersections: Array<{ratio: number, rect: BoundingRect}>) => void,\r\n  options?: IntersectionObserverOptions,\r\n): {disconnect: () => void} {\r\n  if (!supportsTestSelectors) {\r\n    throw new Error('Test selector API is not supported by this renderer.');\r\n  }\r\n\r\n  const instanceRoots = findAllNodes(hostRoot, selectors);\r\n\r\n  const {disconnect, observe, unobserve} = setupIntersectionObserver(\r\n    instanceRoots,\r\n    callback,\r\n    options,\r\n  );\r\n\r\n  // When React mutates the host environment, we may need to change what we're listening to.\r\n  const commitHook = () => {\r\n    const nextInstanceRoots = findAllNodes(hostRoot, selectors);\r\n\r\n    instanceRoots.forEach(target => {\r\n      if (nextInstanceRoots.indexOf(target) < 0) {\r\n        unobserve(target);\r\n      }\r\n    });\r\n\r\n    nextInstanceRoots.forEach(target => {\r\n      if (instanceRoots.indexOf(target) < 0) {\r\n        observe(target);\r\n      }\r\n    });\r\n  };\r\n\r\n  commitHooks.push(commitHook);\r\n\r\n  return {\r\n    disconnect: () => {\r\n      // Stop listening for React mutations:\r\n      const index = commitHooks.indexOf(commitHook);\r\n      if (index >= 0) {\r\n        commitHooks.splice(index, 1);\r\n      }\r\n\r\n      // Disconnect the host observer:\r\n      disconnect();\r\n    },\r\n  };\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {Fiber} from './ReactFiber.old';\r\n\r\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\r\n\r\nimport {warnsIfNotActing} from './ReactFiberHostConfig';\r\n\r\nconst {ReactCurrentActQueue} = ReactSharedInternals;\r\n\r\nexport function isLegacyActEnvironment(fiber: Fiber): boolean {\r\n  if (__DEV__) {\r\n    // Legacy mode. We preserve the behavior of React 17's act. It assumes an\r\n    // act environment whenever `jest` is defined, but you can still turn off\r\n    // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly\r\n    // to false.\r\n\r\n    const isReactActEnvironmentGlobal =\r\n      // $FlowFixMe – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\r\n      typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined'\r\n        ? IS_REACT_ACT_ENVIRONMENT\r\n        : undefined;\r\n\r\n    // $FlowFixMe - Flow doesn't know about jest\r\n    const jestIsDefined = typeof jest !== 'undefined';\r\n    return (\r\n      warnsIfNotActing && jestIsDefined && isReactActEnvironmentGlobal !== false\r\n    );\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function isConcurrentActEnvironment() {\r\n  if (__DEV__) {\r\n    const isReactActEnvironmentGlobal =\r\n      // $FlowFixMe – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\r\n      typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined'\r\n        ? IS_REACT_ACT_ENVIRONMENT\r\n        : undefined;\r\n\r\n    if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {\r\n      // TODO: Include link to relevant documentation page.\r\n      console.error(\r\n        'The current testing environment is not configured to support ' +\r\n          'act(...)',\r\n      );\r\n    }\r\n    return isReactActEnvironmentGlobal;\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport {REACT_STRICT_MODE_TYPE} from 'shared/ReactSymbols';\r\n\r\nimport type {Wakeable} from 'shared/ReactTypes';\r\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\r\nimport type {Lanes, Lane} from './ReactFiberLane.old';\r\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\r\nimport type {FunctionComponentUpdateQueue} from './ReactFiberHooks.old';\r\nimport type {EventPriority} from './ReactEventPriorities.old';\r\nimport type {\r\n  PendingTransitionCallbacks,\r\n  PendingBoundaries,\r\n  Transition,\r\n  TransitionAbort,\r\n} from './ReactFiberTracingMarkerComponent.old';\r\nimport type {OffscreenInstance} from './ReactFiberOffscreenComponent';\r\n\r\nimport {\r\n  warnAboutDeprecatedLifecycles,\r\n  replayFailedUnitOfWorkWithInvokeGuardedCallback,\r\n  enableCreateEventHandleAPI,\r\n  enableProfilerTimer,\r\n  enableProfilerCommitHooks,\r\n  enableProfilerNestedUpdatePhase,\r\n  enableProfilerNestedUpdateScheduledHook,\r\n  deferRenderPhaseUpdateToNextBatch,\r\n  enableDebugTracing,\r\n  enableSchedulingProfiler,\r\n  disableSchedulerTimeoutInWorkLoop,\r\n  enableStrictEffects,\r\n  skipUnmountedBoundaries,\r\n  enableUpdaterTracking,\r\n  enableCache,\r\n  enableTransitionTracing,\r\n} from 'shared/ReactFeatureFlags';\r\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\r\nimport is from 'shared/objectIs';\r\n\r\nimport {\r\n  // Aliased because `act` will override and push to an internal queue\r\n  scheduleCallback as Scheduler_scheduleCallback,\r\n  cancelCallback as Scheduler_cancelCallback,\r\n  shouldYield,\r\n  requestPaint,\r\n  now,\r\n  ImmediatePriority as ImmediateSchedulerPriority,\r\n  UserBlockingPriority as UserBlockingSchedulerPriority,\r\n  NormalPriority as NormalSchedulerPriority,\r\n  IdlePriority as IdleSchedulerPriority,\r\n} from './Scheduler';\r\nimport {\r\n  flushSyncCallbacks,\r\n  flushSyncCallbacksOnlyInLegacyMode,\r\n  scheduleSyncCallback,\r\n  scheduleLegacySyncCallback,\r\n} from './ReactFiberSyncTaskQueue.old';\r\nimport {\r\n  logCommitStarted,\r\n  logCommitStopped,\r\n  logLayoutEffectsStarted,\r\n  logLayoutEffectsStopped,\r\n  logPassiveEffectsStarted,\r\n  logPassiveEffectsStopped,\r\n  logRenderStarted,\r\n  logRenderStopped,\r\n} from './DebugTracing';\r\n\r\nimport {\r\n  resetAfterCommit,\r\n  scheduleTimeout,\r\n  cancelTimeout,\r\n  noTimeout,\r\n  afterActiveInstanceBlur,\r\n  getCurrentEventPriority,\r\n  supportsMicrotasks,\r\n  errorHydratingContainer,\r\n  scheduleMicrotask,\r\n} from './ReactFiberHostConfig';\r\n\r\nimport {\r\n  createWorkInProgress,\r\n  assignFiberPropertiesInDEV,\r\n  resetWorkInProgress,\r\n} from './ReactFiber.old';\r\nimport {isRootDehydrated} from './ReactFiberShellHydration';\r\nimport {didSuspendOrErrorWhileHydratingDEV} from './ReactFiberHydrationContext.old';\r\nimport {\r\n  NoMode,\r\n  ProfileMode,\r\n  ConcurrentMode,\r\n  StrictLegacyMode,\r\n  StrictEffectsMode,\r\n} from './ReactTypeOfMode';\r\nimport {\r\n  HostRoot,\r\n  IndeterminateComponent,\r\n  ClassComponent,\r\n  SuspenseComponent,\r\n  SuspenseListComponent,\r\n  OffscreenComponent,\r\n  FunctionComponent,\r\n  ForwardRef,\r\n  MemoComponent,\r\n  SimpleMemoComponent,\r\n  Profiler,\r\n} from './ReactWorkTags';\r\nimport {ConcurrentRoot, LegacyRoot} from './ReactRootTags';\r\nimport {\r\n  NoFlags,\r\n  Incomplete,\r\n  StoreConsistency,\r\n  HostEffectMask,\r\n  ForceClientRender,\r\n  BeforeMutationMask,\r\n  MutationMask,\r\n  LayoutMask,\r\n  PassiveMask,\r\n  PlacementDEV,\r\n  Visibility,\r\n} from './ReactFiberFlags';\r\nimport {\r\n  NoLanes,\r\n  NoLane,\r\n  SyncLane,\r\n  NoTimestamp,\r\n  claimNextTransitionLane,\r\n  claimNextRetryLane,\r\n  includesSomeLane,\r\n  isSubsetOfLanes,\r\n  mergeLanes,\r\n  removeLanes,\r\n  pickArbitraryLane,\r\n  includesNonIdleWork,\r\n  includesOnlyRetries,\r\n  includesOnlyTransitions,\r\n  includesBlockingLane,\r\n  includesExpiredLane,\r\n  getNextLanes,\r\n  markStarvedLanesAsExpired,\r\n  getLanesToRetrySynchronouslyOnError,\r\n  getMostRecentEventTime,\r\n  markRootUpdated,\r\n  markRootSuspended as markRootSuspended_dontCallThisOneDirectly,\r\n  markRootPinged,\r\n  markRootEntangled,\r\n  markRootFinished,\r\n  getHighestPriorityLane,\r\n  addFiberToLanesMap,\r\n  movePendingFibersToMemoized,\r\n  addTransitionToLanesMap,\r\n  getTransitionsForLanes,\r\n} from './ReactFiberLane.old';\r\nimport {\r\n  DiscreteEventPriority,\r\n  ContinuousEventPriority,\r\n  DefaultEventPriority,\r\n  IdleEventPriority,\r\n  getCurrentUpdatePriority,\r\n  setCurrentUpdatePriority,\r\n  lowerEventPriority,\r\n  lanesToEventPriority,\r\n} from './ReactEventPriorities.old';\r\nimport {requestCurrentTransition, NoTransition} from './ReactFiberTransition';\r\nimport {beginWork as originalBeginWork} from './ReactFiberBeginWork.old';\r\nimport {completeWork} from './ReactFiberCompleteWork.old';\r\nimport {unwindWork, unwindInterruptedWork} from './ReactFiberUnwindWork.old';\r\nimport {\r\n  throwException,\r\n  createRootErrorUpdate,\r\n  createClassErrorUpdate,\r\n} from './ReactFiberThrow.old';\r\nimport {\r\n  commitBeforeMutationEffects,\r\n  commitLayoutEffects,\r\n  commitMutationEffects,\r\n  commitPassiveEffectDurations,\r\n  commitPassiveMountEffects,\r\n  commitPassiveUnmountEffects,\r\n  disappearLayoutEffects,\r\n  reconnectPassiveEffects,\r\n  reappearLayoutEffects,\r\n  disconnectPassiveEffect,\r\n  reportUncaughtErrorInDEV,\r\n} from './ReactFiberCommitWork.old';\r\nimport {enqueueUpdate} from './ReactFiberClassUpdateQueue.old';\r\nimport {resetContextDependencies} from './ReactFiberNewContext.old';\r\nimport {\r\n  resetHooksAfterThrow,\r\n  ContextOnlyDispatcher,\r\n  getIsUpdatingOpaqueValueInRenderPhaseInDEV,\r\n} from './ReactFiberHooks.old';\r\nimport {\r\n  createCapturedValueAtFiber,\r\n  type CapturedValue,\r\n} from './ReactCapturedValue';\r\nimport {\r\n  enqueueConcurrentRenderForLane,\r\n  finishQueueingConcurrentUpdates,\r\n  getConcurrentlyUpdatedLanes,\r\n} from './ReactFiberConcurrentUpdates.old';\r\n\r\nimport {\r\n  markNestedUpdateScheduled,\r\n  recordCommitTime,\r\n  resetNestedUpdateFlag,\r\n  startProfilerTimer,\r\n  stopProfilerTimerIfRunningAndRecordDelta,\r\n  syncNestedUpdateFlag,\r\n} from './ReactProfilerTimer.old';\r\n\r\n// DEV stuff\r\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\r\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\r\nimport {\r\n  isRendering as ReactCurrentDebugFiberIsRenderingInDEV,\r\n  current as ReactCurrentFiberCurrent,\r\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\r\n  setCurrentFiber as setCurrentDebugFiberInDEV,\r\n} from './ReactCurrentFiber';\r\nimport {\r\n  invokeGuardedCallback,\r\n  hasCaughtError,\r\n  clearCaughtError,\r\n} from 'shared/ReactErrorUtils';\r\nimport {\r\n  isDevToolsPresent,\r\n  markCommitStarted,\r\n  markCommitStopped,\r\n  markComponentRenderStopped,\r\n  markComponentSuspended,\r\n  markComponentErrored,\r\n  markLayoutEffectsStarted,\r\n  markLayoutEffectsStopped,\r\n  markPassiveEffectsStarted,\r\n  markPassiveEffectsStopped,\r\n  markRenderStarted,\r\n  markRenderYielded,\r\n  markRenderStopped,\r\n  onCommitRoot as onCommitRootDevTools,\r\n  onPostCommitRoot as onPostCommitRootDevTools,\r\n} from './ReactFiberDevToolsHook.old';\r\nimport {onCommitRoot as onCommitRootTestSelector} from './ReactTestSelectors';\r\nimport {releaseCache} from './ReactFiberCacheComponent.old';\r\nimport {\r\n  isLegacyActEnvironment,\r\n  isConcurrentActEnvironment,\r\n} from './ReactFiberAct.old';\r\nimport {processTransitionCallbacks} from './ReactFiberTracingMarkerComponent.old';\r\nimport {\r\n  resetWakeableStateAfterEachAttempt,\r\n  resetThenableStateOnCompletion,\r\n  trackSuspendedWakeable,\r\n  suspendedThenableDidResolve,\r\n  isTrackingSuspendedThenable,\r\n} from './ReactFiberWakeable.old';\r\nimport {schedulePostPaintCallback} from './ReactPostPaintCallback';\r\n\r\nconst ceil = Math.ceil;\r\n\r\nconst PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\r\n\r\nconst {\r\n  ReactCurrentDispatcher,\r\n  ReactCurrentOwner,\r\n  ReactCurrentBatchConfig,\r\n  ReactCurrentActQueue,\r\n} = ReactSharedInternals;\r\n\r\ntype ExecutionContext = number;\r\n\r\nexport const NoContext = /*             */ 0b000;\r\nconst BatchedContext = /*               */ 0b001;\r\nconst RenderContext = /*                */ 0b010;\r\nexport const CommitContext = /*         */ 0b100;\r\n\r\ntype RootExitStatus = 0 | 1 | 2 | 3 | 4 | 5 | 6;\r\nconst RootInProgress = 0;\r\nconst RootFatalErrored = 1;\r\nconst RootErrored = 2;\r\nconst RootSuspended = 3;\r\nconst RootSuspendedWithDelay = 4;\r\nconst RootCompleted = 5;\r\nconst RootDidNotComplete = 6;\r\n\r\n// Describes where we are in the React execution stack\r\nlet executionContext: ExecutionContext = NoContext;\r\n// The root we're working on\r\nlet workInProgressRoot: FiberRoot | null = null;\r\n// The fiber we're working on\r\nlet workInProgress: Fiber | null = null;\r\n// The lanes we're rendering\r\nlet workInProgressRootRenderLanes: Lanes = NoLanes;\r\n\r\n// When this is true, the work-in-progress fiber just suspended (or errored) and\r\n// we've yet to unwind the stack. In some cases, we may yield to the main thread\r\n// after this happens. If the fiber is pinged before we resume, we can retry\r\n// immediately instead of unwinding the stack.\r\nlet workInProgressIsSuspended: boolean = false;\r\nlet workInProgressThrownValue: mixed = null;\r\n\r\n// Whether a ping listener was attached during this render. This is slightly\r\n// different that whether something suspended, because we don't add multiple\r\n// listeners to a promise we've already seen (per root and lane).\r\nlet workInProgressRootDidAttachPingListener: boolean = false;\r\n\r\n// A contextual version of workInProgressRootRenderLanes. It is a superset of\r\n// the lanes that we started working on at the root. When we enter a subtree\r\n// that is currently hidden, we add the lanes that would have committed if\r\n// the hidden tree hadn't been deferred. This is modified by the\r\n// HiddenContext module.\r\n//\r\n// Most things in the work loop should deal with workInProgressRootRenderLanes.\r\n// Most things in begin/complete phases should deal with renderLanes.\r\nexport let renderLanes: Lanes = NoLanes;\r\n\r\n// Whether to root completed, errored, suspended, etc.\r\nlet workInProgressRootExitStatus: RootExitStatus = RootInProgress;\r\n// A fatal error, if one is thrown\r\nlet workInProgressRootFatalError: mixed = null;\r\n// The work left over by components that were visited during this render. Only\r\n// includes unprocessed updates, not work in bailed out children.\r\nlet workInProgressRootSkippedLanes: Lanes = NoLanes;\r\n// Lanes that were updated (in an interleaved event) during this render.\r\nlet workInProgressRootInterleavedUpdatedLanes: Lanes = NoLanes;\r\n// Lanes that were updated during the render phase (*not* an interleaved event).\r\nlet workInProgressRootRenderPhaseUpdatedLanes: Lanes = NoLanes;\r\n// Lanes that were pinged (in an interleaved event) during this render.\r\nlet workInProgressRootPingedLanes: Lanes = NoLanes;\r\n// Errors that are thrown during the render phase.\r\nlet workInProgressRootConcurrentErrors: Array<\r\n  CapturedValue<mixed>,\r\n> | null = null;\r\n// These are errors that we recovered from without surfacing them to the UI.\r\n// We will log them once the tree commits.\r\nlet workInProgressRootRecoverableErrors: Array<\r\n  CapturedValue<mixed>,\r\n> | null = null;\r\n\r\n// The most recent time we committed a fallback. This lets us ensure a train\r\n// model where we don't commit new loading states in too quick succession.\r\nlet globalMostRecentFallbackTime: number = 0;\r\nconst FALLBACK_THROTTLE_MS: number = 500;\r\n\r\n// The absolute time for when we should start giving up on rendering\r\n// more and prefer CPU suspense heuristics instead.\r\nlet workInProgressRootRenderTargetTime: number = Infinity;\r\n// How long a render is supposed to take before we start following CPU\r\n// suspense heuristics and opt out of rendering more content.\r\nconst RENDER_TIMEOUT_MS = 500;\r\n\r\nlet workInProgressTransitions: Array<Transition> | null = null;\r\nexport function getWorkInProgressTransitions(): null | Array<Transition> {\r\n  return workInProgressTransitions;\r\n}\r\n\r\nlet currentPendingTransitionCallbacks: PendingTransitionCallbacks | null = null;\r\nlet currentEndTime: number | null = null;\r\n\r\nexport function addTransitionStartCallbackToPendingTransition(\r\n  transition: Transition,\r\n) {\r\n  if (enableTransitionTracing) {\r\n    if (currentPendingTransitionCallbacks === null) {\r\n      currentPendingTransitionCallbacks = {\r\n        transitionStart: [],\r\n        transitionProgress: null,\r\n        transitionComplete: null,\r\n        markerProgress: null,\r\n        markerIncomplete: null,\r\n        markerComplete: null,\r\n      };\r\n    }\r\n\r\n    if (currentPendingTransitionCallbacks.transitionStart === null) {\r\n      currentPendingTransitionCallbacks.transitionStart = [];\r\n    }\r\n\r\n    currentPendingTransitionCallbacks.transitionStart.push(transition);\r\n  }\r\n}\r\n\r\nexport function addMarkerProgressCallbackToPendingTransition(\r\n  markerName: string,\r\n  transitions: Set<Transition>,\r\n  pendingBoundaries: PendingBoundaries,\r\n) {\r\n  if (enableTransitionTracing) {\r\n    if (currentPendingTransitionCallbacks === null) {\r\n      currentPendingTransitionCallbacks = {\r\n        transitionStart: null,\r\n        transitionProgress: null,\r\n        transitionComplete: null,\r\n        markerProgress: new Map(),\r\n        markerIncomplete: null,\r\n        markerComplete: null,\r\n      };\r\n    }\r\n\r\n    if (currentPendingTransitionCallbacks.markerProgress === null) {\r\n      currentPendingTransitionCallbacks.markerProgress = new Map();\r\n    }\r\n\r\n    currentPendingTransitionCallbacks.markerProgress.set(markerName, {\r\n      pendingBoundaries,\r\n      transitions,\r\n    });\r\n  }\r\n}\r\n\r\nexport function addMarkerIncompleteCallbackToPendingTransition(\r\n  markerName: string,\r\n  transitions: Set<Transition>,\r\n  aborts: Array<TransitionAbort>,\r\n) {\r\n  if (enableTransitionTracing) {\r\n    if (currentPendingTransitionCallbacks === null) {\r\n      currentPendingTransitionCallbacks = {\r\n        transitionStart: null,\r\n        transitionProgress: null,\r\n        transitionComplete: null,\r\n        markerProgress: null,\r\n        markerIncomplete: new Map(),\r\n        markerComplete: null,\r\n      };\r\n    }\r\n\r\n    if (currentPendingTransitionCallbacks.markerIncomplete === null) {\r\n      currentPendingTransitionCallbacks.markerIncomplete = new Map();\r\n    }\r\n\r\n    currentPendingTransitionCallbacks.markerIncomplete.set(markerName, {\r\n      transitions,\r\n      aborts,\r\n    });\r\n  }\r\n}\r\n\r\nexport function addMarkerCompleteCallbackToPendingTransition(\r\n  markerName: string,\r\n  transitions: Set<Transition>,\r\n) {\r\n  if (enableTransitionTracing) {\r\n    if (currentPendingTransitionCallbacks === null) {\r\n      currentPendingTransitionCallbacks = {\r\n        transitionStart: null,\r\n        transitionProgress: null,\r\n        transitionComplete: null,\r\n        markerProgress: null,\r\n        markerIncomplete: null,\r\n        markerComplete: new Map(),\r\n      };\r\n    }\r\n\r\n    if (currentPendingTransitionCallbacks.markerComplete === null) {\r\n      currentPendingTransitionCallbacks.markerComplete = new Map();\r\n    }\r\n\r\n    currentPendingTransitionCallbacks.markerComplete.set(\r\n      markerName,\r\n      transitions,\r\n    );\r\n  }\r\n}\r\n\r\nexport function addTransitionProgressCallbackToPendingTransition(\r\n  transition: Transition,\r\n  boundaries: PendingBoundaries,\r\n) {\r\n  if (enableTransitionTracing) {\r\n    if (currentPendingTransitionCallbacks === null) {\r\n      currentPendingTransitionCallbacks = {\r\n        transitionStart: null,\r\n        transitionProgress: new Map(),\r\n        transitionComplete: null,\r\n        markerProgress: null,\r\n        markerIncomplete: null,\r\n        markerComplete: null,\r\n      };\r\n    }\r\n\r\n    if (currentPendingTransitionCallbacks.transitionProgress === null) {\r\n      currentPendingTransitionCallbacks.transitionProgress = new Map();\r\n    }\r\n\r\n    currentPendingTransitionCallbacks.transitionProgress.set(\r\n      transition,\r\n      boundaries,\r\n    );\r\n  }\r\n}\r\n\r\nexport function addTransitionCompleteCallbackToPendingTransition(\r\n  transition: Transition,\r\n) {\r\n  if (enableTransitionTracing) {\r\n    if (currentPendingTransitionCallbacks === null) {\r\n      currentPendingTransitionCallbacks = {\r\n        transitionStart: null,\r\n        transitionProgress: null,\r\n        transitionComplete: [],\r\n        markerProgress: null,\r\n        markerIncomplete: null,\r\n        markerComplete: null,\r\n      };\r\n    }\r\n\r\n    if (currentPendingTransitionCallbacks.transitionComplete === null) {\r\n      currentPendingTransitionCallbacks.transitionComplete = [];\r\n    }\r\n\r\n    currentPendingTransitionCallbacks.transitionComplete.push(transition);\r\n  }\r\n}\r\n\r\nfunction resetRenderTimer() {\r\n  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;\r\n}\r\n\r\nexport function getRenderTargetTime(): number {\r\n  return workInProgressRootRenderTargetTime;\r\n}\r\n\r\nlet hasUncaughtError = false;\r\nlet firstUncaughtError = null;\r\nlet legacyErrorBoundariesThatAlreadyFailed: Set<mixed> | null = null;\r\n\r\n// Only used when enableProfilerNestedUpdateScheduledHook is true;\r\n// to track which root is currently committing layout effects.\r\nlet rootCommittingMutationOrLayoutEffects: FiberRoot | null = null;\r\n\r\nlet rootDoesHavePassiveEffects: boolean = false;\r\nlet rootWithPendingPassiveEffects: FiberRoot | null = null;\r\nlet pendingPassiveEffectsLanes: Lanes = NoLanes;\r\nlet pendingPassiveProfilerEffects: Array<Fiber> = [];\r\nlet pendingPassiveEffectsRemainingLanes: Lanes = NoLanes;\r\nlet pendingPassiveTransitions: Array<Transition> | null = null;\r\n\r\n// Use these to prevent an infinite loop of nested updates\r\nconst NESTED_UPDATE_LIMIT = 50;\r\nlet nestedUpdateCount: number = 0;\r\nlet rootWithNestedUpdates: FiberRoot | null = null;\r\nlet isFlushingPassiveEffects = false;\r\nlet didScheduleUpdateDuringPassiveEffects = false;\r\n\r\nconst NESTED_PASSIVE_UPDATE_LIMIT = 50;\r\nlet nestedPassiveUpdateCount: number = 0;\r\nlet rootWithPassiveNestedUpdates: FiberRoot | null = null;\r\n\r\n// If two updates are scheduled within the same event, we should treat their\r\n// event times as simultaneous, even if the actual clock time has advanced\r\n// between the first and second call.\r\nlet currentEventTime: number = NoTimestamp;\r\nlet currentEventTransitionLane: Lanes = NoLanes;\r\n\r\nlet isRunningInsertionEffect = false;\r\n\r\nexport function getWorkInProgressRoot(): FiberRoot | null {\r\n  return workInProgressRoot;\r\n}\r\n\r\nexport function getWorkInProgressRootRenderLanes(): Lanes {\r\n  return workInProgressRootRenderLanes;\r\n}\r\n\r\nexport function requestEventTime() {\r\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\r\n    // We're inside React, so it's fine to read the actual time.\r\n    return now();\r\n  }\r\n  // We're not inside React, so we may be in the middle of a browser event.\r\n  if (currentEventTime !== NoTimestamp) {\r\n    // Use the same start time for all updates until we enter React again.\r\n    return currentEventTime;\r\n  }\r\n  // This is the first update since React yielded. Compute a new start time.\r\n  currentEventTime = now();\r\n  return currentEventTime;\r\n}\r\n\r\nexport function getCurrentTime() {\r\n  return now();\r\n}\r\n\r\nexport function requestUpdateLane(fiber: Fiber): Lane {\r\n  // Special cases\r\n  const mode = fiber.mode;\r\n  if ((mode & ConcurrentMode) === NoMode) {\r\n    return (SyncLane: Lane);\r\n  } else if (\r\n    !deferRenderPhaseUpdateToNextBatch &&\r\n    (executionContext & RenderContext) !== NoContext &&\r\n    workInProgressRootRenderLanes !== NoLanes\r\n  ) {\r\n    // This is a render phase update. These are not officially supported. The\r\n    // old behavior is to give this the same \"thread\" (lanes) as\r\n    // whatever is currently rendering. So if you call `setState` on a component\r\n    // that happens later in the same render, it will flush. Ideally, we want to\r\n    // remove the special case and treat them as if they came from an\r\n    // interleaved event. Regardless, this pattern is not officially supported.\r\n    // This behavior is only a fallback. The flag only exists until we can roll\r\n    // out the setState warning, since existing code might accidentally rely on\r\n    // the current behavior.\r\n    return pickArbitraryLane(workInProgressRootRenderLanes);\r\n  }\r\n\r\n  const isTransition = requestCurrentTransition() !== NoTransition;\r\n  if (isTransition) {\r\n    if (__DEV__ && ReactCurrentBatchConfig.transition !== null) {\r\n      const transition = ReactCurrentBatchConfig.transition;\r\n      if (!transition._updatedFibers) {\r\n        transition._updatedFibers = new Set();\r\n      }\r\n\r\n      transition._updatedFibers.add(fiber);\r\n    }\r\n    // The algorithm for assigning an update to a lane should be stable for all\r\n    // updates at the same priority within the same event. To do this, the\r\n    // inputs to the algorithm must be the same.\r\n    //\r\n    // The trick we use is to cache the first of each of these inputs within an\r\n    // event. Then reset the cached values once we can be sure the event is\r\n    // over. Our heuristic for that is whenever we enter a concurrent work loop.\r\n    if (currentEventTransitionLane === NoLane) {\r\n      // All transitions within the same event are assigned the same lane.\r\n      currentEventTransitionLane = claimNextTransitionLane();\r\n    }\r\n    return currentEventTransitionLane;\r\n  }\r\n\r\n  // Updates originating inside certain React methods, like flushSync, have\r\n  // their priority set by tracking it with a context variable.\r\n  //\r\n  // The opaque type returned by the host config is internally a lane, so we can\r\n  // use that directly.\r\n  // TODO: Move this type conversion to the event priority module.\r\n  const updateLane: Lane = (getCurrentUpdatePriority(): any);\r\n  if (updateLane !== NoLane) {\r\n    return updateLane;\r\n  }\r\n\r\n  // This update originated outside React. Ask the host environment for an\r\n  // appropriate priority, based on the type of event.\r\n  //\r\n  // The opaque type returned by the host config is internally a lane, so we can\r\n  // use that directly.\r\n  // TODO: Move this type conversion to the event priority module.\r\n  const eventLane: Lane = (getCurrentEventPriority(): any);\r\n  return eventLane;\r\n}\r\n\r\nfunction requestRetryLane(fiber: Fiber) {\r\n  // This is a fork of `requestUpdateLane` designed specifically for Suspense\r\n  // \"retries\" — a special update that attempts to flip a Suspense boundary\r\n  // from its placeholder state to its primary/resolved state.\r\n\r\n  // Special cases\r\n  const mode = fiber.mode;\r\n  if ((mode & ConcurrentMode) === NoMode) {\r\n    return (SyncLane: Lane);\r\n  }\r\n\r\n  return claimNextRetryLane();\r\n}\r\n\r\nexport function scheduleUpdateOnFiber(\r\n  root: FiberRoot,\r\n  fiber: Fiber,\r\n  lane: Lane,\r\n  eventTime: number,\r\n) {\r\n  if (__DEV__) {\r\n    if (isRunningInsertionEffect) {\r\n      console.error('useInsertionEffect must not schedule updates.');\r\n    }\r\n  }\r\n\r\n  if (__DEV__) {\r\n    if (isFlushingPassiveEffects) {\r\n      didScheduleUpdateDuringPassiveEffects = true;\r\n    }\r\n  }\r\n\r\n  // Mark that the root has a pending update.\r\n  markRootUpdated(root, lane, eventTime);\r\n\r\n  if (\r\n    (executionContext & RenderContext) !== NoLanes &&\r\n    root === workInProgressRoot\r\n  ) {\r\n    // This update was dispatched during the render phase. This is a mistake\r\n    // if the update originates from user space (with the exception of local\r\n    // hook updates, which are handled differently and don't reach this\r\n    // function), but there are some internal React features that use this as\r\n    // an implementation detail, like selective hydration.\r\n    warnAboutRenderPhaseUpdatesInDEV(fiber);\r\n\r\n    // Track lanes that were updated during the render phase\r\n    workInProgressRootRenderPhaseUpdatedLanes = mergeLanes(\r\n      workInProgressRootRenderPhaseUpdatedLanes,\r\n      lane,\r\n    );\r\n  } else {\r\n    // This is a normal update, scheduled from outside the render phase. For\r\n    // example, during an input event.\r\n    if (enableUpdaterTracking) {\r\n      if (isDevToolsPresent) {\r\n        addFiberToLanesMap(root, fiber, lane);\r\n      }\r\n    }\r\n\r\n    warnIfUpdatesNotWrappedWithActDEV(fiber);\r\n\r\n    if (enableProfilerTimer && enableProfilerNestedUpdateScheduledHook) {\r\n      if (\r\n        (executionContext & CommitContext) !== NoContext &&\r\n        root === rootCommittingMutationOrLayoutEffects\r\n      ) {\r\n        if (fiber.mode & ProfileMode) {\r\n          let current = fiber;\r\n          while (current !== null) {\r\n            if (current.tag === Profiler) {\r\n              const {id, onNestedUpdateScheduled} = current.memoizedProps;\r\n              if (typeof onNestedUpdateScheduled === 'function') {\r\n                onNestedUpdateScheduled(id);\r\n              }\r\n            }\r\n            current = current.return;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (enableTransitionTracing) {\r\n      const transition = ReactCurrentBatchConfig.transition;\r\n      if (transition !== null && transition.name != null) {\r\n        if (transition.startTime === -1) {\r\n          transition.startTime = now();\r\n        }\r\n\r\n        addTransitionToLanesMap(root, transition, lane);\r\n      }\r\n    }\r\n\r\n    if (root === workInProgressRoot) {\r\n      // Received an update to a tree that's in the middle of rendering. Mark\r\n      // that there was an interleaved update work on this root. Unless the\r\n      // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render\r\n      // phase update. In that case, we don't treat render phase updates as if\r\n      // they were interleaved, for backwards compat reasons.\r\n      if (\r\n        deferRenderPhaseUpdateToNextBatch ||\r\n        (executionContext & RenderContext) === NoContext\r\n      ) {\r\n        workInProgressRootInterleavedUpdatedLanes = mergeLanes(\r\n          workInProgressRootInterleavedUpdatedLanes,\r\n          lane,\r\n        );\r\n      }\r\n      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\r\n        // The root already suspended with a delay, which means this render\r\n        // definitely won't finish. Since we have a new update, let's mark it as\r\n        // suspended now, right before marking the incoming update. This has the\r\n        // effect of interrupting the current render and switching to the update.\r\n        // TODO: Make sure this doesn't override pings that happen while we've\r\n        // already started rendering.\r\n        markRootSuspended(root, workInProgressRootRenderLanes);\r\n      }\r\n    }\r\n\r\n    ensureRootIsScheduled(root, eventTime);\r\n    if (\r\n      lane === SyncLane &&\r\n      executionContext === NoContext &&\r\n      (fiber.mode & ConcurrentMode) === NoMode &&\r\n      // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\r\n      !(__DEV__ && ReactCurrentActQueue.isBatchingLegacy)\r\n    ) {\r\n      // Flush the synchronous work now, unless we're already working or inside\r\n      // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\r\n      // scheduleCallbackForFiber to preserve the ability to schedule a callback\r\n      // without immediately flushing it. We only do this for user-initiated\r\n      // updates, to preserve historical behavior of legacy mode.\r\n      resetRenderTimer();\r\n      flushSyncCallbacksOnlyInLegacyMode();\r\n    }\r\n  }\r\n}\r\n\r\nexport function scheduleInitialHydrationOnRoot(\r\n  root: FiberRoot,\r\n  lane: Lane,\r\n  eventTime: number,\r\n) {\r\n  // This is a special fork of scheduleUpdateOnFiber that is only used to\r\n  // schedule the initial hydration of a root that has just been created. Most\r\n  // of the stuff in scheduleUpdateOnFiber can be skipped.\r\n  //\r\n  // The main reason for this separate path, though, is to distinguish the\r\n  // initial children from subsequent updates. In fully client-rendered roots\r\n  // (createRoot instead of hydrateRoot), all top-level renders are modeled as\r\n  // updates, but hydration roots are special because the initial render must\r\n  // match what was rendered on the server.\r\n  const current = root.current;\r\n  current.lanes = lane;\r\n  markRootUpdated(root, lane, eventTime);\r\n  ensureRootIsScheduled(root, eventTime);\r\n}\r\n\r\nexport function isUnsafeClassRenderPhaseUpdate(fiber: Fiber): boolean {\r\n  // Check if this is a render phase update. Only called by class components,\r\n  // which special (deprecated) behavior for UNSAFE_componentWillReceive props.\r\n  return (\r\n    // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We\r\n    // decided not to enable it.\r\n    (!deferRenderPhaseUpdateToNextBatch ||\r\n      (fiber.mode & ConcurrentMode) === NoMode) &&\r\n    (executionContext & RenderContext) !== NoContext\r\n  );\r\n}\r\n\r\n// Use this function to schedule a task for a root. There's only one task per\r\n// root; if a task was already scheduled, we'll check to make sure the priority\r\n// of the existing task is the same as the priority of the next level that the\r\n// root has work on. This function is called on every update, and right before\r\n// exiting a task.\r\nfunction ensureRootIsScheduled(root: FiberRoot, currentTime: number) {\r\n  const existingCallbackNode = root.callbackNode;\r\n\r\n  // Check if any lanes are being starved by other work. If so, mark them as\r\n  // expired so we know to work on those next.\r\n  markStarvedLanesAsExpired(root, currentTime);\r\n\r\n  // Determine the next lanes to work on, and their priority.\r\n  const nextLanes = getNextLanes(\r\n    root,\r\n    root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes,\r\n  );\r\n\r\n  if (nextLanes === NoLanes) {\r\n    // Special case: There's nothing to work on.\r\n    if (existingCallbackNode !== null) {\r\n      cancelCallback(existingCallbackNode);\r\n    }\r\n    root.callbackNode = null;\r\n    root.callbackPriority = NoLane;\r\n    return;\r\n  }\r\n\r\n  // We use the highest priority lane to represent the priority of the callback.\r\n  const newCallbackPriority = getHighestPriorityLane(nextLanes);\r\n\r\n  // Check if there's an existing task. We may be able to reuse it.\r\n  const existingCallbackPriority = root.callbackPriority;\r\n  if (\r\n    existingCallbackPriority === newCallbackPriority &&\r\n    // Special case related to `act`. If the currently scheduled task is a\r\n    // Scheduler task, rather than an `act` task, cancel it and re-scheduled\r\n    // on the `act` queue.\r\n    !(\r\n      __DEV__ &&\r\n      ReactCurrentActQueue.current !== null &&\r\n      existingCallbackNode !== fakeActCallbackNode\r\n    )\r\n  ) {\r\n    if (__DEV__) {\r\n      // If we're going to re-use an existing task, it needs to exist.\r\n      // Assume that discrete update microtasks are non-cancellable and null.\r\n      // TODO: Temporary until we confirm this warning is not fired.\r\n      if (\r\n        existingCallbackNode == null &&\r\n        existingCallbackPriority !== SyncLane\r\n      ) {\r\n        console.error(\r\n          'Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.',\r\n        );\r\n      }\r\n    }\r\n    // The priority hasn't changed. We can reuse the existing task. Exit.\r\n    return;\r\n  }\r\n\r\n  if (existingCallbackNode != null) {\r\n    // Cancel the existing callback. We'll schedule a new one below.\r\n    cancelCallback(existingCallbackNode);\r\n  }\r\n\r\n  // Schedule a new callback.\r\n  let newCallbackNode;\r\n  if (newCallbackPriority === SyncLane) {\r\n    // Special case: Sync React callbacks are scheduled on a special\r\n    // internal queue\r\n    if (root.tag === LegacyRoot) {\r\n      if (__DEV__ && ReactCurrentActQueue.isBatchingLegacy !== null) {\r\n        ReactCurrentActQueue.didScheduleLegacyUpdate = true;\r\n      }\r\n      scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));\r\n    } else {\r\n      scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));\r\n    }\r\n    if (supportsMicrotasks) {\r\n      // Flush the queue in a microtask.\r\n      if (__DEV__ && ReactCurrentActQueue.current !== null) {\r\n        // Inside `act`, use our internal `act` queue so that these get flushed\r\n        // at the end of the current scope even when using the sync version\r\n        // of `act`.\r\n        ReactCurrentActQueue.current.push(flushSyncCallbacks);\r\n      } else {\r\n        scheduleMicrotask(() => {\r\n          // In Safari, appending an iframe forces microtasks to run.\r\n          // https://github.com/facebook/react/issues/22459\r\n          // We don't support running callbacks in the middle of render\r\n          // or commit so we need to check against that.\r\n          if (\r\n            (executionContext & (RenderContext | CommitContext)) ===\r\n            NoContext\r\n          ) {\r\n            // Note that this would still prematurely flush the callbacks\r\n            // if this happens outside render or commit phase (e.g. in an event).\r\n            flushSyncCallbacks();\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      // Flush the queue in an Immediate task.\r\n      scheduleCallback(ImmediateSchedulerPriority, flushSyncCallbacks);\r\n    }\r\n    newCallbackNode = null;\r\n  } else {\r\n    let schedulerPriorityLevel;\r\n    switch (lanesToEventPriority(nextLanes)) {\r\n      case DiscreteEventPriority:\r\n        schedulerPriorityLevel = ImmediateSchedulerPriority;\r\n        break;\r\n      case ContinuousEventPriority:\r\n        schedulerPriorityLevel = UserBlockingSchedulerPriority;\r\n        break;\r\n      case DefaultEventPriority:\r\n        schedulerPriorityLevel = NormalSchedulerPriority;\r\n        break;\r\n      case IdleEventPriority:\r\n        schedulerPriorityLevel = IdleSchedulerPriority;\r\n        break;\r\n      default:\r\n        schedulerPriorityLevel = NormalSchedulerPriority;\r\n        break;\r\n    }\r\n    newCallbackNode = scheduleCallback(\r\n      schedulerPriorityLevel,\r\n      performConcurrentWorkOnRoot.bind(null, root),\r\n    );\r\n  }\r\n\r\n  root.callbackPriority = newCallbackPriority;\r\n  root.callbackNode = newCallbackNode;\r\n}\r\n\r\n// This is the entry point for every concurrent task, i.e. anything that\r\n// goes through Scheduler.\r\nfunction performConcurrentWorkOnRoot(root, didTimeout) {\r\n  if (enableProfilerTimer && enableProfilerNestedUpdatePhase) {\r\n    resetNestedUpdateFlag();\r\n  }\r\n\r\n  // Since we know we're in a React event, we can clear the current\r\n  // event time. The next update will compute a new event time.\r\n  currentEventTime = NoTimestamp;\r\n  currentEventTransitionLane = NoLanes;\r\n\r\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\r\n    throw new Error('Should not already be working.');\r\n  }\r\n\r\n  // Flush any pending passive effects before deciding which lanes to work on,\r\n  // in case they schedule additional work.\r\n  const originalCallbackNode = root.callbackNode;\r\n  const didFlushPassiveEffects = flushPassiveEffects();\r\n  if (didFlushPassiveEffects) {\r\n    // Something in the passive effect phase may have canceled the current task.\r\n    // Check if the task node for this root was changed.\r\n    if (root.callbackNode !== originalCallbackNode) {\r\n      // The current task was canceled. Exit. We don't need to call\r\n      // `ensureRootIsScheduled` because the check above implies either that\r\n      // there's a new task, or that there's no remaining work on this root.\r\n      return null;\r\n    } else {\r\n      // Current task was not canceled. Continue.\r\n    }\r\n  }\r\n\r\n  // Determine the next lanes to work on, using the fields stored\r\n  // on the root.\r\n  let lanes = getNextLanes(\r\n    root,\r\n    root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes,\r\n  );\r\n  if (lanes === NoLanes) {\r\n    // Defensive coding. This is never expected to happen.\r\n    return null;\r\n  }\r\n\r\n  // We disable time-slicing in some cases: if the work has been CPU-bound\r\n  // for too long (\"expired\" work, to prevent starvation), or we're in\r\n  // sync-updates-by-default mode.\r\n  // TODO: We only check `didTimeout` defensively, to account for a Scheduler\r\n  // bug we're still investigating. Once the bug in Scheduler is fixed,\r\n  // we can remove this, since we track expiration ourselves.\r\n  const shouldTimeSlice =\r\n    !includesBlockingLane(root, lanes) &&\r\n    !includesExpiredLane(root, lanes) &&\r\n    (disableSchedulerTimeoutInWorkLoop || !didTimeout);\r\n  let exitStatus = shouldTimeSlice\r\n    ? renderRootConcurrent(root, lanes)\r\n    : renderRootSync(root, lanes);\r\n  if (exitStatus !== RootInProgress) {\r\n    if (exitStatus === RootErrored) {\r\n      // If something threw an error, try rendering one more time. We'll\r\n      // render synchronously to block concurrent data mutations, and we'll\r\n      // includes all pending updates are included. If it still fails after\r\n      // the second attempt, we'll give up and commit the resulting tree.\r\n      const originallyAttemptedLanes = lanes;\r\n      const errorRetryLanes = getLanesToRetrySynchronouslyOnError(\r\n        root,\r\n        originallyAttemptedLanes,\r\n      );\r\n      if (errorRetryLanes !== NoLanes) {\r\n        lanes = errorRetryLanes;\r\n        exitStatus = recoverFromConcurrentError(\r\n          root,\r\n          originallyAttemptedLanes,\r\n          errorRetryLanes,\r\n        );\r\n      }\r\n    }\r\n    if (exitStatus === RootFatalErrored) {\r\n      const fatalError = workInProgressRootFatalError;\r\n      prepareFreshStack(root, NoLanes);\r\n      markRootSuspended(root, lanes);\r\n      ensureRootIsScheduled(root, now());\r\n      throw fatalError;\r\n    }\r\n\r\n    if (exitStatus === RootDidNotComplete) {\r\n      // The render unwound without completing the tree. This happens in special\r\n      // cases where need to exit the current render without producing a\r\n      // consistent tree or committing.\r\n      //\r\n      // This should only happen during a concurrent render, not a discrete or\r\n      // synchronous update. We should have already checked for this when we\r\n      // unwound the stack.\r\n      markRootSuspended(root, lanes);\r\n    } else {\r\n      // The render completed.\r\n\r\n      // Check if this render may have yielded to a concurrent event, and if so,\r\n      // confirm that any newly rendered stores are consistent.\r\n      // TODO: It's possible that even a concurrent render may never have yielded\r\n      // to the main thread, if it was fast enough, or if it expired. We could\r\n      // skip the consistency check in that case, too.\r\n      const renderWasConcurrent = !includesBlockingLane(root, lanes);\r\n      const finishedWork: Fiber = (root.current.alternate: any);\r\n      if (\r\n        renderWasConcurrent &&\r\n        !isRenderConsistentWithExternalStores(finishedWork)\r\n      ) {\r\n        // A store was mutated in an interleaved event. Render again,\r\n        // synchronously, to block further mutations.\r\n        exitStatus = renderRootSync(root, lanes);\r\n\r\n        // We need to check again if something threw\r\n        if (exitStatus === RootErrored) {\r\n          const originallyAttemptedLanes = lanes;\r\n          const errorRetryLanes = getLanesToRetrySynchronouslyOnError(\r\n            root,\r\n            originallyAttemptedLanes,\r\n          );\r\n          if (errorRetryLanes !== NoLanes) {\r\n            lanes = errorRetryLanes;\r\n            exitStatus = recoverFromConcurrentError(\r\n              root,\r\n              originallyAttemptedLanes,\r\n              errorRetryLanes,\r\n            );\r\n            // We assume the tree is now consistent because we didn't yield to any\r\n            // concurrent events.\r\n          }\r\n        }\r\n        if (exitStatus === RootFatalErrored) {\r\n          const fatalError = workInProgressRootFatalError;\r\n          prepareFreshStack(root, NoLanes);\r\n          markRootSuspended(root, lanes);\r\n          ensureRootIsScheduled(root, now());\r\n          throw fatalError;\r\n        }\r\n      }\r\n\r\n      // We now have a consistent tree. The next step is either to commit it,\r\n      // or, if something suspended, wait to commit it after a timeout.\r\n      root.finishedWork = finishedWork;\r\n      root.finishedLanes = lanes;\r\n      finishConcurrentRender(root, exitStatus, lanes);\r\n    }\r\n  }\r\n\r\n  ensureRootIsScheduled(root, now());\r\n  if (root.callbackNode === originalCallbackNode) {\r\n    // The task node scheduled for this root is the same one that's\r\n    // currently executed. Need to return a continuation.\r\n    return performConcurrentWorkOnRoot.bind(null, root);\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction recoverFromConcurrentError(\r\n  root,\r\n  originallyAttemptedLanes,\r\n  errorRetryLanes,\r\n) {\r\n  // If an error occurred during hydration, discard server response and fall\r\n  // back to client side render.\r\n\r\n  // Before rendering again, save the errors from the previous attempt.\r\n  const errorsFromFirstAttempt = workInProgressRootConcurrentErrors;\r\n\r\n  const wasRootDehydrated = isRootDehydrated(root);\r\n  if (wasRootDehydrated) {\r\n    // The shell failed to hydrate. Set a flag to force a client rendering\r\n    // during the next attempt. To do this, we call prepareFreshStack now\r\n    // to create the root work-in-progress fiber. This is a bit weird in terms\r\n    // of factoring, because it relies on renderRootSync not calling\r\n    // prepareFreshStack again in the call below, which happens because the\r\n    // root and lanes haven't changed.\r\n    //\r\n    // TODO: I think what we should do is set ForceClientRender inside\r\n    // throwException, like we do for nested Suspense boundaries. The reason\r\n    // it's here instead is so we can switch to the synchronous work loop, too.\r\n    // Something to consider for a future refactor.\r\n    const rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);\r\n    rootWorkInProgress.flags |= ForceClientRender;\r\n    if (__DEV__) {\r\n      errorHydratingContainer(root.containerInfo);\r\n    }\r\n  }\r\n\r\n  const exitStatus = renderRootSync(root, errorRetryLanes);\r\n  if (exitStatus !== RootErrored) {\r\n    // Successfully finished rendering on retry\r\n\r\n    if (workInProgressRootDidAttachPingListener && !wasRootDehydrated) {\r\n      // During the synchronous render, we attached additional ping listeners.\r\n      // This is highly suggestive of an uncached promise (though it's not the\r\n      // only reason this would happen). If it was an uncached promise, then\r\n      // it may have masked a downstream error from ocurring without actually\r\n      // fixing it. Example:\r\n      //\r\n      //    use(Promise.resolve('uncached'))\r\n      //    throw new Error('Oops!')\r\n      //\r\n      // When this happens, there's a conflict between blocking potential\r\n      // concurrent data races and unwrapping uncached promise values. We\r\n      // have to choose one or the other. Because the data race recovery is\r\n      // a last ditch effort, we'll disable it.\r\n      root.errorRecoveryDisabledLanes = mergeLanes(\r\n        root.errorRecoveryDisabledLanes,\r\n        originallyAttemptedLanes,\r\n      );\r\n\r\n      // Mark the current render as suspended and force it to restart. Once\r\n      // these lanes finish successfully, we'll re-enable the error recovery\r\n      // mechanism for subsequent updates.\r\n      workInProgressRootInterleavedUpdatedLanes |= originallyAttemptedLanes;\r\n      return RootSuspendedWithDelay;\r\n    }\r\n\r\n    // The errors from the failed first attempt have been recovered. Add\r\n    // them to the collection of recoverable errors. We'll log them in the\r\n    // commit phase.\r\n    const errorsFromSecondAttempt = workInProgressRootRecoverableErrors;\r\n    workInProgressRootRecoverableErrors = errorsFromFirstAttempt;\r\n    // The errors from the second attempt should be queued after the errors\r\n    // from the first attempt, to preserve the causal sequence.\r\n    if (errorsFromSecondAttempt !== null) {\r\n      queueRecoverableErrors(errorsFromSecondAttempt);\r\n    }\r\n  } else {\r\n    // The UI failed to recover.\r\n  }\r\n  return exitStatus;\r\n}\r\n\r\nexport function queueRecoverableErrors(errors: Array<CapturedValue<mixed>>) {\r\n  if (workInProgressRootRecoverableErrors === null) {\r\n    workInProgressRootRecoverableErrors = errors;\r\n  } else {\r\n    workInProgressRootRecoverableErrors.push.apply(\r\n      workInProgressRootRecoverableErrors,\r\n      errors,\r\n    );\r\n  }\r\n}\r\n\r\nfunction finishConcurrentRender(root, exitStatus, lanes) {\r\n  switch (exitStatus) {\r\n    case RootInProgress:\r\n    case RootFatalErrored: {\r\n      throw new Error('Root did not complete. This is a bug in React.');\r\n    }\r\n    // Flow knows about invariant, so it complains if I add a break\r\n    // statement, but eslint doesn't know about invariant, so it complains\r\n    // if I do. eslint-disable-next-line no-fallthrough\r\n    case RootErrored: {\r\n      // We should have already attempted to retry this tree. If we reached\r\n      // this point, it errored again. Commit it.\r\n      commitRoot(\r\n        root,\r\n        workInProgressRootRecoverableErrors,\r\n        workInProgressTransitions,\r\n      );\r\n      break;\r\n    }\r\n    case RootSuspended: {\r\n      markRootSuspended(root, lanes);\r\n\r\n      // We have an acceptable loading state. We need to figure out if we\r\n      // should immediately commit it or wait a bit.\r\n\r\n      if (\r\n        includesOnlyRetries(lanes) &&\r\n        // do not delay if we're inside an act() scope\r\n        !shouldForceFlushFallbacksInDEV()\r\n      ) {\r\n        // This render only included retries, no updates. Throttle committing\r\n        // retries so that we don't show too many loading states too quickly.\r\n        const msUntilTimeout =\r\n          globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();\r\n        // Don't bother with a very short suspense time.\r\n        if (msUntilTimeout > 10) {\r\n          const nextLanes = getNextLanes(root, NoLanes);\r\n          if (nextLanes !== NoLanes) {\r\n            // There's additional work on this root.\r\n            break;\r\n          }\r\n          const suspendedLanes = root.suspendedLanes;\r\n          if (!isSubsetOfLanes(suspendedLanes, lanes)) {\r\n            // We should prefer to render the fallback of at the last\r\n            // suspended level. Ping the last suspended level to try\r\n            // rendering it again.\r\n            // FIXME: What if the suspended lanes are Idle? Should not restart.\r\n            const eventTime = requestEventTime();\r\n            markRootPinged(root, suspendedLanes, eventTime);\r\n            break;\r\n          }\r\n\r\n          // The render is suspended, it hasn't timed out, and there's no\r\n          // lower priority work to do. Instead of committing the fallback\r\n          // immediately, wait for more data to arrive.\r\n          root.timeoutHandle = scheduleTimeout(\r\n            commitRoot.bind(\r\n              null,\r\n              root,\r\n              workInProgressRootRecoverableErrors,\r\n              workInProgressTransitions,\r\n            ),\r\n            msUntilTimeout,\r\n          );\r\n          break;\r\n        }\r\n      }\r\n      // The work expired. Commit immediately.\r\n      commitRoot(\r\n        root,\r\n        workInProgressRootRecoverableErrors,\r\n        workInProgressTransitions,\r\n      );\r\n      break;\r\n    }\r\n    case RootSuspendedWithDelay: {\r\n      markRootSuspended(root, lanes);\r\n\r\n      if (includesOnlyTransitions(lanes)) {\r\n        // This is a transition, so we should exit without committing a\r\n        // placeholder and without scheduling a timeout. Delay indefinitely\r\n        // until we receive more data.\r\n        break;\r\n      }\r\n\r\n      if (!shouldForceFlushFallbacksInDEV()) {\r\n        // This is not a transition, but we did trigger an avoided state.\r\n        // Schedule a placeholder to display after a short delay, using the Just\r\n        // Noticeable Difference.\r\n        // TODO: Is the JND optimization worth the added complexity? If this is\r\n        // the only reason we track the event time, then probably not.\r\n        // Consider removing.\r\n\r\n        const mostRecentEventTime = getMostRecentEventTime(root, lanes);\r\n        const eventTimeMs = mostRecentEventTime;\r\n        const timeElapsedMs = now() - eventTimeMs;\r\n        const msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;\r\n\r\n        // Don't bother with a very short suspense time.\r\n        if (msUntilTimeout > 10) {\r\n          // Instead of committing the fallback immediately, wait for more data\r\n          // to arrive.\r\n          root.timeoutHandle = scheduleTimeout(\r\n            commitRoot.bind(\r\n              null,\r\n              root,\r\n              workInProgressRootRecoverableErrors,\r\n              workInProgressTransitions,\r\n            ),\r\n            msUntilTimeout,\r\n          );\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Commit the placeholder.\r\n      commitRoot(\r\n        root,\r\n        workInProgressRootRecoverableErrors,\r\n        workInProgressTransitions,\r\n      );\r\n      break;\r\n    }\r\n    case RootCompleted: {\r\n      // The work completed. Ready to commit.\r\n      commitRoot(\r\n        root,\r\n        workInProgressRootRecoverableErrors,\r\n        workInProgressTransitions,\r\n      );\r\n      break;\r\n    }\r\n    default: {\r\n      throw new Error('Unknown root exit status.');\r\n    }\r\n  }\r\n}\r\n\r\nfunction isRenderConsistentWithExternalStores(finishedWork: Fiber): boolean {\r\n  // Search the rendered tree for external store reads, and check whether the\r\n  // stores were mutated in a concurrent event. Intentionally using an iterative\r\n  // loop instead of recursion so we can exit early.\r\n  let node: Fiber = finishedWork;\r\n  while (true) {\r\n    if (node.flags & StoreConsistency) {\r\n      const updateQueue: FunctionComponentUpdateQueue | null = (node.updateQueue: any);\r\n      if (updateQueue !== null) {\r\n        const checks = updateQueue.stores;\r\n        if (checks !== null) {\r\n          for (let i = 0; i < checks.length; i++) {\r\n            const check = checks[i];\r\n            const getSnapshot = check.getSnapshot;\r\n            const renderedValue = check.value;\r\n            try {\r\n              if (!is(getSnapshot(), renderedValue)) {\r\n                // Found an inconsistent store.\r\n                return false;\r\n              }\r\n            } catch (error) {\r\n              // If `getSnapshot` throws, return `false`. This will schedule\r\n              // a re-render, and the error will be rethrown during render.\r\n              return false;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const child = node.child;\r\n    if (node.subtreeFlags & StoreConsistency && child !== null) {\r\n      child.return = node;\r\n      node = child;\r\n      continue;\r\n    }\r\n    if (node === finishedWork) {\r\n      return true;\r\n    }\r\n    while (node.sibling === null) {\r\n      if (node.return === null || node.return === finishedWork) {\r\n        return true;\r\n      }\r\n      node = node.return;\r\n    }\r\n    node.sibling.return = node.return;\r\n    node = node.sibling;\r\n  }\r\n  // Flow doesn't know this is unreachable, but eslint does\r\n  // eslint-disable-next-line no-unreachable\r\n  return true;\r\n}\r\n\r\nfunction markRootSuspended(root, suspendedLanes) {\r\n  // When suspending, we should always exclude lanes that were pinged or (more\r\n  // rarely, since we try to avoid it) updated during the render phase.\r\n  // TODO: Lol maybe there's a better way to factor this besides this\r\n  // obnoxiously named function :)\r\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);\r\n  suspendedLanes = removeLanes(\r\n    suspendedLanes,\r\n    workInProgressRootInterleavedUpdatedLanes,\r\n  );\r\n  markRootSuspended_dontCallThisOneDirectly(root, suspendedLanes);\r\n}\r\n\r\n// This is the entry point for synchronous tasks that don't go\r\n// through Scheduler\r\nfunction performSyncWorkOnRoot(root) {\r\n  if (enableProfilerTimer && enableProfilerNestedUpdatePhase) {\r\n    syncNestedUpdateFlag();\r\n  }\r\n\r\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\r\n    throw new Error('Should not already be working.');\r\n  }\r\n\r\n  flushPassiveEffects();\r\n\r\n  let lanes = getNextLanes(root, NoLanes);\r\n  if (!includesSomeLane(lanes, SyncLane)) {\r\n    // There's no remaining sync work left.\r\n    ensureRootIsScheduled(root, now());\r\n    return null;\r\n  }\r\n\r\n  let exitStatus = renderRootSync(root, lanes);\r\n  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {\r\n    // If something threw an error, try rendering one more time. We'll render\r\n    // synchronously to block concurrent data mutations, and we'll includes\r\n    // all pending updates are included. If it still fails after the second\r\n    // attempt, we'll give up and commit the resulting tree.\r\n    const originallyAttemptedLanes = lanes;\r\n    const errorRetryLanes = getLanesToRetrySynchronouslyOnError(\r\n      root,\r\n      originallyAttemptedLanes,\r\n    );\r\n    if (errorRetryLanes !== NoLanes) {\r\n      lanes = errorRetryLanes;\r\n      exitStatus = recoverFromConcurrentError(\r\n        root,\r\n        originallyAttemptedLanes,\r\n        errorRetryLanes,\r\n      );\r\n    }\r\n  }\r\n\r\n  if (exitStatus === RootFatalErrored) {\r\n    const fatalError = workInProgressRootFatalError;\r\n    prepareFreshStack(root, NoLanes);\r\n    markRootSuspended(root, lanes);\r\n    ensureRootIsScheduled(root, now());\r\n    throw fatalError;\r\n  }\r\n\r\n  if (exitStatus === RootDidNotComplete) {\r\n    throw new Error('Root did not complete. This is a bug in React.');\r\n  }\r\n\r\n  // We now have a consistent tree. Because this is a sync render, we\r\n  // will commit it even if something suspended.\r\n  const finishedWork: Fiber = (root.current.alternate: any);\r\n  root.finishedWork = finishedWork;\r\n  root.finishedLanes = lanes;\r\n  commitRoot(\r\n    root,\r\n    workInProgressRootRecoverableErrors,\r\n    workInProgressTransitions,\r\n  );\r\n\r\n  // Before exiting, make sure there's a callback scheduled for the next\r\n  // pending level.\r\n  ensureRootIsScheduled(root, now());\r\n\r\n  return null;\r\n}\r\n\r\nexport function flushRoot(root: FiberRoot, lanes: Lanes) {\r\n  if (lanes !== NoLanes) {\r\n    markRootEntangled(root, mergeLanes(lanes, SyncLane));\r\n    ensureRootIsScheduled(root, now());\r\n    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\r\n      resetRenderTimer();\r\n      flushSyncCallbacks();\r\n    }\r\n  }\r\n}\r\n\r\nexport function getExecutionContext(): ExecutionContext {\r\n  return executionContext;\r\n}\r\n\r\nexport function deferredUpdates<A>(fn: () => A): A {\r\n  const previousPriority = getCurrentUpdatePriority();\r\n  const prevTransition = ReactCurrentBatchConfig.transition;\r\n\r\n  try {\r\n    ReactCurrentBatchConfig.transition = null;\r\n    setCurrentUpdatePriority(DefaultEventPriority);\r\n    return fn();\r\n  } finally {\r\n    setCurrentUpdatePriority(previousPriority);\r\n    ReactCurrentBatchConfig.transition = prevTransition;\r\n  }\r\n}\r\n\r\nexport function batchedUpdates<A, R>(fn: A => R, a: A): R {\r\n  const prevExecutionContext = executionContext;\r\n  executionContext |= BatchedContext;\r\n  try {\r\n    return fn(a);\r\n  } finally {\r\n    executionContext = prevExecutionContext;\r\n    // If there were legacy sync updates, flush them at the end of the outer\r\n    // most batchedUpdates-like method.\r\n    if (\r\n      executionContext === NoContext &&\r\n      // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\r\n      !(__DEV__ && ReactCurrentActQueue.isBatchingLegacy)\r\n    ) {\r\n      resetRenderTimer();\r\n      flushSyncCallbacksOnlyInLegacyMode();\r\n    }\r\n  }\r\n}\r\n\r\nexport function discreteUpdates<A, B, C, D, R>(\r\n  fn: (A, B, C, D) => R,\r\n  a: A,\r\n  b: B,\r\n  c: C,\r\n  d: D,\r\n): R {\r\n  const previousPriority = getCurrentUpdatePriority();\r\n  const prevTransition = ReactCurrentBatchConfig.transition;\r\n  try {\r\n    ReactCurrentBatchConfig.transition = null;\r\n    setCurrentUpdatePriority(DiscreteEventPriority);\r\n    return fn(a, b, c, d);\r\n  } finally {\r\n    setCurrentUpdatePriority(previousPriority);\r\n    ReactCurrentBatchConfig.transition = prevTransition;\r\n    if (executionContext === NoContext) {\r\n      resetRenderTimer();\r\n    }\r\n  }\r\n}\r\n\r\n// Overload the definition to the two valid signatures.\r\n// Warning, this opts-out of checking the function body.\r\ndeclare function flushSync<R>(fn: () => R): R;\r\n// eslint-disable-next-line no-redeclare\r\ndeclare function flushSync(): void;\r\n// eslint-disable-next-line no-redeclare\r\nexport function flushSync(fn): void {\r\n  // In legacy mode, we flush pending passive effects at the beginning of the\r\n  // next event, not at the end of the previous one.\r\n  if (\r\n    rootWithPendingPassiveEffects !== null &&\r\n    rootWithPendingPassiveEffects.tag === LegacyRoot &&\r\n    (executionContext & (RenderContext | CommitContext)) === NoContext\r\n  ) {\r\n    flushPassiveEffects();\r\n  }\r\n\r\n  const prevExecutionContext = executionContext;\r\n  executionContext |= BatchedContext;\r\n\r\n  const prevTransition = ReactCurrentBatchConfig.transition;\r\n  const previousPriority = getCurrentUpdatePriority();\r\n\r\n  try {\r\n    ReactCurrentBatchConfig.transition = null;\r\n    setCurrentUpdatePriority(DiscreteEventPriority);\r\n    if (fn) {\r\n      return fn();\r\n    } else {\r\n      return undefined;\r\n    }\r\n  } finally {\r\n    setCurrentUpdatePriority(previousPriority);\r\n    ReactCurrentBatchConfig.transition = prevTransition;\r\n\r\n    executionContext = prevExecutionContext;\r\n    // Flush the immediate callbacks that were scheduled during this batch.\r\n    // Note that this will happen even if batchedUpdates is higher up\r\n    // the stack.\r\n    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\r\n      flushSyncCallbacks();\r\n    }\r\n  }\r\n}\r\n\r\nexport function isAlreadyRendering(): boolean {\r\n  // Used by the renderer to print a warning if certain APIs are called from\r\n  // the wrong context.\r\n  return (\r\n    __DEV__ &&\r\n    (executionContext & (RenderContext | CommitContext)) !== NoContext\r\n  );\r\n}\r\n\r\nexport function isInvalidExecutionContextForEventFunction() {\r\n  // Used to throw if certain APIs are called from the wrong context.\r\n  return (executionContext & RenderContext) !== NoContext;\r\n}\r\n\r\nexport function flushControlled(fn: () => mixed): void {\r\n  const prevExecutionContext = executionContext;\r\n  executionContext |= BatchedContext;\r\n  const prevTransition = ReactCurrentBatchConfig.transition;\r\n  const previousPriority = getCurrentUpdatePriority();\r\n  try {\r\n    ReactCurrentBatchConfig.transition = null;\r\n    setCurrentUpdatePriority(DiscreteEventPriority);\r\n    fn();\r\n  } finally {\r\n    setCurrentUpdatePriority(previousPriority);\r\n    ReactCurrentBatchConfig.transition = prevTransition;\r\n\r\n    executionContext = prevExecutionContext;\r\n    if (executionContext === NoContext) {\r\n      // Flush the immediate callbacks that were scheduled during this batch\r\n      resetRenderTimer();\r\n      flushSyncCallbacks();\r\n    }\r\n  }\r\n}\r\n\r\n// This is called by the HiddenContext module when we enter or leave a\r\n// hidden subtree. The stack logic is managed there because that's the only\r\n// place that ever modifies it. Which module it lives in doesn't matter for\r\n// performance because this function will get inlined regardless\r\nexport function setRenderLanes(subtreeRenderLanes: Lanes) {\r\n  renderLanes = subtreeRenderLanes;\r\n}\r\n\r\nexport function getRenderLanes(): Lanes {\r\n  return renderLanes;\r\n}\r\n\r\nfunction prepareFreshStack(root: FiberRoot, lanes: Lanes): Fiber {\r\n  root.finishedWork = null;\r\n  root.finishedLanes = NoLanes;\r\n\r\n  const timeoutHandle = root.timeoutHandle;\r\n  if (timeoutHandle !== noTimeout) {\r\n    // The root previous suspended and scheduled a timeout to commit a fallback\r\n    // state. Now that we have additional work, cancel the timeout.\r\n    root.timeoutHandle = noTimeout;\r\n    // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above\r\n    cancelTimeout(timeoutHandle);\r\n  }\r\n\r\n  if (workInProgress !== null) {\r\n    let interruptedWork = workInProgressIsSuspended\r\n      ? workInProgress\r\n      : workInProgress.return;\r\n    while (interruptedWork !== null) {\r\n      const current = interruptedWork.alternate;\r\n      unwindInterruptedWork(\r\n        current,\r\n        interruptedWork,\r\n        workInProgressRootRenderLanes,\r\n      );\r\n      interruptedWork = interruptedWork.return;\r\n    }\r\n    resetWakeableStateAfterEachAttempt();\r\n    resetThenableStateOnCompletion();\r\n  }\r\n  workInProgressRoot = root;\r\n  const rootWorkInProgress = createWorkInProgress(root.current, null);\r\n  workInProgress = rootWorkInProgress;\r\n  workInProgressRootRenderLanes = renderLanes = lanes;\r\n  workInProgressIsSuspended = false;\r\n  workInProgressThrownValue = null;\r\n  workInProgressRootDidAttachPingListener = false;\r\n  workInProgressRootExitStatus = RootInProgress;\r\n  workInProgressRootFatalError = null;\r\n  workInProgressRootSkippedLanes = NoLanes;\r\n  workInProgressRootInterleavedUpdatedLanes = NoLanes;\r\n  workInProgressRootRenderPhaseUpdatedLanes = NoLanes;\r\n  workInProgressRootPingedLanes = NoLanes;\r\n  workInProgressRootConcurrentErrors = null;\r\n  workInProgressRootRecoverableErrors = null;\r\n\r\n  finishQueueingConcurrentUpdates();\r\n\r\n  if (__DEV__) {\r\n    ReactStrictModeWarnings.discardPendingWarnings();\r\n  }\r\n\r\n  return rootWorkInProgress;\r\n}\r\n\r\nfunction handleThrow(root, thrownValue): void {\r\n  // Reset module-level state that was set during the render phase.\r\n  resetContextDependencies();\r\n  resetHooksAfterThrow();\r\n  resetCurrentDebugFiberInDEV();\r\n  // TODO: I found and added this missing line while investigating a\r\n  // separate issue. Write a regression test using string refs.\r\n  ReactCurrentOwner.current = null;\r\n\r\n  // Setting this to `true` tells the work loop to unwind the stack instead\r\n  // of entering the begin phase. It's called \"suspended\" because it usually\r\n  // happens because of Suspense, but it also applies to errors. Think of it\r\n  // as suspending the execution of the work loop.\r\n  workInProgressIsSuspended = true;\r\n  workInProgressThrownValue = thrownValue;\r\n\r\n  const erroredWork = workInProgress;\r\n  if (erroredWork === null) {\r\n    // This is a fatal error\r\n    workInProgressRootExitStatus = RootFatalErrored;\r\n    workInProgressRootFatalError = thrownValue;\r\n    return;\r\n  }\r\n\r\n  const isWakeable =\r\n    thrownValue !== null &&\r\n    typeof thrownValue === 'object' &&\r\n    typeof thrownValue.then === 'function';\r\n\r\n  if (enableProfilerTimer && erroredWork.mode & ProfileMode) {\r\n    // Record the time spent rendering before an error was thrown. This\r\n    // avoids inaccurate Profiler durations in the case of a\r\n    // suspended render.\r\n    stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);\r\n  }\r\n\r\n  if (enableSchedulingProfiler) {\r\n    markComponentRenderStopped();\r\n    if (isWakeable) {\r\n      const wakeable: Wakeable = (thrownValue: any);\r\n      markComponentSuspended(\r\n        erroredWork,\r\n        wakeable,\r\n        workInProgressRootRenderLanes,\r\n      );\r\n    } else {\r\n      markComponentErrored(\r\n        erroredWork,\r\n        thrownValue,\r\n        workInProgressRootRenderLanes,\r\n      );\r\n    }\r\n  }\r\n\r\n  if (isWakeable) {\r\n    const wakeable: Wakeable = (thrownValue: any);\r\n\r\n    trackSuspendedWakeable(wakeable);\r\n  }\r\n}\r\n\r\nfunction pushDispatcher() {\r\n  const prevDispatcher = ReactCurrentDispatcher.current;\r\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\r\n  if (prevDispatcher === null) {\r\n    // The React isomorphic package does not include a default dispatcher.\r\n    // Instead the first renderer will lazily attach one, in order to give\r\n    // nicer error messages.\r\n    return ContextOnlyDispatcher;\r\n  } else {\r\n    return prevDispatcher;\r\n  }\r\n}\r\n\r\nfunction popDispatcher(prevDispatcher) {\r\n  ReactCurrentDispatcher.current = prevDispatcher;\r\n}\r\n\r\nexport function markCommitTimeOfFallback() {\r\n  globalMostRecentFallbackTime = now();\r\n}\r\n\r\nexport function markSkippedUpdateLanes(lane: Lane | Lanes): void {\r\n  workInProgressRootSkippedLanes = mergeLanes(\r\n    lane,\r\n    workInProgressRootSkippedLanes,\r\n  );\r\n}\r\n\r\nexport function renderDidSuspend(): void {\r\n  if (workInProgressRootExitStatus === RootInProgress) {\r\n    workInProgressRootExitStatus = RootSuspended;\r\n  }\r\n}\r\n\r\nexport function renderDidSuspendDelayIfPossible(): void {\r\n  if (\r\n    workInProgressRootExitStatus === RootInProgress ||\r\n    workInProgressRootExitStatus === RootSuspended ||\r\n    workInProgressRootExitStatus === RootErrored\r\n  ) {\r\n    workInProgressRootExitStatus = RootSuspendedWithDelay;\r\n  }\r\n\r\n  // Check if there are updates that we skipped tree that might have unblocked\r\n  // this render.\r\n  if (\r\n    workInProgressRoot !== null &&\r\n    (includesNonIdleWork(workInProgressRootSkippedLanes) ||\r\n      includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))\r\n  ) {\r\n    // Mark the current render as suspended so that we switch to working on\r\n    // the updates that were skipped. Usually we only suspend at the end of\r\n    // the render phase.\r\n    // TODO: We should probably always mark the root as suspended immediately\r\n    // (inside this function), since by suspending at the end of the render\r\n    // phase introduces a potential mistake where we suspend lanes that were\r\n    // pinged or updated while we were rendering.\r\n    markRootSuspended(workInProgressRoot, workInProgressRootRenderLanes);\r\n  }\r\n}\r\n\r\nexport function renderDidError(error: CapturedValue<mixed>) {\r\n  if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {\r\n    workInProgressRootExitStatus = RootErrored;\r\n  }\r\n  if (workInProgressRootConcurrentErrors === null) {\r\n    workInProgressRootConcurrentErrors = [error];\r\n  } else {\r\n    workInProgressRootConcurrentErrors.push(error);\r\n  }\r\n}\r\n\r\n// Called during render to determine if anything has suspended.\r\n// Returns false if we're not sure.\r\nexport function renderHasNotSuspendedYet(): boolean {\r\n  // If something errored or completed, we can't really be sure,\r\n  // so those are false.\r\n  return workInProgressRootExitStatus === RootInProgress;\r\n}\r\n\r\nfunction renderRootSync(root: FiberRoot, lanes: Lanes) {\r\n  const prevExecutionContext = executionContext;\r\n  executionContext |= RenderContext;\r\n  const prevDispatcher = pushDispatcher();\r\n\r\n  // If the root or lanes have changed, throw out the existing stack\r\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\r\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\r\n    if (enableUpdaterTracking) {\r\n      if (isDevToolsPresent) {\r\n        const memoizedUpdaters = root.memoizedUpdaters;\r\n        if (memoizedUpdaters.size > 0) {\r\n          restorePendingUpdaters(root, workInProgressRootRenderLanes);\r\n          memoizedUpdaters.clear();\r\n        }\r\n\r\n        // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\r\n        // If we bailout on this work, we'll move them back (like above).\r\n        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\r\n        // That way we can keep the current update and future updates separate.\r\n        movePendingFibersToMemoized(root, lanes);\r\n      }\r\n    }\r\n\r\n    workInProgressTransitions = getTransitionsForLanes(root, lanes);\r\n    prepareFreshStack(root, lanes);\r\n  }\r\n\r\n  if (__DEV__) {\r\n    if (enableDebugTracing) {\r\n      logRenderStarted(lanes);\r\n    }\r\n  }\r\n\r\n  if (enableSchedulingProfiler) {\r\n    markRenderStarted(lanes);\r\n  }\r\n\r\n  do {\r\n    try {\r\n      workLoopSync();\r\n      break;\r\n    } catch (thrownValue) {\r\n      handleThrow(root, thrownValue);\r\n    }\r\n  } while (true);\r\n  resetContextDependencies();\r\n\r\n  executionContext = prevExecutionContext;\r\n  popDispatcher(prevDispatcher);\r\n\r\n  if (workInProgress !== null) {\r\n    // This is a sync render, so we should have finished the whole tree.\r\n    throw new Error(\r\n      'Cannot commit an incomplete root. This error is likely caused by a ' +\r\n        'bug in React. Please file an issue.',\r\n    );\r\n  }\r\n\r\n  if (__DEV__) {\r\n    if (enableDebugTracing) {\r\n      logRenderStopped();\r\n    }\r\n  }\r\n\r\n  if (enableSchedulingProfiler) {\r\n    markRenderStopped();\r\n  }\r\n\r\n  // Set this to null to indicate there's no in-progress render.\r\n  workInProgressRoot = null;\r\n  workInProgressRootRenderLanes = NoLanes;\r\n\r\n  return workInProgressRootExitStatus;\r\n}\r\n\r\n// The work loop is an extremely hot path. Tell Closure not to inline it.\r\n/** @noinline */\r\nfunction workLoopSync() {\r\n  // Perform work without checking if we need to yield between fiber.\r\n\r\n  if (workInProgressIsSuspended) {\r\n    // The current work-in-progress was already attempted. We need to unwind\r\n    // it before we continue the normal work loop.\r\n    const thrownValue = workInProgressThrownValue;\r\n    workInProgressIsSuspended = false;\r\n    workInProgressThrownValue = null;\r\n    if (workInProgress !== null) {\r\n      resumeSuspendedUnitOfWork(workInProgress, thrownValue);\r\n    }\r\n  }\r\n\r\n  while (workInProgress !== null) {\r\n    performUnitOfWork(workInProgress);\r\n  }\r\n}\r\n\r\nfunction renderRootConcurrent(root: FiberRoot, lanes: Lanes) {\r\n  const prevExecutionContext = executionContext;\r\n  executionContext |= RenderContext;\r\n  const prevDispatcher = pushDispatcher();\r\n\r\n  // If the root or lanes have changed, throw out the existing stack\r\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\r\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\r\n    if (enableUpdaterTracking) {\r\n      if (isDevToolsPresent) {\r\n        const memoizedUpdaters = root.memoizedUpdaters;\r\n        if (memoizedUpdaters.size > 0) {\r\n          restorePendingUpdaters(root, workInProgressRootRenderLanes);\r\n          memoizedUpdaters.clear();\r\n        }\r\n\r\n        // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\r\n        // If we bailout on this work, we'll move them back (like above).\r\n        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\r\n        // That way we can keep the current update and future updates separate.\r\n        movePendingFibersToMemoized(root, lanes);\r\n      }\r\n    }\r\n\r\n    workInProgressTransitions = getTransitionsForLanes(root, lanes);\r\n    resetRenderTimer();\r\n    prepareFreshStack(root, lanes);\r\n  }\r\n\r\n  if (__DEV__) {\r\n    if (enableDebugTracing) {\r\n      logRenderStarted(lanes);\r\n    }\r\n  }\r\n\r\n  if (enableSchedulingProfiler) {\r\n    markRenderStarted(lanes);\r\n  }\r\n\r\n  do {\r\n    try {\r\n      workLoopConcurrent();\r\n      break;\r\n    } catch (thrownValue) {\r\n      handleThrow(root, thrownValue);\r\n      if (isTrackingSuspendedThenable()) {\r\n        // If this fiber just suspended, it's possible the data is already\r\n        // cached. Yield to the main thread to give it a chance to ping. If\r\n        // it does, we can retry immediately without unwinding the stack.\r\n        break;\r\n      }\r\n    }\r\n  } while (true);\r\n  resetContextDependencies();\r\n\r\n  popDispatcher(prevDispatcher);\r\n  executionContext = prevExecutionContext;\r\n\r\n  if (__DEV__) {\r\n    if (enableDebugTracing) {\r\n      logRenderStopped();\r\n    }\r\n  }\r\n\r\n  // Check if the tree has completed.\r\n  if (workInProgress !== null) {\r\n    // Still work remaining.\r\n    if (enableSchedulingProfiler) {\r\n      markRenderYielded();\r\n    }\r\n    return RootInProgress;\r\n  } else {\r\n    // Completed the tree.\r\n    if (enableSchedulingProfiler) {\r\n      markRenderStopped();\r\n    }\r\n\r\n    // Set this to null to indicate there's no in-progress render.\r\n    workInProgressRoot = null;\r\n    workInProgressRootRenderLanes = NoLanes;\r\n\r\n    // Return the final exit status.\r\n    return workInProgressRootExitStatus;\r\n  }\r\n}\r\n\r\n/** @noinline */\r\nfunction workLoopConcurrent() {\r\n  // Perform work until Scheduler asks us to yield\r\n\r\n  if (workInProgressIsSuspended) {\r\n    // The current work-in-progress was already attempted. We need to unwind\r\n    // it before we continue the normal work loop.\r\n    const thrownValue = workInProgressThrownValue;\r\n    workInProgressIsSuspended = false;\r\n    workInProgressThrownValue = null;\r\n    if (workInProgress !== null) {\r\n      resumeSuspendedUnitOfWork(workInProgress, thrownValue);\r\n    }\r\n  }\r\n\r\n  while (workInProgress !== null && !shouldYield()) {\r\n    performUnitOfWork(workInProgress);\r\n  }\r\n}\r\n\r\nfunction performUnitOfWork(unitOfWork: Fiber): void {\r\n  // The current, flushed, state of this fiber is the alternate. Ideally\r\n  // nothing should rely on this, but relying on it here means that we don't\r\n  // need an additional field on the work in progress.\r\n  const current = unitOfWork.alternate;\r\n  setCurrentDebugFiberInDEV(unitOfWork);\r\n\r\n  let next;\r\n  if (enableProfilerTimer && (unitOfWork.mode & ProfileMode) !== NoMode) {\r\n    startProfilerTimer(unitOfWork);\r\n    next = beginWork(current, unitOfWork, renderLanes);\r\n    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\r\n  } else {\r\n    next = beginWork(current, unitOfWork, renderLanes);\r\n  }\r\n\r\n  resetCurrentDebugFiberInDEV();\r\n  unitOfWork.memoizedProps = unitOfWork.pendingProps;\r\n  if (next === null) {\r\n    // If this doesn't spawn new work, complete the current work.\r\n    completeUnitOfWork(unitOfWork);\r\n  } else {\r\n    workInProgress = next;\r\n  }\r\n\r\n  ReactCurrentOwner.current = null;\r\n}\r\n\r\nfunction resumeSuspendedUnitOfWork(\r\n  unitOfWork: Fiber,\r\n  thrownValue: mixed,\r\n): void {\r\n  // This is a fork of performUnitOfWork specifcally for resuming a fiber that\r\n  // just suspended. In some cases, we may choose to retry the fiber immediately\r\n  // instead of unwinding the stack. It's a separate function to keep the\r\n  // additional logic out of the work loop's hot path.\r\n\r\n  const wasPinged = suspendedThenableDidResolve();\r\n  resetWakeableStateAfterEachAttempt();\r\n\r\n  if (!wasPinged) {\r\n    // The thenable wasn't pinged. Return to the normal work loop. This will\r\n    // unwind the stack, and potentially result in showing a fallback.\r\n    resetThenableStateOnCompletion();\r\n\r\n    const returnFiber = unitOfWork.return;\r\n    if (returnFiber === null || workInProgressRoot === null) {\r\n      // Expected to be working on a non-root fiber. This is a fatal error\r\n      // because there's no ancestor that can handle it; the root is\r\n      // supposed to capture all errors that weren't caught by an error\r\n      // boundary.\r\n      workInProgressRootExitStatus = RootFatalErrored;\r\n      workInProgressRootFatalError = thrownValue;\r\n      // Set `workInProgress` to null. This represents advancing to the next\r\n      // sibling, or the parent if there are no siblings. But since the root\r\n      // has no siblings nor a parent, we set it to null. Usually this is\r\n      // handled by `completeUnitOfWork` or `unwindWork`, but since we're\r\n      // intentionally not calling those, we need set it here.\r\n      // TODO: Consider calling `unwindWork` to pop the contexts.\r\n      workInProgress = null;\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Find and mark the nearest Suspense or error boundary that can handle\r\n      // this \"exception\".\r\n      throwException(\r\n        workInProgressRoot,\r\n        returnFiber,\r\n        unitOfWork,\r\n        thrownValue,\r\n        workInProgressRootRenderLanes,\r\n      );\r\n    } catch (error) {\r\n      // We had trouble processing the error. An example of this happening is\r\n      // when accessing the `componentDidCatch` property of an error boundary\r\n      // throws an error. A weird edge case. There's a regression test for this.\r\n      // To prevent an infinite loop, bubble the error up to the next parent.\r\n      workInProgress = returnFiber;\r\n      throw error;\r\n    }\r\n\r\n    // Return to the normal work loop.\r\n    completeUnitOfWork(unitOfWork);\r\n    return;\r\n  }\r\n\r\n  // The work-in-progress was immediately pinged. Instead of unwinding the\r\n  // stack and potentially showing a fallback, unwind only the last stack frame,\r\n  // reset the fiber, and try rendering it again.\r\n  const current = unitOfWork.alternate;\r\n  unwindInterruptedWork(current, unitOfWork, workInProgressRootRenderLanes);\r\n  unitOfWork = workInProgress = resetWorkInProgress(unitOfWork, renderLanes);\r\n\r\n  setCurrentDebugFiberInDEV(unitOfWork);\r\n\r\n  let next;\r\n  if (enableProfilerTimer && (unitOfWork.mode & ProfileMode) !== NoMode) {\r\n    startProfilerTimer(unitOfWork);\r\n    next = beginWork(current, unitOfWork, renderLanes);\r\n    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\r\n  } else {\r\n    next = beginWork(current, unitOfWork, renderLanes);\r\n  }\r\n\r\n  // The begin phase finished successfully without suspending. Reset the state\r\n  // used to track the fiber while it was suspended. Then return to the normal\r\n  // work loop.\r\n  resetThenableStateOnCompletion();\r\n\r\n  resetCurrentDebugFiberInDEV();\r\n  unitOfWork.memoizedProps = unitOfWork.pendingProps;\r\n  if (next === null) {\r\n    // If this doesn't spawn new work, complete the current work.\r\n    completeUnitOfWork(unitOfWork);\r\n  } else {\r\n    workInProgress = next;\r\n  }\r\n\r\n  ReactCurrentOwner.current = null;\r\n}\r\n\r\nfunction completeUnitOfWork(unitOfWork: Fiber): void {\r\n  // Attempt to complete the current unit of work, then move to the next\r\n  // sibling. If there are no more siblings, return to the parent fiber.\r\n  let completedWork = unitOfWork;\r\n  do {\r\n    // The current, flushed, state of this fiber is the alternate. Ideally\r\n    // nothing should rely on this, but relying on it here means that we don't\r\n    // need an additional field on the work in progress.\r\n    const current = completedWork.alternate;\r\n    const returnFiber = completedWork.return;\r\n\r\n    // Check if the work completed or if something threw.\r\n    if ((completedWork.flags & Incomplete) === NoFlags) {\r\n      setCurrentDebugFiberInDEV(completedWork);\r\n      let next;\r\n      if (\r\n        !enableProfilerTimer ||\r\n        (completedWork.mode & ProfileMode) === NoMode\r\n      ) {\r\n        next = completeWork(current, completedWork, renderLanes);\r\n      } else {\r\n        startProfilerTimer(completedWork);\r\n        next = completeWork(current, completedWork, renderLanes);\r\n        // Update render duration assuming we didn't error.\r\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\r\n      }\r\n      resetCurrentDebugFiberInDEV();\r\n\r\n      if (next !== null) {\r\n        // Completing this fiber spawned new work. Work on that next.\r\n        workInProgress = next;\r\n        return;\r\n      }\r\n    } else {\r\n      // This fiber did not complete because something threw. Pop values off\r\n      // the stack without entering the complete phase. If this is a boundary,\r\n      // capture values if possible.\r\n      const next = unwindWork(current, completedWork, renderLanes);\r\n\r\n      // Because this fiber did not complete, don't reset its lanes.\r\n\r\n      if (next !== null) {\r\n        // If completing this work spawned new work, do that next. We'll come\r\n        // back here again.\r\n        // Since we're restarting, remove anything that is not a host effect\r\n        // from the effect tag.\r\n        next.flags &= HostEffectMask;\r\n        workInProgress = next;\r\n        return;\r\n      }\r\n\r\n      if (\r\n        enableProfilerTimer &&\r\n        (completedWork.mode & ProfileMode) !== NoMode\r\n      ) {\r\n        // Record the render duration for the fiber that errored.\r\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\r\n\r\n        // Include the time spent working on failed children before continuing.\r\n        let actualDuration = completedWork.actualDuration;\r\n        let child = completedWork.child;\r\n        while (child !== null) {\r\n          // $FlowFixMe[unsafe-addition] addition with possible null/undefined value\r\n          actualDuration += child.actualDuration;\r\n          child = child.sibling;\r\n        }\r\n        completedWork.actualDuration = actualDuration;\r\n      }\r\n\r\n      if (returnFiber !== null) {\r\n        // Mark the parent fiber as incomplete and clear its subtree flags.\r\n        returnFiber.flags |= Incomplete;\r\n        returnFiber.subtreeFlags = NoFlags;\r\n        returnFiber.deletions = null;\r\n      } else {\r\n        // We've unwound all the way to the root.\r\n        workInProgressRootExitStatus = RootDidNotComplete;\r\n        workInProgress = null;\r\n        return;\r\n      }\r\n    }\r\n\r\n    const siblingFiber = completedWork.sibling;\r\n    if (siblingFiber !== null) {\r\n      // If there is more work to do in this returnFiber, do that next.\r\n      workInProgress = siblingFiber;\r\n      return;\r\n    }\r\n    // Otherwise, return to the parent\r\n    completedWork = returnFiber;\r\n    // Update the next thing we're working on in case something throws.\r\n    workInProgress = completedWork;\r\n  } while (completedWork !== null);\r\n\r\n  // We've reached the root.\r\n  if (workInProgressRootExitStatus === RootInProgress) {\r\n    workInProgressRootExitStatus = RootCompleted;\r\n  }\r\n}\r\n\r\nfunction commitRoot(\r\n  root: FiberRoot,\r\n  recoverableErrors: null | Array<CapturedValue<mixed>>,\r\n  transitions: Array<Transition> | null,\r\n) {\r\n  // TODO: This no longer makes any sense. We already wrap the mutation and\r\n  // layout phases. Should be able to remove.\r\n  const previousUpdateLanePriority = getCurrentUpdatePriority();\r\n  const prevTransition = ReactCurrentBatchConfig.transition;\r\n\r\n  try {\r\n    ReactCurrentBatchConfig.transition = null;\r\n    setCurrentUpdatePriority(DiscreteEventPriority);\r\n    commitRootImpl(\r\n      root,\r\n      recoverableErrors,\r\n      transitions,\r\n      previousUpdateLanePriority,\r\n    );\r\n  } finally {\r\n    ReactCurrentBatchConfig.transition = prevTransition;\r\n    setCurrentUpdatePriority(previousUpdateLanePriority);\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction commitRootImpl(\r\n  root: FiberRoot,\r\n  recoverableErrors: null | Array<CapturedValue<mixed>>,\r\n  transitions: Array<Transition> | null,\r\n  renderPriorityLevel: EventPriority,\r\n) {\r\n  do {\r\n    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which\r\n    // means `flushPassiveEffects` will sometimes result in additional\r\n    // passive effects. So we need to keep flushing in a loop until there are\r\n    // no more pending effects.\r\n    // TODO: Might be better if `flushPassiveEffects` did not automatically\r\n    // flush synchronous work at the end, to avoid factoring hazards like this.\r\n    flushPassiveEffects();\r\n  } while (rootWithPendingPassiveEffects !== null);\r\n  flushRenderPhaseStrictModeWarningsInDEV();\r\n\r\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\r\n    throw new Error('Should not already be working.');\r\n  }\r\n\r\n  const finishedWork = root.finishedWork;\r\n  const lanes = root.finishedLanes;\r\n\r\n  if (__DEV__) {\r\n    if (enableDebugTracing) {\r\n      logCommitStarted(lanes);\r\n    }\r\n  }\r\n\r\n  if (enableSchedulingProfiler) {\r\n    markCommitStarted(lanes);\r\n  }\r\n\r\n  if (finishedWork === null) {\r\n    if (__DEV__) {\r\n      if (enableDebugTracing) {\r\n        logCommitStopped();\r\n      }\r\n    }\r\n\r\n    if (enableSchedulingProfiler) {\r\n      markCommitStopped();\r\n    }\r\n\r\n    return null;\r\n  } else {\r\n    if (__DEV__) {\r\n      if (lanes === NoLanes) {\r\n        console.error(\r\n          'root.finishedLanes should not be empty during a commit. This is a ' +\r\n            'bug in React.',\r\n        );\r\n      }\r\n    }\r\n  }\r\n  root.finishedWork = null;\r\n  root.finishedLanes = NoLanes;\r\n\r\n  if (finishedWork === root.current) {\r\n    throw new Error(\r\n      'Cannot commit the same tree as before. This error is likely caused by ' +\r\n        'a bug in React. Please file an issue.',\r\n    );\r\n  }\r\n\r\n  // commitRoot never returns a continuation; it always finishes synchronously.\r\n  // So we can clear these now to allow a new callback to be scheduled.\r\n  root.callbackNode = null;\r\n  root.callbackPriority = NoLane;\r\n\r\n  // Check which lanes no longer have any work scheduled on them, and mark\r\n  // those as finished.\r\n  let remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);\r\n\r\n  // Make sure to account for lanes that were updated by a concurrent event\r\n  // during the render phase; don't mark them as finished.\r\n  const concurrentlyUpdatedLanes = getConcurrentlyUpdatedLanes();\r\n  remainingLanes = mergeLanes(remainingLanes, concurrentlyUpdatedLanes);\r\n\r\n  markRootFinished(root, remainingLanes);\r\n\r\n  if (root === workInProgressRoot) {\r\n    // We can reset these now that they are finished.\r\n    workInProgressRoot = null;\r\n    workInProgress = null;\r\n    workInProgressRootRenderLanes = NoLanes;\r\n  } else {\r\n    // This indicates that the last root we worked on is not the same one that\r\n    // we're committing now. This most commonly happens when a suspended root\r\n    // times out.\r\n  }\r\n\r\n  // If there are pending passive effects, schedule a callback to process them.\r\n  // Do this as early as possible, so it is queued before anything else that\r\n  // might get scheduled in the commit phase. (See #16714.)\r\n  // TODO: Delete all other places that schedule the passive effect callback\r\n  // They're redundant.\r\n  if (\r\n    (finishedWork.subtreeFlags & PassiveMask) !== NoFlags ||\r\n    (finishedWork.flags & PassiveMask) !== NoFlags\r\n  ) {\r\n    if (!rootDoesHavePassiveEffects) {\r\n      rootDoesHavePassiveEffects = true;\r\n      pendingPassiveEffectsRemainingLanes = remainingLanes;\r\n      // workInProgressTransitions might be overwritten, so we want\r\n      // to store it in pendingPassiveTransitions until they get processed\r\n      // We need to pass this through as an argument to commitRoot\r\n      // because workInProgressTransitions might have changed between\r\n      // the previous render and commit if we throttle the commit\r\n      // with setTimeout\r\n      pendingPassiveTransitions = transitions;\r\n      scheduleCallback(NormalSchedulerPriority, () => {\r\n        flushPassiveEffects();\r\n        // This render triggered passive effects: release the root cache pool\r\n        // *after* passive effects fire to avoid freeing a cache pool that may\r\n        // be referenced by a node in the tree (HostRoot, Cache boundary etc)\r\n        return null;\r\n      });\r\n    }\r\n  }\r\n\r\n  // Check if there are any effects in the whole tree.\r\n  // TODO: This is left over from the effect list implementation, where we had\r\n  // to check for the existence of `firstEffect` to satisfy Flow. I think the\r\n  // only other reason this optimization exists is because it affects profiling.\r\n  // Reconsider whether this is necessary.\r\n  const subtreeHasEffects =\r\n    (finishedWork.subtreeFlags &\r\n      (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !==\r\n    NoFlags;\r\n  const rootHasEffect =\r\n    (finishedWork.flags &\r\n      (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !==\r\n    NoFlags;\r\n\r\n  if (subtreeHasEffects || rootHasEffect) {\r\n    const prevTransition = ReactCurrentBatchConfig.transition;\r\n    ReactCurrentBatchConfig.transition = null;\r\n    const previousPriority = getCurrentUpdatePriority();\r\n    setCurrentUpdatePriority(DiscreteEventPriority);\r\n\r\n    const prevExecutionContext = executionContext;\r\n    executionContext |= CommitContext;\r\n\r\n    // Reset this to null before calling lifecycles\r\n    ReactCurrentOwner.current = null;\r\n\r\n    // The commit phase is broken into several sub-phases. We do a separate pass\r\n    // of the effect list for each phase: all mutation effects come before all\r\n    // layout effects, and so on.\r\n\r\n    // The first phase a \"before mutation\" phase. We use this phase to read the\r\n    // state of the host tree right before we mutate it. This is where\r\n    // getSnapshotBeforeUpdate is called.\r\n    const shouldFireAfterActiveInstanceBlur = commitBeforeMutationEffects(\r\n      root,\r\n      finishedWork,\r\n    );\r\n\r\n    if (enableProfilerTimer) {\r\n      // Mark the current commit time to be shared by all Profilers in this\r\n      // batch. This enables them to be grouped later.\r\n      recordCommitTime();\r\n    }\r\n\r\n    if (enableProfilerTimer && enableProfilerNestedUpdateScheduledHook) {\r\n      // Track the root here, rather than in commitLayoutEffects(), because of ref setters.\r\n      // Updates scheduled during ref detachment should also be flagged.\r\n      rootCommittingMutationOrLayoutEffects = root;\r\n    }\r\n\r\n    // The next phase is the mutation phase, where we mutate the host tree.\r\n    commitMutationEffects(root, finishedWork, lanes);\r\n\r\n    if (enableCreateEventHandleAPI) {\r\n      if (shouldFireAfterActiveInstanceBlur) {\r\n        afterActiveInstanceBlur();\r\n      }\r\n    }\r\n    resetAfterCommit(root.containerInfo);\r\n\r\n    // The work-in-progress tree is now the current tree. This must come after\r\n    // the mutation phase, so that the previous tree is still current during\r\n    // componentWillUnmount, but before the layout phase, so that the finished\r\n    // work is current during componentDidMount/Update.\r\n    root.current = finishedWork;\r\n\r\n    // The next phase is the layout phase, where we call effects that read\r\n    // the host tree after it's been mutated. The idiomatic use case for this is\r\n    // layout, but class component lifecycles also fire here for legacy reasons.\r\n    if (__DEV__) {\r\n      if (enableDebugTracing) {\r\n        logLayoutEffectsStarted(lanes);\r\n      }\r\n    }\r\n    if (enableSchedulingProfiler) {\r\n      markLayoutEffectsStarted(lanes);\r\n    }\r\n    commitLayoutEffects(finishedWork, root, lanes);\r\n    if (__DEV__) {\r\n      if (enableDebugTracing) {\r\n        logLayoutEffectsStopped();\r\n      }\r\n    }\r\n\r\n    if (enableSchedulingProfiler) {\r\n      markLayoutEffectsStopped();\r\n    }\r\n\r\n    if (enableProfilerTimer && enableProfilerNestedUpdateScheduledHook) {\r\n      rootCommittingMutationOrLayoutEffects = null;\r\n    }\r\n\r\n    // Tell Scheduler to yield at the end of the frame, so the browser has an\r\n    // opportunity to paint.\r\n    requestPaint();\r\n\r\n    executionContext = prevExecutionContext;\r\n\r\n    // Reset the priority to the previous non-sync value.\r\n    setCurrentUpdatePriority(previousPriority);\r\n    ReactCurrentBatchConfig.transition = prevTransition;\r\n  } else {\r\n    // No effects.\r\n    root.current = finishedWork;\r\n    // Measure these anyway so the flamegraph explicitly shows that there were\r\n    // no effects.\r\n    // TODO: Maybe there's a better way to report this.\r\n    if (enableProfilerTimer) {\r\n      recordCommitTime();\r\n    }\r\n  }\r\n\r\n  const rootDidHavePassiveEffects = rootDoesHavePassiveEffects;\r\n\r\n  if (rootDoesHavePassiveEffects) {\r\n    // This commit has passive effects. Stash a reference to them. But don't\r\n    // schedule a callback until after flushing layout work.\r\n    rootDoesHavePassiveEffects = false;\r\n    rootWithPendingPassiveEffects = root;\r\n    pendingPassiveEffectsLanes = lanes;\r\n  } else {\r\n    // There were no passive effects, so we can immediately release the cache\r\n    // pool for this render.\r\n    releaseRootPooledCache(root, remainingLanes);\r\n    if (__DEV__) {\r\n      nestedPassiveUpdateCount = 0;\r\n      rootWithPassiveNestedUpdates = null;\r\n    }\r\n  }\r\n\r\n  // Read this again, since an effect might have updated it\r\n  remainingLanes = root.pendingLanes;\r\n\r\n  // Check if there's remaining work on this root\r\n  // TODO: This is part of the `componentDidCatch` implementation. Its purpose\r\n  // is to detect whether something might have called setState inside\r\n  // `componentDidCatch`. The mechanism is known to be flawed because `setState`\r\n  // inside `componentDidCatch` is itself flawed — that's why we recommend\r\n  // `getDerivedStateFromError` instead. However, it could be improved by\r\n  // checking if remainingLanes includes Sync work, instead of whether there's\r\n  // any work remaining at all (which would also include stuff like Suspense\r\n  // retries or transitions). It's been like this for a while, though, so fixing\r\n  // it probably isn't that urgent.\r\n  if (remainingLanes === NoLanes) {\r\n    // If there's no remaining work, we can clear the set of already failed\r\n    // error boundaries.\r\n    legacyErrorBoundariesThatAlreadyFailed = null;\r\n  }\r\n\r\n  if (__DEV__ && enableStrictEffects) {\r\n    if (!rootDidHavePassiveEffects) {\r\n      commitDoubleInvokeEffectsInDEV(root);\r\n    }\r\n  }\r\n\r\n  onCommitRootDevTools(finishedWork.stateNode, renderPriorityLevel);\r\n\r\n  if (enableUpdaterTracking) {\r\n    if (isDevToolsPresent) {\r\n      root.memoizedUpdaters.clear();\r\n    }\r\n  }\r\n\r\n  if (__DEV__) {\r\n    onCommitRootTestSelector();\r\n  }\r\n\r\n  // Always call this before exiting `commitRoot`, to ensure that any\r\n  // additional work on this root is scheduled.\r\n  ensureRootIsScheduled(root, now());\r\n\r\n  if (recoverableErrors !== null) {\r\n    // There were errors during this render, but recovered from them without\r\n    // needing to surface it to the UI. We log them here.\r\n    const onRecoverableError = root.onRecoverableError;\r\n    for (let i = 0; i < recoverableErrors.length; i++) {\r\n      const recoverableError = recoverableErrors[i];\r\n      const componentStack = recoverableError.stack;\r\n      const digest = recoverableError.digest;\r\n      onRecoverableError(recoverableError.value, {componentStack, digest});\r\n    }\r\n  }\r\n\r\n  if (hasUncaughtError) {\r\n    hasUncaughtError = false;\r\n    const error = firstUncaughtError;\r\n    firstUncaughtError = null;\r\n    throw error;\r\n  }\r\n\r\n  // If the passive effects are the result of a discrete render, flush them\r\n  // synchronously at the end of the current task so that the result is\r\n  // immediately observable. Otherwise, we assume that they are not\r\n  // order-dependent and do not need to be observed by external systems, so we\r\n  // can wait until after paint.\r\n  // TODO: We can optimize this by not scheduling the callback earlier. Since we\r\n  // currently schedule the callback in multiple places, will wait until those\r\n  // are consolidated.\r\n  if (\r\n    includesSomeLane(pendingPassiveEffectsLanes, SyncLane) &&\r\n    root.tag !== LegacyRoot\r\n  ) {\r\n    flushPassiveEffects();\r\n  }\r\n\r\n  // Read this again, since a passive effect might have updated it\r\n  remainingLanes = root.pendingLanes;\r\n  if (includesSomeLane(remainingLanes, (SyncLane: Lane))) {\r\n    if (enableProfilerTimer && enableProfilerNestedUpdatePhase) {\r\n      markNestedUpdateScheduled();\r\n    }\r\n\r\n    // Count the number of times the root synchronously re-renders without\r\n    // finishing. If there are too many, it indicates an infinite update loop.\r\n    if (root === rootWithNestedUpdates) {\r\n      nestedUpdateCount++;\r\n    } else {\r\n      nestedUpdateCount = 0;\r\n      rootWithNestedUpdates = root;\r\n    }\r\n  } else {\r\n    nestedUpdateCount = 0;\r\n  }\r\n\r\n  // If layout work was scheduled, flush it now.\r\n  flushSyncCallbacks();\r\n\r\n  if (__DEV__) {\r\n    if (enableDebugTracing) {\r\n      logCommitStopped();\r\n    }\r\n  }\r\n\r\n  if (enableSchedulingProfiler) {\r\n    markCommitStopped();\r\n  }\r\n\r\n  if (enableTransitionTracing) {\r\n    // We process transitions during passive effects. However, passive effects can be\r\n    // processed synchronously during the commit phase as well as asynchronously after\r\n    // paint. At the end of the commit phase, we schedule a callback that will be called\r\n    // after the next paint. If the transitions have already been processed (passive\r\n    // effect phase happened synchronously), we will schedule a callback to process\r\n    // the transitions. However, if we don't have any pending transition callbacks, this\r\n    // means that the transitions have yet to be processed (passive effects processed after paint)\r\n    // so we will store the end time of paint so that we can process the transitions\r\n    // and then call the callback via the correct end time.\r\n    const prevRootTransitionCallbacks = root.transitionCallbacks;\r\n    if (prevRootTransitionCallbacks !== null) {\r\n      schedulePostPaintCallback(endTime => {\r\n        const prevPendingTransitionCallbacks = currentPendingTransitionCallbacks;\r\n        if (prevPendingTransitionCallbacks !== null) {\r\n          currentPendingTransitionCallbacks = null;\r\n          scheduleCallback(IdleSchedulerPriority, () => {\r\n            processTransitionCallbacks(\r\n              prevPendingTransitionCallbacks,\r\n              endTime,\r\n              prevRootTransitionCallbacks,\r\n            );\r\n          });\r\n        } else {\r\n          currentEndTime = endTime;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction releaseRootPooledCache(root: FiberRoot, remainingLanes: Lanes) {\r\n  if (enableCache) {\r\n    const pooledCacheLanes = (root.pooledCacheLanes &= remainingLanes);\r\n    if (pooledCacheLanes === NoLanes) {\r\n      // None of the remaining work relies on the cache pool. Clear it so\r\n      // subsequent requests get a new cache\r\n      const pooledCache = root.pooledCache;\r\n      if (pooledCache != null) {\r\n        root.pooledCache = null;\r\n        releaseCache(pooledCache);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function flushPassiveEffects(): boolean {\r\n  // Returns whether passive effects were flushed.\r\n  // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should\r\n  // probably just combine the two functions. I believe they were only separate\r\n  // in the first place because we used to wrap it with\r\n  // `Scheduler.runWithPriority`, which accepts a function. But now we track the\r\n  // priority within React itself, so we can mutate the variable directly.\r\n  if (rootWithPendingPassiveEffects !== null) {\r\n    // Cache the root since rootWithPendingPassiveEffects is cleared in\r\n    // flushPassiveEffectsImpl\r\n    const root = rootWithPendingPassiveEffects;\r\n    // Cache and clear the remaining lanes flag; it must be reset since this\r\n    // method can be called from various places, not always from commitRoot\r\n    // where the remaining lanes are known\r\n    const remainingLanes = pendingPassiveEffectsRemainingLanes;\r\n    pendingPassiveEffectsRemainingLanes = NoLanes;\r\n\r\n    const renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);\r\n    const priority = lowerEventPriority(DefaultEventPriority, renderPriority);\r\n    const prevTransition = ReactCurrentBatchConfig.transition;\r\n    const previousPriority = getCurrentUpdatePriority();\r\n\r\n    try {\r\n      ReactCurrentBatchConfig.transition = null;\r\n      setCurrentUpdatePriority(priority);\r\n      return flushPassiveEffectsImpl();\r\n    } finally {\r\n      setCurrentUpdatePriority(previousPriority);\r\n      ReactCurrentBatchConfig.transition = prevTransition;\r\n\r\n      // Once passive effects have run for the tree - giving components a\r\n      // chance to retain cache instances they use - release the pooled\r\n      // cache at the root (if there is one)\r\n      releaseRootPooledCache(root, remainingLanes);\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function enqueuePendingPassiveProfilerEffect(fiber: Fiber): void {\r\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\r\n    pendingPassiveProfilerEffects.push(fiber);\r\n    if (!rootDoesHavePassiveEffects) {\r\n      rootDoesHavePassiveEffects = true;\r\n      scheduleCallback(NormalSchedulerPriority, () => {\r\n        flushPassiveEffects();\r\n        return null;\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nfunction flushPassiveEffectsImpl() {\r\n  if (rootWithPendingPassiveEffects === null) {\r\n    return false;\r\n  }\r\n\r\n  // Cache and clear the transitions flag\r\n  const transitions = pendingPassiveTransitions;\r\n  pendingPassiveTransitions = null;\r\n\r\n  const root = rootWithPendingPassiveEffects;\r\n  const lanes = pendingPassiveEffectsLanes;\r\n  rootWithPendingPassiveEffects = null;\r\n  // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.\r\n  // Figure out why and fix it. It's not causing any known issues (probably\r\n  // because it's only used for profiling), but it's a refactor hazard.\r\n  pendingPassiveEffectsLanes = NoLanes;\r\n\r\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\r\n    throw new Error('Cannot flush passive effects while already rendering.');\r\n  }\r\n\r\n  if (__DEV__) {\r\n    isFlushingPassiveEffects = true;\r\n    didScheduleUpdateDuringPassiveEffects = false;\r\n\r\n    if (enableDebugTracing) {\r\n      logPassiveEffectsStarted(lanes);\r\n    }\r\n  }\r\n\r\n  if (enableSchedulingProfiler) {\r\n    markPassiveEffectsStarted(lanes);\r\n  }\r\n\r\n  const prevExecutionContext = executionContext;\r\n  executionContext |= CommitContext;\r\n\r\n  commitPassiveUnmountEffects(root.current);\r\n  commitPassiveMountEffects(root, root.current, lanes, transitions);\r\n\r\n  // TODO: Move to commitPassiveMountEffects\r\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\r\n    const profilerEffects = pendingPassiveProfilerEffects;\r\n    pendingPassiveProfilerEffects = [];\r\n    for (let i = 0; i < profilerEffects.length; i++) {\r\n      const fiber = ((profilerEffects[i]: any): Fiber);\r\n      commitPassiveEffectDurations(root, fiber);\r\n    }\r\n  }\r\n\r\n  if (__DEV__) {\r\n    if (enableDebugTracing) {\r\n      logPassiveEffectsStopped();\r\n    }\r\n  }\r\n\r\n  if (enableSchedulingProfiler) {\r\n    markPassiveEffectsStopped();\r\n  }\r\n\r\n  if (__DEV__ && enableStrictEffects) {\r\n    commitDoubleInvokeEffectsInDEV(root);\r\n  }\r\n\r\n  executionContext = prevExecutionContext;\r\n\r\n  flushSyncCallbacks();\r\n\r\n  if (enableTransitionTracing) {\r\n    const prevPendingTransitionCallbacks = currentPendingTransitionCallbacks;\r\n    const prevRootTransitionCallbacks = root.transitionCallbacks;\r\n    const prevEndTime = currentEndTime;\r\n    if (\r\n      prevPendingTransitionCallbacks !== null &&\r\n      prevRootTransitionCallbacks !== null &&\r\n      prevEndTime !== null\r\n    ) {\r\n      currentPendingTransitionCallbacks = null;\r\n      currentEndTime = null;\r\n      scheduleCallback(IdleSchedulerPriority, () => {\r\n        processTransitionCallbacks(\r\n          prevPendingTransitionCallbacks,\r\n          prevEndTime,\r\n          prevRootTransitionCallbacks,\r\n        );\r\n      });\r\n    }\r\n  }\r\n\r\n  if (__DEV__) {\r\n    // If additional passive effects were scheduled, increment a counter. If this\r\n    // exceeds the limit, we'll fire a warning.\r\n    if (didScheduleUpdateDuringPassiveEffects) {\r\n      if (root === rootWithPassiveNestedUpdates) {\r\n        nestedPassiveUpdateCount++;\r\n      } else {\r\n        nestedPassiveUpdateCount = 0;\r\n        rootWithPassiveNestedUpdates = root;\r\n      }\r\n    } else {\r\n      nestedPassiveUpdateCount = 0;\r\n    }\r\n    isFlushingPassiveEffects = false;\r\n    didScheduleUpdateDuringPassiveEffects = false;\r\n  }\r\n\r\n  // TODO: Move to commitPassiveMountEffects\r\n  onPostCommitRootDevTools(root);\r\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\r\n    const stateNode = root.current.stateNode;\r\n    stateNode.effectDuration = 0;\r\n    stateNode.passiveEffectDuration = 0;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nexport function isAlreadyFailedLegacyErrorBoundary(instance: mixed): boolean {\r\n  return (\r\n    legacyErrorBoundariesThatAlreadyFailed !== null &&\r\n    legacyErrorBoundariesThatAlreadyFailed.has(instance)\r\n  );\r\n}\r\n\r\nexport function markLegacyErrorBoundaryAsFailed(instance: mixed) {\r\n  if (legacyErrorBoundariesThatAlreadyFailed === null) {\r\n    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\r\n  } else {\r\n    legacyErrorBoundariesThatAlreadyFailed.add(instance);\r\n  }\r\n}\r\n\r\nfunction prepareToThrowUncaughtError(error: mixed) {\r\n  if (!hasUncaughtError) {\r\n    hasUncaughtError = true;\r\n    firstUncaughtError = error;\r\n  }\r\n}\r\nexport const onUncaughtError = prepareToThrowUncaughtError;\r\n\r\nfunction captureCommitPhaseErrorOnRoot(\r\n  rootFiber: Fiber,\r\n  sourceFiber: Fiber,\r\n  error: mixed,\r\n) {\r\n  const errorInfo = createCapturedValueAtFiber(error, sourceFiber);\r\n  const update = createRootErrorUpdate(rootFiber, errorInfo, (SyncLane: Lane));\r\n  const root = enqueueUpdate(rootFiber, update, (SyncLane: Lane));\r\n  const eventTime = requestEventTime();\r\n  if (root !== null) {\r\n    markRootUpdated(root, SyncLane, eventTime);\r\n    ensureRootIsScheduled(root, eventTime);\r\n  }\r\n}\r\n\r\nexport function captureCommitPhaseError(\r\n  sourceFiber: Fiber,\r\n  nearestMountedAncestor: Fiber | null,\r\n  error: mixed,\r\n) {\r\n  if (__DEV__) {\r\n    reportUncaughtErrorInDEV(error);\r\n    setIsRunningInsertionEffect(false);\r\n  }\r\n  if (sourceFiber.tag === HostRoot) {\r\n    // Error was thrown at the root. There is no parent, so the root\r\n    // itself should capture it.\r\n    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);\r\n    return;\r\n  }\r\n\r\n  let fiber = null;\r\n  if (skipUnmountedBoundaries) {\r\n    fiber = nearestMountedAncestor;\r\n  } else {\r\n    fiber = sourceFiber.return;\r\n  }\r\n\r\n  while (fiber !== null) {\r\n    if (fiber.tag === HostRoot) {\r\n      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);\r\n      return;\r\n    } else if (fiber.tag === ClassComponent) {\r\n      const ctor = fiber.type;\r\n      const instance = fiber.stateNode;\r\n      if (\r\n        typeof ctor.getDerivedStateFromError === 'function' ||\r\n        (typeof instance.componentDidCatch === 'function' &&\r\n          !isAlreadyFailedLegacyErrorBoundary(instance))\r\n      ) {\r\n        const errorInfo = createCapturedValueAtFiber(error, sourceFiber);\r\n        const update = createClassErrorUpdate(\r\n          fiber,\r\n          errorInfo,\r\n          (SyncLane: Lane),\r\n        );\r\n        const root = enqueueUpdate(fiber, update, (SyncLane: Lane));\r\n        const eventTime = requestEventTime();\r\n        if (root !== null) {\r\n          markRootUpdated(root, SyncLane, eventTime);\r\n          ensureRootIsScheduled(root, eventTime);\r\n        }\r\n        return;\r\n      }\r\n    }\r\n    fiber = fiber.return;\r\n  }\r\n\r\n  if (__DEV__) {\r\n    // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning\r\n    // will fire for errors that are thrown by destroy functions inside deleted\r\n    // trees. What it should instead do is propagate the error to the parent of\r\n    // the deleted tree. In the meantime, do not add this warning to the\r\n    // allowlist; this is only for our internal use.\r\n    console.error(\r\n      'Internal React error: Attempted to capture a commit phase error ' +\r\n        'inside a detached tree. This indicates a bug in React. Likely ' +\r\n        'causes include deleting the same fiber more than once, committing an ' +\r\n        'already-finished tree, or an inconsistent return pointer.\\n\\n' +\r\n        'Error message:\\n\\n%s',\r\n      error,\r\n    );\r\n  }\r\n}\r\n\r\nexport function attachPingListener(\r\n  root: FiberRoot,\r\n  wakeable: Wakeable,\r\n  lanes: Lanes,\r\n) {\r\n  // Attach a ping listener\r\n  //\r\n  // The data might resolve before we have a chance to commit the fallback. Or,\r\n  // in the case of a refresh, we'll never commit a fallback. So we need to\r\n  // attach a listener now. When it resolves (\"pings\"), we can decide whether to\r\n  // try rendering the tree again.\r\n  //\r\n  // Only attach a listener if one does not already exist for the lanes\r\n  // we're currently rendering (which acts like a \"thread ID\" here).\r\n  //\r\n  // We only need to do this in concurrent mode. Legacy Suspense always\r\n  // commits fallbacks synchronously, so there are no pings.\r\n  let pingCache = root.pingCache;\r\n  let threadIDs;\r\n  if (pingCache === null) {\r\n    pingCache = root.pingCache = new PossiblyWeakMap();\r\n    threadIDs = new Set();\r\n    pingCache.set(wakeable, threadIDs);\r\n  } else {\r\n    threadIDs = pingCache.get(wakeable);\r\n    if (threadIDs === undefined) {\r\n      threadIDs = new Set();\r\n      pingCache.set(wakeable, threadIDs);\r\n    }\r\n  }\r\n  if (!threadIDs.has(lanes)) {\r\n    workInProgressRootDidAttachPingListener = true;\r\n\r\n    // Memoize using the thread ID to prevent redundant listeners.\r\n    threadIDs.add(lanes);\r\n    const ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\r\n    if (enableUpdaterTracking) {\r\n      if (isDevToolsPresent) {\r\n        // If we have pending work still, restore the original updaters\r\n        restorePendingUpdaters(root, lanes);\r\n      }\r\n    }\r\n    wakeable.then(ping, ping);\r\n  }\r\n}\r\n\r\nfunction pingSuspendedRoot(\r\n  root: FiberRoot,\r\n  wakeable: Wakeable,\r\n  pingedLanes: Lanes,\r\n) {\r\n  const pingCache = root.pingCache;\r\n  if (pingCache !== null) {\r\n    // The wakeable resolved, so we no longer need to memoize, because it will\r\n    // never be thrown again.\r\n    pingCache.delete(wakeable);\r\n  }\r\n\r\n  const eventTime = requestEventTime();\r\n  markRootPinged(root, pingedLanes, eventTime);\r\n\r\n  warnIfSuspenseResolutionNotWrappedWithActDEV(root);\r\n\r\n  if (\r\n    workInProgressRoot === root &&\r\n    isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)\r\n  ) {\r\n    // Received a ping at the same priority level at which we're currently\r\n    // rendering. We might want to restart this render. This should mirror\r\n    // the logic of whether or not a root suspends once it completes.\r\n    // TODO: If we're rendering sync either due to Sync, Batched or expired,\r\n    // we should probably never restart.\r\n\r\n    // If we're suspended with delay, or if it's a retry, we'll always suspend\r\n    // so we can always restart.\r\n    if (\r\n      workInProgressRootExitStatus === RootSuspendedWithDelay ||\r\n      (workInProgressRootExitStatus === RootSuspended &&\r\n        includesOnlyRetries(workInProgressRootRenderLanes) &&\r\n        now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS)\r\n    ) {\r\n      // Restart from the root.\r\n      prepareFreshStack(root, NoLanes);\r\n    } else {\r\n      // Even though we can't restart right now, we might get an\r\n      // opportunity later. So we mark this render as having a ping.\r\n      workInProgressRootPingedLanes = mergeLanes(\r\n        workInProgressRootPingedLanes,\r\n        pingedLanes,\r\n      );\r\n    }\r\n  }\r\n\r\n  ensureRootIsScheduled(root, eventTime);\r\n}\r\n\r\nfunction retryTimedOutBoundary(boundaryFiber: Fiber, retryLane: Lane) {\r\n  // The boundary fiber (a Suspense component or SuspenseList component)\r\n  // previously was rendered in its fallback state. One of the promises that\r\n  // suspended it has resolved, which means at least part of the tree was\r\n  // likely unblocked. Try rendering again, at a new lanes.\r\n  if (retryLane === NoLane) {\r\n    // TODO: Assign this to `suspenseState.retryLane`? to avoid\r\n    // unnecessary entanglement?\r\n    retryLane = requestRetryLane(boundaryFiber);\r\n  }\r\n  // TODO: Special case idle priority?\r\n  const eventTime = requestEventTime();\r\n  const root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);\r\n  if (root !== null) {\r\n    markRootUpdated(root, retryLane, eventTime);\r\n    ensureRootIsScheduled(root, eventTime);\r\n  }\r\n}\r\n\r\nexport function retryDehydratedSuspenseBoundary(boundaryFiber: Fiber) {\r\n  const suspenseState: null | SuspenseState = boundaryFiber.memoizedState;\r\n  let retryLane = NoLane;\r\n  if (suspenseState !== null) {\r\n    retryLane = suspenseState.retryLane;\r\n  }\r\n  retryTimedOutBoundary(boundaryFiber, retryLane);\r\n}\r\n\r\nexport function resolveRetryWakeable(boundaryFiber: Fiber, wakeable: Wakeable) {\r\n  let retryLane = NoLane; // Default\r\n  let retryCache: WeakSet<Wakeable> | Set<Wakeable> | null;\r\n  switch (boundaryFiber.tag) {\r\n    case SuspenseComponent:\r\n      retryCache = boundaryFiber.stateNode;\r\n      const suspenseState: null | SuspenseState = boundaryFiber.memoizedState;\r\n      if (suspenseState !== null) {\r\n        retryLane = suspenseState.retryLane;\r\n      }\r\n      break;\r\n    case SuspenseListComponent:\r\n      retryCache = boundaryFiber.stateNode;\r\n      break;\r\n    case OffscreenComponent: {\r\n      const instance: OffscreenInstance = boundaryFiber.stateNode;\r\n      retryCache = instance.retryCache;\r\n      break;\r\n    }\r\n    default:\r\n      throw new Error(\r\n        'Pinged unknown suspense boundary type. ' +\r\n          'This is probably a bug in React.',\r\n      );\r\n  }\r\n\r\n  if (retryCache !== null) {\r\n    // The wakeable resolved, so we no longer need to memoize, because it will\r\n    // never be thrown again.\r\n    retryCache.delete(wakeable);\r\n  }\r\n\r\n  retryTimedOutBoundary(boundaryFiber, retryLane);\r\n}\r\n\r\n// Computes the next Just Noticeable Difference (JND) boundary.\r\n// The theory is that a person can't tell the difference between small differences in time.\r\n// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable\r\n// difference in the experience. However, waiting for longer might mean that we can avoid\r\n// showing an intermediate loading state. The longer we have already waited, the harder it\r\n// is to tell small differences in time. Therefore, the longer we've already waited,\r\n// the longer we can wait additionally. At some point we have to give up though.\r\n// We pick a train model where the next boundary commits at a consistent schedule.\r\n// These particular numbers are vague estimates. We expect to adjust them based on research.\r\nfunction jnd(timeElapsed: number) {\r\n  return timeElapsed < 120\r\n    ? 120\r\n    : timeElapsed < 480\r\n    ? 480\r\n    : timeElapsed < 1080\r\n    ? 1080\r\n    : timeElapsed < 1920\r\n    ? 1920\r\n    : timeElapsed < 3000\r\n    ? 3000\r\n    : timeElapsed < 4320\r\n    ? 4320\r\n    : ceil(timeElapsed / 1960) * 1960;\r\n}\r\n\r\nexport function throwIfInfiniteUpdateLoopDetected() {\r\n  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\r\n    nestedUpdateCount = 0;\r\n    nestedPassiveUpdateCount = 0;\r\n    rootWithNestedUpdates = null;\r\n    rootWithPassiveNestedUpdates = null;\r\n\r\n    throw new Error(\r\n      'Maximum update depth exceeded. This can happen when a component ' +\r\n        'repeatedly calls setState inside componentWillUpdate or ' +\r\n        'componentDidUpdate. React limits the number of nested updates to ' +\r\n        'prevent infinite loops.',\r\n    );\r\n  }\r\n\r\n  if (__DEV__) {\r\n    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\r\n      nestedPassiveUpdateCount = 0;\r\n      rootWithPassiveNestedUpdates = null;\r\n\r\n      console.error(\r\n        'Maximum update depth exceeded. This can happen when a component ' +\r\n          \"calls setState inside useEffect, but useEffect either doesn't \" +\r\n          'have a dependency array, or one of the dependencies changes on ' +\r\n          'every render.',\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction flushRenderPhaseStrictModeWarningsInDEV() {\r\n  if (__DEV__) {\r\n    ReactStrictModeWarnings.flushLegacyContextWarning();\r\n\r\n    if (warnAboutDeprecatedLifecycles) {\r\n      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\r\n    }\r\n  }\r\n}\r\n\r\nfunction recursivelyTraverseAndDoubleInvokeEffectsInDEV(\r\n  root: FiberRoot,\r\n  parentFiber: Fiber,\r\n  isInStrictMode: boolean,\r\n) {\r\n  if ((parentFiber.subtreeFlags & (PlacementDEV | Visibility)) === NoFlags) {\r\n    // Parent's descendants have already had effects double invoked.\r\n    // Early exit to avoid unnecessary tree traversal.\r\n    return;\r\n  }\r\n  let child = parentFiber.child;\r\n  while (child !== null) {\r\n    doubleInvokeEffectsInDEV(root, child, isInStrictMode);\r\n    child = child.sibling;\r\n  }\r\n}\r\n\r\nfunction doubleInvokeEffectsInDEV(\r\n  root: FiberRoot,\r\n  fiber: Fiber,\r\n  parentIsInStrictMode: boolean,\r\n) {\r\n  const isStrictModeFiber = fiber.type === REACT_STRICT_MODE_TYPE;\r\n  const isInStrictMode = parentIsInStrictMode || isStrictModeFiber;\r\n\r\n  if (fiber.flags & PlacementDEV || fiber.tag === OffscreenComponent) {\r\n    setCurrentDebugFiberInDEV(fiber);\r\n    const isNotOffscreen = fiber.tag !== OffscreenComponent;\r\n    // Checks if Offscreen is being revealed. For all other components, evaluates to true.\r\n    const hasOffscreenBecomeVisible =\r\n      isNotOffscreen ||\r\n      (fiber.flags & Visibility && fiber.memoizedState === null);\r\n    if (isInStrictMode && hasOffscreenBecomeVisible) {\r\n      disappearLayoutEffects(fiber);\r\n      disconnectPassiveEffect(fiber);\r\n      reappearLayoutEffects(root, fiber.alternate, fiber, false);\r\n      reconnectPassiveEffects(root, fiber, NoLanes, null, false);\r\n    }\r\n    resetCurrentDebugFiberInDEV();\r\n  } else {\r\n    recursivelyTraverseAndDoubleInvokeEffectsInDEV(root, fiber, isInStrictMode);\r\n  }\r\n}\r\n\r\nfunction commitDoubleInvokeEffectsInDEV(root: FiberRoot) {\r\n  if (__DEV__ && enableStrictEffects) {\r\n    let doubleInvokeEffects = true;\r\n\r\n    if (root.tag === LegacyRoot && !(root.current.mode & StrictLegacyMode)) {\r\n      doubleInvokeEffects = false;\r\n    }\r\n    if (\r\n      root.tag === ConcurrentRoot &&\r\n      !(root.current.mode & (StrictLegacyMode | StrictEffectsMode))\r\n    ) {\r\n      doubleInvokeEffects = false;\r\n    }\r\n    recursivelyTraverseAndDoubleInvokeEffectsInDEV(\r\n      root,\r\n      root.current,\r\n      doubleInvokeEffects,\r\n    );\r\n  }\r\n}\r\n\r\nlet didWarnStateUpdateForNotYetMountedComponent: Set<string> | null = null;\r\nexport function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber: Fiber) {\r\n  if (__DEV__) {\r\n    if ((executionContext & RenderContext) !== NoContext) {\r\n      // We let the other warning about render phase updates deal with this one.\r\n      return;\r\n    }\r\n\r\n    if (!(fiber.mode & ConcurrentMode)) {\r\n      return;\r\n    }\r\n\r\n    const tag = fiber.tag;\r\n    if (\r\n      tag !== IndeterminateComponent &&\r\n      tag !== HostRoot &&\r\n      tag !== ClassComponent &&\r\n      tag !== FunctionComponent &&\r\n      tag !== ForwardRef &&\r\n      tag !== MemoComponent &&\r\n      tag !== SimpleMemoComponent\r\n    ) {\r\n      // Only warn for user-defined components, not internal ones like Suspense.\r\n      return;\r\n    }\r\n\r\n    // We show the whole stack but dedupe on the top component's name because\r\n    // the problematic code almost always lies inside that component.\r\n    const componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';\r\n    if (didWarnStateUpdateForNotYetMountedComponent !== null) {\r\n      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\r\n        return;\r\n      }\r\n      didWarnStateUpdateForNotYetMountedComponent.add(componentName);\r\n    } else {\r\n      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);\r\n    }\r\n\r\n    const previousFiber = ReactCurrentFiberCurrent;\r\n    try {\r\n      setCurrentDebugFiberInDEV(fiber);\r\n      console.error(\r\n        \"Can't perform a React state update on a component that hasn't mounted yet. \" +\r\n          'This indicates that you have a side-effect in your render function that ' +\r\n          'asynchronously later calls tries to update the component. Move this work to ' +\r\n          'useEffect instead.',\r\n      );\r\n    } finally {\r\n      if (previousFiber) {\r\n        setCurrentDebugFiberInDEV(fiber);\r\n      } else {\r\n        resetCurrentDebugFiberInDEV();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nlet beginWork;\r\nif (__DEV__ && replayFailedUnitOfWorkWithInvokeGuardedCallback) {\r\n  const dummyFiber = null;\r\n  beginWork = (current, unitOfWork, lanes) => {\r\n    // If a component throws an error, we replay it again in a synchronously\r\n    // dispatched event, so that the debugger will treat it as an uncaught\r\n    // error See ReactErrorUtils for more information.\r\n\r\n    // Before entering the begin phase, copy the work-in-progress onto a dummy\r\n    // fiber. If beginWork throws, we'll use this to reset the state.\r\n    const originalWorkInProgressCopy = assignFiberPropertiesInDEV(\r\n      dummyFiber,\r\n      unitOfWork,\r\n    );\r\n    try {\r\n      return originalBeginWork(current, unitOfWork, lanes);\r\n    } catch (originalError) {\r\n      if (\r\n        didSuspendOrErrorWhileHydratingDEV() ||\r\n        (originalError !== null &&\r\n          typeof originalError === 'object' &&\r\n          typeof originalError.then === 'function')\r\n      ) {\r\n        // Don't replay promises.\r\n        // Don't replay errors if we are hydrating and have already suspended or handled an error\r\n        throw originalError;\r\n      }\r\n\r\n      // Keep this code in sync with handleThrow; any changes here must have\r\n      // corresponding changes there.\r\n      resetContextDependencies();\r\n      resetHooksAfterThrow();\r\n      // Don't reset current debug fiber, since we're about to work on the\r\n      // same fiber again.\r\n\r\n      // Unwind the failed stack frame\r\n      unwindInterruptedWork(current, unitOfWork, workInProgressRootRenderLanes);\r\n\r\n      // Restore the original properties of the fiber.\r\n      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);\r\n\r\n      if (enableProfilerTimer && unitOfWork.mode & ProfileMode) {\r\n        // Reset the profiler timer.\r\n        startProfilerTimer(unitOfWork);\r\n      }\r\n\r\n      // Run beginWork again.\r\n      invokeGuardedCallback(\r\n        null,\r\n        originalBeginWork,\r\n        null,\r\n        current,\r\n        unitOfWork,\r\n        lanes,\r\n      );\r\n\r\n      if (hasCaughtError()) {\r\n        const replayError = clearCaughtError();\r\n        if (\r\n          typeof replayError === 'object' &&\r\n          replayError !== null &&\r\n          replayError._suppressLogging &&\r\n          typeof originalError === 'object' &&\r\n          originalError !== null &&\r\n          !originalError._suppressLogging\r\n        ) {\r\n          // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.\r\n          originalError._suppressLogging = true;\r\n        }\r\n      }\r\n      // We always throw the original error in case the second render pass is not idempotent.\r\n      // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.\r\n      throw originalError;\r\n    }\r\n  };\r\n} else {\r\n  beginWork = originalBeginWork;\r\n}\r\n\r\nlet didWarnAboutUpdateInRender = false;\r\nlet didWarnAboutUpdateInRenderForAnotherComponent;\r\nif (__DEV__) {\r\n  didWarnAboutUpdateInRenderForAnotherComponent = new Set();\r\n}\r\n\r\nfunction warnAboutRenderPhaseUpdatesInDEV(fiber) {\r\n  if (__DEV__) {\r\n    if (\r\n      ReactCurrentDebugFiberIsRenderingInDEV &&\r\n      !getIsUpdatingOpaqueValueInRenderPhaseInDEV()\r\n    ) {\r\n      switch (fiber.tag) {\r\n        case FunctionComponent:\r\n        case ForwardRef:\r\n        case SimpleMemoComponent: {\r\n          const renderingComponentName =\r\n            (workInProgress && getComponentNameFromFiber(workInProgress)) ||\r\n            'Unknown';\r\n          // Dedupe by the rendering component because it's the one that needs to be fixed.\r\n          const dedupeKey = renderingComponentName;\r\n          if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {\r\n            didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\r\n            const setStateComponentName =\r\n              getComponentNameFromFiber(fiber) || 'Unknown';\r\n            console.error(\r\n              'Cannot update a component (`%s`) while rendering a ' +\r\n                'different component (`%s`). To locate the bad setState() call inside `%s`, ' +\r\n                'follow the stack trace as described in https://reactjs.org/link/setstate-in-render',\r\n              setStateComponentName,\r\n              renderingComponentName,\r\n              renderingComponentName,\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ClassComponent: {\r\n          if (!didWarnAboutUpdateInRender) {\r\n            console.error(\r\n              'Cannot update during an existing state transition (such as ' +\r\n                'within `render`). Render methods should be a pure ' +\r\n                'function of props and state.',\r\n            );\r\n            didWarnAboutUpdateInRender = true;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function restorePendingUpdaters(root: FiberRoot, lanes: Lanes): void {\r\n  if (enableUpdaterTracking) {\r\n    if (isDevToolsPresent) {\r\n      const memoizedUpdaters = root.memoizedUpdaters;\r\n      memoizedUpdaters.forEach(schedulingFiber => {\r\n        addFiberToLanesMap(root, schedulingFiber, lanes);\r\n      });\r\n\r\n      // This function intentionally does not clear memoized updaters.\r\n      // Those may still be relevant to the current commit\r\n      // and a future one (e.g. Suspense).\r\n    }\r\n  }\r\n}\r\n\r\nconst fakeActCallbackNode = {};\r\nfunction scheduleCallback(priorityLevel, callback) {\r\n  if (__DEV__) {\r\n    // If we're currently inside an `act` scope, bypass Scheduler and push to\r\n    // the `act` queue instead.\r\n    const actQueue = ReactCurrentActQueue.current;\r\n    if (actQueue !== null) {\r\n      actQueue.push(callback);\r\n      return fakeActCallbackNode;\r\n    } else {\r\n      return Scheduler_scheduleCallback(priorityLevel, callback);\r\n    }\r\n  } else {\r\n    // In production, always call Scheduler. This function will be stripped out.\r\n    return Scheduler_scheduleCallback(priorityLevel, callback);\r\n  }\r\n}\r\n\r\nfunction cancelCallback(callbackNode) {\r\n  if (__DEV__ && callbackNode === fakeActCallbackNode) {\r\n    return;\r\n  }\r\n  // In production, always call Scheduler. This function will be stripped out.\r\n  return Scheduler_cancelCallback(callbackNode);\r\n}\r\n\r\nfunction shouldForceFlushFallbacksInDEV() {\r\n  // Never force flush in production. This function should get stripped out.\r\n  return __DEV__ && ReactCurrentActQueue.current !== null;\r\n}\r\n\r\nfunction warnIfUpdatesNotWrappedWithActDEV(fiber: Fiber): void {\r\n  if (__DEV__) {\r\n    if (fiber.mode & ConcurrentMode) {\r\n      if (!isConcurrentActEnvironment()) {\r\n        // Not in an act environment. No need to warn.\r\n        return;\r\n      }\r\n    } else {\r\n      // Legacy mode has additional cases where we suppress a warning.\r\n      if (!isLegacyActEnvironment(fiber)) {\r\n        // Not in an act environment. No need to warn.\r\n        return;\r\n      }\r\n      if (executionContext !== NoContext) {\r\n        // Legacy mode doesn't warn if the update is batched, i.e.\r\n        // batchedUpdates or flushSync.\r\n        return;\r\n      }\r\n      if (\r\n        fiber.tag !== FunctionComponent &&\r\n        fiber.tag !== ForwardRef &&\r\n        fiber.tag !== SimpleMemoComponent\r\n      ) {\r\n        // For backwards compatibility with pre-hooks code, legacy mode only\r\n        // warns for updates that originate from a hook.\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (ReactCurrentActQueue.current === null) {\r\n      const previousFiber = ReactCurrentFiberCurrent;\r\n      try {\r\n        setCurrentDebugFiberInDEV(fiber);\r\n        console.error(\r\n          'An update to %s inside a test was not wrapped in act(...).\\n\\n' +\r\n            'When testing, code that causes React state updates should be ' +\r\n            'wrapped into act(...):\\n\\n' +\r\n            'act(() => {\\n' +\r\n            '  /* fire events that update state */\\n' +\r\n            '});\\n' +\r\n            '/* assert on the output */\\n\\n' +\r\n            \"This ensures that you're testing the behavior the user would see \" +\r\n            'in the browser.' +\r\n            ' Learn more at https://reactjs.org/link/wrap-tests-with-act',\r\n          getComponentNameFromFiber(fiber),\r\n        );\r\n      } finally {\r\n        if (previousFiber) {\r\n          setCurrentDebugFiberInDEV(fiber);\r\n        } else {\r\n          resetCurrentDebugFiberInDEV();\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction warnIfSuspenseResolutionNotWrappedWithActDEV(root: FiberRoot): void {\r\n  if (__DEV__) {\r\n    if (\r\n      root.tag !== LegacyRoot &&\r\n      isConcurrentActEnvironment() &&\r\n      ReactCurrentActQueue.current === null\r\n    ) {\r\n      console.error(\r\n        'A suspended resource finished loading inside a test, but the event ' +\r\n          'was not wrapped in act(...).\\n\\n' +\r\n          'When testing, code that resolves suspended data should be wrapped ' +\r\n          'into act(...):\\n\\n' +\r\n          'act(() => {\\n' +\r\n          '  /* finish loading suspended data */\\n' +\r\n          '});\\n' +\r\n          '/* assert on the output */\\n\\n' +\r\n          \"This ensures that you're testing the behavior the user would see \" +\r\n          'in the browser.' +\r\n          ' Learn more at https://reactjs.org/link/wrap-tests-with-act',\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport function setIsRunningInsertionEffect(isRunning: boolean): void {\r\n  if (__DEV__) {\r\n    isRunningInsertionEffect = isRunning;\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {ReactElement} from 'shared/ReactElementType';\r\nimport type {ReactFragment, ReactPortal, ReactScope} from 'shared/ReactTypes';\r\nimport type {Fiber} from './ReactInternalTypes';\r\nimport type {RootTag} from './ReactRootTags';\r\nimport type {WorkTag} from './ReactWorkTags';\r\nimport type {TypeOfMode} from './ReactTypeOfMode';\r\nimport type {Lanes} from './ReactFiberLane.old';\r\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\r\nimport type {\r\n  OffscreenProps,\r\n  OffscreenInstance,\r\n} from './ReactFiberOffscreenComponent';\r\nimport type {TracingMarkerInstance} from './ReactFiberTracingMarkerComponent.old';\r\n\r\nimport {\r\n  createRootStrictEffectsByDefault,\r\n  enableCache,\r\n  enableStrictEffects,\r\n  enableProfilerTimer,\r\n  enableScopeAPI,\r\n  enableLegacyHidden,\r\n  enableSyncDefaultUpdates,\r\n  allowConcurrentByDefault,\r\n  enableTransitionTracing,\r\n  enableDebugTracing,\r\n} from 'shared/ReactFeatureFlags';\r\nimport {NoFlags, Placement, StaticMask} from './ReactFiberFlags';\r\nimport {ConcurrentRoot} from './ReactRootTags';\r\nimport {\r\n  IndeterminateComponent,\r\n  ClassComponent,\r\n  HostRoot,\r\n  HostComponent,\r\n  HostText,\r\n  HostPortal,\r\n  ForwardRef,\r\n  Fragment,\r\n  Mode,\r\n  ContextProvider,\r\n  ContextConsumer,\r\n  Profiler,\r\n  SuspenseComponent,\r\n  SuspenseListComponent,\r\n  DehydratedFragment,\r\n  FunctionComponent,\r\n  MemoComponent,\r\n  SimpleMemoComponent,\r\n  LazyComponent,\r\n  ScopeComponent,\r\n  OffscreenComponent,\r\n  LegacyHiddenComponent,\r\n  CacheComponent,\r\n  TracingMarkerComponent,\r\n} from './ReactWorkTags';\r\nimport {OffscreenVisible} from './ReactFiberOffscreenComponent';\r\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\r\n\r\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\r\nimport {\r\n  resolveClassForHotReloading,\r\n  resolveFunctionForHotReloading,\r\n  resolveForwardRefForHotReloading,\r\n} from './ReactFiberHotReloading.old';\r\nimport {NoLanes} from './ReactFiberLane.old';\r\nimport {\r\n  NoMode,\r\n  ConcurrentMode,\r\n  DebugTracingMode,\r\n  ProfileMode,\r\n  StrictLegacyMode,\r\n  StrictEffectsMode,\r\n  ConcurrentUpdatesByDefaultMode,\r\n} from './ReactTypeOfMode';\r\nimport {\r\n  REACT_FORWARD_REF_TYPE,\r\n  REACT_FRAGMENT_TYPE,\r\n  REACT_DEBUG_TRACING_MODE_TYPE,\r\n  REACT_STRICT_MODE_TYPE,\r\n  REACT_PROFILER_TYPE,\r\n  REACT_PROVIDER_TYPE,\r\n  REACT_CONTEXT_TYPE,\r\n  REACT_SUSPENSE_TYPE,\r\n  REACT_SUSPENSE_LIST_TYPE,\r\n  REACT_MEMO_TYPE,\r\n  REACT_LAZY_TYPE,\r\n  REACT_SCOPE_TYPE,\r\n  REACT_OFFSCREEN_TYPE,\r\n  REACT_LEGACY_HIDDEN_TYPE,\r\n  REACT_CACHE_TYPE,\r\n  REACT_TRACING_MARKER_TYPE,\r\n} from 'shared/ReactSymbols';\r\nimport {TransitionTracingMarker} from './ReactFiberTracingMarkerComponent.old';\r\n\r\nexport type {Fiber};\r\n\r\nlet hasBadMapPolyfill;\r\n\r\nif (__DEV__) {\r\n  hasBadMapPolyfill = false;\r\n  try {\r\n    const nonExtensibleObject = Object.preventExtensions({});\r\n    /* eslint-disable no-new */\r\n    new Map([[nonExtensibleObject, null]]);\r\n    new Set([nonExtensibleObject]);\r\n    /* eslint-enable no-new */\r\n  } catch (e) {\r\n    // TODO: Consider warning about bad polyfills\r\n    hasBadMapPolyfill = true;\r\n  }\r\n}\r\n\r\nfunction FiberNode(\r\n  tag: WorkTag,\r\n  pendingProps: mixed,\r\n  key: null | string,\r\n  mode: TypeOfMode,\r\n) {\r\n  // Instance\r\n  this.tag = tag;\r\n  this.key = key;\r\n  this.elementType = null;\r\n  this.type = null;\r\n  this.stateNode = null;\r\n\r\n  // Fiber\r\n  this.return = null;\r\n  this.child = null;\r\n  this.sibling = null;\r\n  this.index = 0;\r\n\r\n  this.ref = null;\r\n\r\n  this.pendingProps = pendingProps;\r\n  this.memoizedProps = null;\r\n  this.updateQueue = null;\r\n  this.memoizedState = null;\r\n  this.dependencies = null;\r\n\r\n  this.mode = mode;\r\n\r\n  // Effects\r\n  this.flags = NoFlags;\r\n  this.subtreeFlags = NoFlags;\r\n  this.deletions = null;\r\n\r\n  this.lanes = NoLanes;\r\n  this.childLanes = NoLanes;\r\n\r\n  this.alternate = null;\r\n\r\n  if (enableProfilerTimer) {\r\n    // Note: The following is done to avoid a v8 performance cliff.\r\n    //\r\n    // Initializing the fields below to smis and later updating them with\r\n    // double values will cause Fibers to end up having separate shapes.\r\n    // This behavior/bug has something to do with Object.preventExtension().\r\n    // Fortunately this only impacts DEV builds.\r\n    // Unfortunately it makes React unusably slow for some applications.\r\n    // To work around this, initialize the fields below with doubles.\r\n    //\r\n    // Learn more about this here:\r\n    // https://github.com/facebook/react/issues/14365\r\n    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\r\n    this.actualDuration = Number.NaN;\r\n    this.actualStartTime = Number.NaN;\r\n    this.selfBaseDuration = Number.NaN;\r\n    this.treeBaseDuration = Number.NaN;\r\n\r\n    // It's okay to replace the initial doubles with smis after initialization.\r\n    // This won't trigger the performance cliff mentioned above,\r\n    // and it simplifies other profiler code (including DevTools).\r\n    this.actualDuration = 0;\r\n    this.actualStartTime = -1;\r\n    this.selfBaseDuration = 0;\r\n    this.treeBaseDuration = 0;\r\n  }\r\n\r\n  if (__DEV__) {\r\n    // This isn't directly used but is handy for debugging internals:\r\n\r\n    this._debugSource = null;\r\n    this._debugOwner = null;\r\n    this._debugNeedsRemount = false;\r\n    this._debugHookTypes = null;\r\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\r\n      Object.preventExtensions(this);\r\n    }\r\n  }\r\n}\r\n\r\n// This is a constructor function, rather than a POJO constructor, still\r\n// please ensure we do the following:\r\n// 1) Nobody should add any instance methods on this. Instance methods can be\r\n//    more difficult to predict when they get optimized and they are almost\r\n//    never inlined properly in static compilers.\r\n// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\r\n//    always know when it is a fiber.\r\n// 3) We might want to experiment with using numeric keys since they are easier\r\n//    to optimize in a non-JIT environment.\r\n// 4) We can easily go from a constructor to a createFiber object literal if that\r\n//    is faster.\r\n// 5) It should be easy to port this to a C struct and keep a C implementation\r\n//    compatible.\r\nconst createFiber = function(\r\n  tag: WorkTag,\r\n  pendingProps: mixed,\r\n  key: null | string,\r\n  mode: TypeOfMode,\r\n): Fiber {\r\n  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\r\n  return new FiberNode(tag, pendingProps, key, mode);\r\n};\r\n\r\nfunction shouldConstruct(Component: Function) {\r\n  const prototype = Component.prototype;\r\n  return !!(prototype && prototype.isReactComponent);\r\n}\r\n\r\nexport function isSimpleFunctionComponent(type: any): boolean {\r\n  return (\r\n    typeof type === 'function' &&\r\n    !shouldConstruct(type) &&\r\n    type.defaultProps === undefined\r\n  );\r\n}\r\n\r\nexport function resolveLazyComponentTag(Component: Function): WorkTag {\r\n  if (typeof Component === 'function') {\r\n    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;\r\n  } else if (Component !== undefined && Component !== null) {\r\n    const $$typeof = Component.$$typeof;\r\n    if ($$typeof === REACT_FORWARD_REF_TYPE) {\r\n      return ForwardRef;\r\n    }\r\n    if ($$typeof === REACT_MEMO_TYPE) {\r\n      return MemoComponent;\r\n    }\r\n  }\r\n  return IndeterminateComponent;\r\n}\r\n\r\n// This is used to create an alternate fiber to do work on.\r\nexport function createWorkInProgress(current: Fiber, pendingProps: any): Fiber {\r\n  let workInProgress = current.alternate;\r\n  if (workInProgress === null) {\r\n    // We use a double buffering pooling technique because we know that we'll\r\n    // only ever need at most two versions of a tree. We pool the \"other\" unused\r\n    // node that we're free to reuse. This is lazily created to avoid allocating\r\n    // extra objects for things that are never updated. It also allow us to\r\n    // reclaim the extra memory if needed.\r\n    workInProgress = createFiber(\r\n      current.tag,\r\n      pendingProps,\r\n      current.key,\r\n      current.mode,\r\n    );\r\n    workInProgress.elementType = current.elementType;\r\n    workInProgress.type = current.type;\r\n    workInProgress.stateNode = current.stateNode;\r\n\r\n    if (__DEV__) {\r\n      // DEV-only fields\r\n\r\n      workInProgress._debugSource = current._debugSource;\r\n      workInProgress._debugOwner = current._debugOwner;\r\n      workInProgress._debugHookTypes = current._debugHookTypes;\r\n    }\r\n\r\n    workInProgress.alternate = current;\r\n    current.alternate = workInProgress;\r\n  } else {\r\n    workInProgress.pendingProps = pendingProps;\r\n    // Needed because Blocks store data on type.\r\n    workInProgress.type = current.type;\r\n\r\n    // We already have an alternate.\r\n    // Reset the effect tag.\r\n    workInProgress.flags = NoFlags;\r\n\r\n    // The effects are no longer valid.\r\n    workInProgress.subtreeFlags = NoFlags;\r\n    workInProgress.deletions = null;\r\n\r\n    if (enableProfilerTimer) {\r\n      // We intentionally reset, rather than copy, actualDuration & actualStartTime.\r\n      // This prevents time from endlessly accumulating in new commits.\r\n      // This has the downside of resetting values for different priority renders,\r\n      // But works for yielding (the common case) and should support resuming.\r\n      workInProgress.actualDuration = 0;\r\n      workInProgress.actualStartTime = -1;\r\n    }\r\n  }\r\n\r\n  // Reset all effects except static ones.\r\n  // Static effects are not specific to a render.\r\n  workInProgress.flags = current.flags & StaticMask;\r\n  workInProgress.childLanes = current.childLanes;\r\n  workInProgress.lanes = current.lanes;\r\n\r\n  workInProgress.child = current.child;\r\n  workInProgress.memoizedProps = current.memoizedProps;\r\n  workInProgress.memoizedState = current.memoizedState;\r\n  workInProgress.updateQueue = current.updateQueue;\r\n\r\n  // Clone the dependencies object. This is mutated during the render phase, so\r\n  // it cannot be shared with the current fiber.\r\n  const currentDependencies = current.dependencies;\r\n  workInProgress.dependencies =\r\n    currentDependencies === null\r\n      ? null\r\n      : {\r\n          lanes: currentDependencies.lanes,\r\n          firstContext: currentDependencies.firstContext,\r\n        };\r\n\r\n  // These will be overridden during the parent's reconciliation\r\n  workInProgress.sibling = current.sibling;\r\n  workInProgress.index = current.index;\r\n  workInProgress.ref = current.ref;\r\n\r\n  if (enableProfilerTimer) {\r\n    workInProgress.selfBaseDuration = current.selfBaseDuration;\r\n    workInProgress.treeBaseDuration = current.treeBaseDuration;\r\n  }\r\n\r\n  if (__DEV__) {\r\n    workInProgress._debugNeedsRemount = current._debugNeedsRemount;\r\n    switch (workInProgress.tag) {\r\n      case IndeterminateComponent:\r\n      case FunctionComponent:\r\n      case SimpleMemoComponent:\r\n        workInProgress.type = resolveFunctionForHotReloading(current.type);\r\n        break;\r\n      case ClassComponent:\r\n        workInProgress.type = resolveClassForHotReloading(current.type);\r\n        break;\r\n      case ForwardRef:\r\n        workInProgress.type = resolveForwardRefForHotReloading(current.type);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  return workInProgress;\r\n}\r\n\r\n// Used to reuse a Fiber for a second pass.\r\nexport function resetWorkInProgress(\r\n  workInProgress: Fiber,\r\n  renderLanes: Lanes,\r\n): Fiber {\r\n  // This resets the Fiber to what createFiber or createWorkInProgress would\r\n  // have set the values to before during the first pass. Ideally this wouldn't\r\n  // be necessary but unfortunately many code paths reads from the workInProgress\r\n  // when they should be reading from current and writing to workInProgress.\r\n\r\n  // We assume pendingProps, index, key, ref, return are still untouched to\r\n  // avoid doing another reconciliation.\r\n\r\n  // Reset the effect flags but keep any Placement tags, since that's something\r\n  // that child fiber is setting, not the reconciliation.\r\n  workInProgress.flags &= StaticMask | Placement;\r\n\r\n  // The effects are no longer valid.\r\n\r\n  const current = workInProgress.alternate;\r\n  if (current === null) {\r\n    // Reset to createFiber's initial values.\r\n    workInProgress.childLanes = NoLanes;\r\n    workInProgress.lanes = renderLanes;\r\n\r\n    workInProgress.child = null;\r\n    workInProgress.subtreeFlags = NoFlags;\r\n    workInProgress.memoizedProps = null;\r\n    workInProgress.memoizedState = null;\r\n    workInProgress.updateQueue = null;\r\n\r\n    workInProgress.dependencies = null;\r\n\r\n    workInProgress.stateNode = null;\r\n\r\n    if (enableProfilerTimer) {\r\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\r\n      // actual time across multiple render passes.\r\n      workInProgress.selfBaseDuration = 0;\r\n      workInProgress.treeBaseDuration = 0;\r\n    }\r\n  } else {\r\n    // Reset to the cloned values that createWorkInProgress would've.\r\n    workInProgress.childLanes = current.childLanes;\r\n    workInProgress.lanes = current.lanes;\r\n\r\n    workInProgress.child = current.child;\r\n    workInProgress.subtreeFlags = NoFlags;\r\n    workInProgress.deletions = null;\r\n    workInProgress.memoizedProps = current.memoizedProps;\r\n    workInProgress.memoizedState = current.memoizedState;\r\n    workInProgress.updateQueue = current.updateQueue;\r\n    // Needed because Blocks store data on type.\r\n    workInProgress.type = current.type;\r\n\r\n    // Clone the dependencies object. This is mutated during the render phase, so\r\n    // it cannot be shared with the current fiber.\r\n    const currentDependencies = current.dependencies;\r\n    workInProgress.dependencies =\r\n      currentDependencies === null\r\n        ? null\r\n        : {\r\n            lanes: currentDependencies.lanes,\r\n            firstContext: currentDependencies.firstContext,\r\n          };\r\n\r\n    if (enableProfilerTimer) {\r\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\r\n      // actual time across multiple render passes.\r\n      workInProgress.selfBaseDuration = current.selfBaseDuration;\r\n      workInProgress.treeBaseDuration = current.treeBaseDuration;\r\n    }\r\n  }\r\n\r\n  return workInProgress;\r\n}\r\n\r\nexport function createHostRootFiber(\r\n  tag: RootTag,\r\n  isStrictMode: boolean,\r\n  concurrentUpdatesByDefaultOverride: null | boolean,\r\n): Fiber {\r\n  let mode;\r\n  if (tag === ConcurrentRoot) {\r\n    mode = ConcurrentMode;\r\n    if (isStrictMode === true) {\r\n      mode |= StrictLegacyMode;\r\n\r\n      if (enableStrictEffects) {\r\n        mode |= StrictEffectsMode;\r\n      }\r\n    } else if (enableStrictEffects && createRootStrictEffectsByDefault) {\r\n      mode |= StrictLegacyMode | StrictEffectsMode;\r\n    }\r\n    if (\r\n      // We only use this flag for our repo tests to check both behaviors.\r\n      // TODO: Flip this flag and rename it something like \"forceConcurrentByDefaultForTesting\"\r\n      !enableSyncDefaultUpdates ||\r\n      // Only for internal experiments.\r\n      (allowConcurrentByDefault && concurrentUpdatesByDefaultOverride)\r\n    ) {\r\n      mode |= ConcurrentUpdatesByDefaultMode;\r\n    }\r\n  } else {\r\n    mode = NoMode;\r\n  }\r\n\r\n  if (enableProfilerTimer && isDevToolsPresent) {\r\n    // Always collect profile timings when DevTools are present.\r\n    // This enables DevTools to start capturing timing at any point–\r\n    // Without some nodes in the tree having empty base times.\r\n    mode |= ProfileMode;\r\n  }\r\n\r\n  return createFiber(HostRoot, null, null, mode);\r\n}\r\n\r\nexport function createFiberFromTypeAndProps(\r\n  type: any, // React$ElementType\r\n  key: null | string,\r\n  pendingProps: any,\r\n  owner: null | Fiber,\r\n  mode: TypeOfMode,\r\n  lanes: Lanes,\r\n): Fiber {\r\n  let fiberTag = IndeterminateComponent;\r\n  // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\r\n  let resolvedType = type;\r\n  if (typeof type === 'function') {\r\n    if (shouldConstruct(type)) {\r\n      fiberTag = ClassComponent;\r\n      if (__DEV__) {\r\n        resolvedType = resolveClassForHotReloading(resolvedType);\r\n      }\r\n    } else {\r\n      if (__DEV__) {\r\n        resolvedType = resolveFunctionForHotReloading(resolvedType);\r\n      }\r\n    }\r\n  } else if (typeof type === 'string') {\r\n    fiberTag = HostComponent;\r\n  } else {\r\n    getTag: switch (type) {\r\n      case REACT_FRAGMENT_TYPE:\r\n        return createFiberFromFragment(pendingProps.children, mode, lanes, key);\r\n      case REACT_STRICT_MODE_TYPE:\r\n        fiberTag = Mode;\r\n        mode |= StrictLegacyMode;\r\n        if (enableStrictEffects && (mode & ConcurrentMode) !== NoMode) {\r\n          // Strict effects should never run on legacy roots\r\n          mode |= StrictEffectsMode;\r\n        }\r\n        break;\r\n      case REACT_PROFILER_TYPE:\r\n        return createFiberFromProfiler(pendingProps, mode, lanes, key);\r\n      case REACT_SUSPENSE_TYPE:\r\n        return createFiberFromSuspense(pendingProps, mode, lanes, key);\r\n      case REACT_SUSPENSE_LIST_TYPE:\r\n        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\r\n      case REACT_OFFSCREEN_TYPE:\r\n        return createFiberFromOffscreen(pendingProps, mode, lanes, key);\r\n      case REACT_LEGACY_HIDDEN_TYPE:\r\n        if (enableLegacyHidden) {\r\n          return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);\r\n        }\r\n      // eslint-disable-next-line no-fallthrough\r\n      case REACT_SCOPE_TYPE:\r\n        if (enableScopeAPI) {\r\n          return createFiberFromScope(type, pendingProps, mode, lanes, key);\r\n        }\r\n      // eslint-disable-next-line no-fallthrough\r\n      case REACT_CACHE_TYPE:\r\n        if (enableCache) {\r\n          return createFiberFromCache(pendingProps, mode, lanes, key);\r\n        }\r\n      // eslint-disable-next-line no-fallthrough\r\n      case REACT_TRACING_MARKER_TYPE:\r\n        if (enableTransitionTracing) {\r\n          return createFiberFromTracingMarker(pendingProps, mode, lanes, key);\r\n        }\r\n      // eslint-disable-next-line no-fallthrough\r\n      case REACT_DEBUG_TRACING_MODE_TYPE:\r\n        if (enableDebugTracing) {\r\n          fiberTag = Mode;\r\n          mode |= DebugTracingMode;\r\n          break;\r\n        }\r\n      // eslint-disable-next-line no-fallthrough\r\n      default: {\r\n        if (typeof type === 'object' && type !== null) {\r\n          switch (type.$$typeof) {\r\n            case REACT_PROVIDER_TYPE:\r\n              fiberTag = ContextProvider;\r\n              break getTag;\r\n            case REACT_CONTEXT_TYPE:\r\n              // This is a consumer\r\n              fiberTag = ContextConsumer;\r\n              break getTag;\r\n            case REACT_FORWARD_REF_TYPE:\r\n              fiberTag = ForwardRef;\r\n              if (__DEV__) {\r\n                resolvedType = resolveForwardRefForHotReloading(resolvedType);\r\n              }\r\n              break getTag;\r\n            case REACT_MEMO_TYPE:\r\n              fiberTag = MemoComponent;\r\n              break getTag;\r\n            case REACT_LAZY_TYPE:\r\n              fiberTag = LazyComponent;\r\n              resolvedType = null;\r\n              break getTag;\r\n          }\r\n        }\r\n        let info = '';\r\n        if (__DEV__) {\r\n          if (\r\n            type === undefined ||\r\n            (typeof type === 'object' &&\r\n              type !== null &&\r\n              Object.keys(type).length === 0)\r\n          ) {\r\n            info +=\r\n              ' You likely forgot to export your component from the file ' +\r\n              \"it's defined in, or you might have mixed up default and \" +\r\n              'named imports.';\r\n          }\r\n          const ownerName = owner ? getComponentNameFromFiber(owner) : null;\r\n          if (ownerName) {\r\n            info += '\\n\\nCheck the render method of `' + ownerName + '`.';\r\n          }\r\n        }\r\n\r\n        throw new Error(\r\n          'Element type is invalid: expected a string (for built-in ' +\r\n            'components) or a class/function (for composite components) ' +\r\n            `but got: ${type == null ? type : typeof type}.${info}`,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  const fiber = createFiber(fiberTag, pendingProps, key, mode);\r\n  fiber.elementType = type;\r\n  fiber.type = resolvedType;\r\n  fiber.lanes = lanes;\r\n\r\n  if (__DEV__) {\r\n    fiber._debugOwner = owner;\r\n  }\r\n\r\n  return fiber;\r\n}\r\n\r\nexport function createFiberFromElement(\r\n  element: ReactElement,\r\n  mode: TypeOfMode,\r\n  lanes: Lanes,\r\n): Fiber {\r\n  let owner = null;\r\n  if (__DEV__) {\r\n    owner = element._owner;\r\n  }\r\n  const type = element.type;\r\n  const key = element.key;\r\n  const pendingProps = element.props;\r\n  const fiber = createFiberFromTypeAndProps(\r\n    type,\r\n    key,\r\n    pendingProps,\r\n    owner,\r\n    mode,\r\n    lanes,\r\n  );\r\n  if (__DEV__) {\r\n    fiber._debugSource = element._source;\r\n    fiber._debugOwner = element._owner;\r\n  }\r\n  return fiber;\r\n}\r\n\r\nexport function createFiberFromFragment(\r\n  elements: ReactFragment,\r\n  mode: TypeOfMode,\r\n  lanes: Lanes,\r\n  key: null | string,\r\n): Fiber {\r\n  const fiber = createFiber(Fragment, elements, key, mode);\r\n  fiber.lanes = lanes;\r\n  return fiber;\r\n}\r\n\r\nfunction createFiberFromScope(\r\n  scope: ReactScope,\r\n  pendingProps: any,\r\n  mode: TypeOfMode,\r\n  lanes: Lanes,\r\n  key: null | string,\r\n) {\r\n  const fiber = createFiber(ScopeComponent, pendingProps, key, mode);\r\n  fiber.type = scope;\r\n  fiber.elementType = scope;\r\n  fiber.lanes = lanes;\r\n  return fiber;\r\n}\r\n\r\nfunction createFiberFromProfiler(\r\n  pendingProps: any,\r\n  mode: TypeOfMode,\r\n  lanes: Lanes,\r\n  key: null | string,\r\n): Fiber {\r\n  if (__DEV__) {\r\n    if (typeof pendingProps.id !== 'string') {\r\n      console.error(\r\n        'Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.',\r\n        typeof pendingProps.id,\r\n      );\r\n    }\r\n  }\r\n\r\n  const fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\r\n  fiber.elementType = REACT_PROFILER_TYPE;\r\n  fiber.lanes = lanes;\r\n\r\n  if (enableProfilerTimer) {\r\n    fiber.stateNode = {\r\n      effectDuration: 0,\r\n      passiveEffectDuration: 0,\r\n    };\r\n  }\r\n\r\n  return fiber;\r\n}\r\n\r\nexport function createFiberFromSuspense(\r\n  pendingProps: any,\r\n  mode: TypeOfMode,\r\n  lanes: Lanes,\r\n  key: null | string,\r\n) {\r\n  const fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\r\n  fiber.elementType = REACT_SUSPENSE_TYPE;\r\n  fiber.lanes = lanes;\r\n  return fiber;\r\n}\r\n\r\nexport function createFiberFromSuspenseList(\r\n  pendingProps: any,\r\n  mode: TypeOfMode,\r\n  lanes: Lanes,\r\n  key: null | string,\r\n) {\r\n  const fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\r\n  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\r\n  fiber.lanes = lanes;\r\n  return fiber;\r\n}\r\n\r\nexport function createFiberFromOffscreen(\r\n  pendingProps: OffscreenProps,\r\n  mode: TypeOfMode,\r\n  lanes: Lanes,\r\n  key: null | string,\r\n) {\r\n  const fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\r\n  fiber.elementType = REACT_OFFSCREEN_TYPE;\r\n  fiber.lanes = lanes;\r\n  const primaryChildInstance: OffscreenInstance = {\r\n    visibility: OffscreenVisible,\r\n    pendingMarkers: null,\r\n    retryCache: null,\r\n    transitions: null,\r\n  };\r\n  fiber.stateNode = primaryChildInstance;\r\n  return fiber;\r\n}\r\n\r\nexport function createFiberFromLegacyHidden(\r\n  pendingProps: OffscreenProps,\r\n  mode: TypeOfMode,\r\n  lanes: Lanes,\r\n  key: null | string,\r\n) {\r\n  const fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);\r\n  fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;\r\n  fiber.lanes = lanes;\r\n  // Adding a stateNode for legacy hidden because it's currently using\r\n  // the offscreen implementation, which depends on a state node\r\n  const instance: OffscreenInstance = {\r\n    visibility: OffscreenVisible,\r\n    pendingMarkers: null,\r\n    transitions: null,\r\n    retryCache: null,\r\n  };\r\n  fiber.stateNode = instance;\r\n  return fiber;\r\n}\r\n\r\nexport function createFiberFromCache(\r\n  pendingProps: any,\r\n  mode: TypeOfMode,\r\n  lanes: Lanes,\r\n  key: null | string,\r\n) {\r\n  const fiber = createFiber(CacheComponent, pendingProps, key, mode);\r\n  fiber.elementType = REACT_CACHE_TYPE;\r\n  fiber.lanes = lanes;\r\n  return fiber;\r\n}\r\n\r\nexport function createFiberFromTracingMarker(\r\n  pendingProps: any,\r\n  mode: TypeOfMode,\r\n  lanes: Lanes,\r\n  key: null | string,\r\n) {\r\n  const fiber = createFiber(TracingMarkerComponent, pendingProps, key, mode);\r\n  fiber.elementType = REACT_TRACING_MARKER_TYPE;\r\n  fiber.lanes = lanes;\r\n  const tracingMarkerInstance: TracingMarkerInstance = {\r\n    tag: TransitionTracingMarker,\r\n    transitions: null,\r\n    pendingBoundaries: null,\r\n    aborts: null,\r\n    name: pendingProps.name,\r\n  };\r\n  fiber.stateNode = tracingMarkerInstance;\r\n  return fiber;\r\n}\r\n\r\nexport function createFiberFromText(\r\n  content: string,\r\n  mode: TypeOfMode,\r\n  lanes: Lanes,\r\n): Fiber {\r\n  const fiber = createFiber(HostText, content, null, mode);\r\n  fiber.lanes = lanes;\r\n  return fiber;\r\n}\r\n\r\nexport function createFiberFromHostInstanceForDeletion(): Fiber {\r\n  const fiber = createFiber(HostComponent, null, null, NoMode);\r\n  fiber.elementType = 'DELETED';\r\n  return fiber;\r\n}\r\n\r\nexport function createFiberFromDehydratedFragment(\r\n  dehydratedNode: SuspenseInstance,\r\n): Fiber {\r\n  const fiber = createFiber(DehydratedFragment, null, null, NoMode);\r\n  fiber.stateNode = dehydratedNode;\r\n  return fiber;\r\n}\r\n\r\nexport function createFiberFromPortal(\r\n  portal: ReactPortal,\r\n  mode: TypeOfMode,\r\n  lanes: Lanes,\r\n): Fiber {\r\n  const pendingProps = portal.children !== null ? portal.children : [];\r\n  const fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\r\n  fiber.lanes = lanes;\r\n  fiber.stateNode = {\r\n    containerInfo: portal.containerInfo,\r\n    pendingChildren: null, // Used by persistent updates\r\n    implementation: portal.implementation,\r\n  };\r\n  return fiber;\r\n}\r\n\r\n// Used for stashing WIP properties to replay failed work in DEV.\r\nexport function assignFiberPropertiesInDEV(\r\n  target: Fiber | null,\r\n  source: Fiber,\r\n): Fiber {\r\n  if (target === null) {\r\n    // This Fiber's initial properties will always be overwritten.\r\n    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\r\n    target = createFiber(IndeterminateComponent, null, null, NoMode);\r\n  }\r\n\r\n  // This is intentionally written as a list of all properties.\r\n  // We tried to use Object.assign() instead but this is called in\r\n  // the hottest path, and Object.assign() was too slow:\r\n  // https://github.com/facebook/react/issues/12502\r\n  // This code is DEV-only so size is not a concern.\r\n\r\n  target.tag = source.tag;\r\n  target.key = source.key;\r\n  target.elementType = source.elementType;\r\n  target.type = source.type;\r\n  target.stateNode = source.stateNode;\r\n  target.return = source.return;\r\n  target.child = source.child;\r\n  target.sibling = source.sibling;\r\n  target.index = source.index;\r\n  target.ref = source.ref;\r\n  target.pendingProps = source.pendingProps;\r\n  target.memoizedProps = source.memoizedProps;\r\n  target.updateQueue = source.updateQueue;\r\n  target.memoizedState = source.memoizedState;\r\n  target.dependencies = source.dependencies;\r\n  target.mode = source.mode;\r\n  target.flags = source.flags;\r\n  target.subtreeFlags = source.subtreeFlags;\r\n  target.deletions = source.deletions;\r\n  target.lanes = source.lanes;\r\n  target.childLanes = source.childLanes;\r\n  target.alternate = source.alternate;\r\n  if (enableProfilerTimer) {\r\n    target.actualDuration = source.actualDuration;\r\n    target.actualStartTime = source.actualStartTime;\r\n    target.selfBaseDuration = source.selfBaseDuration;\r\n    target.treeBaseDuration = source.treeBaseDuration;\r\n  }\r\n\r\n  target._debugSource = source._debugSource;\r\n  target._debugOwner = source._debugOwner;\r\n  target._debugNeedsRemount = source._debugNeedsRemount;\r\n  target._debugHookTypes = source._debugHookTypes;\r\n  return target;\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {ReactNodeList} from 'shared/ReactTypes';\r\nimport type {\r\n  FiberRoot,\r\n  SuspenseHydrationCallbacks,\r\n  TransitionTracingCallbacks,\r\n} from './ReactInternalTypes';\r\nimport type {RootTag} from './ReactRootTags';\r\nimport type {Cache} from './ReactFiberCacheComponent.old';\r\nimport type {Container} from './ReactFiberHostConfig';\r\n\r\nimport {noTimeout, supportsHydration} from './ReactFiberHostConfig';\r\nimport {createHostRootFiber} from './ReactFiber.old';\r\nimport {\r\n  NoLane,\r\n  NoLanes,\r\n  NoTimestamp,\r\n  TotalLanes,\r\n  createLaneMap,\r\n} from './ReactFiberLane.old';\r\nimport {\r\n  enableSuspenseCallback,\r\n  enableCache,\r\n  enableProfilerCommitHooks,\r\n  enableProfilerTimer,\r\n  enableUpdaterTracking,\r\n  enableTransitionTracing,\r\n} from 'shared/ReactFeatureFlags';\r\nimport {initializeUpdateQueue} from './ReactFiberClassUpdateQueue.old';\r\nimport {LegacyRoot, ConcurrentRoot} from './ReactRootTags';\r\nimport {createCache, retainCache} from './ReactFiberCacheComponent.old';\r\n\r\nexport type RootState = {\r\n  element: any,\r\n  isDehydrated: boolean,\r\n  cache: Cache,\r\n};\r\n\r\nfunction FiberRootNode(\r\n  containerInfo,\r\n  tag,\r\n  hydrate,\r\n  identifierPrefix,\r\n  onRecoverableError,\r\n) {\r\n  this.tag = tag;\r\n  this.containerInfo = containerInfo;\r\n  this.pendingChildren = null;\r\n  this.current = null;\r\n  this.pingCache = null;\r\n  this.finishedWork = null;\r\n  this.timeoutHandle = noTimeout;\r\n  this.context = null;\r\n  this.pendingContext = null;\r\n  this.callbackNode = null;\r\n  this.callbackPriority = NoLane;\r\n  this.eventTimes = createLaneMap(NoLanes);\r\n  this.expirationTimes = createLaneMap(NoTimestamp);\r\n\r\n  this.pendingLanes = NoLanes;\r\n  this.suspendedLanes = NoLanes;\r\n  this.pingedLanes = NoLanes;\r\n  this.expiredLanes = NoLanes;\r\n  this.mutableReadLanes = NoLanes;\r\n  this.finishedLanes = NoLanes;\r\n  this.errorRecoveryDisabledLanes = NoLanes;\r\n\r\n  this.entangledLanes = NoLanes;\r\n  this.entanglements = createLaneMap(NoLanes);\r\n\r\n  this.hiddenUpdates = createLaneMap(null);\r\n\r\n  this.identifierPrefix = identifierPrefix;\r\n  this.onRecoverableError = onRecoverableError;\r\n\r\n  if (enableCache) {\r\n    this.pooledCache = null;\r\n    this.pooledCacheLanes = NoLanes;\r\n  }\r\n\r\n  if (supportsHydration) {\r\n    this.mutableSourceEagerHydrationData = null;\r\n  }\r\n\r\n  if (enableSuspenseCallback) {\r\n    this.hydrationCallbacks = null;\r\n  }\r\n\r\n  this.incompleteTransitions = new Map();\r\n  if (enableTransitionTracing) {\r\n    this.transitionCallbacks = null;\r\n    const transitionLanesMap = (this.transitionLanes = []);\r\n    for (let i = 0; i < TotalLanes; i++) {\r\n      transitionLanesMap.push(null);\r\n    }\r\n  }\r\n\r\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\r\n    this.effectDuration = 0;\r\n    this.passiveEffectDuration = 0;\r\n  }\r\n\r\n  if (enableUpdaterTracking) {\r\n    this.memoizedUpdaters = new Set();\r\n    const pendingUpdatersLaneMap = (this.pendingUpdatersLaneMap = []);\r\n    for (let i = 0; i < TotalLanes; i++) {\r\n      pendingUpdatersLaneMap.push(new Set());\r\n    }\r\n  }\r\n\r\n  if (__DEV__) {\r\n    switch (tag) {\r\n      case ConcurrentRoot:\r\n        this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';\r\n        break;\r\n      case LegacyRoot:\r\n        this._debugRootType = hydrate ? 'hydrate()' : 'render()';\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nexport function createFiberRoot(\r\n  containerInfo: Container,\r\n  tag: RootTag,\r\n  hydrate: boolean,\r\n  initialChildren: ReactNodeList,\r\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\r\n  isStrictMode: boolean,\r\n  concurrentUpdatesByDefaultOverride: null | boolean,\r\n  // TODO: We have several of these arguments that are conceptually part of the\r\n  // host config, but because they are passed in at runtime, we have to thread\r\n  // them through the root constructor. Perhaps we should put them all into a\r\n  // single type, like a DynamicHostConfig that is defined by the renderer.\r\n  identifierPrefix: string,\r\n  onRecoverableError: null | ((error: mixed) => void),\r\n  transitionCallbacks: null | TransitionTracingCallbacks,\r\n): FiberRoot {\r\n  const root: FiberRoot = (new FiberRootNode(\r\n    containerInfo,\r\n    tag,\r\n    hydrate,\r\n    identifierPrefix,\r\n    onRecoverableError,\r\n  ): any);\r\n  if (enableSuspenseCallback) {\r\n    root.hydrationCallbacks = hydrationCallbacks;\r\n  }\r\n\r\n  if (enableTransitionTracing) {\r\n    root.transitionCallbacks = transitionCallbacks;\r\n  }\r\n\r\n  // Cyclic construction. This cheats the type system right now because\r\n  // stateNode is any.\r\n  const uninitializedFiber = createHostRootFiber(\r\n    tag,\r\n    isStrictMode,\r\n    concurrentUpdatesByDefaultOverride,\r\n  );\r\n  root.current = uninitializedFiber;\r\n  uninitializedFiber.stateNode = root;\r\n\r\n  if (enableCache) {\r\n    const initialCache = createCache();\r\n    retainCache(initialCache);\r\n\r\n    // The pooledCache is a fresh cache instance that is used temporarily\r\n    // for newly mounted boundaries during a render. In general, the\r\n    // pooledCache is always cleared from the root at the end of a render:\r\n    // it is either released when render commits, or moved to an Offscreen\r\n    // component if rendering suspends. Because the lifetime of the pooled\r\n    // cache is distinct from the main memoizedState.cache, it must be\r\n    // retained separately.\r\n    root.pooledCache = initialCache;\r\n    retainCache(initialCache);\r\n    const initialState: RootState = {\r\n      element: initialChildren,\r\n      isDehydrated: hydrate,\r\n      cache: initialCache,\r\n    };\r\n    uninitializedFiber.memoizedState = initialState;\r\n  } else {\r\n    const initialState: RootState = {\r\n      element: initialChildren,\r\n      isDehydrated: hydrate,\r\n      cache: (null: any), // not enabled yet\r\n    };\r\n    uninitializedFiber.memoizedState = initialState;\r\n  }\r\n\r\n  initializeUpdateQueue(uninitializedFiber);\r\n\r\n  return root;\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n// TODO: this is special because it gets imported during build.\r\n//\r\n// TODO: 18.0.0 has not been released to NPM;\r\n// It exists as a placeholder so that DevTools can support work tag changes between releases.\r\n// When we next publish a release, update the matching TODO in backend/renderer.js\r\n// TODO: This module is used both by the release scripts and to expose a version\r\n// at runtime. We should instead inject the version number as part of the build\r\n// process, and use the ReactVersions.js module as the single source of truth.\r\nexport default '18.2.0';\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport {REACT_PORTAL_TYPE} from 'shared/ReactSymbols';\r\nimport {checkKeyStringCoercion} from 'shared/CheckStringCoercion';\r\n\r\nimport type {ReactNodeList, ReactPortal} from 'shared/ReactTypes';\r\n\r\nexport function createPortal(\r\n  children: ReactNodeList,\r\n  containerInfo: any,\r\n  // TODO: figure out the API for cross-renderer implementation.\r\n  implementation: any,\r\n  key: ?string = null,\r\n): ReactPortal {\r\n  if (__DEV__) {\r\n    checkKeyStringCoercion(key);\r\n  }\r\n  return {\r\n    // This tag allow us to uniquely identify this as a React Portal\r\n    $$typeof: REACT_PORTAL_TYPE,\r\n    key: key == null ? null : '' + key,\r\n    children,\r\n    containerInfo,\r\n    implementation,\r\n  };\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {\r\n  Fiber,\r\n  SuspenseHydrationCallbacks,\r\n  TransitionTracingCallbacks,\r\n} from './ReactInternalTypes';\r\nimport type {FiberRoot} from './ReactInternalTypes';\r\nimport type {RootTag} from './ReactRootTags';\r\nimport type {\r\n  Instance,\r\n  TextInstance,\r\n  Container,\r\n  PublicInstance,\r\n} from './ReactFiberHostConfig';\r\nimport type {RendererInspectionConfig} from './ReactFiberHostConfig';\r\nimport type {ReactNodeList} from 'shared/ReactTypes';\r\nimport type {Lane} from './ReactFiberLane.old';\r\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\r\n\r\nimport {\r\n  findCurrentHostFiber,\r\n  findCurrentHostFiberWithNoPortals,\r\n} from './ReactFiberTreeReflection';\r\nimport {get as getInstance} from 'shared/ReactInstanceMap';\r\nimport {\r\n  HostComponent,\r\n  ClassComponent,\r\n  HostRoot,\r\n  SuspenseComponent,\r\n} from './ReactWorkTags';\r\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\r\nimport isArray from 'shared/isArray';\r\nimport {enableSchedulingProfiler} from 'shared/ReactFeatureFlags';\r\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\r\nimport {getPublicInstance} from './ReactFiberHostConfig';\r\nimport {\r\n  findCurrentUnmaskedContext,\r\n  processChildContext,\r\n  emptyContextObject,\r\n  isContextProvider as isLegacyContextProvider,\r\n} from './ReactFiberContext.old';\r\nimport {createFiberRoot} from './ReactFiberRoot.old';\r\nimport {isRootDehydrated} from './ReactFiberShellHydration';\r\nimport {\r\n  injectInternals,\r\n  markRenderScheduled,\r\n  onScheduleRoot,\r\n} from './ReactFiberDevToolsHook.old';\r\nimport {\r\n  requestEventTime,\r\n  requestUpdateLane,\r\n  scheduleUpdateOnFiber,\r\n  scheduleInitialHydrationOnRoot,\r\n  flushRoot,\r\n  batchedUpdates,\r\n  flushSync,\r\n  isAlreadyRendering,\r\n  flushControlled,\r\n  deferredUpdates,\r\n  discreteUpdates,\r\n  flushPassiveEffects,\r\n} from './ReactFiberWorkLoop.old';\r\nimport {enqueueConcurrentRenderForLane} from './ReactFiberConcurrentUpdates.old';\r\nimport {\r\n  createUpdate,\r\n  enqueueUpdate,\r\n  entangleTransitions,\r\n} from './ReactFiberClassUpdateQueue.old';\r\nimport {\r\n  isRendering as ReactCurrentFiberIsRendering,\r\n  current as ReactCurrentFiberCurrent,\r\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\r\n  setCurrentFiber as setCurrentDebugFiberInDEV,\r\n} from './ReactCurrentFiber';\r\nimport {StrictLegacyMode} from './ReactTypeOfMode';\r\nimport {\r\n  SyncLane,\r\n  SelectiveHydrationLane,\r\n  NoTimestamp,\r\n  getHighestPriorityPendingLanes,\r\n  higherPriorityLane,\r\n} from './ReactFiberLane.old';\r\nimport {\r\n  getCurrentUpdatePriority,\r\n  runWithPriority,\r\n} from './ReactEventPriorities.old';\r\nimport {\r\n  scheduleRefresh,\r\n  scheduleRoot,\r\n  setRefreshHandler,\r\n  findHostInstancesForRefresh,\r\n} from './ReactFiberHotReloading.old';\r\nimport ReactVersion from 'shared/ReactVersion';\r\nexport {registerMutableSourceForHydration} from './ReactMutableSource.old';\r\nexport {createPortal} from './ReactPortal';\r\nexport {\r\n  createComponentSelector,\r\n  createHasPseudoClassSelector,\r\n  createRoleSelector,\r\n  createTestNameSelector,\r\n  createTextSelector,\r\n  getFindAllNodesFailureDescription,\r\n  findAllNodes,\r\n  findBoundingRects,\r\n  focusWithin,\r\n  observeVisibleRects,\r\n} from './ReactTestSelectors';\r\n\r\ntype OpaqueRoot = FiberRoot;\r\n\r\n// 0 is PROD, 1 is DEV.\r\n// Might add PROFILE later.\r\ntype BundleType = 0 | 1;\r\n\r\ntype DevToolsConfig = {\r\n  bundleType: BundleType,\r\n  version: string,\r\n  rendererPackageName: string,\r\n  // Note: this actually *does* depend on Fiber internal fields.\r\n  // Used by \"inspect clicked DOM element\" in React DevTools.\r\n  findFiberByHostInstance?: (instance: Instance | TextInstance) => Fiber | null,\r\n  rendererConfig?: RendererInspectionConfig,\r\n};\r\n\r\nlet didWarnAboutNestedUpdates;\r\nlet didWarnAboutFindNodeInStrictMode;\r\n\r\nif (__DEV__) {\r\n  didWarnAboutNestedUpdates = false;\r\n  didWarnAboutFindNodeInStrictMode = {};\r\n}\r\n\r\nfunction getContextForSubtree(\r\n  parentComponent: ?React$Component<any, any>,\r\n): Object {\r\n  if (!parentComponent) {\r\n    return emptyContextObject;\r\n  }\r\n\r\n  const fiber = getInstance(parentComponent);\r\n  const parentContext = findCurrentUnmaskedContext(fiber);\r\n\r\n  if (fiber.tag === ClassComponent) {\r\n    const Component = fiber.type;\r\n    if (isLegacyContextProvider(Component)) {\r\n      return processChildContext(fiber, Component, parentContext);\r\n    }\r\n  }\r\n\r\n  return parentContext;\r\n}\r\n\r\nfunction findHostInstance(component: Object): PublicInstance | null {\r\n  const fiber = getInstance(component);\r\n  if (fiber === undefined) {\r\n    if (typeof component.render === 'function') {\r\n      throw new Error('Unable to find node on an unmounted component.');\r\n    } else {\r\n      const keys = Object.keys(component).join(',');\r\n      throw new Error(\r\n        `Argument appears to not be a ReactComponent. Keys: ${keys}`,\r\n      );\r\n    }\r\n  }\r\n  const hostFiber = findCurrentHostFiber(fiber);\r\n  if (hostFiber === null) {\r\n    return null;\r\n  }\r\n  return hostFiber.stateNode;\r\n}\r\n\r\nfunction findHostInstanceWithWarning(\r\n  component: Object,\r\n  methodName: string,\r\n): PublicInstance | null {\r\n  if (__DEV__) {\r\n    const fiber = getInstance(component);\r\n    if (fiber === undefined) {\r\n      if (typeof component.render === 'function') {\r\n        throw new Error('Unable to find node on an unmounted component.');\r\n      } else {\r\n        const keys = Object.keys(component).join(',');\r\n        throw new Error(\r\n          `Argument appears to not be a ReactComponent. Keys: ${keys}`,\r\n        );\r\n      }\r\n    }\r\n    const hostFiber = findCurrentHostFiber(fiber);\r\n    if (hostFiber === null) {\r\n      return null;\r\n    }\r\n    if (hostFiber.mode & StrictLegacyMode) {\r\n      const componentName = getComponentNameFromFiber(fiber) || 'Component';\r\n      if (!didWarnAboutFindNodeInStrictMode[componentName]) {\r\n        didWarnAboutFindNodeInStrictMode[componentName] = true;\r\n\r\n        const previousFiber = ReactCurrentFiberCurrent;\r\n        try {\r\n          setCurrentDebugFiberInDEV(hostFiber);\r\n          if (fiber.mode & StrictLegacyMode) {\r\n            console.error(\r\n              '%s is deprecated in StrictMode. ' +\r\n                '%s was passed an instance of %s which is inside StrictMode. ' +\r\n                'Instead, add a ref directly to the element you want to reference. ' +\r\n                'Learn more about using refs safely here: ' +\r\n                'https://reactjs.org/link/strict-mode-find-node',\r\n              methodName,\r\n              methodName,\r\n              componentName,\r\n            );\r\n          } else {\r\n            console.error(\r\n              '%s is deprecated in StrictMode. ' +\r\n                '%s was passed an instance of %s which renders StrictMode children. ' +\r\n                'Instead, add a ref directly to the element you want to reference. ' +\r\n                'Learn more about using refs safely here: ' +\r\n                'https://reactjs.org/link/strict-mode-find-node',\r\n              methodName,\r\n              methodName,\r\n              componentName,\r\n            );\r\n          }\r\n        } finally {\r\n          // Ideally this should reset to previous but this shouldn't be called in\r\n          // render and there's another warning for that anyway.\r\n          if (previousFiber) {\r\n            setCurrentDebugFiberInDEV(previousFiber);\r\n          } else {\r\n            resetCurrentDebugFiberInDEV();\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return hostFiber.stateNode;\r\n  }\r\n  return findHostInstance(component);\r\n}\r\n\r\nexport function createContainer(\r\n  containerInfo: Container,\r\n  tag: RootTag,\r\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\r\n  isStrictMode: boolean,\r\n  concurrentUpdatesByDefaultOverride: null | boolean,\r\n  identifierPrefix: string,\r\n  onRecoverableError: (error: mixed) => void,\r\n  transitionCallbacks: null | TransitionTracingCallbacks,\r\n): OpaqueRoot {\r\n  const hydrate = false;\r\n  const initialChildren = null;\r\n  return createFiberRoot(\r\n    containerInfo,\r\n    tag,\r\n    hydrate,\r\n    initialChildren,\r\n    hydrationCallbacks,\r\n    isStrictMode,\r\n    concurrentUpdatesByDefaultOverride,\r\n    identifierPrefix,\r\n    onRecoverableError,\r\n    transitionCallbacks,\r\n  );\r\n}\r\n\r\nexport function createHydrationContainer(\r\n  initialChildren: ReactNodeList,\r\n  // TODO: Remove `callback` when we delete legacy mode.\r\n  callback: ?Function,\r\n  containerInfo: Container,\r\n  tag: RootTag,\r\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\r\n  isStrictMode: boolean,\r\n  concurrentUpdatesByDefaultOverride: null | boolean,\r\n  identifierPrefix: string,\r\n  onRecoverableError: (error: mixed) => void,\r\n  transitionCallbacks: null | TransitionTracingCallbacks,\r\n): OpaqueRoot {\r\n  const hydrate = true;\r\n  const root = createFiberRoot(\r\n    containerInfo,\r\n    tag,\r\n    hydrate,\r\n    initialChildren,\r\n    hydrationCallbacks,\r\n    isStrictMode,\r\n    concurrentUpdatesByDefaultOverride,\r\n    identifierPrefix,\r\n    onRecoverableError,\r\n    transitionCallbacks,\r\n  );\r\n\r\n  // TODO: Move this to FiberRoot constructor\r\n  root.context = getContextForSubtree(null);\r\n\r\n  // Schedule the initial render. In a hydration root, this is different from\r\n  // a regular update because the initial render must match was was rendered\r\n  // on the server.\r\n  // NOTE: This update intentionally doesn't have a payload. We're only using\r\n  // the update to schedule work on the root fiber (and, for legacy roots, to\r\n  // enqueue the callback if one is provided).\r\n  const current = root.current;\r\n  const eventTime = requestEventTime();\r\n  const lane = requestUpdateLane(current);\r\n  const update = createUpdate(eventTime, lane);\r\n  update.callback =\r\n    callback !== undefined && callback !== null ? callback : null;\r\n  enqueueUpdate(current, update, lane);\r\n  scheduleInitialHydrationOnRoot(root, lane, eventTime);\r\n\r\n  return root;\r\n}\r\n\r\nexport function updateContainer(\r\n  element: ReactNodeList,\r\n  container: OpaqueRoot,\r\n  parentComponent: ?React$Component<any, any>,\r\n  callback: ?Function,\r\n): Lane {\r\n  if (__DEV__) {\r\n    onScheduleRoot(container, element);\r\n  }\r\n  const current = container.current;\r\n  const eventTime = requestEventTime();\r\n  const lane = requestUpdateLane(current);\r\n\r\n  if (enableSchedulingProfiler) {\r\n    markRenderScheduled(lane);\r\n  }\r\n\r\n  const context = getContextForSubtree(parentComponent);\r\n  if (container.context === null) {\r\n    container.context = context;\r\n  } else {\r\n    container.pendingContext = context;\r\n  }\r\n\r\n  if (__DEV__) {\r\n    if (\r\n      ReactCurrentFiberIsRendering &&\r\n      ReactCurrentFiberCurrent !== null &&\r\n      !didWarnAboutNestedUpdates\r\n    ) {\r\n      didWarnAboutNestedUpdates = true;\r\n      console.error(\r\n        'Render methods should be a pure function of props and state; ' +\r\n          'triggering nested component updates from render is not allowed. ' +\r\n          'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' +\r\n          'Check the render method of %s.',\r\n        getComponentNameFromFiber(ReactCurrentFiberCurrent) || 'Unknown',\r\n      );\r\n    }\r\n  }\r\n\r\n  const update = createUpdate(eventTime, lane);\r\n  // Caution: React DevTools currently depends on this property\r\n  // being called \"element\".\r\n  update.payload = {element};\r\n\r\n  callback = callback === undefined ? null : callback;\r\n  if (callback !== null) {\r\n    if (__DEV__) {\r\n      if (typeof callback !== 'function') {\r\n        console.error(\r\n          'render(...): Expected the last optional `callback` argument to be a ' +\r\n            'function. Instead received: %s.',\r\n          callback,\r\n        );\r\n      }\r\n    }\r\n    update.callback = callback;\r\n  }\r\n\r\n  const root = enqueueUpdate(current, update, lane);\r\n  if (root !== null) {\r\n    scheduleUpdateOnFiber(root, current, lane, eventTime);\r\n    entangleTransitions(root, current, lane);\r\n  }\r\n\r\n  return lane;\r\n}\r\n\r\nexport {\r\n  batchedUpdates,\r\n  deferredUpdates,\r\n  discreteUpdates,\r\n  flushControlled,\r\n  flushSync,\r\n  isAlreadyRendering,\r\n  flushPassiveEffects,\r\n};\r\n\r\nexport function getPublicRootInstance(\r\n  container: OpaqueRoot,\r\n): React$Component<any, any> | PublicInstance | null {\r\n  const containerFiber = container.current;\r\n  if (!containerFiber.child) {\r\n    return null;\r\n  }\r\n  switch (containerFiber.child.tag) {\r\n    case HostComponent:\r\n      return getPublicInstance(containerFiber.child.stateNode);\r\n    default:\r\n      return containerFiber.child.stateNode;\r\n  }\r\n}\r\n\r\nexport function attemptSynchronousHydration(fiber: Fiber): void {\r\n  switch (fiber.tag) {\r\n    case HostRoot: {\r\n      const root: FiberRoot = fiber.stateNode;\r\n      if (isRootDehydrated(root)) {\r\n        // Flush the first scheduled \"update\".\r\n        const lanes = getHighestPriorityPendingLanes(root);\r\n        flushRoot(root, lanes);\r\n      }\r\n      break;\r\n    }\r\n    case SuspenseComponent: {\r\n      flushSync(() => {\r\n        const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\r\n        if (root !== null) {\r\n          const eventTime = requestEventTime();\r\n          scheduleUpdateOnFiber(root, fiber, SyncLane, eventTime);\r\n        }\r\n      });\r\n      // If we're still blocked after this, we need to increase\r\n      // the priority of any promises resolving within this\r\n      // boundary so that they next attempt also has higher pri.\r\n      const retryLane = SyncLane;\r\n      markRetryLaneIfNotHydrated(fiber, retryLane);\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nfunction markRetryLaneImpl(fiber: Fiber, retryLane: Lane) {\r\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\r\n  if (suspenseState !== null && suspenseState.dehydrated !== null) {\r\n    suspenseState.retryLane = higherPriorityLane(\r\n      suspenseState.retryLane,\r\n      retryLane,\r\n    );\r\n  }\r\n}\r\n\r\n// Increases the priority of thenables when they resolve within this boundary.\r\nfunction markRetryLaneIfNotHydrated(fiber: Fiber, retryLane: Lane) {\r\n  markRetryLaneImpl(fiber, retryLane);\r\n  const alternate = fiber.alternate;\r\n  if (alternate) {\r\n    markRetryLaneImpl(alternate, retryLane);\r\n  }\r\n}\r\n\r\nexport function attemptDiscreteHydration(fiber: Fiber): void {\r\n  if (fiber.tag !== SuspenseComponent) {\r\n    // We ignore HostRoots here because we can't increase\r\n    // their priority and they should not suspend on I/O,\r\n    // since you have to wrap anything that might suspend in\r\n    // Suspense.\r\n    return;\r\n  }\r\n  const lane = SyncLane;\r\n  const root = enqueueConcurrentRenderForLane(fiber, lane);\r\n  if (root !== null) {\r\n    const eventTime = requestEventTime();\r\n    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\r\n  }\r\n  markRetryLaneIfNotHydrated(fiber, lane);\r\n}\r\n\r\nexport function attemptContinuousHydration(fiber: Fiber): void {\r\n  if (fiber.tag !== SuspenseComponent) {\r\n    // We ignore HostRoots here because we can't increase\r\n    // their priority and they should not suspend on I/O,\r\n    // since you have to wrap anything that might suspend in\r\n    // Suspense.\r\n    return;\r\n  }\r\n  const lane = SelectiveHydrationLane;\r\n  const root = enqueueConcurrentRenderForLane(fiber, lane);\r\n  if (root !== null) {\r\n    const eventTime = requestEventTime();\r\n    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\r\n  }\r\n  markRetryLaneIfNotHydrated(fiber, lane);\r\n}\r\n\r\nexport function attemptHydrationAtCurrentPriority(fiber: Fiber): void {\r\n  if (fiber.tag !== SuspenseComponent) {\r\n    // We ignore HostRoots here because we can't increase\r\n    // their priority other than synchronously flush it.\r\n    return;\r\n  }\r\n  const lane = requestUpdateLane(fiber);\r\n  const root = enqueueConcurrentRenderForLane(fiber, lane);\r\n  if (root !== null) {\r\n    const eventTime = requestEventTime();\r\n    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\r\n  }\r\n  markRetryLaneIfNotHydrated(fiber, lane);\r\n}\r\n\r\nexport {getCurrentUpdatePriority, runWithPriority};\r\n\r\nexport {findHostInstance};\r\n\r\nexport {findHostInstanceWithWarning};\r\n\r\nexport function findHostInstanceWithNoPortals(\r\n  fiber: Fiber,\r\n): PublicInstance | null {\r\n  const hostFiber = findCurrentHostFiberWithNoPortals(fiber);\r\n  if (hostFiber === null) {\r\n    return null;\r\n  }\r\n  return hostFiber.stateNode;\r\n}\r\n\r\nlet shouldErrorImpl = fiber => null;\r\n\r\nexport function shouldError(fiber: Fiber): ?boolean {\r\n  return shouldErrorImpl(fiber);\r\n}\r\n\r\nlet shouldSuspendImpl = fiber => false;\r\n\r\nexport function shouldSuspend(fiber: Fiber): boolean {\r\n  return shouldSuspendImpl(fiber);\r\n}\r\n\r\nlet overrideHookState = null;\r\nlet overrideHookStateDeletePath = null;\r\nlet overrideHookStateRenamePath = null;\r\nlet overrideProps = null;\r\nlet overridePropsDeletePath = null;\r\nlet overridePropsRenamePath = null;\r\nlet scheduleUpdate = null;\r\nlet setErrorHandler = null;\r\nlet setSuspenseHandler = null;\r\n\r\nif (__DEV__) {\r\n  const copyWithDeleteImpl = (\r\n    obj: Object | Array<any>,\r\n    path: Array<string | number>,\r\n    index: number,\r\n  ) => {\r\n    const key = path[index];\r\n    const updated = isArray(obj) ? obj.slice() : {...obj};\r\n    if (index + 1 === path.length) {\r\n      if (isArray(updated)) {\r\n        updated.splice(((key: any): number), 1);\r\n      } else {\r\n        delete updated[key];\r\n      }\r\n      return updated;\r\n    }\r\n    // $FlowFixMe number or string is fine here\r\n    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\r\n    return updated;\r\n  };\r\n\r\n  const copyWithDelete = (\r\n    obj: Object | Array<any>,\r\n    path: Array<string | number>,\r\n  ): Object | Array<any> => {\r\n    return copyWithDeleteImpl(obj, path, 0);\r\n  };\r\n\r\n  const copyWithRenameImpl = (\r\n    obj: Object | Array<any>,\r\n    oldPath: Array<string | number>,\r\n    newPath: Array<string | number>,\r\n    index: number,\r\n  ) => {\r\n    const oldKey = oldPath[index];\r\n    const updated = isArray(obj) ? obj.slice() : {...obj};\r\n    if (index + 1 === oldPath.length) {\r\n      const newKey = newPath[index];\r\n      // $FlowFixMe number or string is fine here\r\n      updated[newKey] = updated[oldKey];\r\n      if (isArray(updated)) {\r\n        updated.splice(((oldKey: any): number), 1);\r\n      } else {\r\n        delete updated[oldKey];\r\n      }\r\n    } else {\r\n      // $FlowFixMe number or string is fine here\r\n      updated[oldKey] = copyWithRenameImpl(\r\n        // $FlowFixMe number or string is fine here\r\n        obj[oldKey],\r\n        oldPath,\r\n        newPath,\r\n        index + 1,\r\n      );\r\n    }\r\n    return updated;\r\n  };\r\n\r\n  const copyWithRename = (\r\n    obj: Object | Array<any>,\r\n    oldPath: Array<string | number>,\r\n    newPath: Array<string | number>,\r\n  ): Object | Array<any> => {\r\n    if (oldPath.length !== newPath.length) {\r\n      console.warn('copyWithRename() expects paths of the same length');\r\n      return;\r\n    } else {\r\n      for (let i = 0; i < newPath.length - 1; i++) {\r\n        if (oldPath[i] !== newPath[i]) {\r\n          console.warn(\r\n            'copyWithRename() expects paths to be the same except for the deepest key',\r\n          );\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    return copyWithRenameImpl(obj, oldPath, newPath, 0);\r\n  };\r\n\r\n  const copyWithSetImpl = (\r\n    obj: Object | Array<any>,\r\n    path: Array<string | number>,\r\n    index: number,\r\n    value: any,\r\n  ) => {\r\n    if (index >= path.length) {\r\n      return value;\r\n    }\r\n    const key = path[index];\r\n    const updated = isArray(obj) ? obj.slice() : {...obj};\r\n    // $FlowFixMe number or string is fine here\r\n    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\r\n    return updated;\r\n  };\r\n\r\n  const copyWithSet = (\r\n    obj: Object | Array<any>,\r\n    path: Array<string | number>,\r\n    value: any,\r\n  ): Object | Array<any> => {\r\n    return copyWithSetImpl(obj, path, 0, value);\r\n  };\r\n\r\n  const findHook = (fiber: Fiber, id: number) => {\r\n    // For now, the \"id\" of stateful hooks is just the stateful hook index.\r\n    // This may change in the future with e.g. nested hooks.\r\n    let currentHook = fiber.memoizedState;\r\n    while (currentHook !== null && id > 0) {\r\n      currentHook = currentHook.next;\r\n      id--;\r\n    }\r\n    return currentHook;\r\n  };\r\n\r\n  // Support DevTools editable values for useState and useReducer.\r\n  overrideHookState = (\r\n    fiber: Fiber,\r\n    id: number,\r\n    path: Array<string | number>,\r\n    value: any,\r\n  ) => {\r\n    const hook = findHook(fiber, id);\r\n    if (hook !== null) {\r\n      const newState = copyWithSet(hook.memoizedState, path, value);\r\n      hook.memoizedState = newState;\r\n      hook.baseState = newState;\r\n\r\n      // We aren't actually adding an update to the queue,\r\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\r\n      // (There's no appropriate action type for DevTools overrides.)\r\n      // As a result though, React will see the scheduled update as a noop and bailout.\r\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\r\n      fiber.memoizedProps = {...fiber.memoizedProps};\r\n\r\n      const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\r\n      if (root !== null) {\r\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\r\n      }\r\n    }\r\n  };\r\n  overrideHookStateDeletePath = (\r\n    fiber: Fiber,\r\n    id: number,\r\n    path: Array<string | number>,\r\n  ) => {\r\n    const hook = findHook(fiber, id);\r\n    if (hook !== null) {\r\n      const newState = copyWithDelete(hook.memoizedState, path);\r\n      hook.memoizedState = newState;\r\n      hook.baseState = newState;\r\n\r\n      // We aren't actually adding an update to the queue,\r\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\r\n      // (There's no appropriate action type for DevTools overrides.)\r\n      // As a result though, React will see the scheduled update as a noop and bailout.\r\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\r\n      fiber.memoizedProps = {...fiber.memoizedProps};\r\n\r\n      const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\r\n      if (root !== null) {\r\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\r\n      }\r\n    }\r\n  };\r\n  overrideHookStateRenamePath = (\r\n    fiber: Fiber,\r\n    id: number,\r\n    oldPath: Array<string | number>,\r\n    newPath: Array<string | number>,\r\n  ) => {\r\n    const hook = findHook(fiber, id);\r\n    if (hook !== null) {\r\n      const newState = copyWithRename(hook.memoizedState, oldPath, newPath);\r\n      hook.memoizedState = newState;\r\n      hook.baseState = newState;\r\n\r\n      // We aren't actually adding an update to the queue,\r\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\r\n      // (There's no appropriate action type for DevTools overrides.)\r\n      // As a result though, React will see the scheduled update as a noop and bailout.\r\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\r\n      fiber.memoizedProps = {...fiber.memoizedProps};\r\n\r\n      const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\r\n      if (root !== null) {\r\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Support DevTools props for function components, forwardRef, memo, host components, etc.\r\n  overrideProps = (fiber: Fiber, path: Array<string | number>, value: any) => {\r\n    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\r\n    if (fiber.alternate) {\r\n      fiber.alternate.pendingProps = fiber.pendingProps;\r\n    }\r\n    const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\r\n    if (root !== null) {\r\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\r\n    }\r\n  };\r\n  overridePropsDeletePath = (fiber: Fiber, path: Array<string | number>) => {\r\n    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\r\n    if (fiber.alternate) {\r\n      fiber.alternate.pendingProps = fiber.pendingProps;\r\n    }\r\n    const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\r\n    if (root !== null) {\r\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\r\n    }\r\n  };\r\n  overridePropsRenamePath = (\r\n    fiber: Fiber,\r\n    oldPath: Array<string | number>,\r\n    newPath: Array<string | number>,\r\n  ) => {\r\n    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);\r\n    if (fiber.alternate) {\r\n      fiber.alternate.pendingProps = fiber.pendingProps;\r\n    }\r\n    const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\r\n    if (root !== null) {\r\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\r\n    }\r\n  };\r\n\r\n  scheduleUpdate = (fiber: Fiber) => {\r\n    const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\r\n    if (root !== null) {\r\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\r\n    }\r\n  };\r\n\r\n  setErrorHandler = (newShouldErrorImpl: Fiber => ?boolean) => {\r\n    shouldErrorImpl = newShouldErrorImpl;\r\n  };\r\n\r\n  setSuspenseHandler = (newShouldSuspendImpl: Fiber => boolean) => {\r\n    shouldSuspendImpl = newShouldSuspendImpl;\r\n  };\r\n}\r\n\r\nfunction findHostInstanceByFiber(fiber: Fiber): Instance | TextInstance | null {\r\n  const hostFiber = findCurrentHostFiber(fiber);\r\n  if (hostFiber === null) {\r\n    return null;\r\n  }\r\n  return hostFiber.stateNode;\r\n}\r\n\r\nfunction emptyFindFiberByHostInstance(\r\n  instance: Instance | TextInstance,\r\n): Fiber | null {\r\n  return null;\r\n}\r\n\r\nfunction getCurrentFiberForDevTools() {\r\n  return ReactCurrentFiberCurrent;\r\n}\r\n\r\nexport function injectIntoDevTools(devToolsConfig: DevToolsConfig): boolean {\r\n  const {findFiberByHostInstance} = devToolsConfig;\r\n  const {ReactCurrentDispatcher} = ReactSharedInternals;\r\n\r\n  return injectInternals({\r\n    bundleType: devToolsConfig.bundleType,\r\n    version: devToolsConfig.version,\r\n    rendererPackageName: devToolsConfig.rendererPackageName,\r\n    rendererConfig: devToolsConfig.rendererConfig,\r\n    overrideHookState,\r\n    overrideHookStateDeletePath,\r\n    overrideHookStateRenamePath,\r\n    overrideProps,\r\n    overridePropsDeletePath,\r\n    overridePropsRenamePath,\r\n    setErrorHandler,\r\n    setSuspenseHandler,\r\n    scheduleUpdate,\r\n    currentDispatcherRef: ReactCurrentDispatcher,\r\n    findHostInstanceByFiber,\r\n    findFiberByHostInstance:\r\n      findFiberByHostInstance || emptyFindFiberByHostInstance,\r\n    // React Refresh\r\n    findHostInstancesForRefresh: __DEV__ ? findHostInstancesForRefresh : null,\r\n    scheduleRefresh: __DEV__ ? scheduleRefresh : null,\r\n    scheduleRoot: __DEV__ ? scheduleRoot : null,\r\n    setRefreshHandler: __DEV__ ? setRefreshHandler : null,\r\n    // Enables DevTools to append owner stacks to error messages in DEV mode.\r\n    getCurrentFiber: __DEV__ ? getCurrentFiberForDevTools : null,\r\n    // Enables DevTools to detect reconciler version rather than renderer version\r\n    // which may not match for third party renderers.\r\n    reconcilerVersion: ReactVersion,\r\n  });\r\n}\r\n"],"names":["assign","Object","formatProdErrorMessage","code","url","i","arguments","length","encodeURIComponent","get","key","_reactInternals","set","value","ReactSharedInternals","React","enableSuspenseCallback","enableNewReconciler","enableLazyContextPropagation","enableLegacyHidden","enableSuspenseAvoidThisFallback","enableSchedulingProfiler","__PROFILE__","enableProfilerTimer","FunctionComponent","ClassComponent","IndeterminateComponent","HostRoot","HostPortal","HostComponent","HostText","Fragment","Mode","ContextConsumer","ContextProvider","ForwardRef","Profiler","SuspenseComponent","MemoComponent","SimpleMemoComponent","LazyComponent","IncompleteClassComponent","DehydratedFragment","SuspenseListComponent","ScopeComponent","OffscreenComponent","LegacyHiddenComponent","CacheComponent","TracingMarkerComponent","REACT_ELEMENT_TYPE","Symbol","for","REACT_PORTAL_TYPE","REACT_FRAGMENT_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","REACT_SERVER_CONTEXT_TYPE","REACT_FORWARD_REF_TYPE","REACT_SUSPENSE_TYPE","REACT_SUSPENSE_LIST_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","REACT_SCOPE_TYPE","REACT_DEBUG_TRACING_MODE_TYPE","REACT_OFFSCREEN_TYPE","REACT_LEGACY_HIDDEN_TYPE","REACT_CACHE_TYPE","REACT_TRACING_MARKER_TYPE","REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED","MAYBE_ITERATOR_SYMBOL","iterator","FAUX_ITERATOR_SYMBOL","getIteratorFn","maybeIterable","maybeIterator","getWrappedName","outerType","innerType","wrapperName","displayName","functionName","name","getContextName","type","getComponentNameFromType","$$typeof","context","provider","_context","render","outerName","lazyComponent","payload","_payload","init","_init","x","context2","_globalName","getComponentNameFromFiber","fiber","tag","NoFlags","PerformedWork","Placement","Update","ChildDeletion","ContentReset","Callback","DidCapture","ForceClientRender","Ref","Snapshot","Passive","Hydrating","Visibility","StoreConsistency","LifecycleEffectMask","HostEffectMask","Incomplete","ShouldCapture","ForceUpdateForLegacySuspense","Forked","RefStatic","LayoutStatic","PassiveStatic","PlacementDEV","BeforeMutationMask","enableCreateEventHandleAPI","MutationMask","LayoutMask","PassiveMask","StaticMask","ReactCurrentOwner","getNearestMountedFiber","node","nearestMounted","alternate","nextNode","flags","return","isFiberMounted","isMounted","component","getInstance","assertIsMounted","findCurrentFiberUsingSlowPath","a","b","parentA","parentB","nextParent","child","sibling","didFindChild","stateNode","current","findCurrentHostFiber","parent","currentParent","findCurrentHostFiberImpl","match","findCurrentHostFiberWithNoPortals","findCurrentHostFiberWithNoPortalsImpl","isArrayImpl","Array","isArray","getPublicInstance","$$$hostConfig","getRootHostContext","getChildHostContext","prepareForCommit","resetAfterCommit","createInstance","appendInitialChild","finalizeInitialChildren","prepareUpdate","shouldSetTextContent","createTextInstance","scheduleTimeout","cancelTimeout","noTimeout","isPrimaryRenderer","warnsIfNotActing","supportsMutation","supportsPersistence","supportsHydration","getInstanceFromNode","beforeActiveInstanceBlur","afterActiveInstanceBlur","preparePortalMount","prepareScopeUpdate","getInstanceFromScope","getCurrentEventPriority","detachDeletedInstance","requestPostPaintCallback","supportsMicrotasks","scheduleMicrotask","supportsTestSelectors","findFiberRoot","getBoundingRect","getTextContent","isHiddenSubtree","matchAccessibilityRole","setFocusIfFocusable","setupIntersectionObserver","appendChild","appendChildToContainer","commitTextUpdate","commitMount","commitUpdate","insertBefore","insertInContainerBefore","removeChild","removeChildFromContainer","resetTextContent","hideInstance","hideTextInstance","unhideInstance","unhideTextInstance","clearContainer","cloneInstance","createContainerChildSet","appendChildToContainerChildSet","finalizeContainerChildren","replaceContainerChildren","cloneHiddenInstance","cloneHiddenTextInstance","canHydrateInstance","canHydrateTextInstance","canHydrateSuspenseInstance","isSuspenseInstancePending","isSuspenseInstanceFallback","getSuspenseInstanceFallbackErrorDetails","registerSuspenseInstanceRetry","getNextHydratableSibling","getFirstHydratableChild","getFirstHydratableChildWithinContainer","getFirstHydratableChildWithinSuspenseInstance","hydrateInstance","hydrateTextInstance","hydrateSuspenseInstance","getNextHydratableInstanceAfterSuspenseInstance","commitHydratedContainer","commitHydratedSuspenseInstance","clearSuspenseBoundary","clearSuspenseBoundaryFromContainer","shouldDeleteUnhydratedTailInstances","didNotMatchHydratedContainerTextInstance","didNotMatchHydratedTextInstance","didNotHydrateInstanceWithinContainer","didNotHydrateInstanceWithinSuspenseInstance","didNotHydrateInstance","didNotFindHydratableInstanceWithinContainer","didNotFindHydratableTextInstanceWithinContainer","didNotFindHydratableSuspenseInstanceWithinContainer","didNotFindHydratableInstanceWithinSuspenseInstance","didNotFindHydratableTextInstanceWithinSuspenseInstance","didNotFindHydratableSuspenseInstanceWithinSuspenseInstance","didNotFindHydratableInstance","didNotFindHydratableTextInstance","didNotFindHydratableSuspenseInstance","errorHydratingContainer","isHydratableResource","getMatchingResourceInstance","ReactCurrentDispatcher","prefix","describeBuiltInComponentFrame","source","ownerFn","undefined","Error","stack","trim","reentry","describeNativeComponentFrame","fn","construct","disableNativeComponentFrames","control","previousPrepareStackTrace","prepareStackTrace","Fake","defineProperty","prototype","Reflect","call","sample","sampleLines","split","controlLines","s","c","frame","replace","includes","syntheticFrame","describeClassComponentFrame","ctor","describeFunctionComponentFrame","hasOwnProperty","ReactDebugCurrentFrame","valueStack","index","createCursor","defaultValue","pop","cursor","push","emptyContextObject","contextStackCursor","didPerformWorkStackCursor","previousContext","getUnmaskedContext","workInProgress","Component","didPushOwnContextIfProvider","isContextProvider","cacheContext","unmaskedContext","maskedContext","instance","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","getMaskedContext","contextTypes","hasContextChanged","childContextTypes","popContext","popTopLevelContextObject","pushTopLevelContextObject","didChange","processChildContext","parentContext","getChildContext","childContext","contextKey","pushContextProvider","memoizedMergedChildContext","__reactInternalMemoizedMergedChildContext","invalidateContextProvider","mergedContext","findCurrentUnmaskedContext","LegacyRoot","ConcurrentRoot","OffscreenVisible","OffscreenPassiveEffectsConnected","NoMode","ConcurrentMode","ProfileMode","StrictLegacyMode","clz32","Math","clz32Fallback","log","LN2","asUint","TotalLanes","NoLanes","NoLane","SyncLane","InputContinuousHydrationLane","InputContinuousLane","DefaultHydrationLane","DefaultLane","TransitionHydrationLane","TransitionLanes","TransitionLane1","TransitionLane2","TransitionLane3","TransitionLane4","TransitionLane5","TransitionLane6","TransitionLane7","TransitionLane8","TransitionLane9","TransitionLane10","TransitionLane11","TransitionLane12","TransitionLane13","TransitionLane14","TransitionLane15","TransitionLane16","RetryLanes","RetryLane1","RetryLane2","RetryLane3","RetryLane4","RetryLane5","SomeRetryLane","SelectiveHydrationLane","NonIdleLanes","IdleHydrationLane","IdleLane","OffscreenLane","NoTimestamp","nextTransitionLane","nextRetryLane","getHighestPriorityLanes","lanes","getHighestPriorityLane","getNextLanes","root","wipLanes","pendingLanes","nextLanes","suspendedLanes","pingedLanes","nonIdlePendingLanes","nonIdleUnblockedLanes","nonIdlePingedLanes","unblockedLanes","nextLane","wipLane","entangledLanes","entanglements","pickArbitraryLaneIndex","lane","getMostRecentEventTime","eventTimes","mostRecentEventTime","eventTime","computeExpirationTime","currentTime","markStarvedLanesAsExpired","expirationTimes","expirationTime","expiredLanes","getHighestPriorityPendingLanes","getLanesToRetrySynchronouslyOnError","originallyAttemptedLanes","errorRecoveryDisabledLanes","everythingButOffscreen","includesSyncLane","includesNonIdleWork","includesOnlyRetries","includesOnlyNonUrgentLanes","UrgentLanes","includesOnlyTransitions","includesBlockingLane","SyncDefaultLanes","includesExpiredLane","isTransitionLane","claimNextTransitionLane","claimNextRetryLane","pickArbitraryLane","laneToIndex","includesSomeLane","isSubsetOfLanes","subset","mergeLanes","removeLanes","intersectLanes","laneToLanes","higherPriorityLane","createLaneMap","initial","laneMap","markRootUpdated","updateLane","markRootSuspended","markRootPinged","markRootFinished","remainingLanes","noLongerPendingLanes","mutableReadLanes","hiddenUpdates","hiddenUpdatesForLane","update","markRootEntangled","rootEntangledLanes","markHiddenUpdate","getBumpedLaneForHydration","renderLanes","renderLane","getTransitionsForLanes","DiscreteEventPriority","ContinuousEventPriority","DefaultEventPriority","IdleEventPriority","currentUpdatePriority","getCurrentUpdatePriority","setCurrentUpdatePriority","newPriority","runWithPriority","priority","previousPriority","higherEventPriority","lowerEventPriority","isHigherEventPriority","lanesToEventPriority","scheduleCallback","Scheduler","cancelCallback","shouldYield","requestPaint","now","ImmediatePriority","UserBlockingPriority","NormalPriority","IdlePriority","rendererID","injectedHook","injectInternals","internals","__REACT_DEVTOOLS_GLOBAL_HOOK__","hook","isDisabled","supportsFiber","getLaneLabelMap","injectProfilingHooks","inject","err","checkDCE","onCommitRoot","eventPriority","onCommitFiberRoot","didError","schedulerPriority","ImmediateSchedulerPriority","UserBlockingSchedulerPriority","NormalSchedulerPriority","IdleSchedulerPriority","onPostCommitRoot","onPostCommitFiberRoot","onCommitUnmount","onCommitFiberUnmount","profilingHooks","injectedProfilingHooks","is","y","objectIs","syncQueue","includesLegacySyncCallbacks","isFlushingSyncQueue","scheduleSyncCallback","callback","scheduleLegacySyncCallback","flushSyncCallbacksOnlyInLegacyMode","flushSyncCallbacks","previousUpdatePriority","isSync","queue","error","slice","isRootDehydrated","currentState","memoizedState","isDehydrated","forkStack","forkStackIndex","treeForkProvider","treeForkCount","idStack","idStackIndex","treeContextProvider","treeContextId","treeContextOverflow","isForkedChild","warnIfNotHydrating","getForksAtLevel","getTreeId","overflow","idWithLeadingBit","id","getLeadingBit","toString","pushTreeFork","totalChildren","pushTreeId","baseIdWithLeadingBit","baseOverflow","baseLength","getBitLength","baseId","slot","numberOfOverflowBits","newOverflowBits","newOverflow","restOfBaseId","restOfBaseLength","restOfLength","restOfNewBits","newBits","pushMaterializedTreeId","returnFiber","numberOfForks","slotIndex","number","popTreeContext","getSuspendedTreeContext","restoreSuspendedTreeContext","suspendedContext","NO_CONTEXT","contextFiberStackCursor","rootInstanceStackCursor","requiredContext","getRootHostContainer","rootInstance","pushHostContainer","nextRootInstance","nextRootContext","popHostContainer","getHostContext","pushHostContext","nextContext","popHostContext","hydrationParentFiber","nextHydratableInstance","isHydrating","didSuspendOrErrorDEV","hydrationErrors","enterHydrationState","parentInstance","containerInfo","reenterHydrationStateFromDehydratedSuspenseInstance","suspenseInstance","treeContext","deleteHydratableInstance","warnUnhydratedInstance","childToDelete","createFiberFromHostInstanceForDeletion","deletions","insertNonHydratedInstance","warnNonhydratedInstance","tryHydrate","nextInstance","props","pendingProps","text","textInstance","suspenseState","dehydrated","retryLane","dehydratedFragment","createFiberFromDehydratedFragment","shouldClientRenderOnMismatch","mode","throwOnHydrationMismatch","tryToClaimNextHydratableInstance","firstAttemptedInstance","prevHydrationParentFiber","prepareToHydrateHostInstance","hostContext","shouldWarnIfMismatchDev","updatePayload","memoizedProps","updateQueue","prepareToHydrateHostTextInstance","textContent","shouldUpdate","parentContainer","isConcurrentMode","parentType","parentProps","prepareToHydrateHostSuspenseInstance","skipPastDehydratedSuspenseInstance","popToNextHostParent","popHydrationState","enableFloat","warnIfUnhydratedTailNodes","hasUnhydratedTailNodes","resetHydrationState","upgradeHydrationErrorsToRecoverable","queueRecoverableErrors","getIsHydrating","queueHydrationError","ReactCurrentBatchConfig","NoTransition","requestCurrentTransition","transition","shallowEqual","objA","objB","keysA","keys","keysB","currentKey","describeFiber","getStackByFiberInDevAndProd","info","message","resolveDefaultProps","baseProps","defaultProps","propName","valueCursor","currentlyRenderingFiber","lastContextDependency","lastFullyObservedContext","resetContextDependencies","pushProvider","providerFiber","nextValue","_currentValue","_currentValue2","popProvider","currentValue","enableServerContext","_defaultValue","scheduleContextWorkOnParentPath","propagationRoot","childLanes","propagateContextChange","propagateContextChange_eager","nextFiber","list","dependencies","dependency","firstContext","createUpdate","ForceUpdate","sharedQueue","shared","pending","next","parentSuspense","prepareToReadContext","markWorkInProgressReceivedUpdate","readContext","contextItem","memoizedValue","concurrentQueues","concurrentQueuesIndex","concurrentlyUpdatedLanes","finishQueueingConcurrentUpdates","endIndex","markUpdateLaneFromFiberToRoot","getConcurrentlyUpdatedLanes","enqueueUpdate","enqueueConcurrentHookUpdate","concurrentQueue","concurrentUpdate","getRootForUpdatedFiber","enqueueConcurrentHookUpdateAndEagerlyBailout","enqueueConcurrentClassUpdate","enqueueConcurrentRenderForLane","unsafe_markUpdateLaneFromFiberToRoot","sourceFiber","isHidden","offscreenInstance","visibility","throwIfInfiniteUpdateLoopDetected","detectUpdateOnUnmountedFiber","UpdateState","ReplaceState","CaptureUpdate","hasForceUpdate","initializeUpdateQueue","baseState","firstBaseUpdate","lastBaseUpdate","hiddenCallbacks","callbacks","cloneUpdateQueue","currentQueue","clone","isUnsafeClassRenderPhaseUpdate","entangleTransitions","queueLanes","newQueueLanes","enqueueCapturedUpdate","capturedUpdate","newFirst","newLast","getStateFromUpdate","prevState","nextProps","nextState","partialState","processUpdateQueue","pendingQueue","lastPendingUpdate","firstPendingUpdate","currentLastBaseUpdate","newState","newLanes","newBaseState","newFirstBaseUpdate","newLastBaseUpdate","updateEventTime","isHiddenUpdate","shouldSkipUpdate","getWorkInProgressRootRenderLanes","markSkippedUpdateLanes","callCallback","resetHasForceUpdateBeforeProcessing","checkHasForceUpdateAfterProcessing","deferHiddenCallbacks","newHiddenCallbacks","existingHiddenCallbacks","concat","commitHiddenCallbacks","commitCallbacks","emptyRefsObject","refs","applyDerivedStateFromProps","getDerivedStateFromProps","classComponentUpdater","enqueueSetState","inst","requestEventTime","requestUpdateLane","scheduleUpdateOnFiber","enqueueReplaceState","enqueueForceUpdate","checkShouldComponentUpdate","oldProps","newProps","oldState","shouldComponentUpdate","isPureReactComponent","adoptClassInstance","updater","setInstance","constructClassInstance","isLegacyContextConsumer","contextType","state","callComponentWillMount","componentWillMount","UNSAFE_componentWillMount","callComponentWillReceiveProps","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","mountClassInstance","getSnapshotBeforeUpdate","componentDidMount","fiberFlags","resumeMountClassInstance","oldContext","nextLegacyUnmaskedContext","hasNewLifecycles","updateClassInstance","unresolvedOldProps","elementType","unresolvedNewProps","nextUnmaskedContext","componentDidUpdate","UNSAFE_componentWillUpdate","componentWillUpdate","coerceRef","element","mixedRef","ref","_owner","owner","ownerFiber","resolvedInst","stringRef","_stringRef","throwOnInvalidObjectType","newChild","childString","join","resolveLazy","lazyType","ChildReconciler","shouldTrackSideEffects","deleteChild","deleteRemainingChildren","currentFirstChild","mapRemainingChildren","existingChildren","Map","existingChild","useFiber","createWorkInProgress","placeChild","newFiber","lastPlacedIndex","newIndex","oldIndex","placeSingleChild","updateTextNode","created","createFiberFromText","existing","updateElement","updateFragment","children","__DEV__","createFiberFromElement","updatePortal","portal","implementation","createFiberFromPortal","fragment","createFiberFromFragment","createChild","updateSlot","oldFiber","updateFromMap","newIdx","matchedFiber","reconcileChildrenArray","newChildren","resultingFirstChild","previousNewFiber","nextOldFiber","delete","forEach","reconcileChildrenIterator","newChildrenIterable","iteratorFn","step","done","reconcileSingleTextNode","reconcileSingleElement","reconcileSinglePortal","reconcileChildFibers","isUnkeyedTopLevelFragment","mountChildFibers","cloneChildFibers","currentChild","resetChildFibers","resetWorkInProgress","currentTreeHiddenStackCursor","prevRenderLanesStackCursor","pushHiddenContext","prevRenderLanes","getRenderLanes","setRenderLanes","baseLanes","reuseHiddenContextOnStack","popHiddenContext","isCurrentTreeHidden","suspenseHandlerStackCursor","pushPrimaryTreeSuspenseHandler","handler","pushFallbackTreeSuspenseHandler","reuseSuspenseHandlerOnStack","pushOffscreenSuspenseHandler","getSuspenseHandler","popSuspenseHandler","DefaultSuspenseContext","SubtreeSuspenseContextMask","ForceSuspenseFallback","suspenseStackCursor","hasSuspenseListContext","flag","setDefaultShallowSuspenseListContext","setShallowSuspenseListContext","shallowContext","pushSuspenseListContext","newContext","popSuspenseListContext","findFirstSuspended","row","revealOrder","didSuspend","HasEffect","Insertion","Layout","workInProgressSources","resetWorkInProgressVersions","mutableSource","_workInProgressVersionPrimary","_workInProgressVersionSecondary","registerMutableSourceForHydration","getVersion","_getVersion","version","_source","mutableSourceEagerHydrationData","AbortControllerLocal","enableCache","AbortController","AbortControllerShim","listeners","signal","aborted","addEventListener","listener","abort","CacheContext","Consumer","Provider","_threadCount","createCache","cache","controller","data","refCount","retainCache","releaseCache","pushCacheProvider","popCacheProvider","suspendedThenable","usedThenables","isTrackingSuspendedThenable","suspendedThenableDidResolve","status","trackSuspendedWakeable","wakeable","thenable","pendingThenable","then","fulfilledValue","fulfilledThenable","rejectedThenable","reason","resetWakeableStateAfterEachAttempt","adHocSuspendCount","resetThenableStateOnCompletion","trackUsedThenable","lastUsedThenable","getPreviouslyUsedThenableAtIndex","currentHook","workInProgressHook","didScheduleRenderPhaseUpdate","didScheduleRenderPhaseUpdateDuringThisPass","localIdCounter","thenableIndexCounter","globalClientIdCounter","RE_RENDER_LIMIT","throwInvalidHookError","areHookInputsEqual","nextDeps","prevDeps","renderWithHooks","secondArg","nextRenderLanes","HooksDispatcherOnMount","HooksDispatcherOnUpdate","numberOfReRenders","HooksDispatcherOnRerender","ContextOnlyDispatcher","didRenderTooFewHooks","checkDidRenderIdHook","didRenderIdHook","bailoutHooks","PassiveEffect","UpdateEffect","resetHooksAfterThrow","mountWorkInProgressHook","baseQueue","updateWorkInProgressHook","nextCurrentHook","nextWorkInProgressHook","newHook","createFunctionComponentUpdateQueue","lastEffect","stores","memoCache","use","usable","rejectedError","prevThenableAtIndex","String","useMemoCache","size","currentUpdateQueue","currentMemoCache","map","array","basicStateReducer","action","mountReducer","reducer","initialArg","initialState","dispatch","lastRenderedReducer","lastRenderedState","dispatchReducerAction","bind","updateReducer","baseFirst","pendingFirst","first","newBaseQueueFirst","newBaseQueueLast","hasEagerState","eagerState","rerenderReducer","lastRenderPhaseUpdate","firstRenderPhaseUpdate","mountMutableSource","getSnapshot","subscribe","updateMutableSource","mountSyncExternalStore","getServerSnapshot","nextSnapshot","getWorkInProgressRoot","pushStoreConsistencyCheck","mountEffect","subscribeToStore","pushEffect","HookHasEffect","HookPassive","updateStoreInstance","updateSyncExternalStore","prevSnapshot","snapshotChanged","updateEffect","renderedSnapshot","check","componentUpdateQueue","checkIfSnapshotChanged","forceStoreRerender","handleStoreChange","latestGetSnapshot","prevValue","mountState","dispatchSetState","updateState","rerenderState","create","destroy","deps","effect","firstEffect","mountRef","initialValue","updateRef","mountEffectImpl","hookFlags","updateEffectImpl","prevEffect","PassiveStaticEffect","mountEvent","event","isInvalidExecutionContextForEventFunction","apply","HookSnapshot","updateEvent","mountInsertionEffect","HookInsertion","updateInsertionEffect","mountLayoutEffect","LayoutStaticEffect","HookLayout","updateLayoutEffect","imperativeHandleEffect","refCallback","refObject","mountImperativeHandle","effectDeps","updateImperativeHandle","mountDebugValue","formatterFn","updateDebugValue","mountCallback","updateCallback","mountMemo","nextCreate","updateMemo","mountDeferredValue","updateDeferredValue","resolvedCurrentHook","updateDeferredValueImpl","rerenderDeferredValue","shouldDeferValue","deferredLane","startTransition","setPending","options","prevTransition","currentTransition","mountTransition","isPending","start","updateTransition","rerenderTransition","mountId","identifierPrefix","treeId","localId","globalClientId","updateId","mountRefresh","refresh","refreshCache","updateRefresh","seedKey","seedValue","refreshUpdate","createLegacyQueueUpdate","enqueueLegacyQueueUpdate","entangleLegacyQueueTransitions","seededCache","isRenderPhaseUpdate","enqueueRenderPhaseUpdate","entangleTransitionUpdate","getCacheSignal","getCacheForType","resourceType","cacheForType","useCallback","useContext","useEffect","useImperativeHandle","useInsertionEffect","useLayoutEffect","useMemo","useReducer","useRef","useState","useDebugValue","useDeferredValue","useTransition","useMutableSource","useSyncExternalStore","useId","unstable_isNewReconciler","useCacheRefresh","useEvent","recordLayoutEffectDuration","startLayoutEffectTimer","createCapturedValueAtFiber","digest","createCapturedValue","showErrorDialog","boundary","errorInfo","logCapturedError","logError","componentStack","_suppressLogging","console","componentName","componentNameMessage","errorBoundaryMessage","errorBoundaryName","combinedMessage","e","setTimeout","createRootErrorUpdate","onUncaughtError","createClassErrorUpdate","getDerivedStateFromError","componentDidCatch","markLegacyErrorBoundaryAsFailed","resetSuspendedComponent","rootRenderLanes","currentSource","markSuspenseBoundaryShouldCapture","suspenseBoundary","currentSourceFiber","throwException","wakeables","Set","add","offscreenQueue","newOffscreenQueue","transitions","markerInstances","attachPingListener","renderDidSuspendDelayIfPossible","uncaughtSuspenseError","markDidThrowWhileHydratingDEV","renderDidError","isAlreadyFailedLegacyErrorBoundary","resumedCache","peekCacheFromPool","cacheResumedFromPreviousRender","cacheFromRootCachePool","pooledCache","requestCacheFromPool","cacheFromPool","freshCache","pooledCacheLanes","pushTransition","offscreenWorkInProgress","prevCachePool","newTransitions","pool","popTransition","getSuspendedCache","getOffscreenDeferredCache","didReceiveUpdate","reconcileChildren","nextChildren","forceUnmountCurrentAndReconcile","updateForwardRef","hasId","bailoutOnAlreadyFinishedWork","updateMemoComponent","isSimpleFunctionComponent","compare","resolvedType","updateSimpleMemoComponent","createFiberFromTypeAndProps","hasScheduledUpdateOrContext","checkScheduledUpdateOrContext","prevProps","updateFunctionComponent","updateOffscreenComponent","nextBaseLanes","currentChildLanes","lanesWeJustAttempted","remainingChildLanes","deferHiddenOffscreenComponent","cachePool","updateCacheComponent","parentCache","derivedState","nextCache","updateMode","updateProfiler","markRef","updateClassComponent","hasContext","isLegacyContextProvider","pushLegacyContextProvider","resetSuspendedCurrentOnMountInLegacyMode","nextUnitOfWork","finishClassComponent","didCaptureError","pushHostRootContext","pendingContext","updateHostRoot","prevChildren","pushRootTransition","overrideState","recoverableError","mountHostRootWithoutHydrating","updateHostComponent","isDirectTextChild","updateHostText","mountLazyComponent","_current","resolvedTag","resolveLazyComponentTag","resolvedProps","hint","mountIncompleteClassComponent","mountIndeterminateComponent","SUSPENDED_MARKER","mountSuspenseOffscreenState","updateSuspenseOffscreenState","prevOffscreenState","shouldRemainOnFallback","suspenseContext","getRemainingWorkInPrimaryTree","updateSuspenseComponent","showFallback","mountDehydratedSuspenseComponent","nextPrimaryChildren","nextFallbackChildren","fallback","fallbackFragment","mountSuspenseFallbackChildren","primaryChildFragment","enableCPUSuspense","unstable_expectedLoadTime","mountSuspensePrimaryChildren","updateDehydratedSuspenseComponent","fallbackChildFragment","updateSuspenseFallbackChildren","updateSuspensePrimaryChildren","primaryChildren","primaryChildProps","mountWorkInProgressOffscreenFiber","fallbackChildren","progressedPrimaryFragment","offscreenProps","createFiberFromOffscreen","updateWorkInProgressOffscreenFiber","currentPrimaryChildFragment","currentFallbackChildFragment","subtreeFlags","retrySuspenseComponentWithoutHydrating","mountSuspenseFallbackAfterRetryWithoutHydrating","fiberMode","capturedValue","attemptHydrationAtLane","retry","retryDehydratedSuspenseBoundary","scheduleSuspenseWorkOnFiber","propagateSuspenseContextChange","firstChild","findLastContentRow","lastContentRow","currentRow","initSuspenseListRenderState","isBackwards","tail","tailMode","renderState","rendering","renderingStartTime","last","updateSuspenseListComponent","validateRevealOrder","shouldForceFallback","didSuspendBefore","nextRow","updatePortalComponent","updateContextProvider","providerType","newValue","oldValue","hasLegacyContextChanged","updateContextConsumer","updateLanes","attemptEarlyBailoutIfNoScheduledUpdate","primaryChildLanes","hasChildWork","beginWork","unresolvedProps","markUpdate","hadNoMutationsEffects","completedWork","didBailout","appendAllChildren","updateHostContainer","needsVisibilityToggle","currentHostContext","oldText","newText","branches","appendAllChildrenToContainer","containerChildSet","portalOrRoot","childrenUnchanged","container","newChildSet","pendingChildren","currentInstance","recyclableInstance","newInstance","rootContainerInstance","cutOffTailIfNeeded","hasRenderedATailFallback","tailNode","lastTailNode","bubbleProperties","newChildLanes","completeDehydratedSuspenseBoundary","wasHydrated","completeWork","popLegacyContext","fiberRoot","previousCache","popTopLevelLegacyContextObject","resetMutableSourceWorkInProgressVersions","fallthroughToNormalSuspensePath","nextDidTimeout","prevDidTimeout","offscreenFiber","isBadFallback","renderDidSuspend","didSuspendAlready","renderedTail","cannotBeSuspended","renderHasNotSuspendedYet","suspended","newThenables","getRenderTargetTime","previousSibling","nextIsHidden","prevIsHidden","unwindWork","unwindInterruptedWork","interruptedWork","offscreenSubtreeIsHidden","offscreenSubtreeWasHidden","PossiblyWeakSet","WeakSet","nextEffect","shouldProfile","callComponentWillUnmountWithTimer","componentWillUnmount","safelyCallComponentWillUnmount","nearestMountedAncestor","captureCommitPhaseError","safelyAttachRef","commitAttachRef","safelyDetachRef","retVal","safelyCallDestroy","focusedInstanceHandle","shouldFireAfterActiveInstanceBlur","commitBeforeMutationEffects","commitBeforeMutationEffects_begin","shouldFire","commitBeforeMutationEffects_complete","setCurrentDebugFiberInDEV","commitBeforeMutationEffectsOnFiber","finishedWork","commitHookEffectListMount","snapshot","__reactInternalSnapshotBeforeUpdate","commitHookEffectListUnmount","commitHookLayoutEffects","commitClassLayoutLifecycles","commitClassCallbacks","commitHostComponentMount","commitLayoutEffectOnFiber","finishedRoot","committedLanes","recursivelyTraverseLayoutEffects","commitSuspenseHydrationCallbacks","isModernRoot","newOffscreenSubtreeIsHidden","wasHidden","newOffscreenSubtreeWasHidden","prevOffscreenSubtreeIsHidden","prevOffscreenSubtreeWasHidden","includeWorkInProgressEffects","recursivelyTraverseReappearLayoutEffects","hideOrUnhideAllChildren","hostSubtreeRoot","instanceToUse","detachFiberMutation","detachFiberAfterEffects","hostInstance","emptyPortalContainer","emptyChildSet","getHostParentFiber","isHostParent","getHostSibling","siblings","commitPlacement","parentFiber","before","insertOrAppendPlacementNode","insertOrAppendPlacementNodeIntoContainer","isHost","hostParent","hostParentIsContainer","commitDeletionEffects","deletedFiber","findParent","commitDeletionEffectsOnFiber","recursivelyTraverseDeletionEffects","prevHostParent","prevHostParentIsContainer","NoHookEffect","commitSuspenseCallback","hydrationCallbacks","onHydrated","getRetryCache","retryCache","attachSuspenseRetryListeners","resolveRetryWakeable","has","commitMutationEffects","inProgressLanes","commitMutationEffectsOnFiber","recursivelyTraverseMutationEffects","commitReconciliationEffects","prevRootState","markCommitTimeOfFallback","offscreenBoundary","recursivelyTraverseDisappearLayoutEffects","commitLayoutEffects","disappearLayoutEffects","reappearLayoutEffects","offscreenState","childShouldIncludeWorkInProgressEffects","commitHookPassiveMountEffects","commitOffscreenPassiveMountEffects","commitCachePassiveMountEffect","commitPassiveMountEffects","committedTransitions","commitPassiveMountOnFiber","resetCurrentDebugFiberInDEV","recursivelyTraversePassiveMountEffects","recursivelyTraverseAtomicPassiveEffects","recursivelyTraverseReconnectPassiveEffects","reconnectPassiveEffects","commitAtomicPassiveEffects","commitPassiveUnmountEffects","commitPassiveUnmountOnFiber","detachAlternateSiblings","previousFiber","detachedChild","detachedSibling","commitHookPassiveUnmountEffects","recursivelyTraversePassiveUnmountEffects","commitPassiveUnmountEffectsInsideOfDeletedTree_begin","recursivelyTraverseDisconnectPassiveEffects","disconnectPassiveEffect","deletedSubtreeRoot","commitPassiveUnmountInsideDeletedTreeOnFiber","commitPassiveUnmountEffectsInsideOfDeletedTree_complete","COMPONENT_TYPE","HAS_PSEUDO_CLASS_TYPE","ROLE_TYPE","TEST_NAME_TYPE","TEXT_TYPE","symbolFor","createComponentSelector","createHasPseudoClassSelector","selectors","createRoleSelector","role","createTextSelector","createTestNameSelector","findFiberRootForHostRoot","hostRoot","maybeFiber","matchSelector","selector","hasMatchingPaths","indexOf","dataTestID","toLowerCase","selectorToString","findPaths","matchingFibers","selectorIndex","findAllNodes","instanceRoots","from","getFindAllNodesFailureDescription","maxSelectorIndex","matchedNames","unmatchedNames","findBoundingRects","boundingRects","targetRect","targetLeft","targetRight","width","targetTop","targetBottom","height","j","otherRect","otherLeft","otherRight","otherTop","otherBottom","splice","focusWithin","observeVisibleRects","disconnect","observe","unobserve","ReactCurrentActQueue","ceil","PossiblyWeakMap","WeakMap","NoContext","BatchedContext","RenderContext","CommitContext","RootInProgress","RootFatalErrored","RootErrored","RootSuspended","RootSuspendedWithDelay","RootCompleted","RootDidNotComplete","executionContext","workInProgressRoot","workInProgressRootRenderLanes","workInProgressIsSuspended","workInProgressThrownValue","workInProgressRootDidAttachPingListener","workInProgressRootExitStatus","workInProgressRootFatalError","workInProgressRootSkippedLanes","workInProgressRootInterleavedUpdatedLanes","workInProgressRootPingedLanes","workInProgressRootConcurrentErrors","workInProgressRootRecoverableErrors","globalMostRecentFallbackTime","FALLBACK_THROTTLE_MS","workInProgressRootRenderTargetTime","Infinity","RENDER_TIMEOUT_MS","workInProgressTransitions","resetRenderTimer","hasUncaughtError","firstUncaughtError","legacyErrorBoundariesThatAlreadyFailed","rootDoesHavePassiveEffects","rootWithPendingPassiveEffects","pendingPassiveEffectsLanes","pendingPassiveEffectsRemainingLanes","pendingPassiveTransitions","NESTED_UPDATE_LIMIT","nestedUpdateCount","rootWithNestedUpdates","currentEventTime","currentEventTransitionLane","isTransition","eventLane","requestRetryLane","deferRenderPhaseUpdateToNextBatch","ensureRootIsScheduled","scheduleInitialHydrationOnRoot","existingCallbackNode","callbackNode","callbackPriority","newCallbackPriority","existingCallbackPriority","newCallbackNode","performSyncWorkOnRoot","schedulerPriorityLevel","performConcurrentWorkOnRoot","didTimeout","originalCallbackNode","didFlushPassiveEffects","flushPassiveEffects","shouldTimeSlice","disableSchedulerTimeoutInWorkLoop","exitStatus","renderRootConcurrent","renderRootSync","errorRetryLanes","recoverFromConcurrentError","fatalError","prepareFreshStack","renderWasConcurrent","isRenderConsistentWithExternalStores","finishedLanes","finishConcurrentRender","errorsFromFirstAttempt","wasRootDehydrated","rootWorkInProgress","errorsFromSecondAttempt","errors","commitRoot","shouldForceFlushFallbacksInDEV","msUntilTimeout","timeoutHandle","eventTimeMs","timeElapsedMs","jnd","checks","renderedValue","markRootSuspended_dontCallThisOneDirectly","flushRoot","deferredUpdates","batchedUpdates","prevExecutionContext","discreteUpdates","d","flushSync","isAlreadyRendering","flushControlled","subtreeRenderLanes","workInProgressRootRenderPhaseUpdatedLanes","handleThrow","thrownValue","erroredWork","isWakeable","pushDispatcher","prevDispatcher","popDispatcher","workLoopSync","resumeSuspendedUnitOfWork","performUnitOfWork","workLoopConcurrent","unitOfWork","completeUnitOfWork","wasPinged","siblingFiber","recoverableErrors","previousUpdateLanePriority","commitRootImpl","renderPriorityLevel","subtreeHasEffects","rootHasEffect","releaseRootPooledCache","onCommitRootDevTools","onRecoverableError","renderPriority","flushPassiveEffectsImpl","onPostCommitRootDevTools","prepareToThrowUncaughtError","captureCommitPhaseErrorOnRoot","rootFiber","pingCache","threadIDs","ping","pingSuspendedRoot","warnIfSuspenseResolutionNotWrappedWithActDEV","retryTimedOutBoundary","boundaryFiber","timeElapsed","nestedPassiveUpdateCount","rootWithPassiveNestedUpdates","originalBeginWork","priorityLevel","Scheduler_scheduleCallback","Scheduler_cancelCallback","FiberNode","createFiber","shouldConstruct","isReactComponent","currentDependencies","createHostRootFiber","isStrictMode","concurrentUpdatesByDefaultOverride","fiberTag","getTag","createFiberFromProfiler","createFiberFromSuspense","createFiberFromSuspenseList","createFiberFromCache","elements","primaryChildInstance","pendingMarkers","content","dehydratedNode","FiberRootNode","hydrate","incompleteTransitions","createFiberRoot","initialChildren","transitionCallbacks","uninitializedFiber","initialCache","createPortal","getContextForSubtree","parentComponent","findHostInstance","hostFiber","findHostInstanceWithWarning","methodName","createContainer","createHydrationContainer","updateContainer","getPublicRootInstance","containerFiber","attemptSynchronousHydration","markRetryLaneIfNotHydrated","markRetryLaneImpl","attemptDiscreteHydration","attemptContinuousHydration","attemptHydrationAtCurrentPriority","findHostInstanceWithNoPortals","shouldErrorImpl","shouldError","shouldSuspendImpl","shouldSuspend","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","scheduleUpdate","setErrorHandler","setSuspenseHandler","findHostInstanceByFiber","emptyFindFiberByHostInstance","injectIntoDevTools","devToolsConfig","findFiberByHostInstance","bundleType","rendererPackageName","rendererConfig","currentDispatcherRef","findHostInstancesForRefresh","scheduleRefresh","scheduleRoot","setRefreshHandler","getCurrentFiber","reconcilerVersion","ReactVersion"],"mappings":"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"}