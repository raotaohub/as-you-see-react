{"version":3,"file":"scheduler-unstable_mock.development.js","sources":["../../../../packages/scheduler/src/SchedulerFeatureFlags.js","../../../../packages/scheduler/src/SchedulerMinHeap.js","../../../../packages/scheduler/src/SchedulerPriorities.js","../../../../packages/scheduler/src/SchedulerProfiling.js","../../../../packages/scheduler/src/forks/SchedulerMock.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n\r\nexport const enableSchedulerDebugging = false;\r\nexport const enableIsInputPending = false;\r\nexport const enableProfiling = false;\r\nexport const enableIsInputPendingContinuous = false;\r\nexport const frameYieldMs = 5;\r\nexport const continuousYieldMs = 50;\r\nexport const maxYieldMs = 300;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow strict\r\n */\r\n\r\ntype Heap = Array<Node>;\r\ntype Node = {\r\n  id: number,\r\n  sortIndex: number,\r\n};\r\n\r\nexport function push(heap: Heap, node: Node): void {\r\n  const index = heap.length;\r\n  heap.push(node);\r\n  siftUp(heap, node, index);\r\n}\r\n\r\nexport function peek(heap: Heap): Node | null {\r\n  return heap.length === 0 ? null : heap[0];\r\n}\r\n\r\nexport function pop(heap: Heap): Node | null {\r\n  if (heap.length === 0) {\r\n    return null;\r\n  }\r\n  const first = heap[0];\r\n  const last = heap.pop();\r\n  if (last !== first) {\r\n    heap[0] = last;\r\n    siftDown(heap, last, 0);\r\n  }\r\n  return first;\r\n}\r\n\r\nfunction siftUp(heap, node, i) {\r\n  let index = i;\r\n  while (index > 0) {\r\n    const parentIndex = (index - 1) >>> 1;\r\n    const parent = heap[parentIndex];\r\n    if (compare(parent, node) > 0) {\r\n      // The parent is larger. Swap positions.\r\n      heap[parentIndex] = node;\r\n      heap[index] = parent;\r\n      index = parentIndex;\r\n    } else {\r\n      // The parent is smaller. Exit.\r\n      return;\r\n    }\r\n  }\r\n}\r\n\r\nfunction siftDown(heap, node, i) {\r\n  let index = i;\r\n  const length = heap.length;\r\n  const halfLength = length >>> 1;\r\n  while (index < halfLength) {\r\n    const leftIndex = (index + 1) * 2 - 1;\r\n    const left = heap[leftIndex];\r\n    const rightIndex = leftIndex + 1;\r\n    const right = heap[rightIndex];\r\n\r\n    // If the left or right node is smaller, swap with the smaller of those.\r\n    if (compare(left, node) < 0) {\r\n      if (rightIndex < length && compare(right, left) < 0) {\r\n        heap[index] = right;\r\n        heap[rightIndex] = node;\r\n        index = rightIndex;\r\n      } else {\r\n        heap[index] = left;\r\n        heap[leftIndex] = node;\r\n        index = leftIndex;\r\n      }\r\n    } else if (rightIndex < length && compare(right, node) < 0) {\r\n      heap[index] = right;\r\n      heap[rightIndex] = node;\r\n      index = rightIndex;\r\n    } else {\r\n      // Neither child is smaller. Exit.\r\n      return;\r\n    }\r\n  }\r\n}\r\n\r\nfunction compare(a, b) {\r\n  // Compare sort index first, then task id.\r\n  const diff = a.sortIndex - b.sortIndex;\r\n  return diff !== 0 ? diff : a.id - b.id;\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nexport type PriorityLevel = 0 | 1 | 2 | 3 | 4 | 5;\r\n\r\n// TODO: Use symbols?\r\nexport const NoPriority = 0;\r\nexport const ImmediatePriority = 1;\r\nexport const UserBlockingPriority = 2;\r\nexport const NormalPriority = 3;\r\nexport const LowPriority = 4;\r\nexport const IdlePriority = 5;\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type {PriorityLevel} from './SchedulerPriorities';\r\nimport {enableProfiling} from './SchedulerFeatureFlags';\r\n\r\nlet runIdCounter: number = 0;\r\nlet mainThreadIdCounter: number = 0;\r\n\r\n// Bytes per element is 4\r\nconst INITIAL_EVENT_LOG_SIZE = 131072;\r\nconst MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes\r\n\r\nlet eventLogSize = 0;\r\nlet eventLogBuffer = null;\r\nlet eventLog = null;\r\nlet eventLogIndex = 0;\r\n\r\nconst TaskStartEvent = 1;\r\nconst TaskCompleteEvent = 2;\r\nconst TaskErrorEvent = 3;\r\nconst TaskCancelEvent = 4;\r\nconst TaskRunEvent = 5;\r\nconst TaskYieldEvent = 6;\r\nconst SchedulerSuspendEvent = 7;\r\nconst SchedulerResumeEvent = 8;\r\n\r\nfunction logEvent(entries) {\r\n  if (eventLog !== null) {\r\n    const offset = eventLogIndex;\r\n    eventLogIndex += entries.length;\r\n    if (eventLogIndex + 1 > eventLogSize) {\r\n      eventLogSize *= 2;\r\n      if (eventLogSize > MAX_EVENT_LOG_SIZE) {\r\n        // Using console['error'] to evade Babel and ESLint\r\n        console['error'](\r\n          \"Scheduler Profiling: Event log exceeded maximum size. Don't \" +\r\n            'forget to call `stopLoggingProfilingEvents()`.',\r\n        );\r\n        stopLoggingProfilingEvents();\r\n        return;\r\n      }\r\n      const newEventLog = new Int32Array(eventLogSize * 4);\r\n      newEventLog.set(eventLog);\r\n      eventLogBuffer = newEventLog.buffer;\r\n      eventLog = newEventLog;\r\n    }\r\n    eventLog.set(entries, offset);\r\n  }\r\n}\r\n\r\nexport function startLoggingProfilingEvents(): void {\r\n  eventLogSize = INITIAL_EVENT_LOG_SIZE;\r\n  eventLogBuffer = new ArrayBuffer(eventLogSize * 4);\r\n  eventLog = new Int32Array(eventLogBuffer);\r\n  eventLogIndex = 0;\r\n}\r\n\r\nexport function stopLoggingProfilingEvents(): ArrayBuffer | null {\r\n  const buffer = eventLogBuffer;\r\n  eventLogSize = 0;\r\n  eventLogBuffer = null;\r\n  eventLog = null;\r\n  eventLogIndex = 0;\r\n  return buffer;\r\n}\r\n\r\nexport function markTaskStart(\r\n  task: {\r\n    id: number,\r\n    priorityLevel: PriorityLevel,\r\n    ...\r\n  },\r\n  ms: number,\r\n) {\r\n  if (enableProfiling) {\r\n    if (eventLog !== null) {\r\n      // performance.now returns a float, representing milliseconds. When the\r\n      // event is logged, it's coerced to an int. Convert to microseconds to\r\n      // maintain extra degrees of precision.\r\n      logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);\r\n    }\r\n  }\r\n}\r\n\r\nexport function markTaskCompleted(\r\n  task: {\r\n    id: number,\r\n    priorityLevel: PriorityLevel,\r\n    ...\r\n  },\r\n  ms: number,\r\n) {\r\n  if (enableProfiling) {\r\n    if (eventLog !== null) {\r\n      logEvent([TaskCompleteEvent, ms * 1000, task.id]);\r\n    }\r\n  }\r\n}\r\n\r\nexport function markTaskCanceled(\r\n  task: {\r\n    id: number,\r\n    priorityLevel: PriorityLevel,\r\n    ...\r\n  },\r\n  ms: number,\r\n) {\r\n  if (enableProfiling) {\r\n    if (eventLog !== null) {\r\n      logEvent([TaskCancelEvent, ms * 1000, task.id]);\r\n    }\r\n  }\r\n}\r\n\r\nexport function markTaskErrored(\r\n  task: {\r\n    id: number,\r\n    priorityLevel: PriorityLevel,\r\n    ...\r\n  },\r\n  ms: number,\r\n) {\r\n  if (enableProfiling) {\r\n    if (eventLog !== null) {\r\n      logEvent([TaskErrorEvent, ms * 1000, task.id]);\r\n    }\r\n  }\r\n}\r\n\r\nexport function markTaskRun(\r\n  task: {\r\n    id: number,\r\n    priorityLevel: PriorityLevel,\r\n    ...\r\n  },\r\n  ms: number,\r\n) {\r\n  if (enableProfiling) {\r\n    runIdCounter++;\r\n\r\n    if (eventLog !== null) {\r\n      logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);\r\n    }\r\n  }\r\n}\r\n\r\nexport function markTaskYield(task: {id: number, ...}, ms: number) {\r\n  if (enableProfiling) {\r\n    if (eventLog !== null) {\r\n      logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);\r\n    }\r\n  }\r\n}\r\n\r\nexport function markSchedulerSuspended(ms: number) {\r\n  if (enableProfiling) {\r\n    mainThreadIdCounter++;\r\n\r\n    if (eventLog !== null) {\r\n      logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);\r\n    }\r\n  }\r\n}\r\n\r\nexport function markSchedulerUnsuspended(ms: number) {\r\n  if (enableProfiling) {\r\n    if (eventLog !== null) {\r\n      logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n\r\n/* eslint-disable no-var */\r\n/* eslint-disable react-internal/prod-error-codes */\r\n\r\nimport {\r\n  enableSchedulerDebugging,\r\n  enableProfiling,\r\n} from '../SchedulerFeatureFlags';\r\nimport {push, pop, peek} from '../SchedulerMinHeap';\r\n\r\n// TODO: Use symbols?\r\nimport {\r\n  ImmediatePriority,\r\n  UserBlockingPriority,\r\n  NormalPriority,\r\n  LowPriority,\r\n  IdlePriority,\r\n} from '../SchedulerPriorities';\r\nimport {\r\n  markTaskRun,\r\n  markTaskYield,\r\n  markTaskCompleted,\r\n  markTaskCanceled,\r\n  markTaskErrored,\r\n  markSchedulerSuspended,\r\n  markSchedulerUnsuspended,\r\n  markTaskStart,\r\n  stopLoggingProfilingEvents,\r\n  startLoggingProfilingEvents,\r\n} from '../SchedulerProfiling';\r\n\r\n// Max 31 bit integer. The max integer size in V8 for 32-bit systems.\r\n// Math.pow(2, 30) - 1\r\n// 0b111111111111111111111111111111\r\nvar maxSigned31BitInt = 1073741823;\r\n\r\n// Times out immediately\r\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1;\r\n// Eventually times out\r\nvar USER_BLOCKING_PRIORITY_TIMEOUT = 250;\r\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\r\nvar LOW_PRIORITY_TIMEOUT = 10000;\r\n// Never times out\r\nvar IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;\r\n\r\n// Tasks are stored on a min heap\r\nvar taskQueue = [];\r\nvar timerQueue = [];\r\n\r\n// Incrementing id counter. Used to maintain insertion order.\r\nvar taskIdCounter = 1;\r\n\r\n// Pausing the scheduler is useful for debugging.\r\nvar isSchedulerPaused = false;\r\n\r\nvar currentTask = null;\r\nvar currentPriorityLevel = NormalPriority;\r\n\r\n// This is set while performing work, to prevent re-entrance.\r\nvar isPerformingWork = false;\r\n\r\nvar isHostCallbackScheduled = false;\r\nvar isHostTimeoutScheduled = false;\r\n\r\nlet currentMockTime: number = 0;\r\nlet scheduledCallback: ((boolean, number) => void) | null = null;\r\nlet scheduledTimeout: (number => void) | null = null;\r\nlet timeoutTime: number = -1;\r\nlet yieldedValues: Array<mixed> | null = null;\r\nlet expectedNumberOfYields: number = -1;\r\nlet didStop: boolean = false;\r\nlet isFlushing: boolean = false;\r\nlet needsPaint: boolean = false;\r\nlet shouldYieldForPaint: boolean = false;\r\n\r\nvar disableYieldValue = false;\r\n\r\nfunction setDisableYieldValue(newValue) {\r\n  disableYieldValue = newValue;\r\n}\r\n\r\nfunction advanceTimers(currentTime) {\r\n  // Check for tasks that are no longer delayed and add them to the queue.\r\n  let timer = peek(timerQueue);\r\n  while (timer !== null) {\r\n    if (timer.callback === null) {\r\n      // Timer was cancelled.\r\n      pop(timerQueue);\r\n    } else if (timer.startTime <= currentTime) {\r\n      // Timer fired. Transfer to the task queue.\r\n      pop(timerQueue);\r\n      timer.sortIndex = timer.expirationTime;\r\n      push(taskQueue, timer);\r\n      if (enableProfiling) {\r\n        markTaskStart(timer, currentTime);\r\n        timer.isQueued = true;\r\n      }\r\n    } else {\r\n      // Remaining timers are pending.\r\n      return;\r\n    }\r\n    timer = peek(timerQueue);\r\n  }\r\n}\r\n\r\nfunction handleTimeout(currentTime) {\r\n  isHostTimeoutScheduled = false;\r\n  advanceTimers(currentTime);\r\n\r\n  if (!isHostCallbackScheduled) {\r\n    if (peek(taskQueue) !== null) {\r\n      isHostCallbackScheduled = true;\r\n      requestHostCallback(flushWork);\r\n    } else {\r\n      const firstTimer = peek(timerQueue);\r\n      if (firstTimer !== null) {\r\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction flushWork(hasTimeRemaining, initialTime) {\r\n  if (enableProfiling) {\r\n    markSchedulerUnsuspended(initialTime);\r\n  }\r\n\r\n  // We'll need a host callback the next time work is scheduled.\r\n  isHostCallbackScheduled = false;\r\n  if (isHostTimeoutScheduled) {\r\n    // We scheduled a timeout but it's no longer needed. Cancel it.\r\n    isHostTimeoutScheduled = false;\r\n    cancelHostTimeout();\r\n  }\r\n\r\n  isPerformingWork = true;\r\n  const previousPriorityLevel = currentPriorityLevel;\r\n  try {\r\n    if (enableProfiling) {\r\n      try {\r\n        return workLoop(hasTimeRemaining, initialTime);\r\n      } catch (error) {\r\n        if (currentTask !== null) {\r\n          const currentTime = getCurrentTime();\r\n          markTaskErrored(currentTask, currentTime);\r\n          currentTask.isQueued = false;\r\n        }\r\n        throw error;\r\n      }\r\n    } else {\r\n      // No catch in prod code path.\r\n      return workLoop(hasTimeRemaining, initialTime);\r\n    }\r\n  } finally {\r\n    currentTask = null;\r\n    currentPriorityLevel = previousPriorityLevel;\r\n    isPerformingWork = false;\r\n    if (enableProfiling) {\r\n      const currentTime = getCurrentTime();\r\n      markSchedulerSuspended(currentTime);\r\n    }\r\n  }\r\n}\r\n\r\nfunction workLoop(hasTimeRemaining, initialTime) {\r\n  let currentTime = initialTime;\r\n  advanceTimers(currentTime);\r\n  currentTask = peek(taskQueue);\r\n  while (\r\n    currentTask !== null &&\r\n    !(enableSchedulerDebugging && isSchedulerPaused)\r\n  ) {\r\n    if (\r\n      currentTask.expirationTime > currentTime &&\r\n      (!hasTimeRemaining || shouldYieldToHost())\r\n    ) {\r\n      // This currentTask hasn't expired, and we've reached the deadline.\r\n      break;\r\n    }\r\n    const callback = currentTask.callback;\r\n    if (typeof callback === 'function') {\r\n      currentTask.callback = null;\r\n      currentPriorityLevel = currentTask.priorityLevel;\r\n      const didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\r\n      if (enableProfiling) {\r\n        markTaskRun(currentTask, currentTime);\r\n      }\r\n      const continuationCallback = callback(didUserCallbackTimeout);\r\n      currentTime = getCurrentTime();\r\n      if (typeof continuationCallback === 'function') {\r\n        // If a continuation is returned, immediately yield to the main thread\r\n        // regardless of how much time is left in the current time slice.\r\n        currentTask.callback = continuationCallback;\r\n        if (enableProfiling) {\r\n          markTaskYield(currentTask, currentTime);\r\n        }\r\n        advanceTimers(currentTime);\r\n\r\n        if (shouldYieldForPaint) {\r\n          needsPaint = true;\r\n          return true;\r\n        } else {\r\n          // If `shouldYieldForPaint` is false, we keep flushing synchronously\r\n          // without yielding to the main thread. This is the behavior of the\r\n          // `toFlushAndYield` and `toFlushAndYieldThrough` testing helpers .\r\n        }\r\n      } else {\r\n        if (enableProfiling) {\r\n          markTaskCompleted(currentTask, currentTime);\r\n          currentTask.isQueued = false;\r\n        }\r\n        if (currentTask === peek(taskQueue)) {\r\n          pop(taskQueue);\r\n        }\r\n        advanceTimers(currentTime);\r\n      }\r\n    } else {\r\n      pop(taskQueue);\r\n    }\r\n    currentTask = peek(taskQueue);\r\n  }\r\n  // Return whether there's additional work\r\n  if (currentTask !== null) {\r\n    return true;\r\n  } else {\r\n    const firstTimer = peek(timerQueue);\r\n    if (firstTimer !== null) {\r\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction unstable_runWithPriority(priorityLevel, eventHandler) {\r\n  switch (priorityLevel) {\r\n    case ImmediatePriority:\r\n    case UserBlockingPriority:\r\n    case NormalPriority:\r\n    case LowPriority:\r\n    case IdlePriority:\r\n      break;\r\n    default:\r\n      priorityLevel = NormalPriority;\r\n  }\r\n\r\n  var previousPriorityLevel = currentPriorityLevel;\r\n  currentPriorityLevel = priorityLevel;\r\n\r\n  try {\r\n    return eventHandler();\r\n  } finally {\r\n    currentPriorityLevel = previousPriorityLevel;\r\n  }\r\n}\r\n\r\nfunction unstable_next(eventHandler) {\r\n  var priorityLevel;\r\n  switch (currentPriorityLevel) {\r\n    case ImmediatePriority:\r\n    case UserBlockingPriority:\r\n    case NormalPriority:\r\n      // Shift down to normal priority\r\n      priorityLevel = NormalPriority;\r\n      break;\r\n    default:\r\n      // Anything lower than normal priority should remain at the current level.\r\n      priorityLevel = currentPriorityLevel;\r\n      break;\r\n  }\r\n\r\n  var previousPriorityLevel = currentPriorityLevel;\r\n  currentPriorityLevel = priorityLevel;\r\n\r\n  try {\r\n    return eventHandler();\r\n  } finally {\r\n    currentPriorityLevel = previousPriorityLevel;\r\n  }\r\n}\r\n\r\nfunction unstable_wrapCallback(callback) {\r\n  var parentPriorityLevel = currentPriorityLevel;\r\n  return function() {\r\n    // This is a fork of runWithPriority, inlined for performance.\r\n    var previousPriorityLevel = currentPriorityLevel;\r\n    currentPriorityLevel = parentPriorityLevel;\r\n\r\n    try {\r\n      return callback.apply(this, arguments);\r\n    } finally {\r\n      currentPriorityLevel = previousPriorityLevel;\r\n    }\r\n  };\r\n}\r\n\r\nfunction unstable_scheduleCallback(priorityLevel, callback, options) {\r\n  var currentTime = getCurrentTime();\r\n\r\n  var startTime;\r\n  if (typeof options === 'object' && options !== null) {\r\n    var delay = options.delay;\r\n    if (typeof delay === 'number' && delay > 0) {\r\n      startTime = currentTime + delay;\r\n    } else {\r\n      startTime = currentTime;\r\n    }\r\n  } else {\r\n    startTime = currentTime;\r\n  }\r\n\r\n  var timeout;\r\n  switch (priorityLevel) {\r\n    case ImmediatePriority:\r\n      timeout = IMMEDIATE_PRIORITY_TIMEOUT;\r\n      break;\r\n    case UserBlockingPriority:\r\n      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\r\n      break;\r\n    case IdlePriority:\r\n      timeout = IDLE_PRIORITY_TIMEOUT;\r\n      break;\r\n    case LowPriority:\r\n      timeout = LOW_PRIORITY_TIMEOUT;\r\n      break;\r\n    case NormalPriority:\r\n    default:\r\n      timeout = NORMAL_PRIORITY_TIMEOUT;\r\n      break;\r\n  }\r\n\r\n  var expirationTime = startTime + timeout;\r\n\r\n  var newTask = {\r\n    id: taskIdCounter++,\r\n    callback,\r\n    priorityLevel,\r\n    startTime,\r\n    expirationTime,\r\n    sortIndex: -1,\r\n  };\r\n  if (enableProfiling) {\r\n    newTask.isQueued = false;\r\n  }\r\n\r\n  if (startTime > currentTime) {\r\n    // This is a delayed task.\r\n    newTask.sortIndex = startTime;\r\n    push(timerQueue, newTask);\r\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\r\n      // All tasks are delayed, and this is the task with the earliest delay.\r\n      if (isHostTimeoutScheduled) {\r\n        // Cancel an existing timeout.\r\n        cancelHostTimeout();\r\n      } else {\r\n        isHostTimeoutScheduled = true;\r\n      }\r\n      // Schedule a timeout.\r\n      requestHostTimeout(handleTimeout, startTime - currentTime);\r\n    }\r\n  } else {\r\n    newTask.sortIndex = expirationTime;\r\n    push(taskQueue, newTask);\r\n    if (enableProfiling) {\r\n      markTaskStart(newTask, currentTime);\r\n      newTask.isQueued = true;\r\n    }\r\n    // Schedule a host callback, if needed. If we're already performing work,\r\n    // wait until the next time we yield.\r\n    if (!isHostCallbackScheduled && !isPerformingWork) {\r\n      isHostCallbackScheduled = true;\r\n      requestHostCallback(flushWork);\r\n    }\r\n  }\r\n\r\n  return newTask;\r\n}\r\n\r\nfunction unstable_pauseExecution() {\r\n  isSchedulerPaused = true;\r\n}\r\n\r\nfunction unstable_continueExecution() {\r\n  isSchedulerPaused = false;\r\n  if (!isHostCallbackScheduled && !isPerformingWork) {\r\n    isHostCallbackScheduled = true;\r\n    requestHostCallback(flushWork);\r\n  }\r\n}\r\n\r\nfunction unstable_getFirstCallbackNode() {\r\n  return peek(taskQueue);\r\n}\r\n\r\nfunction unstable_cancelCallback(task) {\r\n  if (enableProfiling) {\r\n    if (task.isQueued) {\r\n      const currentTime = getCurrentTime();\r\n      markTaskCanceled(task, currentTime);\r\n      task.isQueued = false;\r\n    }\r\n  }\r\n\r\n  // Null out the callback to indicate the task has been canceled. (Can't\r\n  // remove from the queue because you can't remove arbitrary nodes from an\r\n  // array based heap, only the first one.)\r\n  task.callback = null;\r\n}\r\n\r\nfunction unstable_getCurrentPriorityLevel() {\r\n  return currentPriorityLevel;\r\n}\r\n\r\nfunction requestHostCallback(callback: boolean => void) {\r\n  scheduledCallback = callback;\r\n}\r\n\r\nfunction requestHostTimeout(callback: number => void, ms: number) {\r\n  scheduledTimeout = callback;\r\n  timeoutTime = currentMockTime + ms;\r\n}\r\n\r\nfunction cancelHostTimeout(): void {\r\n  scheduledTimeout = null;\r\n  timeoutTime = -1;\r\n}\r\n\r\nfunction shouldYieldToHost(): boolean {\r\n  if (\r\n    (expectedNumberOfYields === 0 && yieldedValues === null) ||\r\n    (expectedNumberOfYields !== -1 &&\r\n      yieldedValues !== null &&\r\n      yieldedValues.length >= expectedNumberOfYields) ||\r\n    (shouldYieldForPaint && needsPaint)\r\n  ) {\r\n    // We yielded at least as many values as expected. Stop flushing.\r\n    didStop = true;\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction getCurrentTime(): number {\r\n  return currentMockTime;\r\n}\r\n\r\nfunction forceFrameRate() {\r\n  // No-op\r\n}\r\n\r\nfunction reset() {\r\n  if (isFlushing) {\r\n    throw new Error('Cannot reset while already flushing work.');\r\n  }\r\n  currentMockTime = 0;\r\n  scheduledCallback = null;\r\n  scheduledTimeout = null;\r\n  timeoutTime = -1;\r\n  yieldedValues = null;\r\n  expectedNumberOfYields = -1;\r\n  didStop = false;\r\n  isFlushing = false;\r\n  needsPaint = false;\r\n}\r\n\r\n// Should only be used via an assertion helper that inspects the yielded values.\r\nfunction unstable_flushNumberOfYields(count: number): void {\r\n  if (isFlushing) {\r\n    throw new Error('Already flushing work.');\r\n  }\r\n  if (scheduledCallback !== null) {\r\n    const cb = scheduledCallback;\r\n    expectedNumberOfYields = count;\r\n    isFlushing = true;\r\n    try {\r\n      let hasMoreWork = true;\r\n      do {\r\n        hasMoreWork = cb(true, currentMockTime);\r\n      } while (hasMoreWork && !didStop);\r\n      if (!hasMoreWork) {\r\n        scheduledCallback = null;\r\n      }\r\n    } finally {\r\n      expectedNumberOfYields = -1;\r\n      didStop = false;\r\n      isFlushing = false;\r\n    }\r\n  }\r\n}\r\n\r\nfunction unstable_flushUntilNextPaint(): void {\r\n  if (isFlushing) {\r\n    throw new Error('Already flushing work.');\r\n  }\r\n  if (scheduledCallback !== null) {\r\n    const cb = scheduledCallback;\r\n    shouldYieldForPaint = true;\r\n    needsPaint = false;\r\n    isFlushing = true;\r\n    try {\r\n      let hasMoreWork = true;\r\n      do {\r\n        hasMoreWork = cb(true, currentMockTime);\r\n      } while (hasMoreWork && !didStop);\r\n      if (!hasMoreWork) {\r\n        scheduledCallback = null;\r\n      }\r\n    } finally {\r\n      shouldYieldForPaint = false;\r\n      didStop = false;\r\n      isFlushing = false;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction unstable_hasPendingWork(): boolean {\r\n  return scheduledCallback !== null;\r\n}\r\n\r\nfunction unstable_flushExpired() {\r\n  if (isFlushing) {\r\n    throw new Error('Already flushing work.');\r\n  }\r\n  if (scheduledCallback !== null) {\r\n    isFlushing = true;\r\n    try {\r\n      const hasMoreWork = scheduledCallback(false, currentMockTime);\r\n      if (!hasMoreWork) {\r\n        scheduledCallback = null;\r\n      }\r\n    } finally {\r\n      isFlushing = false;\r\n    }\r\n  }\r\n}\r\n\r\nfunction unstable_flushAllWithoutAsserting(): boolean {\r\n  // Returns false if no work was flushed.\r\n  if (isFlushing) {\r\n    throw new Error('Already flushing work.');\r\n  }\r\n  if (scheduledCallback !== null) {\r\n    const cb = scheduledCallback;\r\n    isFlushing = true;\r\n    try {\r\n      let hasMoreWork = true;\r\n      do {\r\n        hasMoreWork = cb(true, currentMockTime);\r\n      } while (hasMoreWork);\r\n      if (!hasMoreWork) {\r\n        scheduledCallback = null;\r\n      }\r\n      return true;\r\n    } finally {\r\n      isFlushing = false;\r\n    }\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction unstable_clearYields(): Array<mixed> {\r\n  if (yieldedValues === null) {\r\n    return [];\r\n  }\r\n  const values = yieldedValues;\r\n  yieldedValues = null;\r\n  return values;\r\n}\r\n\r\nfunction unstable_flushAll(): void {\r\n  if (yieldedValues !== null) {\r\n    throw new Error(\r\n      'Log is not empty. Assert on the log of yielded values before ' +\r\n        'flushing additional work.',\r\n    );\r\n  }\r\n  unstable_flushAllWithoutAsserting();\r\n  if (yieldedValues !== null) {\r\n    throw new Error(\r\n      'While flushing work, something yielded a value. Use an ' +\r\n        'assertion helper to assert on the log of yielded values, e.g. ' +\r\n        'expect(Scheduler).toFlushAndYield([...])',\r\n    );\r\n  }\r\n}\r\n\r\nfunction unstable_yieldValue(value: mixed): void {\r\n  // eslint-disable-next-line react-internal/no-production-logging\r\n  if (console.log.name === 'disabledLog' || disableYieldValue) {\r\n    // If console.log has been patched, we assume we're in render\r\n    // replaying and we ignore any values yielding in the second pass.\r\n    return;\r\n  }\r\n  if (yieldedValues === null) {\r\n    yieldedValues = [value];\r\n  } else {\r\n    yieldedValues.push(value);\r\n  }\r\n}\r\n\r\nfunction unstable_advanceTime(ms: number) {\r\n  // eslint-disable-next-line react-internal/no-production-logging\r\n  if (console.log.name === 'disabledLog' || disableYieldValue) {\r\n    // If console.log has been patched, we assume we're in render\r\n    // replaying and we ignore any time advancing in the second pass.\r\n    return;\r\n  }\r\n  currentMockTime += ms;\r\n  if (scheduledTimeout !== null && timeoutTime <= currentMockTime) {\r\n    scheduledTimeout(currentMockTime);\r\n    timeoutTime = -1;\r\n    scheduledTimeout = null;\r\n  }\r\n}\r\n\r\nfunction requestPaint() {\r\n  needsPaint = true;\r\n}\r\n\r\nexport {\r\n  ImmediatePriority as unstable_ImmediatePriority,\r\n  UserBlockingPriority as unstable_UserBlockingPriority,\r\n  NormalPriority as unstable_NormalPriority,\r\n  IdlePriority as unstable_IdlePriority,\r\n  LowPriority as unstable_LowPriority,\r\n  unstable_runWithPriority,\r\n  unstable_next,\r\n  unstable_scheduleCallback,\r\n  unstable_cancelCallback,\r\n  unstable_wrapCallback,\r\n  unstable_getCurrentPriorityLevel,\r\n  shouldYieldToHost as unstable_shouldYield,\r\n  requestPaint as unstable_requestPaint,\r\n  unstable_continueExecution,\r\n  unstable_pauseExecution,\r\n  unstable_getFirstCallbackNode,\r\n  getCurrentTime as unstable_now,\r\n  forceFrameRate as unstable_forceFrameRate,\r\n  unstable_flushAllWithoutAsserting,\r\n  unstable_flushNumberOfYields,\r\n  unstable_flushExpired,\r\n  unstable_clearYields,\r\n  unstable_flushUntilNextPaint,\r\n  unstable_hasPendingWork,\r\n  unstable_flushAll,\r\n  unstable_yieldValue,\r\n  unstable_advanceTime,\r\n  reset,\r\n  setDisableYieldValue as unstable_setDisableYieldValue,\r\n};\r\n\r\nexport const unstable_Profiling = enableProfiling\r\n  ? {\r\n      startLoggingProfilingEvents,\r\n      stopLoggingProfilingEvents,\r\n    }\r\n  : null;\r\n"],"names":["enableSchedulerDebugging","enableProfiling","push","heap","node","index","length","siftUp","peek","pop","first","last","siftDown","i","parentIndex","parent","compare","halfLength","leftIndex","left","rightIndex","right","a","b","diff","sortIndex","id","ImmediatePriority","UserBlockingPriority","NormalPriority","LowPriority","IdlePriority","markTaskErrored","task","ms","maxSigned31BitInt","IMMEDIATE_PRIORITY_TIMEOUT","USER_BLOCKING_PRIORITY_TIMEOUT","NORMAL_PRIORITY_TIMEOUT","LOW_PRIORITY_TIMEOUT","IDLE_PRIORITY_TIMEOUT","taskQueue","timerQueue","taskIdCounter","currentTask","currentPriorityLevel","isPerformingWork","isHostCallbackScheduled","isHostTimeoutScheduled","currentMockTime","scheduledCallback","scheduledTimeout","timeoutTime","yieldedValues","expectedNumberOfYields","didStop","isFlushing","needsPaint","shouldYieldForPaint","disableYieldValue","setDisableYieldValue","newValue","advanceTimers","currentTime","timer","callback","startTime","expirationTime","handleTimeout","requestHostCallback","flushWork","firstTimer","requestHostTimeout","hasTimeRemaining","initialTime","cancelHostTimeout","previousPriorityLevel","workLoop","error","getCurrentTime","isQueued","shouldYieldToHost","priorityLevel","didUserCallbackTimeout","continuationCallback","unstable_runWithPriority","eventHandler","unstable_next","unstable_wrapCallback","parentPriorityLevel","apply","arguments","unstable_scheduleCallback","options","delay","timeout","newTask","unstable_pauseExecution","isSchedulerPaused","unstable_continueExecution","unstable_getFirstCallbackNode","unstable_cancelCallback","unstable_getCurrentPriorityLevel","forceFrameRate","reset","Error","unstable_flushNumberOfYields","count","cb","hasMoreWork","unstable_flushUntilNextPaint","unstable_hasPendingWork","unstable_flushExpired","unstable_flushAllWithoutAsserting","unstable_clearYields","values","unstable_flushAll","unstable_yieldValue","value","console","log","name","unstable_advanceTime","requestPaint","unstable_Profiling"],"mappings":";;AAQO,IAAMA,wBAAwB,GAAG,KAAjC;AAEA,IAAMC,eAAe,GAAG,KAAxB;;ACKA,SAASC,IAAT,CAAcC,IAAd,EAA0BC,IAA1B,EAA4C;AACjD,MAAMC,KAAK,GAAGF,IAAI,CAACG,MAAnB;AACAH,EAAAA,IAAI,CAACD,IAAL,CAAUE,IAAV;AACAG,EAAAA,MAAM,CAACJ,IAAD,EAAOC,IAAP,EAAaC,KAAb,CAAN;AACD;AAED,AAAO,SAASG,IAAT,CAAcL,IAAd,EAAuC;AAC5C,SAAOA,IAAI,CAACG,MAAL,KAAgB,CAAhB,GAAoB,IAApB,GAA2BH,IAAI,CAAC,CAAD,CAAtC;AACD;AAED,AAAO,SAASM,GAAT,CAAaN,IAAb,EAAsC;AAC3C,MAAIA,IAAI,CAACG,MAAL,KAAgB,CAApB,EAAuB;AACrB,WAAO,IAAP;AACD;;AACD,MAAMI,KAAK,GAAGP,IAAI,CAAC,CAAD,CAAlB;AACA,MAAMQ,IAAI,GAAGR,IAAI,CAACM,GAAL,EAAb;;AACA,MAAIE,IAAI,KAAKD,KAAb,EAAoB;AAClBP,IAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUQ,IAAV;AACAC,IAAAA,QAAQ,CAACT,IAAD,EAAOQ,IAAP,EAAa,CAAb,CAAR;AACD;;AACD,SAAOD,KAAP;AACD;;AAED,SAASH,MAAT,CAAgBJ,IAAhB,EAAsBC,IAAtB,EAA4BS,CAA5B,EAA+B;AAC7B,MAAIR,KAAK,GAAGQ,CAAZ;;AACA,SAAOR,KAAK,GAAG,CAAf,EAAkB;AAChB,QAAMS,WAAW,GAAIT,KAAK,GAAG,CAAT,KAAgB,CAApC;AACA,QAAMU,MAAM,GAAGZ,IAAI,CAACW,WAAD,CAAnB;;AACA,QAAIE,OAAO,CAACD,MAAD,EAASX,IAAT,CAAP,GAAwB,CAA5B,EAA+B;AAC7B;AACAD,MAAAA,IAAI,CAACW,WAAD,CAAJ,GAAoBV,IAApB;AACAD,MAAAA,IAAI,CAACE,KAAD,CAAJ,GAAcU,MAAd;AACAV,MAAAA,KAAK,GAAGS,WAAR;AACD,KALD,MAKO;AACL;AACA;AACD;AACF;AACF;;AAED,SAASF,QAAT,CAAkBT,IAAlB,EAAwBC,IAAxB,EAA8BS,CAA9B,EAAiC;AAC/B,MAAIR,KAAK,GAAGQ,CAAZ;AACA,MAAMP,MAAM,GAAGH,IAAI,CAACG,MAApB;AACA,MAAMW,UAAU,GAAGX,MAAM,KAAK,CAA9B;;AACA,SAAOD,KAAK,GAAGY,UAAf,EAA2B;AACzB,QAAMC,SAAS,GAAG,CAACb,KAAK,GAAG,CAAT,IAAc,CAAd,GAAkB,CAApC;AACA,QAAMc,IAAI,GAAGhB,IAAI,CAACe,SAAD,CAAjB;AACA,QAAME,UAAU,GAAGF,SAAS,GAAG,CAA/B;AACA,QAAMG,KAAK,GAAGlB,IAAI,CAACiB,UAAD,CAAlB,CAJyB;;AAOzB,QAAIJ,OAAO,CAACG,IAAD,EAAOf,IAAP,CAAP,GAAsB,CAA1B,EAA6B;AAC3B,UAAIgB,UAAU,GAAGd,MAAb,IAAuBU,OAAO,CAACK,KAAD,EAAQF,IAAR,CAAP,GAAuB,CAAlD,EAAqD;AACnDhB,QAAAA,IAAI,CAACE,KAAD,CAAJ,GAAcgB,KAAd;AACAlB,QAAAA,IAAI,CAACiB,UAAD,CAAJ,GAAmBhB,IAAnB;AACAC,QAAAA,KAAK,GAAGe,UAAR;AACD,OAJD,MAIO;AACLjB,QAAAA,IAAI,CAACE,KAAD,CAAJ,GAAcc,IAAd;AACAhB,QAAAA,IAAI,CAACe,SAAD,CAAJ,GAAkBd,IAAlB;AACAC,QAAAA,KAAK,GAAGa,SAAR;AACD;AACF,KAVD,MAUO,IAAIE,UAAU,GAAGd,MAAb,IAAuBU,OAAO,CAACK,KAAD,EAAQjB,IAAR,CAAP,GAAuB,CAAlD,EAAqD;AAC1DD,MAAAA,IAAI,CAACE,KAAD,CAAJ,GAAcgB,KAAd;AACAlB,MAAAA,IAAI,CAACiB,UAAD,CAAJ,GAAmBhB,IAAnB;AACAC,MAAAA,KAAK,GAAGe,UAAR;AACD,KAJM,MAIA;AACL;AACA;AACD;AACF;AACF;;AAED,SAASJ,OAAT,CAAiBM,CAAjB,EAAoBC,CAApB,EAAuB;AACrB;AACA,MAAMC,IAAI,GAAGF,CAAC,CAACG,SAAF,GAAcF,CAAC,CAACE,SAA7B;AACA,SAAOD,IAAI,KAAK,CAAT,GAAaA,IAAb,GAAoBF,CAAC,CAACI,EAAF,GAAOH,CAAC,CAACG,EAApC;AACD;;AChFD;AACA,IACaC,iBAAiB,GAAG,CAA1B;AACP,IAAaC,oBAAoB,GAAG,CAA7B;AACP,IAAaC,cAAc,GAAG,CAAvB;AACP,IAAaC,WAAW,GAAG,CAApB;AACP,IAAaC,YAAY,GAAG,CAArB;;ACwGA,SAASC,eAAT,CACLC,IADK,EAMLC,EANK,EAOL;AACA,AAKD;;AC9HD;AA+BA;AACA;;AACA,IAAIC,iBAAiB,GAAG,UAAxB;;AAGA,IAAIC,0BAA0B,GAAG,CAAC,CAAlC;;AAEA,IAAIC,8BAA8B,GAAG,GAArC;AACA,IAAIC,uBAAuB,GAAG,IAA9B;AACA,IAAIC,oBAAoB,GAAG,KAA3B;;AAEA,IAAIC,qBAAqB,GAAGL,iBAA5B;;AAGA,IAAIM,SAAS,GAAG,EAAhB;AACA,IAAIC,UAAU,GAAG,EAAjB;;AAGA,IAAIC,aAAa,GAAG,CAApB;AAKA,IAAIC,WAAW,GAAG,IAAlB;AACA,IAAIC,oBAAoB,GAAGhB,cAA3B;;AAGA,IAAIiB,gBAAgB,GAAG,KAAvB;AAEA,IAAIC,uBAAuB,GAAG,KAA9B;AACA,IAAIC,sBAAsB,GAAG,KAA7B;AAEA,IAAIC,eAAuB,GAAG,CAA9B;AACA,IAAIC,iBAAqD,GAAG,IAA5D;AACA,IAAIC,gBAAyC,GAAG,IAAhD;AACA,IAAIC,WAAmB,GAAG,CAAC,CAA3B;AACA,IAAIC,aAAkC,GAAG,IAAzC;AACA,IAAIC,sBAA8B,GAAG,CAAC,CAAtC;AACA,IAAIC,OAAgB,GAAG,KAAvB;AACA,IAAIC,UAAmB,GAAG,KAA1B;AACA,IAAIC,UAAmB,GAAG,KAA1B;AACA,IAAIC,mBAA4B,GAAG,KAAnC;AAEA,IAAIC,iBAAiB,GAAG,KAAxB;;AAEA,SAASC,oBAAT,CAA8BC,QAA9B,EAAwC;AACtCF,EAAAA,iBAAiB,GAAGE,QAApB;AACD;;AAED,SAASC,aAAT,CAAuBC,WAAvB,EAAoC;AAClC;AACA,MAAIC,KAAK,GAAGxD,IAAI,CAACkC,UAAD,CAAhB;;AACA,SAAOsB,KAAK,KAAK,IAAjB,EAAuB;AACrB,QAAIA,KAAK,CAACC,QAAN,KAAmB,IAAvB,EAA6B;AAC3B;AACAxD,MAAAA,GAAG,CAACiC,UAAD,CAAH;AACD,KAHD,MAGO,IAAIsB,KAAK,CAACE,SAAN,IAAmBH,WAAvB,EAAoC;AACzC;AACAtD,MAAAA,GAAG,CAACiC,UAAD,CAAH;AACAsB,MAAAA,KAAK,CAACvC,SAAN,GAAkBuC,KAAK,CAACG,cAAxB;AACAjE,MAAAA,IAAI,CAACuC,SAAD,EAAYuB,KAAZ,CAAJ;AAKD,KATM,MASA;AACL;AACA;AACD;;AACDA,IAAAA,KAAK,GAAGxD,IAAI,CAACkC,UAAD,CAAZ;AACD;AACF;;AAED,SAAS0B,aAAT,CAAuBL,WAAvB,EAAoC;AAClCf,EAAAA,sBAAsB,GAAG,KAAzB;AACAc,EAAAA,aAAa,CAACC,WAAD,CAAb;;AAEA,MAAI,CAAChB,uBAAL,EAA8B;AAC5B,QAAIvC,IAAI,CAACiC,SAAD,CAAJ,KAAoB,IAAxB,EAA8B;AAC5BM,MAAAA,uBAAuB,GAAG,IAA1B;AACAsB,MAAAA,mBAAmB,CAACC,SAAD,CAAnB;AACD,KAHD,MAGO;AACL,UAAMC,UAAU,GAAG/D,IAAI,CAACkC,UAAD,CAAvB;;AACA,UAAI6B,UAAU,KAAK,IAAnB,EAAyB;AACvBC,QAAAA,kBAAkB,CAACJ,aAAD,EAAgBG,UAAU,CAACL,SAAX,GAAuBH,WAAvC,CAAlB;AACD;AACF;AACF;AACF;;AAED,SAASO,SAAT,CAAmBG,gBAAnB,EAAqCC,WAArC,EAAkD;AAChD;;AAKA3B,EAAAA,uBAAuB,GAAG,KAA1B;;AACA,MAAIC,sBAAJ,EAA4B;AAC1B;AACAA,IAAAA,sBAAsB,GAAG,KAAzB;AACA2B,IAAAA,iBAAiB;AAClB;;AAED7B,EAAAA,gBAAgB,GAAG,IAAnB;AACA,MAAM8B,qBAAqB,GAAG/B,oBAA9B;;AACA,MAAI;AACF,QAAI5C,eAAJ,EAAqB;AACnB,UAAI;AACF,eAAO4E,QAAQ,CAACJ,gBAAD,EAAmBC,WAAnB,CAAf;AACD,OAFD,CAEE,OAAOI,KAAP,EAAc;AACd,YAAIlC,WAAW,KAAK,IAApB,EAA0B;AACxB,cAAMmB,WAAW,GAAGgB,cAAc,EAAlC;AACA/C,UAAAA,eAAe,CAACY,WAAD,EAAcmB,WAAd,CAAf;AACAnB,UAAAA,WAAW,CAACoC,QAAZ,GAAuB,KAAvB;AACD;;AACD,cAAMF,KAAN;AACD;AACF,KAXD,MAWO;AACL;AACA,aAAOD,QAAQ,CAACJ,gBAAD,EAAmBC,WAAnB,CAAf;AACD;AACF,GAhBD,SAgBU;AACR9B,IAAAA,WAAW,GAAG,IAAd;AACAC,IAAAA,oBAAoB,GAAG+B,qBAAvB;AACA9B,IAAAA,gBAAgB,GAAG,KAAnB;AAKD;AACF;;AAED,SAAS+B,QAAT,CAAkBJ,gBAAlB,EAAoCC,WAApC,EAAiD;AAC/C,MAAIX,WAAW,GAAGW,WAAlB;AACAZ,EAAAA,aAAa,CAACC,WAAD,CAAb;AACAnB,EAAAA,WAAW,GAAGpC,IAAI,CAACiC,SAAD,CAAlB;;AACA,SACEG,WAAW,KAAK,IAAhB,IACA,EAAE5C,wBAAwB,CAA1B,CAFF,EAGE;AACA,QACE4C,WAAW,CAACuB,cAAZ,GAA6BJ,WAA7B,KACC,CAACU,gBAAD,IAAqBQ,iBAAiB,EADvC,CADF,EAGE;AACA;AACA;AACD;;AACD,QAAMhB,QAAQ,GAAGrB,WAAW,CAACqB,QAA7B;;AACA,QAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClCrB,MAAAA,WAAW,CAACqB,QAAZ,GAAuB,IAAvB;AACApB,MAAAA,oBAAoB,GAAGD,WAAW,CAACsC,aAAnC;AACA,UAAMC,sBAAsB,GAAGvC,WAAW,CAACuB,cAAZ,IAA8BJ,WAA7D;;AAIA,UAAMqB,oBAAoB,GAAGnB,QAAQ,CAACkB,sBAAD,CAArC;AACApB,MAAAA,WAAW,GAAGgB,cAAc,EAA5B;;AACA,UAAI,OAAOK,oBAAP,KAAgC,UAApC,EAAgD;AAC9C;AACA;AACAxC,QAAAA,WAAW,CAACqB,QAAZ,GAAuBmB,oBAAvB;;AAIAtB,QAAAA,aAAa,CAACC,WAAD,CAAb;;AAEA,YAAIL,mBAAJ,EAAyB;AACvBD,UAAAA,UAAU,GAAG,IAAb;AACA,iBAAO,IAAP;AACD,SAHD;AAQD,OAjBD,MAiBO;AACL;AAIA,YAAIb,WAAW,KAAKpC,IAAI,CAACiC,SAAD,CAAxB,EAAqC;AACnChC,UAAAA,GAAG,CAACgC,SAAD,CAAH;AACD;;AACDqB,QAAAA,aAAa,CAACC,WAAD,CAAb;AACD;AACF,KApCD,MAoCO;AACLtD,MAAAA,GAAG,CAACgC,SAAD,CAAH;AACD;;AACDG,IAAAA,WAAW,GAAGpC,IAAI,CAACiC,SAAD,CAAlB;AACD,GAxD8C;;;AA0D/C,MAAIG,WAAW,KAAK,IAApB,EAA0B;AACxB,WAAO,IAAP;AACD,GAFD,MAEO;AACL,QAAM2B,UAAU,GAAG/D,IAAI,CAACkC,UAAD,CAAvB;;AACA,QAAI6B,UAAU,KAAK,IAAnB,EAAyB;AACvBC,MAAAA,kBAAkB,CAACJ,aAAD,EAAgBG,UAAU,CAACL,SAAX,GAAuBH,WAAvC,CAAlB;AACD;;AACD,WAAO,KAAP;AACD;AACF;;AAED,SAASsB,wBAAT,CAAkCH,aAAlC,EAAiDI,YAAjD,EAA+D;AAC7D,UAAQJ,aAAR;AACE,SAAKvD,iBAAL;AACA,SAAKC,oBAAL;AACA,SAAKC,cAAL;AACA,SAAKC,WAAL;AACA,SAAKC,YAAL;AACE;;AACF;AACEmD,MAAAA,aAAa,GAAGrD,cAAhB;AARJ;;AAWA,MAAI+C,qBAAqB,GAAG/B,oBAA5B;AACAA,EAAAA,oBAAoB,GAAGqC,aAAvB;;AAEA,MAAI;AACF,WAAOI,YAAY,EAAnB;AACD,GAFD,SAEU;AACRzC,IAAAA,oBAAoB,GAAG+B,qBAAvB;AACD;AACF;;AAED,SAASW,aAAT,CAAuBD,YAAvB,EAAqC;AACnC,MAAIJ,aAAJ;;AACA,UAAQrC,oBAAR;AACE,SAAKlB,iBAAL;AACA,SAAKC,oBAAL;AACA,SAAKC,cAAL;AACE;AACAqD,MAAAA,aAAa,GAAGrD,cAAhB;AACA;;AACF;AACE;AACAqD,MAAAA,aAAa,GAAGrC,oBAAhB;AACA;AAVJ;;AAaA,MAAI+B,qBAAqB,GAAG/B,oBAA5B;AACAA,EAAAA,oBAAoB,GAAGqC,aAAvB;;AAEA,MAAI;AACF,WAAOI,YAAY,EAAnB;AACD,GAFD,SAEU;AACRzC,IAAAA,oBAAoB,GAAG+B,qBAAvB;AACD;AACF;;AAED,SAASY,qBAAT,CAA+BvB,QAA/B,EAAyC;AACvC,MAAIwB,mBAAmB,GAAG5C,oBAA1B;AACA,SAAO,YAAW;AAChB;AACA,QAAI+B,qBAAqB,GAAG/B,oBAA5B;AACAA,IAAAA,oBAAoB,GAAG4C,mBAAvB;;AAEA,QAAI;AACF,aAAOxB,QAAQ,CAACyB,KAAT,CAAe,IAAf,EAAqBC,SAArB,CAAP;AACD,KAFD,SAEU;AACR9C,MAAAA,oBAAoB,GAAG+B,qBAAvB;AACD;AACF,GAVD;AAWD;;AAED,SAASgB,yBAAT,CAAmCV,aAAnC,EAAkDjB,QAAlD,EAA4D4B,OAA5D,EAAqE;AACnE,MAAI9B,WAAW,GAAGgB,cAAc,EAAhC;AAEA,MAAIb,SAAJ;;AACA,MAAI,OAAO2B,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,KAAK,IAA/C,EAAqD;AACnD,QAAIC,KAAK,GAAGD,OAAO,CAACC,KAApB;;AACA,QAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,GAAG,CAAzC,EAA4C;AAC1C5B,MAAAA,SAAS,GAAGH,WAAW,GAAG+B,KAA1B;AACD,KAFD,MAEO;AACL5B,MAAAA,SAAS,GAAGH,WAAZ;AACD;AACF,GAPD,MAOO;AACLG,IAAAA,SAAS,GAAGH,WAAZ;AACD;;AAED,MAAIgC,OAAJ;;AACA,UAAQb,aAAR;AACE,SAAKvD,iBAAL;AACEoE,MAAAA,OAAO,GAAG3D,0BAAV;AACA;;AACF,SAAKR,oBAAL;AACEmE,MAAAA,OAAO,GAAG1D,8BAAV;AACA;;AACF,SAAKN,YAAL;AACEgE,MAAAA,OAAO,GAAGvD,qBAAV;AACA;;AACF,SAAKV,WAAL;AACEiE,MAAAA,OAAO,GAAGxD,oBAAV;AACA;;AACF,SAAKV,cAAL;AACA;AACEkE,MAAAA,OAAO,GAAGzD,uBAAV;AACA;AAhBJ;;AAmBA,MAAI6B,cAAc,GAAGD,SAAS,GAAG6B,OAAjC;AAEA,MAAIC,OAAO,GAAG;AACZtE,IAAAA,EAAE,EAAEiB,aAAa,EADL;AAEZsB,IAAAA,QAAQ,EAARA,QAFY;AAGZiB,IAAAA,aAAa,EAAbA,aAHY;AAIZhB,IAAAA,SAAS,EAATA,SAJY;AAKZC,IAAAA,cAAc,EAAdA,cALY;AAMZ1C,IAAAA,SAAS,EAAE,CAAC;AANA,GAAd;;AAYA,MAAIyC,SAAS,GAAGH,WAAhB,EAA6B;AAC3B;AACAiC,IAAAA,OAAO,CAACvE,SAAR,GAAoByC,SAApB;AACAhE,IAAAA,IAAI,CAACwC,UAAD,EAAasD,OAAb,CAAJ;;AACA,QAAIxF,IAAI,CAACiC,SAAD,CAAJ,KAAoB,IAApB,IAA4BuD,OAAO,KAAKxF,IAAI,CAACkC,UAAD,CAAhD,EAA8D;AAC5D;AACA,UAAIM,sBAAJ,EAA4B;AAC1B;AACA2B,QAAAA,iBAAiB;AAClB,OAHD,MAGO;AACL3B,QAAAA,sBAAsB,GAAG,IAAzB;AACD,OAP2D;;;AAS5DwB,MAAAA,kBAAkB,CAACJ,aAAD,EAAgBF,SAAS,GAAGH,WAA5B,CAAlB;AACD;AACF,GAfD,MAeO;AACLiC,IAAAA,OAAO,CAACvE,SAAR,GAAoB0C,cAApB;AACAjE,IAAAA,IAAI,CAACuC,SAAD,EAAYuD,OAAZ,CAAJ;AAMA;;;AACA,QAAI,CAACjD,uBAAD,IAA4B,CAACD,gBAAjC,EAAmD;AACjDC,MAAAA,uBAAuB,GAAG,IAA1B;AACAsB,MAAAA,mBAAmB,CAACC,SAAD,CAAnB;AACD;AACF;;AAED,SAAO0B,OAAP;AACD;;AAED,SAASC,uBAAT,GAAmC;AACjCC,AACD;;AAED,SAASC,0BAAT,GAAsC;AACpCD;AACA,MAAI,CAACnD,uBAAD,IAA4B,CAACD,gBAAjC,EAAmD;AACjDC,IAAAA,uBAAuB,GAAG,IAA1B;AACAsB,IAAAA,mBAAmB,CAACC,SAAD,CAAnB;AACD;AACF;;AAED,SAAS8B,6BAAT,GAAyC;AACvC,SAAO5F,IAAI,CAACiC,SAAD,CAAX;AACD;;AAED,SAAS4D,uBAAT,CAAiCpE,IAAjC,EAAuC;AACrC,AASA;AACA;;;AACAA,EAAAA,IAAI,CAACgC,QAAL,GAAgB,IAAhB;AACD;;AAED,SAASqC,gCAAT,GAA4C;AAC1C,SAAOzD,oBAAP;AACD;;AAED,SAASwB,mBAAT,CAA6BJ,QAA7B,EAAwD;AACtDf,EAAAA,iBAAiB,GAAGe,QAApB;AACD;;AAED,SAASO,kBAAT,CAA4BP,QAA5B,EAAsD/B,EAAtD,EAAkE;AAChEiB,EAAAA,gBAAgB,GAAGc,QAAnB;AACAb,EAAAA,WAAW,GAAGH,eAAe,GAAGf,EAAhC;AACD;;AAED,SAASyC,iBAAT,GAAmC;AACjCxB,EAAAA,gBAAgB,GAAG,IAAnB;AACAC,EAAAA,WAAW,GAAG,CAAC,CAAf;AACD;;AAED,SAAS6B,iBAAT,GAAsC;AACpC,MACG3B,sBAAsB,KAAK,CAA3B,IAAgCD,aAAa,KAAK,IAAnD,IACCC,sBAAsB,KAAK,CAAC,CAA5B,IACCD,aAAa,KAAK,IADnB,IAECA,aAAa,CAAC/C,MAAd,IAAwBgD,sBAH1B,IAICI,mBAAmB,IAAID,UAL1B,EAME;AACA;AACAF,IAAAA,OAAO,GAAG,IAAV;AACA,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD;;AAED,SAASwB,cAAT,GAAkC;AAChC,SAAO9B,eAAP;AACD;;AAED,SAASsD,cAAT,GAA0B;AAEzB;;AAED,SAASC,KAAT,GAAiB;AACf,MAAIhD,UAAJ,EAAgB;AACd,UAAM,IAAIiD,KAAJ,CAAU,2CAAV,CAAN;AACD;;AACDxD,EAAAA,eAAe,GAAG,CAAlB;AACAC,EAAAA,iBAAiB,GAAG,IAApB;AACAC,EAAAA,gBAAgB,GAAG,IAAnB;AACAC,EAAAA,WAAW,GAAG,CAAC,CAAf;AACAC,EAAAA,aAAa,GAAG,IAAhB;AACAC,EAAAA,sBAAsB,GAAG,CAAC,CAA1B;AACAC,EAAAA,OAAO,GAAG,KAAV;AACAC,EAAAA,UAAU,GAAG,KAAb;AACAC,EAAAA,UAAU,GAAG,KAAb;AACD;;;AAGD,SAASiD,4BAAT,CAAsCC,KAAtC,EAA2D;AACzD,MAAInD,UAAJ,EAAgB;AACd,UAAM,IAAIiD,KAAJ,CAAU,wBAAV,CAAN;AACD;;AACD,MAAIvD,iBAAiB,KAAK,IAA1B,EAAgC;AAC9B,QAAM0D,EAAE,GAAG1D,iBAAX;AACAI,IAAAA,sBAAsB,GAAGqD,KAAzB;AACAnD,IAAAA,UAAU,GAAG,IAAb;;AACA,QAAI;AACF,UAAIqD,WAAW,GAAG,IAAlB;;AACA,SAAG;AACDA,QAAAA,WAAW,GAAGD,EAAE,CAAC,IAAD,EAAO3D,eAAP,CAAhB;AACD,OAFD,QAES4D,WAAW,IAAI,CAACtD,OAFzB;;AAGA,UAAI,CAACsD,WAAL,EAAkB;AAChB3D,QAAAA,iBAAiB,GAAG,IAApB;AACD;AACF,KARD,SAQU;AACRI,MAAAA,sBAAsB,GAAG,CAAC,CAA1B;AACAC,MAAAA,OAAO,GAAG,KAAV;AACAC,MAAAA,UAAU,GAAG,KAAb;AACD;AACF;AACF;;AAED,SAASsD,4BAAT,GAA8C;AAC5C,MAAItD,UAAJ,EAAgB;AACd,UAAM,IAAIiD,KAAJ,CAAU,wBAAV,CAAN;AACD;;AACD,MAAIvD,iBAAiB,KAAK,IAA1B,EAAgC;AAC9B,QAAM0D,EAAE,GAAG1D,iBAAX;AACAQ,IAAAA,mBAAmB,GAAG,IAAtB;AACAD,IAAAA,UAAU,GAAG,KAAb;AACAD,IAAAA,UAAU,GAAG,IAAb;;AACA,QAAI;AACF,UAAIqD,WAAW,GAAG,IAAlB;;AACA,SAAG;AACDA,QAAAA,WAAW,GAAGD,EAAE,CAAC,IAAD,EAAO3D,eAAP,CAAhB;AACD,OAFD,QAES4D,WAAW,IAAI,CAACtD,OAFzB;;AAGA,UAAI,CAACsD,WAAL,EAAkB;AAChB3D,QAAAA,iBAAiB,GAAG,IAApB;AACD;AACF,KARD,SAQU;AACRQ,MAAAA,mBAAmB,GAAG,KAAtB;AACAH,MAAAA,OAAO,GAAG,KAAV;AACAC,MAAAA,UAAU,GAAG,KAAb;AACD;AACF;;AACD,SAAO,KAAP;AACD;;AAED,SAASuD,uBAAT,GAA4C;AAC1C,SAAO7D,iBAAiB,KAAK,IAA7B;AACD;;AAED,SAAS8D,qBAAT,GAAiC;AAC/B,MAAIxD,UAAJ,EAAgB;AACd,UAAM,IAAIiD,KAAJ,CAAU,wBAAV,CAAN;AACD;;AACD,MAAIvD,iBAAiB,KAAK,IAA1B,EAAgC;AAC9BM,IAAAA,UAAU,GAAG,IAAb;;AACA,QAAI;AACF,UAAMqD,WAAW,GAAG3D,iBAAiB,CAAC,KAAD,EAAQD,eAAR,CAArC;;AACA,UAAI,CAAC4D,WAAL,EAAkB;AAChB3D,QAAAA,iBAAiB,GAAG,IAApB;AACD;AACF,KALD,SAKU;AACRM,MAAAA,UAAU,GAAG,KAAb;AACD;AACF;AACF;;AAED,SAASyD,iCAAT,GAAsD;AACpD;AACA,MAAIzD,UAAJ,EAAgB;AACd,UAAM,IAAIiD,KAAJ,CAAU,wBAAV,CAAN;AACD;;AACD,MAAIvD,iBAAiB,KAAK,IAA1B,EAAgC;AAC9B,QAAM0D,EAAE,GAAG1D,iBAAX;AACAM,IAAAA,UAAU,GAAG,IAAb;;AACA,QAAI;AACF,UAAIqD,WAAW,GAAG,IAAlB;;AACA,SAAG;AACDA,QAAAA,WAAW,GAAGD,EAAE,CAAC,IAAD,EAAO3D,eAAP,CAAhB;AACD,OAFD,QAES4D,WAFT;;AAGA,UAAI,CAACA,WAAL,EAAkB;AAChB3D,QAAAA,iBAAiB,GAAG,IAApB;AACD;;AACD,aAAO,IAAP;AACD,KATD,SASU;AACRM,MAAAA,UAAU,GAAG,KAAb;AACD;AACF,GAfD,MAeO;AACL,WAAO,KAAP;AACD;AACF;;AAED,SAAS0D,oBAAT,GAA8C;AAC5C,MAAI7D,aAAa,KAAK,IAAtB,EAA4B;AAC1B,WAAO,EAAP;AACD;;AACD,MAAM8D,MAAM,GAAG9D,aAAf;AACAA,EAAAA,aAAa,GAAG,IAAhB;AACA,SAAO8D,MAAP;AACD;;AAED,SAASC,iBAAT,GAAmC;AACjC,MAAI/D,aAAa,KAAK,IAAtB,EAA4B;AAC1B,UAAM,IAAIoD,KAAJ,CACJ,kEACE,2BAFE,CAAN;AAID;;AACDQ,EAAAA,iCAAiC;;AACjC,MAAI5D,aAAa,KAAK,IAAtB,EAA4B;AAC1B,UAAM,IAAIoD,KAAJ,CACJ,4DACE,gEADF,GAEE,0CAHE,CAAN;AAKD;AACF;;AAED,SAASY,mBAAT,CAA6BC,KAA7B,EAAiD;AAC/C;AACA,MAAIC,OAAO,CAACC,GAAR,CAAYC,IAAZ,KAAqB,aAArB,IAAsC9D,iBAA1C,EAA6D;AAC3D;AACA;AACA;AACD;;AACD,MAAIN,aAAa,KAAK,IAAtB,EAA4B;AAC1BA,IAAAA,aAAa,GAAG,CAACiE,KAAD,CAAhB;AACD,GAFD,MAEO;AACLjE,IAAAA,aAAa,CAACnD,IAAd,CAAmBoH,KAAnB;AACD;AACF;;AAED,SAASI,oBAAT,CAA8BxF,EAA9B,EAA0C;AACxC;AACA,MAAIqF,OAAO,CAACC,GAAR,CAAYC,IAAZ,KAAqB,aAArB,IAAsC9D,iBAA1C,EAA6D;AAC3D;AACA;AACA;AACD;;AACDV,EAAAA,eAAe,IAAIf,EAAnB;;AACA,MAAIiB,gBAAgB,KAAK,IAArB,IAA6BC,WAAW,IAAIH,eAAhD,EAAiE;AAC/DE,IAAAA,gBAAgB,CAACF,eAAD,CAAhB;AACAG,IAAAA,WAAW,GAAG,CAAC,CAAf;AACAD,IAAAA,gBAAgB,GAAG,IAAnB;AACD;AACF;;AAED,SAASwE,YAAT,GAAwB;AACtBlE,EAAAA,UAAU,GAAG,IAAb;AACD;IAkCYmE,kBAAkB,GAAG3H,CAK9B,IALG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}